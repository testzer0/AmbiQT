[
    {
        "query2": "select avg_age, min_age, max_age from singer_age where country = 'France'", 
        "schema_without_content": "singer : name , song_name , country , is_male , singer_id , age , song_release_year  | concert : concert_id , concert_name , year , stadium_id , theme  | singer_age : min_age , avg_age , max_age , sum_age  | stadium : name , location , stadium_id , highest , capacity , lowest , average  | singer_in_concert : concert_id , singer_id ", 
        "query1": "select avg(age), min(age), max(age) from singer where country = 'France'", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "age", 
            ")", 
            ",", 
            "min", 
            "(", 
            "age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "age", 
            ")", 
            "from", 
            "singer", 
            "where", 
            "country", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            ",", 
            "minimum", 
            ",", 
            "and", 
            "maximum", 
            "age", 
            "of", 
            "all", 
            "singers", 
            "from", 
            "France", 
            "?"
        ], 
        "all_raw_cols": [
            "age"
        ], 
        "question": "What is the average, minimum, and maximum age of all singers from France?", 
        "all_cols": [
            "sum_age", 
            "avg_age", 
            "min_age", 
            "max_age"
        ], 
        "schema_with_content": "singer : name (\"Timbaland\", \"Timbaland\", \"Justin Brown\"), song_name (\"Hey Oh\", \"Dangerous\", \"Hey Oh\"), country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), singer_id (1, 2, 5), age (41, 52, 52), song_release_year (\"2014\", \"2016\", \"2013\") | concert : concert_id (3, 3, 4), concert_name (\"Week 1\", \"Home Visits\", \"Home Visits\"), year (\"2014\", \"2015\"), stadium_id (\"1\", \"1\", \"1\"), theme (\"Bleeding Love\", \"Free choice 2\", \"Free choice 2\") | singer_age : min_age (25, 52, 52), avg_age (25, 32, 29), max_age (25, 32, 41), sum_age (41, 43, 25) | stadium : name (\"Bayview Stadium\", \"Recreation Park\", \"Stark's Park\"), location (\"Ayr United\", \"Ayr United\", \"Peterhead\"), stadium_id (5, 9, 9), highest (1763, 1980, 4812), capacity (4000, 3100, 3100), lowest (1294, 1294, 1294), average (1477, 1477, 1477) | singer_in_concert : concert_id (6, 1, 1), singer_id (\"4\", \"3\", \"2\")", 
        "new_table_name": "singer_age", 
        "db_id": "concert_singer", 
        "tables_with_pkeys": [
            [
                "singer", 
                "singer_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"France\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(age), min(age), max(age) from singer where country = 'France'", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "age", 
            ")", 
            ",", 
            "min", 
            "(", 
            "age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "age", 
            ")", 
            "FROM", 
            "singer", 
            "WHERE", 
            "country", 
            "=", 
            "'France", 
            "'"
        ]
    }, 
    {
        "query2": "select avg_age, min_age, max_age from singer_age where country = 'France'", 
        "schema_without_content": "stadium : lowest , average , name , highest , stadium_id , location , capacity  | singer : age , country , song_release_year , is_male , name , song_name , singer_id  | singer_age : avg_age , sum_age , max_age , min_age  | singer_in_concert : singer_id , concert_id  | concert : year , concert_id , stadium_id , theme , concert_name ", 
        "query1": "select avg(age), min(age), max(age) from singer where country = 'France'", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "age", 
            ")", 
            ",", 
            "min", 
            "(", 
            "age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "age", 
            ")", 
            "from", 
            "singer", 
            "where", 
            "country", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            ",", 
            "minimum", 
            ",", 
            "and", 
            "maximum", 
            "age", 
            "for", 
            "all", 
            "French", 
            "singers", 
            "?"
        ], 
        "all_raw_cols": [
            "age"
        ], 
        "question": "What is the average, minimum, and maximum age for all French singers?", 
        "all_cols": [
            "sum_age", 
            "avg_age", 
            "min_age", 
            "max_age"
        ], 
        "schema_with_content": "stadium : lowest (400, 533, 1294), average (1477, 864, 2106), name (\"Gayfield Park\", \"Somerset Park\", \"Balmoor\"), highest (921, 1763, 921), stadium_id (1, 5, 7), location (\"Ayr United\", \"Raith Rovers\", \"Queen's Park\"), capacity (4000, 52500, 2000) | singer : age (43, 43, 41), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2003\", \"2008\", \"2013\"), is_male (\"F\", \"T\"), name (\"Joe Sharp\", \"Justin Brown\", \"John Nizinik\"), song_name (\"Love\", \"Gentleman\", \"Dangerous\"), singer_id (5, 4, 6) | singer_age : avg_age (29, 52, 41), sum_age (41, 43, 41), max_age (52, 41, 41), min_age (29, 29, 52) | singer_in_concert : singer_id (\"4\", \"5\", \"4\"), concert_id (2, 5, 6) | concert : year (\"2014\", \"2015\"), concert_id (1, 1, 1), stadium_id (\"2\", \"7\", \"9\"), theme (\"Free choice 2\", \"Party All Night\", \"Happy Tonight\"), concert_name (\"Auditions\", \"Auditions\", \"Auditions\")", 
        "new_table_name": "singer_age", 
        "db_id": "concert_singer", 
        "tables_with_pkeys": [
            [
                "singer", 
                "singer_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"France\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(age), min(age), max(age) from singer where country = 'France'", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "age", 
            ")", 
            ",", 
            "min", 
            "(", 
            "age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "age", 
            ")", 
            "FROM", 
            "singer", 
            "WHERE", 
            "country", 
            "=", 
            "'France", 
            "'"
        ]
    }, 
    {
        "query2": "select avg_capacity, max_capacity from stadium_capacity", 
        "schema_without_content": "concert : concert_name , stadium_id , concert_id , theme , year  | stadium_capacity : min_capacity , sum_capacity , avg_capacity , max_capacity  | singer : country , name , singer_id , age , song_release_year , song_name , is_male  | stadium : capacity , average , name , stadium_id , highest , lowest , location  | singer_in_concert : singer_id , concert_id ", 
        "query1": "select avg(capacity), max(capacity) from stadium", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "capacity", 
            ")", 
            ",", 
            "max", 
            "(", 
            "capacity", 
            ")", 
            "from", 
            "stadium"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "and", 
            "the", 
            "maximum", 
            "capacity", 
            "of", 
            "all", 
            "stadiums", 
            "?"
        ], 
        "all_raw_cols": [
            "capacity"
        ], 
        "question": "What is the average and the maximum capacity of all stadiums?", 
        "all_cols": [
            "sum_capacity", 
            "avg_capacity", 
            "min_capacity", 
            "max_capacity"
        ], 
        "schema_with_content": "concert : concert_name (\"Week 2\", \"Home Visits\", \"Super bootcamp\"), stadium_id (\"7\", \"1\", \"7\"), concert_id (6, 6, 1), theme (\"Wide Awake\", \"Happy Tonight\", \"Bleeding Love\"), year (\"2014\", \"2015\") | stadium_capacity : min_capacity (11998, 3100, 3960), sum_capacity (3808, 4000, 4125), avg_capacity (3808, 3960, 11998), max_capacity (4125, 52500, 3960) | singer : country (\"Netherlands\", \"United States\", \"France\"), name (\"Justin Brown\", \"John Nizinik\", \"Justin Brown\"), singer_id (1, 2, 3), age (52, 43, 25), song_release_year (\"2014\", \"2016\", \"2014\"), song_name (\"Hey Oh\", \"Sun\", \"Dangerous\"), is_male (\"F\", \"T\") | stadium : capacity (3960, 4125, 52500), average (615, 864, 637), name (\"Gayfield Park\", \"Recreation Park\", \"Balmoor\"), stadium_id (3, 5, 2), highest (1980, 2363, 2363), lowest (466, 331, 1294), location (\"Arbroath\", \"Brechin City\", \"Ayr United\") | singer_in_concert : singer_id (\"3\", \"2\", \"5\"), concert_id (3, 4, 2)", 
        "new_table_name": "stadium_capacity", 
        "db_id": "concert_singer", 
        "tables_with_pkeys": [
            [
                "stadium", 
                "stadium_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(capacity), max(capacity) from stadium", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "capacity", 
            ")", 
            ",", 
            "max", 
            "(", 
            "capacity", 
            ")", 
            "FROM", 
            "stadium"
        ]
    }, 
    {
        "query2": "select avg_capacity, max_capacity from stadium_capacity", 
        "schema_without_content": "concert : year , concert_name , concert_id , stadium_id , theme  | stadium_capacity : max_capacity , sum_capacity , avg_capacity , min_capacity  | singer : country , singer_id , song_release_year , name , age , song_name , is_male  | singer_in_concert : concert_id , singer_id  | stadium : highest , stadium_id , name , average , location , capacity , lowest ", 
        "query1": "select avg(capacity), max(capacity) from stadium", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "capacity", 
            ")", 
            ",", 
            "max", 
            "(", 
            "capacity", 
            ")", 
            "from", 
            "stadium"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "capacities", 
            "for", 
            "all", 
            "stations", 
            "?"
        ], 
        "all_raw_cols": [
            "capacity"
        ], 
        "question": "What is the average and maximum capacities for all stations?", 
        "all_cols": [
            "sum_capacity", 
            "avg_capacity", 
            "min_capacity", 
            "max_capacity"
        ], 
        "schema_with_content": "concert : year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Home Visits\", \"Home Visits\"), concert_id (3, 6, 1), stadium_id (\"7\", \"9\", \"10\"), theme (\"Free choice\", \"Free choice\", \"Free choice 2\") | stadium_capacity : max_capacity (4125, 3960, 3808), sum_capacity (3960, 52500, 10104), avg_capacity (11998, 4000, 4125), min_capacity (3960, 4000, 3960) | singer : country (\"Netherlands\", \"United States\", \"France\"), singer_id (4, 5, 2), song_release_year (\"2003\", \"2016\", \"2013\"), name (\"Joe Sharp\", \"Joe Sharp\", \"John Nizinik\"), age (52, 25, 25), song_name (\"Sun\", \"You\", \"Hey Oh\"), is_male (\"F\", \"T\") | singer_in_concert : concert_id (4, 1, 2), singer_id (\"2\", \"4\", \"6\") | stadium : highest (1125, 1057, 1057), stadium_id (4, 1, 1), name (\"Forthbank Stadium\", \"Bayview Stadium\", \"Recreation Park\"), average (637, 552, 615), location (\"Alloa Athletic\", \"Arbroath\", \"Alloa Athletic\"), capacity (3960, 2000, 3960), lowest (1057, 1057, 466)", 
        "new_table_name": "stadium_capacity", 
        "db_id": "concert_singer", 
        "tables_with_pkeys": [
            [
                "stadium", 
                "stadium_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(capacity), max(capacity) from stadium", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "capacity", 
            ")", 
            ",", 
            "max", 
            "(", 
            "capacity", 
            ")", 
            "FROM", 
            "stadium"
        ]
    }, 
    {
        "query2": "select max_weight, pettype from pets_weight", 
        "schema_without_content": "pets : pet_age , weight , petid , pettype  | pets_weight : avg_weight , min_weight , pettype , sum_weight , max_weight  | has_pet : stuid , petid  | student : major , fname , age , advisor , stuid , lname , city_code , sex ", 
        "query1": "select max(weight), pettype from pets group by pettype", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "maximum", 
            "weight", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            ".", 
            "List", 
            "the", 
            "maximum", 
            "weight", 
            "and", 
            "pet", 
            "type", 
            "."
        ], 
        "all_raw_cols": [
            "pettype", 
            "weight"
        ], 
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", 
        "all_cols": [
            "pettype", 
            "sum_weight", 
            "avg_weight", 
            "min_weight", 
            "max_weight"
        ], 
        "schema_with_content": "pets : pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\") | pets_weight : avg_weight (12.0, 13.4, 9.3), min_weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), sum_weight (12.0, 13.4, 9.3), max_weight (12.0, 13.4, 9.3) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | student : major (100, 100, 600), fname (\"Ian\", \"Mark\", \"Sarah\"), age (26, 22, 21), advisor (2311, 8722, 8722), stuid (1011, 1024, 1018), lname (\"Gompers\", \"Apap\", \"Kumar\"), city_code (\"PHL\", \"BAL\", \"PHL\"), sex (\"F\", \"M\")", 
        "new_table_name": "pets_weight", 
        "db_id": "pets_1", 
        "tables_with_pkeys": [
            [
                "pets", 
                "petid"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(weight), pettype from pets group by pettype", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "petType", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "petType"
        ]
    }, 
    {
        "query2": "select max_weight, pettype from pets_weight", 
        "schema_without_content": "has_pet : petid , stuid  | pets_weight : avg_weight , min_weight , max_weight , pettype , sum_weight  | pets : pet_age , petid , pettype , weight  | student : sex , city_code , lname , major , fname , age , advisor , stuid ", 
        "query1": "select max(weight), pettype from pets group by pettype", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "maximum", 
            "weight", 
            "and", 
            "type", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "."
        ], 
        "all_raw_cols": [
            "pettype", 
            "weight"
        ], 
        "question": "List the maximum weight and type for each type of pet.", 
        "all_cols": [
            "pettype", 
            "sum_weight", 
            "avg_weight", 
            "min_weight", 
            "max_weight"
        ], 
        "schema_with_content": "has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets_weight : avg_weight (12.0, 13.4, 9.3), min_weight (12.0, 13.4, 9.3), max_weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), sum_weight (12.0, 13.4, 9.3) | pets : pet_age (3, 2, 1), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3) | student : sex (\"F\", \"M\"), city_code (\"PEK\", \"PHL\", \"PEK\"), lname (\"Leighton\", \"Gompers\", \"Pang\"), major (540, 100, 540), fname (\"Charles\", \"Paul\", \"Charles\"), age (16, 18, 19), advisor (8918, 7723, 8723), stuid (1024, 1032, 1003)", 
        "new_table_name": "pets_weight", 
        "db_id": "pets_1", 
        "tables_with_pkeys": [
            [
                "pets", 
                "petid"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(weight), pettype from pets group by pettype", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "petType", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "petType"
        ]
    }, 
    {
        "query2": "select avg_pet_age, max_pet_age, pettype from pets_pet_age", 
        "schema_without_content": "pets : weight , pet_age , pettype , petid  | student : age , major , sex , fname , lname , stuid , advisor , city_code  | has_pet : petid , stuid  | pets_pet_age : pettype , sum_pet_age , min_pet_age , avg_pet_age , max_pet_age ", 
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "age", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "."
        ], 
        "all_raw_cols": [
            "pettype", 
            "pet_age"
        ], 
        "question": "Find the average and maximum age for each type of pet.", 
        "all_cols": [
            "pettype", 
            "sum_pet_age", 
            "avg_pet_age", 
            "min_pet_age", 
            "max_pet_age"
        ], 
        "schema_with_content": "pets : weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003) | student : age (27, 18, 18), major (100, 600, 50), sex (\"F\", \"M\"), fname (\"Susan\", \"Paul\", \"Mark\"), lname (\"Apap\", \"Schmidt\", \"Schultz\"), stuid (1027, 1031, 1024), advisor (8918, 5718, 7792), city_code (\"DET\", \"ROC\", \"BAL\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets_pet_age : pettype (\"cat\", \"dog\"), sum_pet_age (3, 2, 1), min_pet_age (3, 2, 1), avg_pet_age (3, 2, 1), max_pet_age (3, 2, 1)", 
        "new_table_name": "pets_pet_age", 
        "db_id": "pets_1", 
        "tables_with_pkeys": [
            [
                "pets", 
                "petid"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ]
    }, 
    {
        "query2": "select avg_pet_age, max_pet_age, pettype from pets_pet_age", 
        "schema_without_content": "pets : pettype , petid , pet_age , weight  | student : advisor , city_code , major , age , lname , stuid , sex , fname  | pets_pet_age : avg_pet_age , sum_pet_age , max_pet_age , min_pet_age , pettype  | has_pet : petid , stuid ", 
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "age", 
            "for", 
            "each", 
            "pet", 
            "type", 
            "?"
        ], 
        "all_raw_cols": [
            "pettype", 
            "pet_age"
        ], 
        "question": "What is the average and maximum age for each pet type?", 
        "all_cols": [
            "pettype", 
            "sum_pet_age", 
            "avg_pet_age", 
            "min_pet_age", 
            "max_pet_age"
        ], 
        "schema_with_content": "pets : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3) | student : advisor (2192, 7271, 7712), city_code (\"BOS\", \"DAL\", \"BOS\"), major (600, 100, 50), age (17, 27, 27), lname (\"Shieber\", \"Norris\", \"Smith\"), stuid (1030, 1015, 1030), sex (\"F\", \"M\"), fname (\"Ian\", \"Bruce\", \"Bruce\") | pets_pet_age : avg_pet_age (3, 2, 1), sum_pet_age (3, 2, 1), max_pet_age (3, 2, 1), min_pet_age (3, 2, 1), pettype (\"cat\", \"dog\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002)", 
        "new_table_name": "pets_pet_age", 
        "db_id": "pets_1", 
        "tables_with_pkeys": [
            [
                "pets", 
                "petid"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ]
    }, 
    {
        "query2": "select avg_weight, pettype from pets_weight", 
        "schema_without_content": "has_pet : stuid , petid  | pets_weight : min_weight , sum_weight , max_weight , avg_weight , pettype  | pets : pettype , petid , weight , pet_age  | student : lname , major , fname , stuid , age , advisor , sex , city_code ", 
        "query1": "select avg(weight), pettype from pets group by pettype", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "weight", 
            "for", 
            "each", 
            "pet", 
            "type", 
            "."
        ], 
        "all_raw_cols": [
            "pettype", 
            "weight"
        ], 
        "question": "Find the average weight for each pet type.", 
        "all_cols": [
            "pettype", 
            "sum_weight", 
            "avg_weight", 
            "min_weight", 
            "max_weight"
        ], 
        "schema_with_content": "has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets_weight : min_weight (12.0, 13.4, 9.3), sum_weight (12.0, 13.4, 9.3), max_weight (12.0, 13.4, 9.3), avg_weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\") | pets : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1) | student : lname (\"Brody\", \"Cheng\", \"Adams\"), major (520, 100, 520), fname (\"Linda\", \"Charles\", \"Derek\"), stuid (1033, 1006, 1001), age (18, 20, 21), advisor (8741, 8918, 8772), sex (\"F\", \"M\"), city_code (\"PEK\", \"WAS\", \"ROC\")", 
        "new_table_name": "pets_weight", 
        "db_id": "pets_1", 
        "tables_with_pkeys": [
            [
                "pets", 
                "petid"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(weight), pettype from pets group by pettype", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ]
    }, 
    {
        "query2": "select avg_weight, pettype from pets_weight", 
        "schema_without_content": "pets : petid , weight , pettype , pet_age  | pets_weight : sum_weight , max_weight , avg_weight , min_weight , pettype  | has_pet : petid , stuid  | student : stuid , sex , age , advisor , fname , lname , city_code , major ", 
        "query1": "select avg(weight), pettype from pets group by pettype", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "?"
        ], 
        "all_raw_cols": [
            "pettype", 
            "weight"
        ], 
        "question": "What is the average weight for each type of pet?", 
        "all_cols": [
            "pettype", 
            "sum_weight", 
            "avg_weight", 
            "min_weight", 
            "max_weight"
        ], 
        "schema_with_content": "pets : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_weight : sum_weight (12.0, 13.4, 9.3), max_weight (12.0, 13.4, 9.3), avg_weight (12.0, 13.4, 9.3), min_weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | student : stuid (1033, 1011, 1001), sex (\"F\", \"M\"), age (18, 17, 26), advisor (8721, 9172, 8721), fname (\"Stacy\", \"Jandy\", \"Eric\"), lname (\"Tai\", \"Wilson\", \"Tai\"), city_code (\"DET\", \"WAS\", \"YYZ\"), major (540, 50, 520)", 
        "new_table_name": "pets_weight", 
        "db_id": "pets_1", 
        "tables_with_pkeys": [
            [
                "pets", 
                "petid"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(weight), pettype from pets group by pettype", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ]
    }, 
    {
        "query2": "select avg_mpg from cars_data_mpg where cylinders = 4", 
        "schema_without_content": "cars_data_mpg : avg_mpg , sum_mpg , min_mpg , max_mpg  | countries : countryid , continent , countryname  | car_makers : fullname , country , maker , id  | continents : contid , continent  | car_names : model , makeid , make  | cars_data : edispl , weight , cylinders , horsepower , mpg , accelerate , id , year  | model_list : maker , modelid , model ", 
        "query1": "select avg(mpg) from cars_data where cylinders = 4", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "mpg", 
            ")", 
            "from", 
            "cars_data", 
            "where", 
            "cylinders", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "miles", 
            "per", 
            "gallon", 
            "(", 
            "mpg", 
            ")", 
            "of", 
            "the", 
            "cars", 
            "with", 
            "4", 
            "cylinders", 
            "?"
        ], 
        "all_raw_cols": [
            "mpg"
        ], 
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", 
        "all_cols": [
            "sum_mpg", 
            "avg_mpg", 
            "min_mpg", 
            "max_mpg"
        ], 
        "schema_with_content": "cars_data_mpg : avg_mpg (\"14\", \"15\", \"36.1\"), sum_mpg (\"22.5\", \"18.5\", \"null\"), min_mpg (\"32.7\", \"26.5\", \"32.3\"), max_mpg (\"19.4\", \"27.9\", \"null\") | countries : countryid (9, 12, 5), continent (1, 5, 2), countryname (\"italy\", \"australia\", \"australia\") | car_makers : fullname (\"Opel\", \"BMW\", \"Subaru\"), country (\"3\", \"6\", \"2\"), maker (\"saab\", \"mazda\", \"kia\"), id (9, 11, 14) | continents : contid (4, 1, 4), continent (\"africa\", \"asia\", \"asia\") | car_names : model (\"mercedes\", \" volkswagen\", \"volvo\"), makeid (81, 228, 360), make (\"dodge diplomat\", \"toyota corolla 1200\", \"chevrolet monte carlo landau\") | cars_data : edispl (100.0, 113.0, 97.0), weight (3777, 4615, 1649), cylinders (6, 4, 3), horsepower (\"66\", \"75\", \"70\"), mpg (\"19.1\", \"20\", \"17.5\"), accelerate (16.5, 14.1, 14.0), id (340, 399, 174), year (1977, 1974, 1980) | model_list : maker (10, 1, 12), modelid (32, 18, 19), model (\"toyota\", \"renault\", \"citroen\")", 
        "new_table_name": "cars_data_mpg", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            18, 
                            false
                        ], 
                        null
                    ], 
                    4.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(mpg) from cars_data where cylinders = 4", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "mpg", 
            ")", 
            "FROM", 
            "CARS_DATA", 
            "WHERE", 
            "Cylinders", 
            "=", 
            "4", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_mpg from cars_data_mpg where cylinders = 4", 
        "schema_without_content": "countries : countryname , continent , countryid  | model_list : modelid , maker , model  | cars_data : id , year , horsepower , cylinders , edispl , weight , mpg , accelerate  | cars_data_mpg : sum_mpg , min_mpg , max_mpg , avg_mpg  | car_makers : country , maker , fullname , id  | car_names : model , make , makeid  | continents : continent , contid ", 
        "query1": "select avg(mpg) from cars_data where cylinders = 4", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "mpg", 
            ")", 
            "from", 
            "cars_data", 
            "where", 
            "cylinders", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "miles", 
            "per", 
            "gallon", 
            "of", 
            "all", 
            "the", 
            "cards", 
            "with", 
            "4", 
            "cylinders", 
            "?"
        ], 
        "all_raw_cols": [
            "mpg"
        ], 
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?", 
        "all_cols": [
            "sum_mpg", 
            "avg_mpg", 
            "min_mpg", 
            "max_mpg"
        ], 
        "schema_with_content": "countries : countryname (\"nigeria\", \"new zealand\", \"russia\"), continent (5, 1, 2), countryid (2, 12, 5) | model_list : modelid (36, 33, 36), maker (11, 21, 8), model (\"peugeot\", \"mercedes-benz\", \"chevrolet\") | cars_data : id (247, 130, 168), year (1976, 1978, 1982), horsepower (\"138\", \"220\", \"83\"), cylinders (6, 8, 4), edispl (121.0, 97.0, 133.0), weight (2000, 3039, 1795), mpg (\"23.2\", \"26.8\", \"18.5\"), accelerate (16.6, 21.9, 21.0) | cars_data_mpg : sum_mpg (\"30.7\", \"17\", \"11\"), min_mpg (\"33\", \"23\", \"25.5\"), max_mpg (\"32\", \"31.6\", \"43.1\"), avg_mpg (\"20.6\", \"28.4\", \"31.8\") | car_makers : country (\"5\", \"8\", \"7\"), maker (\"bmw\", \"gm\", \"ford\"), fullname (\"Mazda\", \"Peugeaut\", \"Volkswagen\"), id (17, 11, 12) | car_names : model (\"pontiac\", \"chrysler\", \"honda\"), make (\"ford maverick\", \"buick skylark limited\", \"ford ltd\"), makeid (161, 62, 160) | continents : continent (\"europe\", \"australia\", \"asia\"), contid (1, 5, 2)", 
        "new_table_name": "cars_data_mpg", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            18, 
                            false
                        ], 
                        null
                    ], 
                    4.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(mpg) from cars_data where cylinders = 4", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "mpg", 
            ")", 
            "FROM", 
            "CARS_DATA", 
            "WHERE", 
            "Cylinders", 
            "=", 
            "4", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_weight, year from cars_data_weight", 
        "schema_without_content": "cars_data : horsepower , mpg , weight , id , year , accelerate , edispl , cylinders  | car_makers : id , maker , country , fullname  | model_list : model , modelid , maker  | countries : countryid , countryname , continent  | car_names : make , model , makeid  | continents : contid , continent  | cars_data_weight : sum_weight , avg_weight , min_weight , max_weight , year ", 
        "query1": "select avg(weight), year from cars_data group by year", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "year", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "year"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "of", 
            "cars", 
            "each", 
            "year", 
            "?"
        ], 
        "all_raw_cols": [
            "year", 
            "weight"
        ], 
        "question": "What is the average weight of cars each year?", 
        "all_cols": [
            "year", 
            "sum_weight", 
            "avg_weight", 
            "min_weight", 
            "max_weight"
        ], 
        "schema_with_content": "cars_data : horsepower (\"92\", \"95\", \"79\"), mpg (\"46.6\", \"9\", \"21\"), weight (4209, 2678, 2545), id (118, 242, 364), year (1979, 1975, 1972), accelerate (11.5, 13.6, 11.1), edispl (351.0, 156.0, 307.0), cylinders (4, 6, 3) | car_makers : id (23, 9, 11), maker (\"renault\", \"fiat\", \"gm\"), country (\"3\", \"3\", \"3\"), fullname (\"Nissan Motors\", \"Ford Motor Company\", \"Honda\") | model_list : model (\"renault\", \"mercedes\", \"volvo\"), modelid (24, 14, 1), maker (19, 4, 8) | countries : countryid (7, 5, 8), countryname (\"uk\", \"uk\", \"germany\"), continent (4, 4, 1) | car_names : make (\"chevrolet nova\", \"renault 5 gtl\", \"datsun 210\"), model (\"buick\", \"citroen\", \" volkswagen\"), makeid (309, 192, 404) | continents : contid (5, 1, 4), continent (\"australia\", \"africa\", \"australia\") | cars_data_weight : sum_weight (4165, 3302, 2511), avg_weight (1955, 3415, 1965), min_weight (2210, 2228, 1867), max_weight (4098, 4100, 2124), year (1981, 1974, 1982)", 
        "new_table_name": "cars_data_weight", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(weight), year from cars_data group by year", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Weight", 
            ")", 
            ",", 
            "YEAR", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "YEAR", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_weight, year from cars_data_weight", 
        "schema_without_content": "model_list : model , maker , modelid  | continents : continent , contid  | car_names : make \", \"volkswagen 411 \", \"dodge challenger se\", model , makeid  | cars_data_weight : min_weight , avg_weight , year , max_weight , sum_weight  | car_makers : fullname , maker , id , country  | countries : continent , countryid , countryname  | cars_data : cylinders , weight , year , mpg , edispl , horsepower , accelerate , id ", 
        "query1": "select avg(weight), year from cars_data group by year", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "year", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "year"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "and", 
            "year", 
            "for", 
            "each", 
            "year", 
            "?"
        ], 
        "all_raw_cols": [
            "year", 
            "weight"
        ], 
        "question": "What is the average weight and year for each year?", 
        "all_cols": [
            "year", 
            "sum_weight", 
            "avg_weight", 
            "min_weight", 
            "max_weight"
        ], 
        "schema_with_content": "model_list : model (\"plymouth\", \"oldsmobile\", \"bmw\"), maker (20, 11, 16), modelid (8, 2, 28) | continents : continent (\"africa\", \"australia\", \"australia\"), contid (5, 5, 3) | car_names : make (\"buick estate wagon (sw)\", \"volkswagen 411 (sw)\", \"dodge challenger se\"), model (\"hi\", \"chrysler\", \"cadillac\"), makeid (365, 270, 262) | cars_data_weight : min_weight (2350, 4166, 2950), avg_weight (1915, 3940, 2595), year (1972, 1981, 1982), max_weight (3439, 4209, 2160), sum_weight (3535, 3205, 4054) | car_makers : fullname (\"Kia Motors\", \"Daimler Benz\", \"Renault\"), maker (\"gm\", \"kia\", \"amc\"), id (18, 16, 1), country (\"4\", \"6\", \"1\") | countries : continent (4, 2, 5), countryid (12, 3, 10), countryname (\"germany\", \"egypt\", \"italy\") | cars_data : cylinders (8, 4, 6), weight (3820, 4456, 4042), year (1982, 1980, 1977), mpg (\"25.5\", \"20.2\", \"21.6\"), edispl (350.0, 115.0, 340.0), horsepower (\"85\", \"190\", \"66\"), accelerate (12.9, 14.2, 15.5), id (375, 192, 160)", 
        "new_table_name": "cars_data_weight", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(weight), year from cars_data group by year", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Weight", 
            ")", 
            ",", 
            "YEAR", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "YEAR", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_horsepower from cars_data_horsepower where year < 1980", 
        "schema_without_content": "car_names : makeid , model , make  | countries : countryname , countryid , continent  | continents : continent , contid  | model_list : maker , model , modelid  | cars_data : id , mpg , edispl , weight , cylinders , year , accelerate , horsepower  | car_makers : fullname , id , country , maker  | cars_data_horsepower : max_horsepower , min_horsepower , avg_horsepower , sum_horsepower ", 
        "query1": "select avg(horsepower) from cars_data where year < 1980", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "horsepower", 
            ")", 
            "from", 
            "cars_data", 
            "where", 
            "year", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "horsepower", 
            "of", 
            "the", 
            "cars", 
            "before", 
            "1980", 
            "?"
        ], 
        "all_raw_cols": [
            "horsepower"
        ], 
        "question": "What is the average horsepower of the cars before 1980?", 
        "all_cols": [
            "sum_horsepower", 
            "avg_horsepower", 
            "min_horsepower", 
            "max_horsepower"
        ], 
        "schema_with_content": "car_names : makeid (274, 340, 284), model (\"datsun\", \"saab\", \"buick\"), make (\"amc ambassador sst\", \"toyota corona hardtop\", \"oldsmobile vista cruiser\") | countries : countryname (\"france\", \"new zealand\", \"brazil\"), countryid (9, 1, 1), continent (3, 1, 5) | continents : continent (\"australia\", \"africa\", \"australia\"), contid (5, 5, 3) | model_list : maker (6, 3, 12), model (\"ford\", \"volvo\", \"kia\"), modelid (1, 16, 1) | cars_data : id (396, 211, 171), mpg (\"17.7\", \"20.6\", \"38.1\"), edispl (76.0, 72.0, 90.0), weight (4055, 1875, 1963), cylinders (4, 3, 5), year (1978, 1970, 1970), accelerate (9.0, 11.5, 21.9), horsepower (\"85\", \"175\", \"132\") | car_makers : fullname (\"Renault\", \"Triumph\", \"Nissan Motors\"), id (3, 20, 1), country (\"3\", \"6\", \"2\"), maker (\"ford\", \"ford\", \"hyundai\") | cars_data_horsepower : max_horsepower (\"62\", \"62\", \"95\"), min_horsepower (\"105\", \"120\", \"65\"), avg_horsepower (\"220\", \"87\", \"125\"), sum_horsepower (\"158\", \"130\", \"95\")", 
        "new_table_name": "cars_data_horsepower", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ], 
                    1980.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(horsepower) from cars_data where year < 1980", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "horsepower", 
            ")", 
            "FROM", 
            "CARS_DATA", 
            "WHERE", 
            "YEAR", 
            "<", 
            "1980", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_horsepower from cars_data_horsepower where year < 1980", 
        "schema_without_content": "continents : continent , contid  | car_makers : fullname , id , country , maker  | cars_data_horsepower : sum_horsepower , min_horsepower , avg_horsepower , max_horsepower  | countries : countryname , continent , countryid  | car_names : model , makeid , make \", \"amc hornet\", \"datsun pl510\" | model_list : maker , modelid , model  | cars_data : edispl , mpg , accelerate , id , weight , horsepower , cylinders , year ", 
        "query1": "select avg(horsepower) from cars_data where year < 1980", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "horsepower", 
            ")", 
            "from", 
            "cars_data", 
            "where", 
            "year", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "horsepower", 
            "for", 
            "all", 
            "cards", 
            "produced", 
            "before", 
            "1980", 
            "?"
        ], 
        "all_raw_cols": [
            "horsepower"
        ], 
        "question": "What is the average horsepower for all cards produced before 1980?", 
        "all_cols": [
            "sum_horsepower", 
            "avg_horsepower", 
            "min_horsepower", 
            "max_horsepower"
        ], 
        "schema_with_content": "continents : continent (\"europe\", \"australia\", \"europe\"), contid (4, 2, 4) | car_makers : fullname (\"Saab\", \"Opel\", \"Renault\"), id (12, 2, 1), country (\"1\", \"5\", \"6\"), maker (\"kia\", \"chrysler\", \"daimler benz\") | cars_data_horsepower : sum_horsepower (\"72\", \"133\", \"67\"), min_horsepower (\"230\", \"116\", \"112\"), avg_horsepower (\"149\", \"88\", \"98\"), max_horsepower (\"62\", \"70\", \"225\") | countries : countryname (\"usa\", \"uk\", \"russia\"), continent (5, 5, 1), countryid (3, 11, 13) | car_names : model (\"renault\", \"oldsmobile\", \"oldsmobile\"), makeid (146, 136, 348), make (\"ford gran torino (sw)\", \"amc hornet\", \"datsun pl510\") | model_list : maker (15, 9, 2), modelid (21, 17, 5), model (\"ford\", \"saab\", \"toyota\") | cars_data : edispl (140.0, 70.0, 144.0), mpg (\"27.5\", \"31.9\", \"22.4\"), accelerate (11.5, 10.5, 15.4), id (88, 130, 63), weight (2205, 3563, 2807), horsepower (\"138\", \"96\", \"72\"), cylinders (4, 4, 5), year (1981, 1980, 1977)", 
        "new_table_name": "cars_data_horsepower", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ], 
                    1980.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(horsepower) from cars_data where year < 1980", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "horsepower", 
            ")", 
            "FROM", 
            "CARS_DATA", 
            "WHERE", 
            "YEAR", 
            "<", 
            "1980", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_edispl from car_names_cars_data_edispl where model = 'volvo'", 
        "schema_without_content": "car_names : model , make , makeid  | model_list : model , modelid , maker  | continents : contid , continent  | car_names_cars_data_edispl : max_edispl , model , min_edispl , sum_edispl , avg_edispl  | countries : countryname , countryid , continent  | car_makers : id , country , maker , fullname  | cars_data : id , horsepower , cylinders , weight , accelerate , year , mpg , edispl ", 
        "query1": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "t2", 
            ".", 
            "edispl", 
            ")", 
            "from", 
            "car_names", 
            "as", 
            "t1", 
            "join", 
            "cars_data", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "makeid", 
            "=", 
            "t2", 
            ".", 
            "id", 
            "where", 
            "t1", 
            ".", 
            "model", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "edispl", 
            "of", 
            "the", 
            "cars", 
            "of", 
            "model", 
            "volvo", 
            "?"
        ], 
        "all_raw_cols": [
            "model", 
            "edispl"
        ], 
        "question": "What is the average edispl of the cars of model volvo?", 
        "all_cols": [
            "model", 
            "sum_edispl", 
            "avg_edispl", 
            "min_edispl", 
            "max_edispl"
        ], 
        "schema_with_content": "car_names : model (\"chevrolet\", \"renault\", \"volkswagen\"), make (\"datsun 310\", \"datsun 210 mpg\", \"plymouth volare premier v8\"), makeid (384, 41, 332) | model_list : model (\"mazda\", \"scion\", \"ford\"), modelid (30, 15, 25), maker (19, 8, 11) | continents : contid (1, 2, 1), continent (\"africa\", \"asia\", \"europe\") | car_names_cars_data_edispl : max_edispl (383.0, 383.0, 181.0), model (\"oldsmobile\", \"chrysler\", \"cadillac\"), min_edispl (225.0, 156.0, 86.0), sum_edispl (107.0, 101.0, 400.0), avg_edispl (140.0, 130.0, 340.0) | countries : countryname (\"japan\", \"uk\", \"brazil\"), countryid (7, 5, 4), continent (4, 5, 1) | car_makers : id (9, 17, 4), country (\"5\", \"1\", \"5\"), maker (\"hyundai\", \"gm\", \"chrysler\"), fullname (\"BMW\", \"Fiat\", \"Volkswagen\") | cars_data : id (15, 53, 316), horsepower (\"90\", \"83\", \"48\"), cylinders (6, 8, 3), weight (4354, 3250, 1760), accelerate (13.9, 19.0, 11.3), year (1979, 1975, 1981), mpg (\"32.8\", \"14\", \"44\"), edispl (101.0, 72.0, 72.0)", 
        "new_table_name": "car_names_cars_data_edispl", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "car_names", 
                "makeid"
            ], 
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ], 
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            16, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ], 
                    "\"volvo\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "T2.edispl", 
            ")", 
            "FROM", 
            "CAR_NAMES", 
            "AS", 
            "T1", 
            "JOIN", 
            "CARS_DATA", 
            "AS", 
            "T2", 
            "ON", 
            "T1.MakeId", 
            "=", 
            "T2.Id", 
            "WHERE", 
            "T1.Model", 
            "=", 
            "'volvo", 
            "'", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_edispl from car_names_cars_data_edispl where model = 'volvo'", 
        "schema_without_content": "model_list : maker , modelid , model  | continents : contid , continent  | car_names_cars_data_edispl : max_edispl , model , avg_edispl , sum_edispl , min_edispl  | car_names : make \", makeid , model  | countries : countryid , countryname , continent  | cars_data : cylinders , edispl , accelerate , year , horsepower , id , mpg , weight  | car_makers : maker , fullname , id , country ", 
        "query1": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "t2", 
            ".", 
            "edispl", 
            ")", 
            "from", 
            "car_names", 
            "as", 
            "t1", 
            "join", 
            "cars_data", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "makeid", 
            "=", 
            "t2", 
            ".", 
            "id", 
            "where", 
            "t1", 
            ".", 
            "model", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "edispl", 
            "for", 
            "all", 
            "volvos", 
            "?"
        ], 
        "all_raw_cols": [
            "model", 
            "edispl"
        ], 
        "question": "What is the average edispl for all volvos?", 
        "all_cols": [
            "model", 
            "sum_edispl", 
            "avg_edispl", 
            "min_edispl", 
            "max_edispl"
        ], 
        "schema_with_content": "model_list : maker (17, 12, 22), modelid (9, 16, 4), model (\"bmw\", \"scion\", \"oldsmobile\") | continents : contid (2, 3, 2), continent (\"australia\", \"africa\", \"america\") | car_names_cars_data_edispl : max_edispl (262.0, 455.0, 85.0), model (\"mercury\", \"mazda\", \"chrysler\"), avg_edispl (79.0, 146.0, 200.0), sum_edispl (307.0, 76.0, 262.0), min_edispl (302.0, 304.0, 79.0) | car_names : make (\"ford granada ghia\", \"mazda glc custom\", \"volvo 145e (sw)\"), makeid (120, 177, 350), model (\"cadillac\", \"saab\", \"ford\") | countries : countryid (2, 1, 13), countryname (\"brazil\", \"japan\", \"usa\"), continent (3, 1, 4) | cars_data : cylinders (6, 3, 5), edispl (120.0, 108.0, 88.0), accelerate (16.9, 19.0, 21.5), year (1978, 1974, 1980), horsepower (\"83\", \"135\", \"200\"), id (297, 110, 298), mpg (\"43.4\", \"31.5\", \"32.7\"), weight (3302, 1836, 3158) | car_makers : maker (\"amc\", \"chrysler\", \"opel\"), fullname (\"Toyota\", \"Saab\", \"American Motor Company\"), id (2, 18, 8), country (\"8\", \"1\", \"1\")", 
        "new_table_name": "car_names_cars_data_edispl", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "car_names", 
                "makeid"
            ], 
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ], 
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            16, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ], 
                    "\"volvo\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.model = 'volvo'", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "T2.edispl", 
            ")", 
            "FROM", 
            "CAR_NAMES", 
            "AS", 
            "T1", 
            "JOIN", 
            "CARS_DATA", 
            "AS", 
            "T2", 
            "ON", 
            "T1.MakeId", 
            "=", 
            "T2.Id", 
            "WHERE", 
            "T1.Model", 
            "=", 
            "'volvo", 
            "'", 
            ";"
        ]
    }, 
    {
        "query2": "select max_accelerate, cylinders from cars_data_accelerate", 
        "schema_without_content": "countries : continent , countryid , countryname  | car_names : makeid , model , make  | cars_data_accelerate : min_accelerate , sum_accelerate , cylinders , max_accelerate , avg_accelerate  | cars_data : mpg , id , edispl , weight , horsepower , year , cylinders , accelerate  | model_list : model , maker , modelid  | car_makers : maker , country , id , fullname  | continents : contid , continent ", 
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "accelerate", 
            ")", 
            ",", 
            "cylinders", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "cylinders"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "accelerate", 
            "for", 
            "different", 
            "number", 
            "of", 
            "cylinders", 
            "?"
        ], 
        "all_raw_cols": [
            "cylinders", 
            "accelerate"
        ], 
        "question": "What is the maximum accelerate for different number of cylinders?", 
        "all_cols": [
            "cylinders", 
            "sum_accelerate", 
            "avg_accelerate", 
            "min_accelerate", 
            "max_accelerate"
        ], 
        "schema_with_content": "countries : continent (3, 5, 1), countryid (6, 9, 12), countryname (\"sweden\", \"korea\", \"mexico\") | car_names : makeid (215, 372, 158), model (\"saab\", \"citroen\", \"saab\"), make (\"plymouth satellite\", \"amc concord\", \"ford granada gl\") | cars_data_accelerate : min_accelerate (17.6, 17.2, 21.8), sum_accelerate (17.5, 14.3, 9.5), cylinders (4, 4, 6), max_accelerate (16.2, 18.8, 14.8), avg_accelerate (13.2, 17.0, 16.4) | cars_data : mpg (\"26.4\", \"9\", \"31\"), id (249, 33, 118), edispl (116.0, 183.0, 86.0), weight (3302, 2045, 2158), horsepower (\"180\", \"105\", \"133\"), year (1976, 1982, 1975), cylinders (8, 5, 4), accelerate (15.0, 11.5, 16.7) | model_list : model (\"bmw\", \"nissan\", \"oldsmobile\"), maker (17, 17, 20), modelid (36, 10, 31) | car_makers : maker (\"amc\", \"kia\", \"nissan\"), country (\"4\", \"1\", \"1\"), id (12, 3, 21), fullname (\"Subaru\", \"Mazda\", \"Peugeaut\") | continents : contid (2, 4, 3), continent (\"asia\", \"africa\", \"africa\")", 
        "new_table_name": "cars_data_accelerate", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    18, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                22, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Accelerate", 
            ")", 
            ",", 
            "Cylinders", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "Cylinders", 
            ";"
        ]
    }, 
    {
        "query2": "select max_accelerate, cylinders from cars_data_accelerate", 
        "schema_without_content": "continents : continent , contid  | countries : countryid , continent , countryname  | cars_data : accelerate , id , edispl , mpg , weight , cylinders , horsepower , year  | car_makers : maker , id , country , fullname  | model_list : maker , model , modelid  | car_names : model , make , makeid  | cars_data_accelerate : cylinders , avg_accelerate , min_accelerate , sum_accelerate , max_accelerate ", 
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "accelerate", 
            ")", 
            ",", 
            "cylinders", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "cylinders"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "accelerate", 
            "for", 
            "all", 
            "the", 
            "different", 
            "cylinders", 
            "?"
        ], 
        "all_raw_cols": [
            "cylinders", 
            "accelerate"
        ], 
        "question": "What is the maximum accelerate for all the different cylinders?", 
        "all_cols": [
            "cylinders", 
            "sum_accelerate", 
            "avg_accelerate", 
            "min_accelerate", 
            "max_accelerate"
        ], 
        "schema_with_content": "continents : continent (\"europe\", \"europe\", \"europe\"), contid (3, 1, 4) | countries : countryid (13, 14, 7), continent (5, 1, 2), countryname (\"sweden\", \"mexico\", \"usa\") | cars_data : accelerate (22.1, 22.2, 18.6), id (71, 38, 280), edispl (225.0, 96.0, 225.0), mpg (\"31.9\", \"22\", \"34.3\"), weight (2220, 3525, 2670), cylinders (3, 3, 5), horsepower (\"46\", \"84\", \"65\"), year (1982, 1975, 1970) | car_makers : maker (\"honda\", \"chrysler\", \"opel\"), id (13, 6, 17), country (\"5\", \"7\", \"2\"), fullname (\"Mazda\", \"Fiat\", \"Chrysler\") | model_list : maker (21, 12, 21), model (\"chevrolet\", \"mercedes-benz\", \"dodge\"), modelid (24, 21, 16) | car_names : model (\" volkswagen\", \"hi\", \"triumph\"), make (\"dodge rampage\", \"plymouth satellite\", \"toyota celica gt liftback\"), makeid (243, 125, 332) | cars_data_accelerate : cylinders (5, 5, 5), avg_accelerate (9.0, 16.2, 13.6), min_accelerate (20.5, 15.0, 13.8), sum_accelerate (14.4, 23.5, 20.4), max_accelerate (15.0, 12.2, 15.3)", 
        "new_table_name": "cars_data_accelerate", 
        "db_id": "car_1", 
        "tables_with_pkeys": [
            [
                "cars_data", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    18, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                22, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Accelerate", 
            ")", 
            ",", 
            "Cylinders", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "Cylinders", 
            ";"
        ]
    }, 
    {
        "query2": "select min_number_products, max_number_products from shop_number_products", 
        "schema_without_content": "evaluation : year_awarded , employee_id , bonus  | shop_number_products : sum_number_products , avg_number_products , min_number_products , max_number_products  | hiring : employee_id , is_full_time , start_from , shop_id  | shop : district , name , shop_id , number_products , manager_name , location  | employee : name , employee_id , city , age ", 
        "query1": "select min(number_products), max(number_products) from shop", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "number_products", 
            ")", 
            ",", 
            "max", 
            "(", 
            "number_products", 
            ")", 
            "from", 
            "shop"
        ], 
        "question_toks": [
            "find", 
            "the", 
            "minimum", 
            "and", 
            "maximum", 
            "number", 
            "of", 
            "products", 
            "of", 
            "all", 
            "stores", 
            "."
        ], 
        "all_raw_cols": [
            "number_products"
        ], 
        "question": "find the minimum and maximum number of products of all stores.", 
        "all_cols": [
            "sum_number_products", 
            "avg_number_products", 
            "min_number_products", 
            "max_number_products"
        ], 
        "schema_with_content": "evaluation : year_awarded (\"2015\", \"2017\", \"2018\"), employee_id (\"7\", \"2\", \"1\"), bonus (4000.0, 3200.0, 3200.0) | shop_number_products : sum_number_products (6000, 1600, 1600), avg_number_products (3516, 4780, 4780), min_number_products (5000, 15000, 6000), max_number_products (15000, 4780, 1600) | hiring : employee_id (6, 4, 2), is_full_time (\"T\", \"F\"), start_from (\"2012\", \"2012\", \"2003\"), shop_id (2, 4, 5) | shop : district (\"Tapiolan Urheilupuisto\", \"Magnum Areena\", \"Finnair Stadium\"), name (\"KuPS\", \"FF Jaro\", \"FC Honka\"), shop_id (3, 8, 3), number_products (15000, 5000, 6000), manager_name (\"Tommi Kautonen\", \"Kai Nyyss\u00c3\u00b6nen\", \"Job Dragtsma\"), location (\"Espoo\", \"Jakobstad\", \"Valkeakoski\") | employee : name (\"Matt Stevens\", \"Jason Hobson\", \"Lee Mears\"), employee_id (7, 8, 4), city (\"Bristol\", \"Leicester\", \"Leicester\"), age (40, 40, 28)", 
        "new_table_name": "shop_number_products", 
        "db_id": "employee_hire_evaluation", 
        "tables_with_pkeys": [
            [
                "shop", 
                "shop_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select min(number_products), max(number_products) from shop", 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Number_products", 
            ")", 
            ",", 
            "max", 
            "(", 
            "Number_products", 
            ")", 
            "FROM", 
            "shop"
        ]
    }, 
    {
        "query2": "select min_number_products, max_number_products from shop_number_products", 
        "schema_without_content": "employee : name , age , city , employee_id  | evaluation : employee_id , bonus , year_awarded  | shop : manager_name , district , shop_id , number_products , location , name  | hiring : shop_id , is_full_time , start_from , employee_id  | shop_number_products : avg_number_products , max_number_products , sum_number_products , min_number_products ", 
        "query1": "select min(number_products), max(number_products) from shop", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "number_products", 
            ")", 
            ",", 
            "max", 
            "(", 
            "number_products", 
            ")", 
            "from", 
            "shop"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "minimum", 
            "and", 
            "maximum", 
            "number", 
            "of", 
            "products", 
            "across", 
            "all", 
            "the", 
            "shops", 
            "?"
        ], 
        "all_raw_cols": [
            "number_products"
        ], 
        "question": "What are the minimum and maximum number of products across all the shops?", 
        "all_cols": [
            "sum_number_products", 
            "avg_number_products", 
            "min_number_products", 
            "max_number_products"
        ], 
        "schema_with_content": "employee : name (\"Lee Mears\", \"Tim Payne\", \"Louis Deacon\"), age (28, 32, 30), city (\"Leicester\", \"Bath\", \"Wasps\"), employee_id (1, 8, 10) | evaluation : employee_id (\"1\", \"4\", \"1\"), bonus (3200.0, 3200.0, 3200.0), year_awarded (\"2018\", \"2015\", \"2015\") | shop : manager_name (\"Tommi Kautonen\", \"Kai Nyyss\u00c3\u00b6nen\", \"Antti Muurinen\"), district (\"Tapiolan Urheilupuisto\", \"Veritas Stadion\", \"Wikl\u00c3\u00b6f Holding Arena\"), shop_id (7, 4, 7), number_products (10000, 1600, 4780), location (\"Kotka\", \"Kotka\", \"Mariehamn\"), name (\"KuPS\", \"KuPS\", \"FC Inter\") | hiring : shop_id (8, 4, 8), is_full_time (\"T\", \"F\"), start_from (\"2008\", \"2009\", \"2010\"), employee_id (2, 4, 3) | shop_number_products : avg_number_products (15000, 10770, 6000), max_number_products (10000, 10000, 10000), sum_number_products (10770, 3500, 10770), min_number_products (6000, 1600, 10000)", 
        "new_table_name": "shop_number_products", 
        "db_id": "employee_hire_evaluation", 
        "tables_with_pkeys": [
            [
                "shop", 
                "shop_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select min(number_products), max(number_products) from shop", 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Number_products", 
            ")", 
            ",", 
            "max", 
            "(", 
            "Number_products", 
            ")", 
            "FROM", 
            "shop"
        ]
    }, 
    {
        "query2": "select sum_bonus from evaluation_bonus", 
        "schema_without_content": "hiring : is_full_time , shop_id , employee_id , start_from  | evaluation : bonus , year_awarded , employee_id  | shop : location , manager_name , name , shop_id , number_products , district  | evaluation_bonus : sum_bonus , min_bonus , max_bonus , avg_bonus  | employee : name , city , employee_id , age ", 
        "query1": "select sum(bonus) from evaluation", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "bonus", 
            ")", 
            "from", 
            "evaluation"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "total", 
            "bonus", 
            "given", 
            "in", 
            "all", 
            "evaluations", 
            "?"
        ], 
        "all_raw_cols": [
            "bonus"
        ], 
        "question": "What is total bonus given in all evaluations?", 
        "all_cols": [
            "sum_bonus", 
            "avg_bonus", 
            "min_bonus", 
            "max_bonus"
        ], 
        "schema_with_content": "hiring : is_full_time (\"T\", \"F\"), shop_id (1, 8, 5), employee_id (4, 7, 6), start_from (\"2011\", \"2009\", \"2003\") | evaluation : bonus (3200.0, 4000.0, 3000.0), year_awarded (\"2018\", \"2015\", \"2015\"), employee_id (\"4\", \"4\", \"10\") | shop : location (\"Mariehamn\", \"Mariehamn\", \"Mariehamn\"), manager_name (\"Job Dragtsma\", \"Tommi Kautonen\", \"Mika Lehkosuo\"), name (\"FC Inter\", \"KuPS\", \"FC Honka\"), shop_id (1, 7, 5), number_products (1600, 4780, 5000), district (\"Jakobstads Centralplan\", \"Wikl\u00c3\u00b6f Holding Arena\", \"Lahden Stadion\") | evaluation_bonus : sum_bonus (2900.0, 2900.0, 3200.0), min_bonus (4000.0, 2900.0, 2900.0), max_bonus (3200.0, 2900.0, 2900.0), avg_bonus (2900.0, 3200.0, 3000.0) | employee : name (\"Jason Hobson\", \"George Chuter\", \"Phil Vickery\"), city (\"Bristol\", \"Bristol\", \"Wasps\"), employee_id (5, 6, 7), age (36, 30, 32)", 
        "new_table_name": "evaluation_bonus", 
        "db_id": "employee_hire_evaluation", 
        "tables_with_pkeys": [
            [
                "evaluation", 
                "employee_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(bonus) from evaluation", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "bonus", 
            ")", 
            "FROM", 
            "evaluation"
        ]
    }, 
    {
        "query2": "select sum_bonus from evaluation_bonus", 
        "schema_without_content": "shop : district , number_products , location , manager_name , name , shop_id  | hiring : employee_id , start_from , is_full_time , shop_id  | evaluation_bonus : sum_bonus , min_bonus , avg_bonus , max_bonus  | evaluation : year_awarded , employee_id , bonus  | employee : age , employee_id , city , name ", 
        "query1": "select sum(bonus) from evaluation", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "bonus", 
            ")", 
            "from", 
            "evaluation"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "total", 
            "amount", 
            "of", 
            "bonus", 
            "given", 
            "in", 
            "all", 
            "the", 
            "evaluations", 
            "."
        ], 
        "all_raw_cols": [
            "bonus"
        ], 
        "question": "Find the total amount of bonus given in all the evaluations.", 
        "all_cols": [
            "sum_bonus", 
            "avg_bonus", 
            "min_bonus", 
            "max_bonus"
        ], 
        "schema_with_content": "shop : district (\"Veritas Stadion\", \"Arto Tolsa Areena\", \"Tapiolan Urheilupuisto\"), number_products (6000, 4780, 3500), location (\"Jakobstad\", \"Kuopio\", \"Helsinki\"), manager_name (\"Antti Muurinen\", \"Olli Huttunen\", \"Job Dragtsma\"), name (\"FC KooTeePee\", \"FC KooTeePee\", \"KuPS\"), shop_id (3, 7, 4) | hiring : employee_id (7, 4, 5), start_from (\"2008\", \"2013\", \"2013\"), is_full_time (\"T\", \"F\"), shop_id (5, 8, 6) | evaluation_bonus : sum_bonus (3200.0, 4000.0, 3200.0), min_bonus (3000.0, 4000.0, 3000.0), avg_bonus (2900.0, 3200.0, 2900.0), max_bonus (3200.0, 2900.0, 3000.0) | evaluation : year_awarded (\"2011\", \"2011\", \"2011\"), employee_id (\"1\", \"7\", \"10\"), bonus (3000.0, 3200.0, 2900.0) | employee : age (28, 43, 28), employee_id (8, 1, 10), city (\"Sale\", \"Bristol\", \"Bath\"), name (\"Tim Payne\", \"Matt Stevens\", \"Mark Regan\")", 
        "new_table_name": "evaluation_bonus", 
        "db_id": "employee_hire_evaluation", 
        "tables_with_pkeys": [
            [
                "evaluation", 
                "employee_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(bonus) from evaluation", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "bonus", 
            ")", 
            "FROM", 
            "evaluation"
        ]
    }, 
    {
        "query2": "select min_version_number, template_type_code from templates_version_number", 
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_details , template_type_code , version_number , date_effective_from , date_effective_to , template_id  | templates_version_number : template_type_code , avg_version_number , sum_version_number , max_version_number , min_version_number  | paragraphs : document_id , paragraph_text , other_details , paragraph_id  | documents : other_details , template_id , document_name , document_id , document_description ", 
        "query1": "select min(version_number), template_type_code from templates", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "version_number", 
            ")", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "What", 
            "the", 
            "smallest", 
            "version", 
            "number", 
            "and", 
            "its", 
            "template", 
            "type", 
            "code", 
            "?"
        ], 
        "all_raw_cols": [
            "template_type_code", 
            "version_number"
        ], 
        "question": "What the smallest version number and its template type code?", 
        "all_cols": [
            "template_type_code", 
            "sum_version_number", 
            "avg_version_number", 
            "min_version_number", 
            "max_version_number"
        ], 
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"PP\", \"PPT\"), template_type_description (\"Book\", \"Paper\", \"CV\") | templates : template_details (\"\"), template_type_code (\"PP\", \"AD\", \"CV\"), version_number (8, 0, 6), date_effective_from (\"1996-02-04 11:27:24\", \"1986-12-09 14:51:36\", \"2005-02-20 00:31:34\"), date_effective_to (\"2015-09-06 01:08:44\", \"1989-11-24 19:06:06\", \"2001-04-18 09:29:52\"), template_id (7, 24, 11) | templates_version_number : template_type_code (\"PPT\", \"BK\", \"PP\"), avg_version_number (0, 8, 8), sum_version_number (4, 3, 6), max_version_number (3, 4, 1), min_version_number (0, 0, 8) | paragraphs : document_id (3540024, 80, 651512), paragraph_text (\"Palestinian Territory\", \"Korea\", \"Brazil\"), other_details (None), paragraph_id (510442723, 510442723, 3708) | documents : other_details (None), template_id (20, 14, 25), document_name (\"How Google people work\", \"Do not panic\", \"Learning French\"), document_id (3, 76, 385906526), document_description (\"u\", \"k\", \"n\")", 
        "new_table_name": "templates_version_number", 
        "db_id": "cre_Doc_Template_Mgt", 
        "tables_with_pkeys": [
            [
                "templates", 
                "template_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select min(version_number), template_type_code from templates", 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Version_Number", 
            ")", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ]
    }, 
    {
        "query2": "select min_version_number, template_type_code from templates_version_number", 
        "schema_without_content": "paragraphs : document_id , paragraph_id , other_details , paragraph_text  | documents : template_id , document_name , document_id , other_details , document_description  | templates_version_number : max_version_number , template_type_code , sum_version_number , min_version_number , avg_version_number  | templates : version_number , template_details , template_id , date_effective_from , template_type_code , date_effective_to  | ref_template_types : template_type_description , template_type_code ", 
        "query1": "select min(version_number), template_type_code from templates", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "version_number", 
            ")", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "lowest", 
            "version", 
            "number", 
            ",", 
            "along", 
            "with", 
            "its", 
            "corresponding", 
            "template", 
            "type", 
            "code", 
            "."
        ], 
        "all_raw_cols": [
            "template_type_code", 
            "version_number"
        ], 
        "question": "Return the lowest version number, along with its corresponding template type code.", 
        "all_cols": [
            "template_type_code", 
            "sum_version_number", 
            "avg_version_number", 
            "min_version_number", 
            "max_version_number"
        ], 
        "schema_with_content": "paragraphs : document_id (16514113, 385906526, 50123), paragraph_id (3708, 243399026, 241), other_details (None), paragraph_text (\"Indonesia\", \"Palestinian Territory\", \"Korea\") | documents : template_id (25, 4, 22), document_name (\"Data base\", \"Summer Show\", \"Understanding DB\"), document_id (3540024, 76, 76), other_details (None), document_description (\"y\", \"w\", \"z\") | templates_version_number : max_version_number (9, 6, 8), template_type_code (\"PP\", \"PP\", \"CV\"), sum_version_number (7, 6, 9), min_version_number (6, 2, 5), avg_version_number (1, 7, 7) | templates : version_number (4, 5, 9), template_details (\"\"), template_id (0, 19, 19), date_effective_from (\"1979-10-20 21:23:20\", \"1996-02-04 11:27:24\", \"1984-08-07 13:36:26\"), template_type_code (\"CV\", \"AD\", \"AD\"), date_effective_to (\"1973-01-12 14:13:34\", \"2001-04-18 09:29:52\", \"1998-05-12 12:51:29\") | ref_template_types : template_type_description (\"Paper\", \"Book\", \"Presentation\"), template_type_code (\"PP\", \"PP\", \"BK\")", 
        "new_table_name": "templates_version_number", 
        "db_id": "cre_Doc_Template_Mgt", 
        "tables_with_pkeys": [
            [
                "templates", 
                "template_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select min(version_number), template_type_code from templates", 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Version_Number", 
            ")", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ]
    }, 
    {
        "query2": "select avg_age from visitor_age where level_of_membership <= 4", 
        "schema_without_content": "visit : visitor_id , total_spent , num_of_ticket , museum_id  | museum : name , museum_id , num_of_staff , open_year  | visitor : age , id , name , level_of_membership  | visitor_age : max_age , avg_age , min_age , sum_age ", 
        "query1": "select avg(age) from visitor where level_of_membership <= 4", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "age", 
            ")", 
            "from", 
            "visitor", 
            "where", 
            "level_of_membership", 
            "<", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "age", 
            "of", 
            "the", 
            "visitors", 
            "whose", 
            "membership", 
            "level", 
            "is", 
            "not", 
            "higher", 
            "than", 
            "4", 
            "?"
        ], 
        "all_raw_cols": [
            "age"
        ], 
        "question": "What is the average age of the visitors whose membership level is not higher than 4?", 
        "all_cols": [
            "sum_age", 
            "avg_age", 
            "min_age", 
            "max_age"
        ], 
        "schema_with_content": "visit : visitor_id (\"5\", \"3\", \"6\"), total_spent (320.14, 19.98, 320.44), num_of_ticket (2, 2, 10), museum_id (8, 8, 8) | museum : name (\"Plaza Museum\", \"Plaza Museum\", \"Place Tower Museum\"), museum_id (6, 6, 3), num_of_staff (62, 16, 25), open_year (\"2012\", \"2012\", \"2009\") | visitor : age (28, 56, 56), id (2, 2, 6), name (\"Gonzalo Higua\u00c3\u00adn \", \"Fernando Gago\", \"Rafael van der Vaart\"), level_of_membership (6, 2, 8) | visitor_age : max_age (27, 36, 25), avg_age (27, 27, 35), min_age (56, 35, 27), sum_age (35, 36, 56)", 
        "new_table_name": "visitor_age", 
        "db_id": "museum_visit", 
        "tables_with_pkeys": [
            [
                "visitor", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    6, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    4.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(age) from visitor where level_of_membership <= 4", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "age", 
            ")", 
            "FROM", 
            "visitor", 
            "WHERE", 
            "Level_of_membership", 
            "<", 
            "=", 
            "4"
        ]
    }, 
    {
        "query2": "select avg_num_of_staff from museum_num_of_staff where open_year < 2009", 
        "schema_without_content": "museum_num_of_staff : sum_num_of_staff , max_num_of_staff , avg_num_of_staff , min_num_of_staff  | museum : museum_id , name , num_of_staff , open_year  | visit : num_of_ticket , total_spent , visitor_id , museum_id  | visitor : id , name , age , level_of_membership ", 
        "query1": "select avg(num_of_staff) from museum where open_year < 2009", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "num_of_staff", 
            ")", 
            "from", 
            "museum", 
            "where", 
            "open_year", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "number", 
            "of", 
            "staff", 
            "working", 
            "for", 
            "the", 
            "museums", 
            "that", 
            "were", 
            "open", 
            "before", 
            "2009", 
            "."
        ], 
        "all_raw_cols": [
            "num_of_staff"
        ], 
        "question": "Find the average number of staff working for the museums that were open before 2009.", 
        "all_cols": [
            "sum_num_of_staff", 
            "avg_num_of_staff", 
            "min_num_of_staff", 
            "max_num_of_staff"
        ], 
        "schema_with_content": "museum_num_of_staff : sum_num_of_staff (62, 16, 62), max_num_of_staff (25, 62, 25), avg_num_of_staff (12, 12, 18), min_num_of_staff (16, 15, 17) | museum : museum_id (7, 6, 5), name (\"Capital Plaza Museum\", \"Capital Plaza Museum\", \"Willow Grande Museum\"), num_of_staff (18, 17, 62), open_year (\"2009\", \"2009\", \"2008\") | visit : num_of_ticket (10, 2, 2), total_spent (320.14, 20.44, 89.98), visitor_id (\"5\", \"3\", \"6\"), museum_id (8, 1, 8) | visitor : id (2, 3, 2), name (\"Ra\u00c3\u00bal Brown\", \"Arjen Robben\", \"Guti Midfielder\"), age (35, 35, 35), level_of_membership (8, 1, 5)", 
        "new_table_name": "museum_num_of_staff", 
        "db_id": "museum_visit", 
        "tables_with_pkeys": [
            [
                "museum", 
                "museum_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    2009.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(num_of_staff) from museum where open_year < 2009", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "num_of_staff", 
            ")", 
            "FROM", 
            "museum", 
            "WHERE", 
            "open_year", 
            "<", 
            "2009"
        ]
    }, 
    {
        "query2": "select avg_num_of_ticket, max_num_of_ticket from visit_num_of_ticket", 
        "schema_without_content": "museum : museum_id , num_of_staff , name , open_year  | visit_num_of_ticket : avg_num_of_ticket , max_num_of_ticket , sum_num_of_ticket , min_num_of_ticket  | visitor : id , level_of_membership , name , age  | visit : museum_id , total_spent , num_of_ticket , visitor_id ", 
        "query1": "select avg(num_of_ticket), max(num_of_ticket) from visit", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "num_of_ticket", 
            ")", 
            ",", 
            "max", 
            "(", 
            "num_of_ticket", 
            ")", 
            "from", 
            "visit"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "number", 
            "of", 
            "tickets", 
            "bought", 
            "in", 
            "all", 
            "visits", 
            "?"
        ], 
        "all_raw_cols": [
            "num_of_ticket"
        ], 
        "question": "What are the average and maximum number of tickets bought in all visits?", 
        "all_cols": [
            "sum_num_of_ticket", 
            "avg_num_of_ticket", 
            "min_num_of_ticket", 
            "max_num_of_ticket"
        ], 
        "schema_with_content": "museum : museum_id (5, 7, 4), num_of_staff (18, 12, 12), name (\"Plaza Museum\", \"RiverPark Museum\", \"Central City District Residential Museum\"), open_year (\"2008\", \"2010\", \"2008\") | visit_num_of_ticket : avg_num_of_ticket (10, 20, 10), max_num_of_ticket (10, 10, 3), sum_num_of_ticket (24, 4, 24), min_num_of_ticket (4, 10, 24) | visitor : id (3, 2, 4), level_of_membership (2, 6, 2), name (\"Gonzalo Higua\u00c3\u00adn \", \"Gonzalo Higua\u00c3\u00adn \", \"Fernando Gago\"), age (25, 56, 27) | visit : museum_id (4, 4, 1), total_spent (209.98, 209.98, 209.98), num_of_ticket (2, 20, 24), visitor_id (\"5\", \"3\", \"6\")", 
        "new_table_name": "visit_num_of_ticket", 
        "db_id": "museum_visit", 
        "tables_with_pkeys": [
            [
                "visit", 
                "museum_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(num_of_ticket), max(num_of_ticket) from visit", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "num_of_ticket", 
            ")", 
            ",", 
            "max", 
            "(", 
            "num_of_ticket", 
            ")", 
            "FROM", 
            "visit"
        ]
    }, 
    {
        "query2": "select sum_total_spent from visitor_visit_total_spent where level_of_membership = 1", 
        "schema_without_content": "visitor : name , level_of_membership , age , id  | visitor_visit_total_spent : min_total_spent , sum_total_spent , max_total_spent , level_of_membership , avg_total_spent  | visit : museum_id , visitor_id , total_spent , num_of_ticket  | museum : num_of_staff , museum_id , name , open_year ", 
        "query1": "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "t2", 
            ".", 
            "total_spent", 
            ")", 
            "from", 
            "visitor", 
            "as", 
            "t1", 
            "join", 
            "visit", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "id", 
            "=", 
            "t2", 
            ".", 
            "visitor_id", 
            "where", 
            "t1", 
            ".", 
            "level_of_membership", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "ticket", 
            "expense", 
            "of", 
            "the", 
            "visitors", 
            "whose", 
            "membership", 
            "level", 
            "is", 
            "1", 
            "?"
        ], 
        "all_raw_cols": [
            "level_of_membership", 
            "total_spent"
        ], 
        "question": "What is the total ticket expense of the visitors whose membership level is 1?", 
        "all_cols": [
            "level_of_membership", 
            "sum_total_spent", 
            "avg_total_spent", 
            "min_total_spent", 
            "max_total_spent"
        ], 
        "schema_with_content": "visitor : name (\"Arjen Robben\", \"Rafael van der Vaart\", \"Gonzalo Higua\u00c3\u00adn \"), level_of_membership (2, 2, 2), age (56, 35, 56), id (4, 3, 6) | visitor_visit_total_spent : min_total_spent (320.14, 89.98, 89.98), sum_total_spent (89.98, 320.44, 19.98), max_total_spent (89.98, 320.14, 209.98), level_of_membership (5, 6, 6), avg_total_spent (20.44, 19.98, 89.98) | visit : museum_id (8, 1, 1), visitor_id (\"5\", \"3\", \"6\"), total_spent (320.44, 89.98, 209.98), num_of_ticket (20, 2, 10) | museum : num_of_staff (12, 25, 16), museum_id (5, 2, 7), name (\"Place Tower Museum\", \"Central City District Residential Museum\", \"Place Tower Museum\"), open_year (\"2008\", \"2010\", \"2010\")", 
        "new_table_name": "visitor_visit_total_spent", 
        "db_id": "museum_visit", 
        "tables_with_pkeys": [
            [
                "visitor", 
                "id"
            ], 
            [
                "visit", 
                "museum_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ], 
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    1.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id = t2.visitor_id where t1.level_of_membership = 1", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "t2.Total_spent", 
            ")", 
            "FROM", 
            "visitor", 
            "AS", 
            "t1", 
            "JOIN", 
            "visit", 
            "AS", 
            "t2", 
            "ON", 
            "t1.id", 
            "=", 
            "t2.visitor_id", 
            "WHERE", 
            "t1.Level_of_membership", 
            "=", 
            "1"
        ]
    }, 
    {
        "query2": "select avg_loser_age, avg_winner_age from matches_loser_age_winner_age", 
        "schema_without_content": "matches_loser_age_winner_age : sum_loser_age , avg_loser_age , sum_winner_age , min_winner_age , max_winner_age , avg_winner_age , min_loser_age , max_loser_age  | rankings : ranking , player_id , ranking_date , tours , ranking_points  | players : birth_date , hand , first_name , last_name , player_id , country_code  | matches : winner_id , tourney_id , loser_age , minutes , loser_seed , winner_rank_points , tourney_date , winner_entry , loser_ht , best_of , winner_seed , draw_size , year , winner_hand , loser_id , loser_rank_points , loser_name , surface , winner_ht , tourney_level , match_num , loser_rank , score \", tourney_name , round , loser_entry , loser_ioc , loser_hand , winner_age , winner_rank , winner_ioc , winner_name ", 
        "query1": "select avg(loser_age), avg(winner_age) from matches", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "loser_age", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "winner_age", 
            ")", 
            "from", 
            "matches"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "age", 
            "of", 
            "losers", 
            "and", 
            "winners", 
            "of", 
            "all", 
            "matches", 
            "."
        ], 
        "all_raw_cols": [
            "loser_age", 
            "winner_age"
        ], 
        "question": "Find the average age of losers and winners of all matches.", 
        "all_cols": [
            "sum_loser_age", 
            "avg_loser_age", 
            "min_loser_age", 
            "max_loser_age", 
            "sum_winner_age", 
            "avg_winner_age", 
            "min_winner_age", 
            "max_winner_age"
        ], 
        "schema_with_content": "matches_loser_age_winner_age : sum_loser_age (27.3921971253, 25.503080082100002, 22.8528405202), avg_loser_age (31.3675564682, 28.5804243669, 25.149897330599998), sum_winner_age (24.2628336756, 28.249144421599997, 26.250513347), min_winner_age (31.0362765229, 26.6036960986, 24.900752909), max_winner_age (27.4743326489, 26.9650924025, 28.5804243669), avg_winner_age (36.027378507899996, 36.5831622177, 24.4407939767), min_loser_age (23.8275154004, 24.958247775500002, 23.638603696100002), max_loser_age (24.892539356599997, 28.449007529099998, 28.1697467488) | rankings : ranking (476, 925, 729), player_id (211323, 202537, 211356), ranking_date (19910916, 20170501, 20041129), tours (31, 2, 0), ranking_points (3780, 951, 2226) | players : birth_date (19931126, 19490416, 19660302), hand (\"R\", \"L\", \"R\"), first_name (\"Ioana Laura\", \"Ananya\", \"Kristina\"), last_name (\"Karsita\", \"Cunningham Pereira\", \"Huyskes\"), player_id (219227, 214616, 201415), country_code (\"ISL\", \"LES\", \"UKR\") | matches : winner_id (201495, 201662, 201496), tourney_id (\"2016-1050\", \"2016-1074\", \"2017-M021\"), loser_age (23.8220396988, 28.7036276523, 36.5831622177), minutes (104, 144, 82), loser_seed (32, 27, 17), winner_rank_points (5700, 3625, 1215), tourney_date (20161031, 20161017, 20170529), winner_entry (\"\"), loser_ht (183, 180, 168), best_of (3), winner_seed (1, 5, 2), draw_size (64, 32, 64), year (2013, 2016, 2017), winner_hand (\"R\", \"L\"), loser_id (201505, 201465, 201455), loser_rank_points (3325, 4052, 3220), loser_name (\"Victoria Azarenka\", \"Annika Beck\", \"Johanna Larsson\"), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ht (173, 174, 168), tourney_level (\"W\", \"W\", \"P\"), match_num (163, 210, 152), loser_rank (4, 3, 13), score (\"6-0 3-6 6-2\", \"6-1 7-5\", \"7-5 7-6(2)\"), tourney_name (\"Auckland\", \"Wuhan\", \"St. Petersburg\"), round (\"R32\", \"BR\", \"R32\"), loser_entry (\"\"), loser_ioc (\"GER\", \"AUS\", \"HUN\"), loser_hand (\"R\", \"L\"), winner_age (31.9972621492, 23.961670089000002, 25.6755646817), winner_rank (14, 11, 6), winner_ioc (\"DEN\", \"BEL\", \"CHN\"), winner_name (\"Lesia Tsurenko\", \"Alize Cornet\", \"Kiki Bertens\")", 
        "new_table_name": "matches_loser_age_winner_age", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "matches", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                28, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(loser_age), avg(winner_age) from matches", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "loser_age", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "winner_age", 
            ")", 
            "FROM", 
            "matches"
        ]
    }, 
    {
        "query2": "select avg_loser_age, avg_winner_age from matches_loser_age_winner_age", 
        "schema_without_content": "matches_loser_age_winner_age : min_winner_age , max_winner_age , avg_loser_age , max_loser_age , avg_winner_age , sum_loser_age , min_loser_age , sum_winner_age  | players : first_name , country_code , last_name , player_id , hand , birth_date  | rankings : player_id , ranking_date , ranking_points , tours , ranking  | matches : tourney_name , tourney_level , winner_age , loser_rank_points , loser_name , minutes , winner_entry , tourney_date , winner_id , winner_ioc , loser_ioc , best_of , loser_entry , loser_ht , winner_seed , winner_rank , loser_id , winner_hand , loser_age , match_num , loser_rank , winner_rank_points , score , tourney_id , draw_size , winner_ht , surface , round , loser_hand , year , loser_seed , winner_name ", 
        "query1": "select avg(loser_age), avg(winner_age) from matches", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "loser_age", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "winner_age", 
            ")", 
            "from", 
            "matches"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "average", 
            "ages", 
            "of", 
            "losers", 
            "and", 
            "winners", 
            "across", 
            "matches", 
            "?"
        ], 
        "all_raw_cols": [
            "loser_age", 
            "winner_age"
        ], 
        "question": "What are the average ages of losers and winners across matches?", 
        "all_cols": [
            "sum_loser_age", 
            "avg_loser_age", 
            "min_loser_age", 
            "max_loser_age", 
            "sum_winner_age", 
            "avg_winner_age", 
            "min_winner_age", 
            "max_winner_age"
        ], 
        "schema_with_content": "matches_loser_age_winner_age : min_winner_age (23.0444900753, 21.472963723499998, 28.7665982204), max_winner_age (30.5954825462, 30.904859685100003, 27.961670089000002), avg_loser_age (30.8062970568, 36.908966461300004, 33.0102669405), max_loser_age (28.958247775500002, 25.2210814511, 30.0944558522), avg_winner_age (31.3073237509, 31.6906228611, 24.402464065700002), sum_loser_age (26.458590006799998, 26.527036276500002, 28.402464065700002), min_loser_age (26.4777549624, 26.9787816564, 27.195071868600003), sum_winner_age (25.6317590691, 27.4743326489, 25.574264202600002) | players : first_name (\"Shareen Rena\", \"Yoshie\", \"Gaby Alexandra\"), country_code (\"DEN\", \"PAR\", \"CZE\"), last_name (\"Homolya\", \"Mykytyn\", \"Hirano\"), player_id (219429, 219671, 213488), hand (\"U\", \"L\", \"U\"), birth_date (19670517, 19660703, 19640410) | rankings : player_id (210787, 201663, 215448), ranking_date (20030922, 19900611, 20060306), ranking_points (4900, 5172, 9245), tours (3, 30, 25), ranking (1380, 845, 912) | matches : tourney_name (\"Washington\", \"French Open\", \"St. Petersburg\"), tourney_level (\"P\", \"W\", \"G\"), winner_age (24.985626283400002, 36.5831622177, 27.986310746100003), loser_rank_points (6940, 5340, 4728), loser_name (\"Victoria Azarenka\", \"Annika Beck\", \"Jelena Jankovic\"), minutes (106, 152, 128), winner_entry (\"\"), tourney_date (20160307, 20160613, 20160808), winner_id (201520, 202469, 201594), winner_ioc (\"FRA\", \"ESP\", \"CHN\"), loser_ioc (\"UKR\", \"USA\", \"USA\"), best_of (3), loser_entry (\"\"), loser_ht (179, 170, 164), winner_seed (18, 14, 1), winner_rank (34, 13, 6), loser_id (202494, 201527, 201535), winner_hand (\"R\", \"L\"), loser_age (27.832991101999998, 28.517453798800002, 31.613963039), match_num (226, 291, 214), loser_rank (28, 19, 48), winner_rank_points (3763, 2714, 5790), score (\"6-3 3-6 6-3 \", \"6-4 4-6 6-3\", \"4-6 6-3 6-4\"), tourney_id (\"2016-1050\", \"2016-M004\", \"2017-1003\"), draw_size (4, 4, 32), winner_ht (178, 175, 164), surface (\"Hard\", \"Clay\", \"Grass\"), round (\"BR\", \"R16\", \"BR\"), loser_hand (\"R\", \"L\"), year (2013, 2016, 2017), loser_seed (16, 18, 29), winner_name (\"Angelique Kerber\", \"Barbora Zahlavova Strycova\", \"Lucie Safarova\")", 
        "new_table_name": "matches_loser_age_winner_age", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "matches", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                28, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(loser_age), avg(winner_age) from matches", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "loser_age", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "winner_age", 
            ")", 
            "FROM", 
            "matches"
        ]
    }, 
    {
        "query2": "select avg_winner_rank from matches_winner_rank", 
        "schema_without_content": "matches : tourney_name , winner_rank , loser_seed , loser_id , loser_ioc , winner_seed , loser_entry , winner_ioc , best_of , surface , tourney_level , loser_age , loser_name , winner_name , tourney_date , winner_entry , minutes , draw_size , match_num , loser_rank , winner_age , round , winner_hand , winner_ht , tourney_id , year , loser_rank_points , loser_ht , score \", \"3-6 6-2 6-2\", \"7-5 6-4\", winner_id , winner_rank_points , loser_hand  | players : birth_date , last_name , country_code , player_id , hand , first_name  | matches_winner_rank : min_winner_rank , avg_winner_rank , max_winner_rank , sum_winner_rank  | rankings : ranking_date , ranking_points , tours , player_id , ranking ", 
        "query1": "select avg(winner_rank) from matches", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "winner_rank", 
            ")", 
            "from", 
            "matches"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "rank", 
            "of", 
            "winners", 
            "in", 
            "all", 
            "matches", 
            "."
        ], 
        "all_raw_cols": [
            "winner_rank"
        ], 
        "question": "Find the average rank of winners in all matches.", 
        "all_cols": [
            "sum_winner_rank", 
            "avg_winner_rank", 
            "min_winner_rank", 
            "max_winner_rank"
        ], 
        "schema_with_content": "matches : tourney_name (\"Australian Open\", \"Madrid\", \"Bucharest\"), winner_rank (52, 34, 48), loser_seed (27, 10, 29), loser_id (201535, 201616, 201527), loser_ioc (\"GER\", \"ROU\", \"BLR\"), winner_seed (7, 1, 7), loser_entry (\"\"), winner_ioc (\"ITA\", \"JPN\", \"SVK\"), best_of (3), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_level (\"G\", \"I\", \"W\"), loser_age (33.4893908282, 24.1177275838, 24.079397672800003), loser_name (\"Kiki Bertens\", \"Magdalena Rybarikova\", \"Christina Mchale\"), winner_name (\"Petra Kvitova\", \"Kristina Mladenovic\", \"Camila Giorgi\"), tourney_date (20170814, 20160606, 20170306), winner_entry (\"\"), minutes (40, 199, 104), draw_size (64, 12, 8), match_num (251, 219, 222), loser_rank (1, 29, 44), winner_age (36.5831622177, 26.8911704312, 27.718001368899998), round (\"F\", \"RR\", \"QF\"), winner_hand (\"R\", \"L\"), winner_ht (162, 175, 184), tourney_id (\"2017-1027\", \"2016-M007\", \"2016-O16\"), year (2013, 2016, 2017), loser_rank_points (4860, 2865, 2186), loser_ht (178, 181, 161), score (\"6-4 7-6(6)\", \"3-6 6-2 6-2\", \"7-5 6-4\"), winner_id (201425, 200748, 201458), winner_rank_points (2390, 2885, 1215), loser_hand (\"R\", \"L\") | players : birth_date (19840226, 19951106, 19840625), last_name (\"Gitman\", \"Culkovic\", \"Aubets Macia\"), country_code (\"JPN\", \"ROU\", \"MLT\"), player_id (202183, 207381, 201477), hand (\"\", \"\", \"U\"), first_name (\"Yee\", \"Candida\", \"Robertina\") | matches_winner_rank : min_winner_rank (15, 82, 22), avg_winner_rank (4, 48, 13), max_winner_rank (61, 18, 11), sum_winner_rank (1, 1, 82) | rankings : ranking_date (20010528, 20020422, 19880829), ranking_points (67, 9790, 793), tours (6, 12, 33), player_id (204327, 202421, 214862), ranking (865, 1467, 865)", 
        "new_table_name": "matches_winner_rank", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "matches", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(winner_rank) from matches", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "winner_rank", 
            ")", 
            "FROM", 
            "matches"
        ]
    }, 
    {
        "query2": "select avg_winner_rank from matches_winner_rank", 
        "schema_without_content": "players : last_name , country_code , birth_date , first_name , hand , player_id  | matches_winner_rank : sum_winner_rank , min_winner_rank , avg_winner_rank , max_winner_rank  | rankings : ranking_points , ranking , ranking_date , tours , player_id  | matches : year , loser_seed , round , winner_ht , match_num , loser_rank_points , loser_age , surface , loser_entry , winner_id , winner_seed , winner_name , winner_ioc , score \", \"7-6 1-6 6-0\", \"6-2 6-7 6-2\", loser_name , loser_hand , loser_rank , loser_id , loser_ht , tourney_name , loser_ioc , tourney_date , winner_entry , draw_size , winner_hand , minutes , winner_rank , best_of , tourney_level , winner_rank_points , tourney_id , winner_age ", 
        "query1": "select avg(winner_rank) from matches", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "winner_rank", 
            ")", 
            "from", 
            "matches"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "rank", 
            "for", 
            "winners", 
            "in", 
            "all", 
            "matches", 
            "?"
        ], 
        "all_raw_cols": [
            "winner_rank"
        ], 
        "question": "What is the average rank for winners in all matches?", 
        "all_cols": [
            "sum_winner_rank", 
            "avg_winner_rank", 
            "min_winner_rank", 
            "max_winner_rank"
        ], 
        "schema_with_content": "players : last_name (\"Matejickova\", \"Gultekinler\", \"Knoebl\"), country_code (\"POC\", \"AZE\", \"LES\"), birth_date (19621124, 19730823, 19910302), first_name (\"Yuri\", \"Isel\", \"Dania Bianca\"), hand (\"R\", \"U\", \"R\"), player_id (220117, 205525, 218305) | matches_winner_rank : sum_winner_rank (33, 33, 50), min_winner_rank (2, 10, 9), avg_winner_rank (15, 44, 1), max_winner_rank (22, 6, 53) | rankings : ranking_points (790, 2898, 1405), ranking (1014, 1495, 198), ranking_date (20030929, 20111010, 19990726), tours (6, 11, 6), player_id (214460, 216163, 213948) | matches : year (2013, 2016, 2017), loser_seed (28, 9, 14), round (\"SF\", \"R16\", \"QF\"), winner_ht (163, 161, 178), match_num (198, 204, 222), loser_rank_points (3540, 3116, 3715), loser_age (23.8275154004, 23.40862423, 24.0958247775), surface (\"Hard\", \"Clay\", \"Grass\"), loser_entry (\"\"), winner_id (201458, 200748, 201320), winner_seed (11, 2, 16), winner_name (\"Caroline Wozniacki\", \"Carla Suarez Navarro\", \"Angelique Kerber\"), winner_ioc (\"USA\", \"ESP\", \"RUS\"), score (\"6-3 7-6(3)\", \"7-6(5) 1-6 6-0\", \"6-2 6-7(6) 6-2\"), loser_name (\"Elena Vesnina\", \"Carla Suarez Navarro\", \"Monica Niculescu\"), loser_hand (\"R\", \"L\"), loser_rank (2, 44, 26), loser_id (201621, 202470, 201496), loser_ht (170, 162, 178), tourney_name (\"Budapest\", \"Kaohsiung\", \"Gstaad\"), loser_ioc (\"HUN\", \"AUS\", \"POL\"), tourney_date (20160606, 20160404, 20161003), winner_entry (\"\"), draw_size (64, 8, 32), winner_hand (\"R\", \"L\"), minutes (68, 126, 119), winner_rank (9, 23, 50), best_of (3), tourney_level (\"G\", \"P\", \"W\"), winner_rank_points (1700, 2714, 3010), tourney_id (\"2016-M035\", \"2016-M004\", \"2016-0710\"), winner_age (30.904859685100003, 35.307323750900004, 24.985626283400002)", 
        "new_table_name": "matches_winner_rank", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "matches", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(winner_rank) from matches", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "winner_rank", 
            ")", 
            "FROM", 
            "matches"
        ]
    }, 
    {
        "query2": "select min_loser_rank from matches_loser_rank", 
        "schema_without_content": "matches : loser_ioc , loser_seed , minutes , year , surface , match_num , loser_rank , loser_id , tourney_level , winner_seed , loser_age , best_of , loser_name , winner_rank_points , winner_hand , score , loser_hand , winner_entry , tourney_date , winner_name , loser_entry , winner_id , tourney_name , tourney_id , winner_age , loser_ht , winner_rank , round , winner_ht , winner_ioc , loser_rank_points , draw_size  | rankings : ranking , ranking_points , player_id , tours , ranking_date  | matches_loser_rank : sum_loser_rank , min_loser_rank , max_loser_rank , avg_loser_rank  | players : player_id , birth_date , last_name , first_name , hand , country_code ", 
        "query1": "select min(loser_rank) from matches", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "loser_rank", 
            ")", 
            "from", 
            "matches"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "highest", 
            "rank", 
            "of", 
            "losers", 
            "in", 
            "all", 
            "matches", 
            "."
        ], 
        "all_raw_cols": [
            "loser_rank"
        ], 
        "question": "Find the highest rank of losers in all matches.", 
        "all_cols": [
            "sum_loser_rank", 
            "avg_loser_rank", 
            "min_loser_rank", 
            "max_loser_rank"
        ], 
        "schema_with_content": "matches : loser_ioc (\"BEL\", \"TPE\", \"DEN\"), loser_seed (24, 27, 12), minutes (48, 125, 109), year (2013, 2016, 2017), surface (\"Hard\", \"Clay\", \"Grass\"), match_num (212, 282, 271), loser_rank (9, 56, 21), loser_id (201595, 201621, 201320), tourney_level (\"W\", \"G\", \"I\"), winner_seed (18, 19, 6), loser_age (31.518138261500003, 28.4791238877, 27.0937713895), best_of (3), loser_name (\"Timea Babos\", \"Dominika Cibulkova\", \"Dominika Cibulkova\"), winner_rank_points (1870, 2885, 2975), winner_hand (\"R\", \"L\"), score (\"6-2 6-2\", \"4-6 6-3 1-0 RET\", \"7-5 1-6 7-5\"), loser_hand (\"R\", \"L\"), winner_entry (\"\"), tourney_date (20161024, 20160822, 20161024), winner_name (\"Victoria Azarenka\", \"Misaki Doi\", \"Sara Errani\"), loser_entry (\"\"), winner_id (201419, 201518, 201662), tourney_name (\"Stuttgart\", \"Cincinnati\", \"Washington\"), tourney_id (\"2016-1086\", \"2016-520\", \"2016-M006\"), winner_age (25.0759753593, 27.2005475702, 25.478439425100003), loser_ht (178, 174, 165), winner_rank (82, 9, 2), round (\"RR\", \"R32\", \"BR\"), winner_ht (182, 175, 181), winner_ioc (\"ITA\", \"SVK\", \"NED\"), loser_rank_points (9030, 7035, 3897), draw_size (32, 4, 64) | rankings : ranking (258, 534, 549), ranking_points (4170, 4544, 1026), player_id (214096, 210958, 204361), tours (2, 21, 18), ranking_date (19880208, 19980119, 19900604) | matches_loser_rank : sum_loser_rank (27, 11, 52), min_loser_rank (8, 30, 26), max_loser_rank (46, 28, 11), avg_loser_rank (9, 31, 10) | players : player_id (208008, 204974, 204740), birth_date (19961207, 19750218, 19980917), last_name (\"Sainsbury\", \"Glinzler\", \"Wesbrooks\"), first_name (\"Miho\", \"Annelise\", \"Etti\"), hand (\"L\", \"R\", \"R\"), country_code (\"KAZ\", \"GUA\", \"SWE\")", 
        "new_table_name": "matches_loser_rank", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "matches", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select min(loser_rank) from matches", 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "loser_rank", 
            ")", 
            "FROM", 
            "matches"
        ]
    }, 
    {
        "query2": "select min_loser_rank from matches_loser_rank", 
        "schema_without_content": "matches_loser_rank : min_loser_rank , max_loser_rank , avg_loser_rank , sum_loser_rank  | rankings : ranking , player_id , tours , ranking_points , ranking_date  | players : last_name , player_id , first_name , country_code , hand , birth_date  | matches : loser_ht , winner_ioc , tourney_id , loser_seed , tourney_level , year , match_num , draw_size , loser_rank , minutes , loser_age , surface , winner_rank , tourney_name , winner_seed , winner_ht , winner_hand , winner_entry , best_of , tourney_date , score  7-6\", loser_rank_points , winner_rank_points , round , loser_ioc , winner_name , loser_id , loser_entry , loser_hand , loser_name , winner_age , winner_id ", 
        "query1": "select min(loser_rank) from matches", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "loser_rank", 
            ")", 
            "from", 
            "matches"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "best", 
            "rank", 
            "of", 
            "losers", 
            "across", 
            "all", 
            "matches", 
            "?"
        ], 
        "all_raw_cols": [
            "loser_rank"
        ], 
        "question": "What is the best rank of losers across all matches?", 
        "all_cols": [
            "sum_loser_rank", 
            "avg_loser_rank", 
            "min_loser_rank", 
            "max_loser_rank"
        ], 
        "schema_with_content": "matches_loser_rank : min_loser_rank (22, 81, 7), max_loser_rank (10, 14, 6), avg_loser_rank (13, 45, 47), sum_loser_rank (6, 12, 27) | rankings : ranking (1165, 280, 1301), player_id (201380, 214386, 215249), tours (39, 17, 17), ranking_points (1227, 1225, 108), ranking_date (19980119, 20110606, 20061225) | players : last_name (\"Oliveira\", \"Jorjoliani\", \"Phan Thanh\"), player_id (214982, 214439, 214604), first_name (\"Antje\", \"Eduarda\", \"Berna\"), country_code (\"TCH\", \"TPE\", \"BRU\"), hand (\"U\", \"L\", \"R\"), birth_date (19610712, 19950531, 19670323) | matches : loser_ht (172, 180, 177), winner_ioc (\"BEL\", \"ROU\", \"DEN\"), tourney_id (\"2017-1097\", \"2016-0710\", \"2016-1082\"), loser_seed (21, 17, 19), tourney_level (\"P\", \"P\", \"W\"), year (2013, 2016, 2017), match_num (280, 258, 226), draw_size (64, 32, 32), loser_rank (40, 17, 25), minutes (90, 88, 147), loser_age (26.527036276500002, 31.5564681725, 24.985626283400002), surface (\"Hard\", \"Clay\", \"Grass\"), winner_rank (30, 5, 31), tourney_name (\"Auckland\", \"Kaohsiung\", \"Strasbourg\"), winner_seed (30, 10, 24), winner_ht (159, 175, 184), winner_hand (\"R\", \"L\"), winner_entry (\"\"), best_of (3), tourney_date (20160829, 20160118, 20170220), score (\"6-3 4-6 6-2\", \"7-5 6-0\", \"7-6(6) 7-6(4)\"), loser_rank_points (1590, 3280, 2871), winner_rank_points (4345, 3135, 1715), round (\"QF\", \"R32\", \"R32\"), loser_ioc (\"ESP\", \"ROU\", \"SVK\"), winner_name (\"Lucie Safarova\", \"Alize Cornet\", \"Garbine Muguruza\"), loser_id (201662, 201421, 201493), loser_entry (\"\"), loser_hand (\"R\", \"L\"), loser_name (\"Lucie Safarova\", \"Jelena Jankovic\", \"Ekaterina Makarova\"), winner_age (23.811088295700003, 21.472963723499998, 24.4435318275), winner_id (201521, 201595, 201504)", 
        "new_table_name": "matches_loser_rank", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "matches", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select min(loser_rank) from matches", 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "loser_rank", 
            ")", 
            "FROM", 
            "matches"
        ]
    }, 
    {
        "query2": "select avg_ranking, first_name from players_rankings_ranking", 
        "schema_without_content": "matches : minutes , loser_entry , surface , tourney_id , score  7-6\", winner_name , winner_rank , loser_rank_points , winner_rank_points , tourney_name , loser_id , match_num , winner_seed , winner_ht , best_of , tourney_level , winner_hand , round , draw_size , winner_ioc , tourney_date , loser_rank , loser_hand , winner_id , year , loser_ht , winner_age , loser_age , loser_seed , loser_name , winner_entry , loser_ioc  | players_rankings_ranking : min_ranking , sum_ranking , first_name , max_ranking , avg_ranking  | rankings : ranking_date , ranking , player_id , tours , ranking_points  | players : hand , player_id , first_name , last_name , country_code , birth_date ", 
        "query1": "select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "ranking", 
            ")", 
            ",", 
            "t1", 
            ".", 
            "first_name", 
            "from", 
            "players", 
            "as", 
            "t1", 
            "join", 
            "rankings", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "player_id", 
            "=", 
            "t2", 
            ".", 
            "player_id", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "first_name"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "ranking", 
            "for", 
            "each", 
            "player", 
            "and", 
            "their", 
            "first", 
            "name", 
            "."
        ], 
        "all_raw_cols": [
            "first_name", 
            "ranking"
        ], 
        "question": "Find the average ranking for each player and their first name.", 
        "all_cols": [
            "first_name", 
            "sum_ranking", 
            "avg_ranking", 
            "min_ranking", 
            "max_ranking"
        ], 
        "schema_with_content": "matches : minutes (128, 130, 69), loser_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_id (\"2017-560\", \"2016-M010\", \"2016-540\"), score (\"4-6 6-3 1-0 RET\", \"6-1 2-6 6-4\", \"6-3 6-7(2) 7-6(5)\"), winner_name (\"Sara Errani\", \"Irina Camelia Begu\", \"Garbine Muguruza\"), winner_rank (34, 7, 6), loser_rank_points (1571, 3100, 2140), winner_rank_points (4975, 2720, 1736), tourney_name (\"Monterrey\", \"Eastbourne\", \"'S-Hertogenbosch\"), loser_id (201496, 201311, 201518), match_num (223, 289, 156), winner_seed (4, 22, 21), winner_ht (179, 176, 177), best_of (3), tourney_level (\"P\", \"P\", \"G\"), winner_hand (\"R\", \"L\"), round (\"F\", \"R32\", \"R16\"), draw_size (128, 12, 32), winner_ioc (\"POL\", \"AUS\", \"HUN\"), tourney_date (20160620, 20170320, 20170213), loser_rank (12, 22, 9), loser_hand (\"R\", \"L\"), winner_id (201347, 201499, 201518), year (2013, 2016, 2017), loser_ht (175, 184, 161), winner_age (21.9055441478, 24.4407939767, 28.574948665300003), loser_age (29.8480492813, 30.078028747399998, 33.106091718), loser_seed (14, 29, 30), loser_name (\"Annika Beck\", \"Lesia Tsurenko\", \"Ana Ivanovic\"), winner_entry (\"\"), loser_ioc (\"USA\", \"ESP\", \"BEL\") | players_rankings_ranking : min_ranking (973, 78, 1227), sum_ranking (1209, 568, 557), first_name (\"Deena Rose\", \"Farley\", \"Oxi\"), max_ranking (638, 735, 1125), avg_ranking (484, 408, 957) | rankings : ranking_date (19990201, 19920420, 19911014), ranking (719, 569, 968), player_id (215520, 213944, 206248), tours (23, 2, 14), ranking_points (11501, 929, 3080) | players : hand (\"R\", \"\", \"U\"), player_id (202812, 204598, 213072), first_name (\"Tajana\", \"Barbora\", \"Ioana Florentina\"), last_name (\"Vlak\", \"Kubicikova\", \"Vliegen\"), country_code (\"RHO\", \"AUS\", \"PHI\"), birth_date (19970115, 19590216, 19851121)", 
        "new_table_name": "players_rankings_ranking", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "players", 
                "player_id"
            ], 
            [
                "rankings", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ], 
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    2, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                40, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "ranking", 
            ")", 
            ",", 
            "T1.first_name", 
            "FROM", 
            "players", 
            "AS", 
            "T1", 
            "JOIN", 
            "rankings", 
            "AS", 
            "T2", 
            "ON", 
            "T1.player_id", 
            "=", 
            "T2.player_id", 
            "GROUP", 
            "BY", 
            "T1.first_name"
        ]
    }, 
    {
        "query2": "select avg_ranking, first_name from players_rankings_ranking", 
        "schema_without_content": "players_rankings_ranking : sum_ranking , min_ranking , first_name , max_ranking , avg_ranking  | rankings : player_id , ranking_date , tours , ranking_points , ranking  | matches : winner_hand , tourney_date , loser_ht , loser_seed , winner_entry , loser_name , loser_id , best_of , match_num , tourney_id , winner_rank_points , loser_ioc , loser_age , tourney_level , loser_hand , minutes , winner_seed , winner_ht , tourney_name , draw_size , loser_rank , surface , winner_ioc , winner_age , score  6-3\", \"4-6 7-5 6-1\", \"6-2 3-6 6-2\", winner_name , round , loser_entry , winner_rank , winner_id , loser_rank_points , year  | players : first_name , birth_date , player_id , country_code , hand , last_name ", 
        "query1": "select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "ranking", 
            ")", 
            ",", 
            "t1", 
            ".", 
            "first_name", 
            "from", 
            "players", 
            "as", 
            "t1", 
            "join", 
            "rankings", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "player_id", 
            "=", 
            "t2", 
            ".", 
            "player_id", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "first_name"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "first", 
            "names", 
            "of", 
            "all", 
            "players", 
            ",", 
            "and", 
            "their", 
            "average", 
            "rankings", 
            "?"
        ], 
        "all_raw_cols": [
            "first_name", 
            "ranking"
        ], 
        "question": "What are the first names of all players, and their average rankings?", 
        "all_cols": [
            "first_name", 
            "sum_ranking", 
            "avg_ranking", 
            "min_ranking", 
            "max_ranking"
        ], 
        "schema_with_content": "players_rankings_ranking : sum_ranking (621, 881, 886), min_ranking (269, 1305, 1051), first_name (\"Devi\", \"Natthapat\", \"Esperanza\"), max_ranking (647, 1503, 1103), avg_ranking (1065, 1354, 179) | rankings : player_id (213826, 206005, 203454), ranking_date (19960304, 19930412, 19870803), tours (9, 28, 26), ranking_points (2462, 1742, 8245), ranking (1462, 1085, 139) | matches : winner_hand (\"R\", \"L\"), tourney_date (20160111, 20160208, 20170220), loser_ht (162, 183, 185), loser_seed (31, 21, 1), winner_entry (\"\"), loser_name (\"Magdalena Rybarikova\", \"Christina Mchale\", \"Carla Suarez Navarro\"), loser_id (200748, 201619, 201594), best_of (3), match_num (209, 218, 278), tourney_id (\"2017-M035\", \"2016-1048\", \"2016-1075\"), winner_rank_points (4728, 1377, 3540), loser_ioc (\"AUS\", \"BEL\", \"BEL\"), loser_age (23.961670089000002, 28.421629021199998, 23.227926078000003), tourney_level (\"W\", \"I\", \"W\"), loser_hand (\"R\", \"L\"), minutes (121, 109, 114), winner_seed (12, 28, 28), winner_ht (161, 184, 179), tourney_name (\"Toronto\", \"Monterrey\", \"'S-Hertogenbosch\"), draw_size (12, 12, 64), loser_rank (52, 59, 36), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ioc (\"ESP\", \"BLR\", \"CHN\"), winner_age (30.250513347, 22.6228610541, 32.0164271047), score (\"6-2 6-7(3) 6-3\", \"4-6 7-5 6-1\", \"6-2 3-6 6-2\"), winner_name (\"Victoria Azarenka\", \"Irina Camelia Begu\", \"Lesia Tsurenko\"), round (\"QF\", \"R16\", \"R32\"), loser_entry (\"\"), winner_rank (35, 13, 24), winner_id (201593, 201493, 201504), loser_rank_points (2585, 2050, 5386), year (2013, 2016, 2017) | players : first_name (\"Shirli Ann\", \"Shiri\", \"Emerald\"), birth_date (19910601, 19971027, 19920310), player_id (212774, 214054, 206711), country_code (\"IRQ\", \"BOL\", \"HKG\"), hand (\"R\", \"L\", \"\"), last_name (\"Zhuk\", \"Lucero\", \"Benzeggouta\")", 
        "new_table_name": "players_rankings_ranking", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "players", 
                "player_id"
            ], 
            [
                "rankings", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ], 
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    2, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                40, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "ranking", 
            ")", 
            ",", 
            "T1.first_name", 
            "FROM", 
            "players", 
            "AS", 
            "T1", 
            "JOIN", 
            "rankings", 
            "AS", 
            "T2", 
            "ON", 
            "T1.player_id", 
            "=", 
            "T2.player_id", 
            "GROUP", 
            "BY", 
            "T1.first_name"
        ]
    }, 
    {
        "query2": "select sum_ranking_points, first_name from players_rankings_ranking_points", 
        "schema_without_content": "matches : best_of , loser_age , minutes , round , winner_name , winner_age , tourney_name , winner_seed , loser_name , winner_rank , winner_entry , surface , loser_hand , loser_entry , winner_hand , score  6-2 8-6\", year , winner_rank_points , loser_ioc , loser_id , winner_ioc , match_num , loser_rank_points , loser_ht , winner_ht , tourney_date , loser_rank , tourney_level , tourney_id , winner_id , loser_seed , draw_size  | rankings : tours , ranking , ranking_date , player_id , ranking_points  | players : hand , first_name , birth_date , player_id , country_code , last_name  | players_rankings_ranking_points : first_name , max_ranking_points , avg_ranking_points , min_ranking_points , sum_ranking_points ", 
        "query1": "select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "ranking_points", 
            ")", 
            ",", 
            "t1", 
            ".", 
            "first_name", 
            "from", 
            "players", 
            "as", 
            "t1", 
            "join", 
            "rankings", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "player_id", 
            "=", 
            "t2", 
            ".", 
            "player_id", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "first_name"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "total", 
            "ranking", 
            "points", 
            "for", 
            "each", 
            "player", 
            "and", 
            "their", 
            "first", 
            "name", 
            "."
        ], 
        "all_raw_cols": [
            "first_name", 
            "ranking_points"
        ], 
        "question": "Find the total ranking points for each player and their first name.", 
        "all_cols": [
            "first_name", 
            "sum_ranking_points", 
            "avg_ranking_points", 
            "min_ranking_points", 
            "max_ranking_points"
        ], 
        "schema_with_content": "matches : best_of (3), loser_age (23.8877481177, 31.3264887064, 27.0034223135), minutes (93, 103, 103), round (\"R16\", \"SF\", \"BR\"), winner_name (\"Na Li\", \"Barbora Zahlavova Strycova\", \"Irina Camelia Begu\"), winner_age (34.924024640700004, 28.6105407255, 23.8877481177), tourney_name (\"French Open\", \"s-Hertogenbosch\", \"Cincinnati\"), winner_seed (3, 6, 24), loser_name (\"Annika Beck\", \"Christina Mchale\", \"Ekaterina Makarova\"), winner_rank (20, 10, 17), winner_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_hand (\"R\", \"L\"), loser_entry (\"\"), winner_hand (\"R\", \"L\"), score (\"7-5 6-0\", \"6-2 4-6 6-3\", \"6-7(1) 6-2 8-6\"), year (2013, 2016, 2017), winner_rank_points (2196, 2390, 1768), loser_ioc (\"SWE\", \"BLR\", \"SUI\"), loser_id (201540, 200748, 201505), winner_ioc (\"AUS\", \"CZE\", \"USA\"), match_num (208, 272, 281), loser_rank_points (4555, 785, 6850), loser_ht (170, 168, 168), winner_ht (163, 181, 184), tourney_date (20170220, 20160321, 20160606), loser_rank (33, 39, 15), tourney_level (\"I\", \"G\", \"G\"), tourney_id (\"2016-1050\", \"2017-0718\", \"2016-1075\"), winner_id (202469, 201535, 201520), loser_seed (6, 25, 3), draw_size (128, 32, 8) | rankings : tours (37, 26, 4), ranking (533, 303, 1274), ranking_date (19950410, 19900910, 20041004), player_id (211472, 206220, 213636), ranking_points (1620, 1419, 5695) | players : hand (\"R\", \"R\", \"R\"), first_name (\"Assem\", \"Karmelina\", \"Jheni\"), birth_date (19870108, 19780709, 19710211), player_id (209433, 203699, 201961), country_code (\"ETH\", \"UAE\", \"NED\"), last_name (\"Anastasiu\", \"De Kok\", \"Evtushenko\") | players_rankings_ranking_points : first_name (\"Marlie\", \"Raluca Daniela\", \"Hristiana\"), max_ranking_points (4595, 779, 485), avg_ranking_points (9970, 862, 4025), min_ranking_points (2830, 1462, 273), sum_ranking_points (10045, 1667, 945)", 
        "new_table_name": "players_rankings_ranking_points", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "players", 
                "player_id"
            ], 
            [
                "rankings", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ], 
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    2, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "ranking_points", 
            ")", 
            ",", 
            "T1.first_name", 
            "FROM", 
            "players", 
            "AS", 
            "T1", 
            "JOIN", 
            "rankings", 
            "AS", 
            "T2", 
            "ON", 
            "T1.player_id", 
            "=", 
            "T2.player_id", 
            "GROUP", 
            "BY", 
            "T1.first_name"
        ]
    }, 
    {
        "query2": "select sum_ranking_points, first_name from players_rankings_ranking_points", 
        "schema_without_content": "matches : match_num , tourney_id , winner_name , loser_age , loser_rank , tourney_level , loser_ioc , loser_id , surface , tourney_date , draw_size , tourney_name , loser_entry , loser_hand , round , winner_entry , loser_seed , minutes , loser_name , score \", winner_id , winner_ht , winner_rank , winner_hand , loser_ht , winner_rank_points , winner_age , best_of , winner_seed , loser_rank_points , year , winner_ioc  | players_rankings_ranking_points : min_ranking_points , first_name , sum_ranking_points , avg_ranking_points , max_ranking_points  | rankings : player_id , tours , ranking_date , ranking_points , ranking  | players : player_id , country_code , birth_date , hand , last_name , first_name ", 
        "query1": "select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "ranking_points", 
            ")", 
            ",", 
            "t1", 
            ".", 
            "first_name", 
            "from", 
            "players", 
            "as", 
            "t1", 
            "join", 
            "rankings", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "player_id", 
            "=", 
            "t2", 
            ".", 
            "player_id", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "first_name"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "first", 
            "names", 
            "of", 
            "all", 
            "players", 
            ",", 
            "and", 
            "their", 
            "total", 
            "ranking", 
            "points", 
            "?"
        ], 
        "all_raw_cols": [
            "first_name", 
            "ranking_points"
        ], 
        "question": "What are the first names of all players, and their total ranking points?", 
        "all_cols": [
            "first_name", 
            "sum_ranking_points", 
            "avg_ranking_points", 
            "min_ranking_points", 
            "max_ranking_points"
        ], 
        "schema_with_content": "matches : match_num (212, 201, 298), tourney_id (\"2017-1003\", \"2016-0703\", \"2016-M010\"), winner_name (\"Yanina Wickmayer\", \"Yanina Wickmayer\", \"Karolina Pliskova\"), loser_age (28.402464065700002, 24.889801505799998, 28.7036276523), loser_rank (39, 23, 56), tourney_level (\"P\", \"I\", \"G\"), loser_ioc (\"RUS\", \"SVK\", \"JPN\"), loser_id (201347, 201495, 201517), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_date (20170522, 20160321, 20160118), draw_size (8, 64, 4), tourney_name (\"Singapore\", \"Beijing\", \"Charleston\"), loser_entry (\"\"), loser_hand (\"R\", \"L\"), round (\"F\", \"R32\", \"QF\"), winner_entry (\"\"), loser_seed (19, 29, 13), minutes (85, 94, 69), loser_name (\"Ana Ivanovic\", \"Johanna Larsson\", \"Sara Errani\"), score (\"2-6 6-3 1-0 RET\", \"5-7 6-4 6-1\", \"6-4 7-6(2)\"), winner_id (201499, 201474, 201493), winner_ht (179, 185, 170), winner_rank (16, 1, 13), winner_hand (\"R\", \"L\"), loser_ht (180, 181, 170), winner_rank_points (3855, 3060, 4100), winner_age (25.7522245038, 24.9965776865, 22.6228610541), best_of (3), winner_seed (14, 27, 13), loser_rank_points (2580, 3752, 2843), year (2013, 2016, 2017), winner_ioc (\"HUN\", \"ROU\", \"SVK\") | players_rankings_ranking_points : min_ranking_points (1681, 447, 3370), first_name (\"Pei Yu\", \"Sem\", \"Laura Alejandra\"), sum_ranking_points (531, 2954, 2095), avg_ranking_points (3346, 3725, 348), max_ranking_points (3012, 2861, 1) | rankings : player_id (202580, 201647, 208531), tours (20, 4, 14), ranking_date (19921130, 20080602, 20070611), ranking_points (3621, 2550, 1768), ranking (136, 131, 942) | players : player_id (214913, 201878, 206786), country_code (\"CHN\", \"SUI\", \"JOR\"), birth_date (19690131, 19740430, 19890415), hand (\"\", \"R\", \"R\"), last_name (\"Suga\", \"Karanjkar\", \"Sul\"), first_name (\"Guiomar\", \"Kazusa\", \"Krushmi\")", 
        "new_table_name": "players_rankings_ranking_points", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "players", 
                "player_id"
            ], 
            [
                "rankings", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ], 
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    2, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "ranking_points", 
            ")", 
            ",", 
            "T1.first_name", 
            "FROM", 
            "players", 
            "AS", 
            "T1", 
            "JOIN", 
            "rankings", 
            "AS", 
            "T2", 
            "ON", 
            "T1.player_id", 
            "=", 
            "T2.player_id", 
            "GROUP", 
            "BY", 
            "T1.first_name"
        ]
    }, 
    {
        "query2": "select sum_tours, ranking_date from rankings_tours", 
        "schema_without_content": "rankings_tours : ranking_date , sum_tours , avg_tours , max_tours , min_tours  | players : birth_date , first_name , hand , last_name , player_id , country_code  | rankings : ranking_date , ranking_points , player_id , tours , ranking  | matches : score \", \"6-3 6-7 7-6\", \"7-6 6-3\", loser_seed , surface , tourney_level , loser_id , loser_hand , winner_rank_points , loser_ht , tourney_id , winner_id , best_of , tourney_date , winner_name , loser_ioc , loser_rank_points , loser_entry , winner_rank , match_num , loser_rank , winner_age , round , tourney_name , minutes , winner_ht , winner_ioc , loser_name , loser_age , draw_size , winner_entry , winner_seed , winner_hand , year ", 
        "query1": "select sum(tours), ranking_date from rankings group by ranking_date", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "tours", 
            ")", 
            ",", 
            "ranking_date", 
            "from", 
            "rankings", 
            "group", 
            "by", 
            "ranking_date"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "total", 
            "number", 
            "of", 
            "tours", 
            "for", 
            "each", 
            "ranking", 
            "date", 
            "."
        ], 
        "all_raw_cols": [
            "ranking_date", 
            "tours"
        ], 
        "question": "Find the total number of tours for each ranking date.", 
        "all_cols": [
            "ranking_date", 
            "sum_tours", 
            "avg_tours", 
            "min_tours", 
            "max_tours"
        ], 
        "schema_with_content": "rankings_tours : ranking_date (20070910, 19881114, 20030512), sum_tours (29, 22, 35), avg_tours (8, 39, 5), max_tours (29, 19, 37), min_tours (39, 27, 15) | players : birth_date (19970724, 19840414, 19810527), first_name (\"Ashvarya\", \"Hania\", \"Amie\"), hand (\"\", \"L\", \"R\"), last_name (\"Gardner\", \"Gioria\", \"Miklosava\"), player_id (200022, 216075, 201110), country_code (\"SMR\", \"rc=\", \"GUD\") | rankings : ranking_date (20030915, 19910930, 19980511), ranking_points (5096, 1223, 1648), player_id (202485, 203381, 214347), tours (5, 15, 28), ranking (1327, 481, 1284) | matches : score (\"6-4 7-6(5)\", \"6-3 6-7(3) 7-6(4)\", \"7-6(1) 6-3\"), loser_seed (26, 23, 32), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_level (\"W\", \"G\", \"P\"), loser_id (201458, 201505, 201425), loser_hand (\"R\", \"L\"), winner_rank_points (3915, 8235, 7080), loser_ht (161, 176, 176), tourney_id (\"2017-0804\", \"2016-M009\", \"2016-M007\"), winner_id (201495, 201504, 201427), best_of (3), tourney_date (20160509, 20160613, 20170612), winner_name (\"Camila Giorgi\", \"Johanna Larsson\", \"Elena Vesnina\"), loser_ioc (\"RUS\", \"BEL\", \"RUS\"), loser_rank_points (3625, 3325, 4790), loser_entry (\"\"), winner_rank (43, 40, 82), match_num (199, 221, 208), loser_rank (25, 66, 21), winner_age (24.750171115700002, 24.958247775500002, 24.8843258042), round (\"F\", \"RR\", \"BR\"), tourney_name (\"Indian Wells\", \"Dubai\", \"Rabat\"), minutes (83, 46, 121), winner_ht (163, 174, 176), winner_ioc (\"AUS\", \"BEL\", \"RUS\"), loser_name (\"Camila Giorgi\", \"Roberta Vinci\", \"Shuai Peng\"), loser_age (27.3867214237, 33.106091718, 28.1724845996), draw_size (128, 8, 12), winner_entry (\"\"), winner_seed (15, 14, 19), winner_hand (\"R\", \"L\"), year (2013, 2016, 2017)", 
        "new_table_name": "rankings_tours", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "rankings", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    39, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                39, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(tours), ranking_date from rankings group by ranking_date", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "tours", 
            ")", 
            ",", 
            "ranking_date", 
            "FROM", 
            "rankings", 
            "GROUP", 
            "BY", 
            "ranking_date"
        ]
    }, 
    {
        "query2": "select sum_tours, ranking_date from rankings_tours", 
        "schema_without_content": "players : birth_date , country_code , first_name , hand , player_id , last_name  | matches : year , loser_id , loser_rank_points , best_of , winner_ioc , winner_ht , winner_hand , minutes , loser_entry , loser_ioc , winner_seed , loser_rank , round , tourney_date , match_num , winner_rank , winner_id , score  6-3\", \"6-2 6-7 6-3\", \"7-6 6-3\", winner_name , winner_rank_points , loser_name , loser_hand , winner_entry , loser_age , tourney_level , surface , loser_ht , loser_seed , winner_age , tourney_name , draw_size , tourney_id  | rankings : ranking , player_id , tours , ranking_points , ranking_date  | rankings_tours : min_tours , avg_tours , sum_tours , ranking_date , max_tours ", 
        "query1": "select sum(tours), ranking_date from rankings group by ranking_date", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "tours", 
            ")", 
            ",", 
            "ranking_date", 
            "from", 
            "rankings", 
            "group", 
            "by", 
            "ranking_date"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "total", 
            "tours", 
            "were", 
            "there", 
            "for", 
            "each", 
            "ranking", 
            "date", 
            "?"
        ], 
        "all_raw_cols": [
            "ranking_date", 
            "tours"
        ], 
        "question": "How many total tours were there for each ranking date?", 
        "all_cols": [
            "ranking_date", 
            "sum_tours", 
            "avg_tours", 
            "min_tours", 
            "max_tours"
        ], 
        "schema_with_content": "players : birth_date (19991225, 19780106, 19950322), country_code (\"TTO\", \"SVK\", \"SRB\"), first_name (\"Viktoryia\", \"Elitza\", \"Vandana\"), hand (\"\", \"U\", \"U\"), player_id (207683, 215701, 206770), last_name (\"Mandlik\", \"Van Der Linden\", \"Munch Soegaard\") | matches : year (2013, 2016, 2017), loser_id (201527, 201506, 201596), loser_rank_points (8300, 2695, 5481), best_of (3), winner_ioc (\"DEN\", \"GER\", \"JPN\"), winner_ht (179, 178, 159), winner_hand (\"R\", \"L\"), minutes (79, 176, 120), loser_entry (\"\"), loser_ioc (\"RUS\", \"RUS\", \"ESP\"), winner_seed (11, 22, 10), loser_rank (5, 11, 17), round (\"SF\", \"RR\", \"RR\"), tourney_date (20170814, 20170501, 20160307), match_num (287, 212, 215), winner_rank (34, 30, 48), winner_id (201520, 202428, 201593), score (\"7-6(0) 6-3\", \"6-2 6-7(3) 6-3\", \"7-6(2) 6-3\"), winner_name (\"Yanina Wickmayer\", \"Jelena Jankovic\", \"Karolina Pliskova\"), winner_rank_points (2240, 3485, 8235), loser_name (\"Sara Errani\", \"Timea Babos\", \"Victoria Azarenka\"), loser_hand (\"R\", \"L\"), winner_entry (\"\"), loser_age (31.613963039, 28.4353182752, 26.6529774127), tourney_level (\"G\", \"P\", \"I\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ht (181, 182, 182), loser_seed (4, 6, 6), winner_age (24.041067761799997, 23.961670089000002, 27.635865845300003), tourney_name (\"Rabat\", \"Rabat\", \"Budapest\"), draw_size (64, 8, 8), tourney_id (\"2016-0528\", \"2017-540\", \"2016-0528\") | rankings : ranking (769, 910, 1358), player_id (211725, 206130, 202473), tours (24, 16, 4), ranking_points (1757, 2352, 1539), ranking_date (20030113, 19891002, 19951002) | rankings_tours : min_tours (0, 16, 2), avg_tours (2, 20, 1), sum_tours (9, 23, 27), ranking_date (20131014, 20061113, 19921123), max_tours (30, 27, 36)", 
        "new_table_name": "rankings_tours", 
        "db_id": "wta_1", 
        "tables_with_pkeys": [
            [
                "rankings", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    39, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                39, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(tours), ranking_date from rankings group by ranking_date", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "tours", 
            ")", 
            ",", 
            "ranking_date", 
            "FROM", 
            "rankings", 
            "GROUP", 
            "BY", 
            "ranking_date"
        ]
    }, 
    {
        "query2": "select max_killed, min_killed from death_killed", 
        "schema_without_content": "battle : name , latin_commander , date , id , result , bulgarian_commander  | death_killed : max_killed , sum_killed , avg_killed , min_killed  | death : note , caused_by_ship_id , id , killed , injured  | ship : name , tonnage , ship_type , lost_in_battle , location , disposition_of_ship , id ", 
        "query1": "select max(killed), min(killed) from death", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "killed", 
            ")", 
            ",", 
            "min", 
            "(", 
            "killed", 
            ")", 
            "from", 
            "death"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "maximum", 
            "and", 
            "minimum", 
            "death", 
            "toll", 
            "caused", 
            "each", 
            "time", 
            "?"
        ], 
        "all_raw_cols": [
            "killed"
        ], 
        "question": "What is maximum and minimum death toll caused each time?", 
        "all_cols": [
            "sum_killed", 
            "avg_killed", 
            "min_killed", 
            "max_killed"
        ], 
        "schema_with_content": "battle : name (\"Battle of Messinopolis\", \"Battle of Messinopolis\", \"Siege of Constantinople\"), latin_commander (\"John of Brienne\", \"Henry I\", \"Boniface of Montferrat\"), date (\"14 April 1205\", \"14 April 1205\", \"31 January 1206\"), id (5, 7, 3), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), bulgarian_commander (\"Boril\", \"Unknown\", \"Ivan Asen II\") | death_killed : max_killed (4, 29, 14), sum_killed (8, 29, 0), avg_killed (0, 29, 14), min_killed (29, 8, 8) | death : note (\"Bokaro, Jharkhand\", \"Bokaro, Jharkhand\", \"East Champaran, Bihar\"), caused_by_ship_id (6, 1, 5), id (13, 3, 13), killed (3, 25, 3), injured (0, 9, 5) | ship : name (\"Bon Accord\", \"Bacchus\", \"Lettice\"), tonnage (\"t\", \"391\", \"225\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), lost_in_battle (8, 8, 6), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), disposition_of_ship (\"Captured\", \"Captured\", \"Captured\"), id (3, 5, 7)", 
        "new_table_name": "death_killed", 
        "db_id": "battle_death", 
        "tables_with_pkeys": [
            [
                "death", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(killed), min(killed) from death", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "killed", 
            ")", 
            ",", 
            "min", 
            "(", 
            "killed", 
            ")", 
            "FROM", 
            "death"
        ]
    }, 
    {
        "query2": "select avg_injured from death_injured", 
        "schema_without_content": "ship : disposition_of_ship , id , location , lost_in_battle , ship_type , name , tonnage  | death : id , note , killed , injured , caused_by_ship_id  | death_injured : max_injured , min_injured , avg_injured , sum_injured  | battle : bulgarian_commander , id , name , result , date , latin_commander ", 
        "query1": "select avg(injured) from death", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "injured", 
            ")", 
            "from", 
            "death"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "number", 
            "of", 
            "injuries", 
            "caused", 
            "each", 
            "time", 
            "?"
        ], 
        "all_raw_cols": [
            "injured"
        ], 
        "question": "What is the average number of injuries caused each time?", 
        "all_cols": [
            "sum_injured", 
            "avg_injured", 
            "min_injured", 
            "max_injured"
        ], 
        "schema_with_content": "ship : disposition_of_ship (\"Sank\", \"Scuttled\", \"Scuttled\"), id (2, 1, 6), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), lost_in_battle (4, 6, 6), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"Mary\", \"HMS Avon\", \"Lettice\"), tonnage (\"t\", \"391\", \"225\") | death : id (2, 12, 1), note (\"Dantewada, Chhattisgarh\", \"WestMidnapore, West Bengal\", \"Kanker, Chhattisgarh\"), killed (29, 8, 29), injured (0, 9, 5), caused_by_ship_id (3, 6, 3) | death_injured : max_injured (0, 9, 5), min_injured (0, 9, 5), avg_injured (0, 9, 5), sum_injured (0, 9, 5) | battle : bulgarian_commander (\"Kaloyan\", \"Ivan Asen II\", \"Boril\"), id (3, 1, 4), name (\"Battle of Serres\", \"Battle of Messinopolis\", \"Battle of Philippopolis\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), date (\"31 June 1208\", \"31 June 1208\", \"1235\"), latin_commander (\"Thierry de Termond\", \"John of Brienne\", \"Henry I\")", 
        "new_table_name": "death_injured", 
        "db_id": "battle_death", 
        "tables_with_pkeys": [
            [
                "death", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(injured) from death", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "injured", 
            ")", 
            "FROM", 
            "death"
        ]
    }, 
    {
        "query2": "select id, name from battle_ship_death_killed where sum_killed > 10", 
        "schema_without_content": "death : note , id , killed , injured , caused_by_ship_id  | ship : name , lost_in_battle , location , id , ship_type , tonnage , disposition_of_ship  | battle_ship_death_killed : sum_killed , id , max_killed , name , avg_killed , min_killed  | battle : id , latin_commander , result , name , bulgarian_commander , date ", 
        "query1": "select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle join death as t3 on t2.id = t3.caused_by_ship_id group by t1.id having sum(t3.killed) > 10", 
        "query_toks_no_value": [
            "select", 
            "t1", 
            ".", 
            "id", 
            ",", 
            "t1", 
            ".", 
            "name", 
            "from", 
            "battle", 
            "as", 
            "t1", 
            "join", 
            "ship", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "id", 
            "=", 
            "t2", 
            ".", 
            "lost_in_battle", 
            "join", 
            "death", 
            "as", 
            "t3", 
            "on", 
            "t2", 
            ".", 
            "id", 
            "=", 
            "t3", 
            ".", 
            "caused_by_ship_id", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "id", 
            "having", 
            "sum", 
            "(", 
            "t3", 
            ".", 
            "killed", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "ids", 
            "and", 
            "names", 
            "of", 
            "the", 
            "battles", 
            "that", 
            "led", 
            "to", 
            "more", 
            "than", 
            "10", 
            "people", 
            "killed", 
            "in", 
            "total", 
            "."
        ], 
        "all_raw_cols": [
            "id", 
            "name", 
            "killed"
        ], 
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", 
        "all_cols": [
            "id", 
            "name", 
            "sum_killed", 
            "avg_killed", 
            "min_killed", 
            "max_killed"
        ], 
        "schema_with_content": "death : note (\"Erraboru, Chhattisgarh\", \"Gajapati, Odisha\", \"Gajapati, Odisha\"), id (2, 7, 4), killed (29, 14, 8), injured (0, 9, 5), caused_by_ship_id (2, 3, 5) | ship : name (\"Bon Accord\", \"Lettice\", \"Bon Accord\"), lost_in_battle (7, 4, 4), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), id (1, 1, 2), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), tonnage (\"t\", \"391\", \"225\"), disposition_of_ship (\"Scuttled\", \"Scuttled\", \"Sank\") | battle_ship_death_killed : sum_killed (29, 2, 0), id (6, 5, 4), max_killed (25, 14, 29), name (\"Battle of Messinopolis\", \"Battle of Rusion\", \"Battle of Messinopolis\"), avg_killed (25, 3, 3), min_killed (4, 29, 0) | battle : id (8, 4, 2), latin_commander (\"Unknown\", \"Unknown\", \"Baldwin I\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), name (\"Battle of Boruy\", \"Battle of Rodosto\", \"Battle of Rodosto\"), bulgarian_commander (\"Boril\", \"Ivan Asen II\", \"Unknown\"), date (\"31 June 1208\", \"14 April 1205\", \"31 June 1208\")", 
        "new_table_name": "battle_ship_death_killed", 
        "db_id": "battle_death", 
        "tables_with_pkeys": [
            [
                "battle", 
                "id"
            ], 
            [
                "ship", 
                "id"
            ], 
            [
                "death", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ], 
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    1, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            4, 
                            17, 
                            false
                        ], 
                        null
                    ], 
                    10.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle join death as t3 on t2.id = t3.caused_by_ship_id group by t1.id having sum(t3.killed) > 10", 
        "query_toks": [
            "SELECT", 
            "T1.id", 
            ",", 
            "T1.name", 
            "FROM", 
            "battle", 
            "AS", 
            "T1", 
            "JOIN", 
            "ship", 
            "AS", 
            "T2", 
            "ON", 
            "T1.id", 
            "=", 
            "T2.lost_in_battle", 
            "JOIN", 
            "death", 
            "AS", 
            "T3", 
            "ON", 
            "T2.id", 
            "=", 
            "T3.caused_by_ship_id", 
            "GROUP", 
            "BY", 
            "T1.id", 
            "HAVING", 
            "sum", 
            "(", 
            "T3.killed", 
            ")", 
            ">", 
            "10"
        ]
    }, 
    {
        "query2": "select avg_transcript_date from transcripts_transcript_date", 
        "schema_without_content": "transcript_contents : student_course_id , transcript_id  | student_enrolment : other_details , student_id , student_enrolment_id , degree_program_id , semester_id  | addresses : city , state_province_county , zip_postcode , line_3 , address_id , country , line_1 , other_address_details , line_2  | students : email_address , permanent_address_id , ssn , date_left , cell_mobile_number , last_name , current_address_id , other_student_details , date_first_registered , middle_name , student_id , first_name  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts_transcript_date : max_transcript_date , avg_transcript_date , sum_transcript_date , min_transcript_date  | sections : course_id , other_details , section_description , section_id , section_name  | degree_programs : degree_summary_name , department_id , degree_summary_description , other_details , degree_program_id  | transcripts : other_details , transcript_date , transcript_id  | courses : course_description , course_id , course_name , other_details  | departments : department_name , department_description , other_details , department_id  | semesters : other_details , semester_id , semester_name , semester_description ", 
        "query1": "select avg(transcript_date) from transcripts", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "transcript_date", 
            ")", 
            "from", 
            "transcripts"
        ], 
        "question_toks": [
            "On", 
            "average", 
            ",", 
            "when", 
            "were", 
            "the", 
            "transcripts", 
            "printed", 
            "?"
        ], 
        "all_raw_cols": [
            "transcript_date"
        ], 
        "question": "On average, when were the transcripts printed?", 
        "all_cols": [
            "sum_transcript_date", 
            "avg_transcript_date", 
            "min_transcript_date", 
            "max_transcript_date"
        ], 
        "schema_with_content": "transcript_contents : student_course_id (28982908, 28982908, 96), transcript_id (15, 4, 13) | student_enrolment : other_details (None), student_id (7, 14, 4), student_enrolment_id (13, 4, 8), degree_program_id (10, 4, 2), semester_id (6, 4, 6) | addresses : city (\"Prohaskafort\", \"Rutherfordtown\", \"Port Oceane\"), state_province_county (\"Florida\", \"Kentucky\", \"SouthDakota\"), zip_postcode (\"400\", \"777\", \"777\"), line_3 (None), address_id (3, 11, 12), country (\"Norfolk Island\", \"Norfolk Island\", \"Burundi\"), line_1 (\"67942 Carlotta Ferry Apt. 686\", \"202 Hessel Views Apt. 468\", \"16998 Mraz Lodge\"), other_address_details (None), line_2 (\"Apt. 335\", \"Suite 865\", \"Apt. 388\") | students : email_address (\"beth42@example.org\", \"lhartmann@example.org\", \"gracie29@example.com\"), permanent_address_id (15, 11, 5), ssn (\"43\", \"668\", \"39\"), date_left (\"1999-08-24 00:07:10\", \"1982-06-11 00:25:39\", \"2016-04-09 12:27:04\"), cell_mobile_number (\"677.401.9382\", \"07661787471\", \"03174364122\"), last_name (\"Balistreri\", \"Mohr\", \"Schuppe\"), current_address_id (7, 1, 7), other_student_details (\"dolorum\", \"omnis\", \"et\"), date_first_registered (\"1982-06-19 13:15:18\", \"1976-10-26 02:33:06\", \"2018-03-13 09:56:22\"), middle_name (\"Brooklyn\", \"Lorenz\", \"Aaliyah\"), student_id (10, 14, 8), first_name (\"Milton\", \"Orrin\", \"Reva\") | student_enrolment_courses : course_id (6, 11, 3), student_enrolment_id (4, 4, 13), student_course_id (438800, 70882679, 1) | transcripts_transcript_date : max_transcript_date (\"1975-05-20 18:31:21\", \"1999-01-06 20:06:46\", \"1975-10-28 15:16:51\"), avg_transcript_date (\"2013-06-30 13:01:40\", \"1984-01-18 23:07:07\", \"1975-05-20 18:31:21\"), sum_transcript_date (\"2013-06-30 13:01:40\", \"1988-04-30 01:19:47\", \"1999-01-06 20:06:46\"), min_transcript_date (\"1999-01-06 20:06:46\", \"1975-10-28 15:16:51\", \"1990-03-05 11:59:41\") | sections : course_id (8, 12, 7), other_details (None), section_description (\"voluptatem\", \"provident\", \"facilis\"), section_id (4, 8, 9), section_name (\"u\", \"e\", \"f\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (13, 11, 3), degree_summary_description (\"qui\", \"et\", \"aperiam\"), other_details (None), degree_program_id (10, 5, 12) | transcripts : other_details (None), transcript_date (\"1999-01-06 20:06:46\", \"1975-10-28 15:16:51\", \"1984-01-18 23:07:07\"), transcript_id (8, 7, 7) | courses : course_description (\"b\", \"b\", \"v\"), course_id (2, 5, 15), course_name (\"ai\", \"la\", \"ds\"), other_details (None) | departments : department_name (\"art\", \"art\", \"medical\"), department_description (\"nihil\", \"non\", \"ea\"), other_details (None), department_id (5, 8, 3) | semesters : other_details (None), semester_id (9, 1, 14), semester_name (\"spring 2014\", \"spring 2019\", \"spring 2017\"), semester_description (\"x\", \"o\", \"c\")", 
        "new_table_name": "transcripts_transcript_date", 
        "db_id": "student_transcripts_tracking", 
        "tables_with_pkeys": [
            [
                "transcripts", 
                "transcript_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        9
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                53, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(transcript_date) from transcripts", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "transcript_date", 
            ")", 
            "FROM", 
            "Transcripts"
        ]
    }, 
    {
        "query2": "select avg_transcript_date from transcripts_transcript_date", 
        "schema_without_content": "transcripts_transcript_date : avg_transcript_date , max_transcript_date , min_transcript_date , sum_transcript_date  | student_enrolment : other_details , student_id , semester_id , student_enrolment_id , degree_program_id  | students : student_id , date_left , permanent_address_id , first_name , cell_mobile_number 919-3594x3661\", \"03174364122\", date_first_registered , ssn , current_address_id , last_name , email_address , middle_name , other_student_details  | degree_programs : department_id , other_details , degree_summary_name , degree_summary_description , degree_program_id  | sections : course_id , section_id , section_description , section_name , other_details  | transcripts : transcript_date , other_details , transcript_id  | addresses : country , line_2 , address_id , state_province_county , zip_postcode , line_3 , other_address_details , city , line_1  | transcript_contents : student_course_id , transcript_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | departments : other_details , department_name , department_id , department_description  | courses : course_description , other_details , course_id , course_name  | semesters : semester_name , other_details , semester_id , semester_description ", 
        "query1": "select avg(transcript_date) from transcripts", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "transcript_date", 
            ")", 
            "from", 
            "transcripts"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "transcript", 
            "date", 
            "?"
        ], 
        "all_raw_cols": [
            "transcript_date"
        ], 
        "question": "What is the average transcript date?", 
        "all_cols": [
            "sum_transcript_date", 
            "avg_transcript_date", 
            "min_transcript_date", 
            "max_transcript_date"
        ], 
        "schema_with_content": "transcripts_transcript_date : avg_transcript_date (\"2002-09-24 06:11:49\", \"2010-12-13 10:55:15\", \"1986-07-12 07:27:29\"), max_transcript_date (\"2002-09-24 06:11:49\", \"1975-05-06 12:04:47\", \"1984-01-18 23:07:07\"), min_transcript_date (\"1975-05-06 12:04:47\", \"1986-07-12 07:27:29\", \"1975-05-20 18:31:21\"), sum_transcript_date (\"1984-01-18 23:07:07\", \"1998-11-22 12:18:29\", \"1986-07-12 07:27:29\") | student_enrolment : other_details (None), student_id (1, 1, 9), semester_id (12, 12, 2), student_enrolment_id (11, 15, 7), degree_program_id (11, 11, 10) | students : student_id (6, 8, 15), date_left (\"1982-06-11 00:25:39\", \"2007-08-02 04:12:58\", \"1975-10-09 00:49:27\"), permanent_address_id (3, 15, 5), first_name (\"Milton\", \"Orrin\", \"Orrin\"), cell_mobile_number (\"877.549.9067x8723\", \"(605)919-3594x3661\", \"03174364122\"), date_first_registered (\"1982-02-14 08:46:35\", \"2018-03-13 09:56:22\", \"1973-05-19 19:12:46\"), ssn (\"156\", \"43\", \"\"), current_address_id (9, 15, 10), last_name (\"Ward\", \"Christiansen\", \"Rempel\"), email_address (\"baumbach.lucious@example.org\", \"nya.lesch@example.net\", \"johns.unique@example.net\"), middle_name (\"Brooklyn\", \"Neal\", \"Cleve\"), other_student_details (\"omnis\", \"atque\", \"et\") | degree_programs : department_id (8, 14, 2), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"quam\", \"placeat\", \"cumque\"), degree_program_id (11, 15, 1) | sections : course_id (1, 6, 9), section_id (13, 13, 10), section_description (\"provident\", \"et\", \"ad\"), section_name (\"y\", \"k\", \"d\"), other_details (None) | transcripts : transcript_date (\"1975-05-20 18:31:21\", \"2013-06-30 13:01:40\", \"1998-11-22 12:18:29\"), other_details (None), transcript_id (1, 12, 8) | addresses : country (\"Iceland\", \"Kyrgyz Republic\", \"Angola\"), line_2 (\"Suite 865\", \"Suite 239\", \"Apt. 305\"), address_id (12, 4, 4), state_province_county (\"Idaho\", \"Kentucky\", \"Florida\"), zip_postcode (\"943\", \"943\", \"669\"), line_3 (None), other_address_details (None), city (\"Port Oceane\", \"Port Evanston\", \"Prohaskafort\"), line_1 (\"3999 Aufderhar Ways Suite 593\", \"3999 Aufderhar Ways Suite 593\", \"186 Evan Motorway Apt. 409\") | transcript_contents : student_course_id (45105806, 76, 70882679), transcript_id (15, 12, 5) | student_enrolment_courses : student_enrolment_id (5, 6, 8), course_id (12, 13, 11), student_course_id (438800, 8, 70882679) | departments : other_details (None), department_name (\"statistics\", \"management\", \"management\"), department_id (9, 5, 7), department_description (\"doloribus\", \"natus\", \"error\") | courses : course_description (\"v\", \"n\", \"d\"), other_details (None), course_id (4, 3, 13), course_name (\"ds\", \"la\", \"dl\") | semesters : semester_name (\"spring 2010\", \"fall 2010\", \"winter 2010\"), other_details (None), semester_id (15, 11, 13), semester_description (\"y\", \"l\", \"m\")", 
        "new_table_name": "transcripts_transcript_date", 
        "db_id": "student_transcripts_tracking", 
        "tables_with_pkeys": [
            [
                "transcripts", 
                "transcript_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        9
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                53, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(transcript_date) from transcripts", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "transcript_date", 
            ")", 
            "FROM", 
            "Transcripts"
        ]
    }, 
    {
        "query2": "select max_share, min_share from tv_series_share", 
        "schema_without_content": "cartoon : channel , production_code , written_by , directed_by , id , title , original_air_date  | tv_series : rating , share , 18_49_rating_share , air_date , episode , id , viewers_m , channel , weekly_rank  | tv_channel : country , series_name , package_option \", language , pixel_aspect_ratio_par , content , pay_per_view_ppv , id , hight_definition_tv  | tv_series_share : sum_share , min_share , avg_share , max_share ", 
        "query1": "select max(share), min(share) from tv_series", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "share", 
            ")", 
            ",", 
            "min", 
            "(", 
            "share", 
            ")", 
            "from", 
            "tv_series"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "minimum", 
            "and", 
            "maximum", 
            "share", 
            "of", 
            "TV", 
            "series", 
            "?"
        ], 
        "all_raw_cols": [
            "share"
        ], 
        "question": "What is minimum and maximum share of TV series?", 
        "all_cols": [
            "sum_share", 
            "avg_share", 
            "min_share", 
            "max_share"
        ], 
        "schema_with_content": "cartoon : channel (\"700\", \"704\", \"705\"), production_code (111.0, 108.0, 109.0), written_by (\"James Krieg\", \"Adam Beechen\", \"Joseph Kuhr\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (2.0, 10.0, 5.0), title (\"Evil Under the Sea!\", \"Terror on Dinosaur Island!\", \"Return of the Fearsome Fangs!\"), original_air_date (\"February27,2009\", \"January30,2009\", \"December5,2008\") | tv_series : rating (\"3.5\", \"4.4\", \"3.0\"), share (5.0, 6.0, 6.0), 18_49_rating_share (\"3.5/9\", \"1.7/5\", \"2.4/6\"), air_date (\"October 22, 2007\", \"November 12, 2007\", \"November 12, 2007\"), episode (\"Game Three\", \"A Love of a Lifetime\", \"Home By Another Way\"), id (5.0, 5.0, 3.0), viewers_m (\"6.05\", \"5.75\", \"6.06\"), channel (\"719\", \"728\", \"719\"), weekly_rank (67.0, 66.0, 71.0) | tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"Sky Radio\", \"Sky Radio\", \"MTV Live HD\"), package_option (\"Option\", \"Sky Famiglia + Sky HD\", \"no ( FTV )\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), pay_per_view_ppv (\"no\"), id (\"719\", \"703\", \"713\"), hight_definition_tv (\"no\", \"yes\") | tv_series_share : sum_share (9.0, 6.0, 9.0), min_share (6.0, 7.0, 6.0), avg_share (9.0, 7.0, 7.0), max_share (5.0, 9.0, 6.0)", 
        "new_table_name": "tv_series_share", 
        "db_id": "tvshow", 
        "tables_with_pkeys": [
            [
                "tv_series", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(share), min(share) from tv_series", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "SHARE", 
            ")", 
            ",", 
            "min", 
            "(", 
            "SHARE", 
            ")", 
            "FROM", 
            "TV_series", 
            ";"
        ]
    }, 
    {
        "query2": "select max_share, min_share from tv_series_share", 
        "schema_without_content": "tv_channel : language , package_option , pay_per_view_ppv , pixel_aspect_ratio_par , id , hight_definition_tv , series_name , country , content  | tv_series_share : sum_share , max_share , avg_share , min_share  | cartoon : channel , id , production_code , title , written_by , original_air_date , directed_by  | tv_series : rating , 18_49_rating_share , air_date , channel , episode , share , weekly_rank , viewers_m , id ", 
        "query1": "select max(share), min(share) from tv_series", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "share", 
            ")", 
            ",", 
            "min", 
            "(", 
            "share", 
            ")", 
            "from", 
            "tv_series"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "and", 
            "minimum", 
            "share", 
            "for", 
            "the", 
            "TV", 
            "series", 
            "?"
        ], 
        "all_raw_cols": [
            "share"
        ], 
        "question": "What is the maximum and minimum share for the TV series?", 
        "all_cols": [
            "sum_share", 
            "avg_share", 
            "min_share", 
            "max_share"
        ], 
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), package_option (\"Option\", \"Option\", \"Sky Famiglia + Sky HD\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"728\", \"709\", \"713\"), hight_definition_tv (\"no\", \"yes\"), series_name (\"MTV Rocks\", \"MTV Rocks\", \"MTV Hits\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\") | tv_series_share : sum_share (6.0, 9.0, 9.0), max_share (9.0, 7.0, 6.0), avg_share (7.0, 5.0, 7.0), min_share (9.0, 9.0, 9.0) | cartoon : channel (\"728\", \"704\", \"708\"), id (3.0, 5.0, 8.0), production_code (106.0, 111.0, 103.0), title (\"Enter the Outsiders!\", \"Enter the Outsiders!\", \"The Rise of the Blue Beetle!\"), written_by (\"Joseph Kuhr\", \"Michael Jelenic\", \"J. M. DeMatteis\"), original_air_date (\"January30,2009\", \"January2,2009\", \"February27,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\") | tv_series : rating (\"4.0\", \"3.8\", \"4.0\"), 18_49_rating_share (\"3.5/9\", \"1.5/4\", \"2.7/7\"), air_date (\"September 24, 2007\", \"December 10, 2007\", \"October 8, 2007\"), channel (\"717\", \"701\", \"719\"), episode (\"Emily\", \"A Love of a Lifetime\", \"Winterland\"), share (9.0, 5.0, 5.0), weekly_rank (70.0, 68.0, 65.0), viewers_m (\"5.13\", \"5.75\", \"6.05\"), id (12.0, 7.0, 4.0)", 
        "new_table_name": "tv_series_share", 
        "db_id": "tvshow", 
        "tables_with_pkeys": [
            [
                "tv_series", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(share), min(share) from tv_series", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "SHARE", 
            ")", 
            ",", 
            "min", 
            "(", 
            "SHARE", 
            ")", 
            "FROM", 
            "TV_series", 
            ";"
        ]
    }, 
    {
        "query2": "select avg_earnings from poker_player_earnings", 
        "schema_without_content": "poker_player_earnings : sum_earnings , max_earnings , min_earnings , avg_earnings  | poker_player : money_rank , people_id , poker_player_id , earnings , final_table_made , best_finish  | people : birth_date , people_id , nationality , height , name ", 
        "query1": "select avg(earnings) from poker_player", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "earnings", 
            ")", 
            "from", 
            "poker_player"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "earnings", 
            "of", 
            "poker", 
            "players", 
            "?"
        ], 
        "all_raw_cols": [
            "earnings"
        ], 
        "question": "What is the average earnings of poker players?", 
        "all_cols": [
            "sum_earnings", 
            "avg_earnings", 
            "min_earnings", 
            "max_earnings"
        ], 
        "schema_with_content": "poker_player_earnings : sum_earnings (189233.0, 189233.0, 596462.0), max_earnings (596462.0, 142800.0, 476090.0), min_earnings (142800.0, 142800.0, 596462.0), avg_earnings (142800.0, 476090.0, 104871.0) | poker_player : money_rank (166.0, 58.0, 58.0), people_id (1, 2, 7), poker_player_id (4, 2, 5), earnings (189233.0, 476090.0, 596462.0), final_table_made (19.0, 42.0, 26.0), best_finish (1.0, 2.0, 3.0) | people : birth_date (\"May 26, 1986\", \"August 16, 1982\", \"August 16, 1982\"), people_id (3, 5, 2), nationality (\"Russia\", \"Bulgaria\"), height (193.0, 187.0, 182.0), name (\"Aleksey Ostapenko\", \"Sergey Grankin\", \"Yevgeni Sivozhelez\")", 
        "new_table_name": "poker_player_earnings", 
        "db_id": "poker_player", 
        "tables_with_pkeys": [
            [
                "poker_player", 
                "poker_player_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(earnings) from poker_player", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Earnings", 
            ")", 
            "FROM", 
            "poker_player"
        ]
    }, 
    {
        "query2": "select avg_earnings from poker_player_earnings", 
        "schema_without_content": "poker_player : poker_player_id , best_finish , earnings , final_table_made , money_rank , people_id  | poker_player_earnings : min_earnings , sum_earnings , max_earnings , avg_earnings  | people : name , height , birth_date , nationality , people_id ", 
        "query1": "select avg(earnings) from poker_player", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "earnings", 
            ")", 
            "from", 
            "poker_player"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "average", 
            "earnings", 
            "across", 
            "all", 
            "poker", 
            "players", 
            "."
        ], 
        "all_raw_cols": [
            "earnings"
        ], 
        "question": "Return the average earnings across all poker players.", 
        "all_cols": [
            "sum_earnings", 
            "avg_earnings", 
            "min_earnings", 
            "max_earnings"
        ], 
        "schema_with_content": "poker_player : poker_player_id (1, 4, 3), best_finish (1.0, 2.0, 3.0), earnings (189233.0, 476090.0, 476090.0), final_table_made (26.0, 21.0, 10.0), money_rank (68.0, 154.0, 166.0), people_id (7, 2, 7) | poker_player_earnings : min_earnings (142800.0, 104871.0, 476090.0), sum_earnings (476090.0, 142800.0, 476090.0), max_earnings (142800.0, 596462.0, 104871.0), avg_earnings (476090.0, 142800.0, 596462.0) | people : name (\"Yevgeni Sivozhelez\", \"Aleksey Ostapenko\", \"Teodor Salparov\"), height (196.0, 205.0, 193.0), birth_date (\"May 26, 1986\", \"April 17, 1987\", \"January 22, 1987\"), nationality (\"Russia\", \"Bulgaria\"), people_id (4, 1, 1)", 
        "new_table_name": "poker_player_earnings", 
        "db_id": "poker_player", 
        "tables_with_pkeys": [
            [
                "poker_player", 
                "poker_player_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(earnings) from poker_player", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Earnings", 
            ")", 
            "FROM", 
            "poker_player"
        ]
    }, 
    {
        "query2": "select max_final_table_made from poker_player_final_table_made where earnings < 200000", 
        "schema_without_content": "people : people_id , nationality , birth_date , name , height  | poker_player : earnings , final_table_made , poker_player_id , money_rank , best_finish , people_id  | poker_player_final_table_made : max_final_table_made , sum_final_table_made , avg_final_table_made , min_final_table_made ", 
        "query1": "select max(final_table_made) from poker_player where earnings < 200000", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "final_table_made", 
            ")", 
            "from", 
            "poker_player", 
            "where", 
            "earnings", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "number", 
            "of", 
            "final", 
            "tables", 
            "made", 
            "among", 
            "poker", 
            "players", 
            "with", 
            "earnings", 
            "less", 
            "than", 
            "200000", 
            "?"
        ], 
        "all_raw_cols": [
            "final_table_made"
        ], 
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", 
        "all_cols": [
            "sum_final_table_made", 
            "avg_final_table_made", 
            "min_final_table_made", 
            "max_final_table_made"
        ], 
        "schema_with_content": "people : people_id (6, 4, 1), nationality (\"Russia\", \"Bulgaria\"), birth_date (\"August 8, 1986\", \"May 26, 1986\", \"July 14, 1983\"), name (\"Roman Bragin\", \"Sergey Grankin\", \"Yevgeni Sivozhelez\"), height (193.0, 182.0, 182.0) | poker_player : earnings (142800.0, 104871.0, 596462.0), final_table_made (42.0, 21.0, 10.0), poker_player_id (5, 3, 5), money_rank (166.0, 58.0, 68.0), best_finish (1.0, 2.0, 3.0), people_id (1, 7, 6) | poker_player_final_table_made : max_final_table_made (42.0, 42.0, 10.0), sum_final_table_made (26.0, 19.0, 26.0), avg_final_table_made (19.0, 19.0, 26.0), min_final_table_made (19.0, 19.0, 42.0)", 
        "new_table_name": "poker_player_final_table_made", 
        "db_id": "poker_player", 
        "tables_with_pkeys": [
            [
                "poker_player", 
                "poker_player_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            0, 
                            6, 
                            false
                        ], 
                        null
                    ], 
                    200000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(final_table_made) from poker_player where earnings < 200000", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Final_Table_Made", 
            ")", 
            "FROM", 
            "poker_player", 
            "WHERE", 
            "Earnings", 
            "<", 
            "200000"
        ]
    }, 
    {
        "query2": "select max_final_table_made from poker_player_final_table_made where earnings < 200000", 
        "schema_without_content": "people : birth_date , height , nationality , people_id , name  | poker_player : poker_player_id , earnings , people_id , best_finish , final_table_made , money_rank  | poker_player_final_table_made : max_final_table_made , avg_final_table_made , min_final_table_made , sum_final_table_made ", 
        "query1": "select max(final_table_made) from poker_player where earnings < 200000", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "final_table_made", 
            ")", 
            "from", 
            "poker_player", 
            "where", 
            "earnings", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "maximum", 
            "final", 
            "tables", 
            "made", 
            "across", 
            "all", 
            "poker", 
            "players", 
            "who", 
            "have", 
            "earnings", 
            "below", 
            "200000", 
            "."
        ], 
        "all_raw_cols": [
            "final_table_made"
        ], 
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", 
        "all_cols": [
            "sum_final_table_made", 
            "avg_final_table_made", 
            "min_final_table_made", 
            "max_final_table_made"
        ], 
        "schema_with_content": "people : birth_date (\"May 26, 1986\", \"February 8, 1981\", \"July 14, 1983\"), height (182.0, 187.0, 196.0), nationality (\"Russia\", \"Bulgaria\"), people_id (5, 2, 1), name (\"Maksim Botin\", \"Aleksey Ostapenko\", \"Teodor Salparov\") | poker_player : poker_player_id (3, 3, 4), earnings (596462.0, 596462.0, 189233.0), people_id (6, 6, 7), best_finish (1.0, 2.0, 3.0), final_table_made (42.0, 21.0, 10.0), money_rank (68.0, 68.0, 68.0) | poker_player_final_table_made : max_final_table_made (19.0, 42.0, 42.0), avg_final_table_made (42.0, 10.0, 26.0), min_final_table_made (19.0, 19.0, 19.0), sum_final_table_made (21.0, 42.0, 19.0)", 
        "new_table_name": "poker_player_final_table_made", 
        "db_id": "poker_player", 
        "tables_with_pkeys": [
            [
                "poker_player", 
                "poker_player_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            0, 
                            6, 
                            false
                        ], 
                        null
                    ], 
                    200000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(final_table_made) from poker_player where earnings < 200000", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Final_Table_Made", 
            ")", 
            "FROM", 
            "poker_player", 
            "WHERE", 
            "Earnings", 
            "<", 
            "200000"
        ]
    }, 
    {
        "query2": "select avg_earnings from people_poker_player_earnings where height > 200", 
        "schema_without_content": "people : name , height , birth_date , nationality , people_id  | people_poker_player_earnings : height , min_earnings , avg_earnings , max_earnings , sum_earnings  | poker_player : final_table_made , poker_player_id , people_id , money_rank , best_finish , earnings ", 
        "query1": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "t2", 
            ".", 
            "earnings", 
            ")", 
            "from", 
            "people", 
            "as", 
            "t1", 
            "join", 
            "poker_player", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "people_id", 
            "=", 
            "t2", 
            ".", 
            "people_id", 
            "where", 
            "t1", 
            ".", 
            "height", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "earnings", 
            "of", 
            "poker", 
            "players", 
            "with", 
            "height", 
            "higher", 
            "than", 
            "200", 
            "?"
        ], 
        "all_raw_cols": [
            "height", 
            "earnings"
        ], 
        "question": "What is the average earnings of poker players with height higher than 200?", 
        "all_cols": [
            "height", 
            "sum_earnings", 
            "avg_earnings", 
            "min_earnings", 
            "max_earnings"
        ], 
        "schema_with_content": "people : name (\"Semen Poltavskiy\", \"Roman Bragin\", \"Semen Poltavskiy\"), height (196.0, 194.0, 196.0), birth_date (\"January 22, 1987\", \"January 22, 1987\", \"May 26, 1986\"), nationality (\"Russia\", \"Bulgaria\"), people_id (6, 7, 5) | people_poker_player_earnings : height (194.0, 205.0, 187.0), min_earnings (476090.0, 104871.0, 104871.0), avg_earnings (189233.0, 476090.0, 476090.0), max_earnings (104871.0, 189233.0, 104871.0), sum_earnings (104871.0, 104871.0, 104871.0) | poker_player : final_table_made (10.0, 26.0, 10.0), poker_player_id (1, 1, 3), people_id (2, 6, 7), money_rank (141.0, 58.0, 58.0), best_finish (1.0, 2.0, 3.0), earnings (476090.0, 596462.0, 596462.0)", 
        "new_table_name": "people_poker_player_earnings", 
        "db_id": "poker_player", 
        "tables_with_pkeys": [
            [
                "people", 
                "people_id"
            ], 
            [
                "poker_player", 
                "poker_player_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ], 
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            2, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    200.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "T2.Earnings", 
            ")", 
            "FROM", 
            "people", 
            "AS", 
            "T1", 
            "JOIN", 
            "poker_player", 
            "AS", 
            "T2", 
            "ON", 
            "T1.People_ID", 
            "=", 
            "T2.People_ID", 
            "WHERE", 
            "T1.Height", 
            ">", 
            "200"
        ]
    }, 
    {
        "query2": "select avg_earnings from people_poker_player_earnings where height > 200", 
        "schema_without_content": "poker_player : final_table_made , earnings , people_id , poker_player_id , money_rank , best_finish  | people_poker_player_earnings : sum_earnings , max_earnings , min_earnings , height , avg_earnings  | people : people_id , nationality , name , birth_date , height ", 
        "query1": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "t2", 
            ".", 
            "earnings", 
            ")", 
            "from", 
            "people", 
            "as", 
            "t1", 
            "join", 
            "poker_player", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "people_id", 
            "=", 
            "t2", 
            ".", 
            "people_id", 
            "where", 
            "t1", 
            ".", 
            "height", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "average", 
            "earnings", 
            "of", 
            "poker", 
            "players", 
            "who", 
            "are", 
            "taller", 
            "than", 
            "200", 
            "."
        ], 
        "all_raw_cols": [
            "height", 
            "earnings"
        ], 
        "question": "Give average earnings of poker players who are taller than 200.", 
        "all_cols": [
            "height", 
            "sum_earnings", 
            "avg_earnings", 
            "min_earnings", 
            "max_earnings"
        ], 
        "schema_with_content": "poker_player : final_table_made (10.0, 19.0, 19.0), earnings (189233.0, 596462.0, 142800.0), people_id (5, 7, 2), poker_player_id (1, 1, 4), money_rank (154.0, 58.0, 68.0), best_finish (1.0, 2.0, 3.0) | people_poker_player_earnings : sum_earnings (189233.0, 189233.0, 142800.0), max_earnings (596462.0, 142800.0, 104871.0), min_earnings (104871.0, 189233.0, 189233.0), height (193.0, 193.0, 207.0), avg_earnings (189233.0, 189233.0, 142800.0) | people : people_id (4, 2, 4), nationality (\"Russia\", \"Bulgaria\"), name (\"Maksim Botin\", \"Teodor Salparov\", \"Yevgeni Sivozhelez\"), birth_date (\"February 8, 1981\", \"August 8, 1986\", \"August 16, 1982\"), height (205.0, 182.0, 193.0)", 
        "new_table_name": "people_poker_player_earnings", 
        "db_id": "poker_player", 
        "tables_with_pkeys": [
            [
                "people", 
                "people_id"
            ], 
            [
                "poker_player", 
                "poker_player_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ], 
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            2, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    200.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "T2.Earnings", 
            ")", 
            "FROM", 
            "people", 
            "AS", 
            "T1", 
            "JOIN", 
            "poker_player", 
            "AS", 
            "T2", 
            "ON", 
            "T1.People_ID", 
            "=", 
            "T2.People_ID", 
            "WHERE", 
            "T1.Height", 
            ">", 
            "200"
        ]
    }, 
    {
        "query2": "select max_area_code, min_area_code from area_code_state_area_code", 
        "schema_without_content": "area_code_state_area_code : sum_area_code , min_area_code , avg_area_code , max_area_code  | area_code_state : area_code , state  | votes : state , phone_number , vote_id , contestant_number , created  | contestants : contestant_name , contestant_number ", 
        "query1": "select max(area_code), min(area_code) from area_code_state", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "area_code", 
            ")", 
            ",", 
            "min", 
            "(", 
            "area_code", 
            ")", 
            "from", 
            "area_code_state"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "maximum", 
            "and", 
            "minimum", 
            "values", 
            "of", 
            "area", 
            "codes", 
            "?"
        ], 
        "all_raw_cols": [
            "area_code"
        ], 
        "question": "What are the maximum and minimum values of area codes?", 
        "all_cols": [
            "sum_area_code", 
            "avg_area_code", 
            "min_area_code", 
            "max_area_code"
        ], 
        "schema_with_content": "area_code_state_area_code : sum_area_code (254, 903, 334), min_area_code (425, 717, 845), avg_area_code (320, 337, 424), max_area_code (907, 501, 513) | area_code_state : area_code (801, 415, 618), state (\"OR\", \"MO\", \"ME\") | votes : state (\"NY\", \"CA\", \"NJ\n\"), phone_number (7182887233, 6209222712, 5112677315), vote_id (5, 2, 5), contestant_number (2, 3, 5), created (\"2018-03-09 19:03:36\", \"2018-03-09 19:03:40\", \"2018-03-09 19:03:40\") | contestants : contestant_name (\"Ericka Dieter\", \"Jessie Alloway\", \"Jessie Eichman\"), contestant_number (2, 7, 11)", 
        "new_table_name": "area_code_state_area_code", 
        "db_id": "voter_1", 
        "tables_with_pkeys": [
            [
                "area_code_state", 
                "area_code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(area_code), min(area_code) from area_code_state", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "area_code", 
            ")", 
            ",", 
            "min", 
            "(", 
            "area_code", 
            ")", 
            "FROM", 
            "area_code_state"
        ]
    }, 
    {
        "query2": "select max_created from votes_created where state = 'CA'", 
        "schema_without_content": "votes : vote_id , contestant_number , state , phone_number , created  | contestants : contestant_number , contestant_name  | votes_created : min_created , sum_created , avg_created , max_created  | area_code_state : area_code , state ", 
        "query1": "select max(created) from votes where state = 'CA'", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "created", 
            ")", 
            "from", 
            "votes", 
            "where", 
            "state", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "last", 
            "date", 
            "created", 
            "of", 
            "votes", 
            "from", 
            "the", 
            "state", 
            "'CA", 
            "'", 
            "?"
        ], 
        "all_raw_cols": [
            "created"
        ], 
        "question": "What is last date created of votes from the state 'CA'?", 
        "all_cols": [
            "sum_created", 
            "avg_created", 
            "min_created", 
            "max_created"
        ], 
        "schema_with_content": "votes : vote_id (3, 3, 3), contestant_number (2, 3, 5), state (\"NY\", \"CA\", \"NJ\n\"), phone_number (6209222712, 6209222712, 6209222712), created (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:21\", \"2018-03-09 19:03:40\") | contestants : contestant_number (10, 8, 3), contestant_name (\"Alana Bregman\", \"Jessie Eichman\", \"Jessie Eichman\") | votes_created : min_created (\"2018-03-09 19:03:21\", \"2018-03-09 19:03:40\", \"2018-03-09 19:03:40\"), sum_created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:40\", \"2018-03-09 19:03:36\"), avg_created (\"2018-03-09 19:03:36\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:36\"), max_created (\"2018-03-09 19:03:21\", \"2018-03-09 19:03:21\", \"2018-03-09 19:03:40\") | area_code_state : area_code (650, 331, 442), state (\"ID\", \"FL\", \"HI\")", 
        "new_table_name": "votes_created", 
        "db_id": "voter_1", 
        "tables_with_pkeys": [
            [
                "votes", 
                "vote_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"CA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(created) from votes where state = 'CA'", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "created", 
            ")", 
            "FROM", 
            "votes", 
            "WHERE", 
            "state", 
            "=", 
            "'CA", 
            "'"
        ]
    }, 
    {
        "query2": "select sum_surfacearea from country_surfacearea where region = \"Caribbean\"", 
        "schema_without_content": "country_surfacearea : sum_surfacearea , max_surfacearea , min_surfacearea , avg_surfacearea  | sqlite_sequence : seq , name  | country : surfacearea , capital , lifeexpectancy , region , gnpold , name , population , continent , localname , code2 , code , indepyear , headofstate , gnp , governmentform  | city : id , population , countrycode , district , name  | countrylanguage : percentage , language , countrycode , isofficial ", 
        "query1": "select sum(surfacearea) from country where region = \"Caribbean\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "region", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "countries", 
            "in", 
            "the", 
            "Caribbean", 
            "region", 
            "?"
        ], 
        "all_raw_cols": [
            "surfacearea"
        ], 
        "question": "What is the total surface area of the countries in the Caribbean region?", 
        "all_cols": [
            "sum_surfacearea", 
            "avg_surfacearea", 
            "min_surfacearea", 
            "max_surfacearea"
        ], 
        "schema_with_content": "country_surfacearea : sum_surfacearea (45227.0, 9251.0, 964.0), max_surfacearea (130000.0, 118484.0, 78.0), min_surfacearea (143998.0, 883749.0, 7780.0), avg_surfacearea (238391.0, 9970610.0, 1.5) | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (800.0, 298.0, 650.0), capital (902, 2919, 537), lifeexpectancy (77.7, 73.1, 64.1), region (\"Baltic Countries\", \"South America\", \"Antarctica\"), gnpold (6884.0, 383.0, 392911.0), name (\"Morocco\", \"Malta\", \"Western Sahara\"), population (16223000, 5433000, 699000), continent (\"Africa\", \"Antarctica\", \"Asia\"), localname (\"Kenya\", \"Pakistan\", \"\u00c2\u00b4Uman\"), code2 (\"PY\", \"BW\", \"ZA\"), code (\"ARG\", \"JPN\", \"RUS\"), indepyear (1822, 1992, 1965), headofstate (\"Mamadou Tandja\", \"Valentin Paniagua Corazao\", \"Jos\u00c3\u00a9 Eduardo dos Santos\"), gnp (264478.0, 8571.0, 1579.0), governmentform (\"Constitutional Monarchy\", \"Constitutional Monarchy\", \"Socialistic Republic\") | city : id (3253, 1703, 542), population (616700, 219149, 254350), countrycode (\"VAT\", \"VIR\", \"NAM\"), district (\"Frederiksberg\", \"Sardinia\", \"Lubuskie\"), name (\"Franca\", \"Bhagalpur\", \"Bankura\") | countrylanguage : percentage (29.7, 2.2, 10.6), language (\"Somba\", \"Afrikaans\", \"Mano\"), countrycode (\"TMP\", \"WSM\", \"PRK\"), isofficial (\"T\", \"F\")", 
        "new_table_name": "country_surfacearea", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Caribbean\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(surfacearea) from country where region = \"Caribbean\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Region", 
            "=", 
            "``", 
            "Caribbean", 
            "''"
        ]
    }, 
    {
        "query2": "select sum_surfacearea from country_surfacearea where region = \"Caribbean\"", 
        "schema_without_content": "sqlite_sequence : seq , name  | city : id , countrycode , name , district , population  | country : region , lifeexpectancy , name , capital , governmentform , code2 , surfacearea , code , indepyear , population , continent , headofstate , gnp , gnpold , localname  | country_surfacearea : avg_surfacearea , max_surfacearea , sum_surfacearea , min_surfacearea  | countrylanguage : language , isofficial , countrycode , percentage ", 
        "query1": "select sum(surfacearea) from country where region = \"Caribbean\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "region", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "How", 
            "much", 
            "surface", 
            "area", 
            "do", 
            "the", 
            "countires", 
            "in", 
            "the", 
            "Carribean", 
            "cover", 
            "together", 
            "?"
        ], 
        "all_raw_cols": [
            "surfacearea"
        ], 
        "question": "How much surface area do the countires in the Carribean cover together?", 
        "all_cols": [
            "sum_surfacearea", 
            "avg_surfacearea", 
            "min_surfacearea", 
            "max_surfacearea"
        ], 
        "schema_with_content": "sqlite_sequence : seq (4079), name (\"city\") | city : id (3835, 2418, 2597), countrycode (\"BRN\", \"MSR\", \"GNQ\"), name (\"Bordeaux\", \"Danjiangkou\", \"Higashikurume\"), district (\"Irrawaddy [Ayeyarwad\", \"Rangoon [Yangon]\", \"Auvergne\"), population (98464, 249200, 273900) | country : region (\"Southeast Asia\", \"Eastern Europe\", \"Southeast Asia\"), lifeexpectancy (75.4, 75.8, 72.3), name (\"Pitcairn\", \"Namibia\", \"Puerto Rico\"), capital (763, 3048, 2429), governmentform (\"US Territory\", \"Islamic Republic\", \"Territorial Collectivity of France\"), code2 (\"CR\", \"PE\", \"MH\"), surfacearea (266000.0, 53.0, 65610.0), code (\"MWI\", \"CHL\", \"GRD\"), indepyear (1841, -660, 1993), population (2662000, 4807000, 37032000), continent (\"Antarctica\", \"Oceania\", \"North America\"), headofstate (\"Abdurrahman Wahid\", \"Ricardo Lagos Escobar\", \"Jabir al-Ahmad al-Jabir al-Sabah\"), gnp (681.0, 141.0, 3787042.0), gnpold (64960.0, 793.0, 40562.0), localname (\"Mo\u00c3\u00a7ambique\", \"Congo\", \"Pitcairn\") | country_surfacearea : avg_surfacearea (824292.0, 267668.0, 406752.0), max_surfacearea (71740.0, 2149690.0, 29800.0), sum_surfacearea (61.0, 347.0, 637657.0), min_surfacearea (801590.0, 756626.0, 28051.0) | countrylanguage : language (\"Yi\", \"Southern Slavic Languages\", \"Songhai\"), isofficial (\"T\", \"F\"), countrycode (\"ROM\", \"CAF\", \"USA\"), percentage (6.9, 85.0, 18.0)", 
        "new_table_name": "country_surfacearea", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Caribbean\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(surfacearea) from country where region = \"Caribbean\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Region", 
            "=", 
            "``", 
            "Caribbean", 
            "''"
        ]
    }, 
    {
        "query2": "select avg_lifeexpectancy from country_lifeexpectancy where region = \"Central Africa\"", 
        "schema_without_content": "countrylanguage : isofficial , countrycode , percentage , language  | city : id , population , countrycode , name , district  | sqlite_sequence : seq , name  | country_lifeexpectancy : max_lifeexpectancy , avg_lifeexpectancy , min_lifeexpectancy , sum_lifeexpectancy  | country : localname , name , population , region , code , lifeexpectancy , headofstate , governmentform \", \"Monarchy \", \"US Territory\", surfacearea , continent , code2 , capital , gnpold , indepyear , gnp ", 
        "query1": "select avg(lifeexpectancy) from country where region = \"Central Africa\"", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "from", 
            "country", 
            "where", 
            "region", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "expected", 
            "life", 
            "expectancy", 
            "for", 
            "countries", 
            "in", 
            "the", 
            "region", 
            "of", 
            "Central", 
            "Africa", 
            "?"
        ], 
        "all_raw_cols": [
            "lifeexpectancy"
        ], 
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?", 
        "all_cols": [
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"PHL\", \"GBR\", \"KAZ\"), percentage (19.2, 98.8, 81.2), language (\"Slovene\", \"Miskito\", \"Watyi\") | city : id (25, 3425, 1342), population (182660, 205727, 132820), countrycode (\"ETH\", \"BLZ\", \"SLE\"), name (\"Idlib\", \"Chaguanas\", \"Andong\"), district (\"Chlef\", \"Oriental\", \"Karaman\") | sqlite_sequence : seq (4079), name (\"city\") | country_lifeexpectancy : max_lifeexpectancy (40.4, 69.5, 50.5), avg_lifeexpectancy (83.5, 37.2, 42.9), min_lifeexpectancy (77.7, 42.9, 79.6), sum_lifeexpectancy (68.1, 41.3, 73.0) | country : localname (\"T\u00e2\u0080\u0099ai-wan\", \"Togo\", \"Nihon/Nippon\"), name (\"Germany\", \"Malta\", \"Congo, The Democratic Republic of the\"), population (5171300, 20000, 15864000), region (\"Southern Europe\", \"Eastern Asia\", \"Central America\"), code (\"PLW\", \"PAN\", \"GIN\"), lifeexpectancy (79.6, 53.6, 70.7), headofstate (\"Pierre Buyoya\", \"Jean-Bertrand Aristide\", \"Kuniwo Nakamura\"), governmentform (\"Constitutional Monarchy (Emirate)\", \"Monarchy (Sultanate)\", \"US Territory\"), surfacearea (344.0, 28748.0, 26.0), continent (\"Europe\", \"Asia\", \"Africa\"), code2 (\"KG\", \"TH\", \"RU\"), capital (3169, 135, 608), gnpold (7967.0, 88434.0, 171028.0), indepyear (1963, 1492, 1910), gnp (6232.0, 21929.0, 2425.0)", 
        "new_table_name": "country_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Central Africa\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(lifeexpectancy) from country where region = \"Central Africa\"", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Region", 
            "=", 
            "``", 
            "Central", 
            "Africa", 
            "''"
        ]
    }, 
    {
        "query2": "select avg_lifeexpectancy from country_lifeexpectancy where region = \"Central Africa\"", 
        "schema_without_content": "countrylanguage : percentage , isofficial , language , countrycode  | country : gnpold , headofstate , code , governmentform , continent , name , population , region , gnp , indepyear , code2 , localname , lifeexpectancy , capital , surfacearea  | sqlite_sequence : seq , name  | country_lifeexpectancy : sum_lifeexpectancy , avg_lifeexpectancy , min_lifeexpectancy , max_lifeexpectancy  | city : population , district , id , name , countrycode ", 
        "query1": "select avg(lifeexpectancy) from country where region = \"Central Africa\"", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "from", 
            "country", 
            "where", 
            "region", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "How", 
            "long", 
            "is", 
            "the", 
            "people\u2019s", 
            "average", 
            "life", 
            "expectancy", 
            "in", 
            "Central", 
            "Africa", 
            "?"
        ], 
        "all_raw_cols": [
            "lifeexpectancy"
        ], 
        "question": "How long is the people\u2019s average life expectancy in Central Africa?", 
        "all_cols": [
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "countrylanguage : percentage (81.2, 7.4, 50.0), isofficial (\"T\", \"F\"), language (\"Banda\", \"German\", \"Ambo\"), countrycode (\"DZA\", \"ARM\", \"TZA\") | country : gnpold (2559.0, 8670.0, 45914.0), headofstate (\"Ant\u00c3\u00b3nio Mascarenhas Monteiro\", \"Yahya Jammeh\", \"Frederick Chiluba\"), code (\"KWT\", \"DZA\", \"GRC\"), governmentform (\"Territory of Australia\", \"Federation\", \"Emirate Federation\"), continent (\"South America\", \"Oceania\", \"Europe\"), name (\"Senegal\", \"Tonga\", \"Cuba\"), population (45611000, 75967000, 62565000), region (\"Micronesia\", \"Micronesia/Caribbean\", \"Central Africa\"), gnp (180375.0, 7526.0, 1694.0), indepyear (1973, 1953, 1971), code2 (\"GP\", \"ZA\", \"TZ\"), localname (\"Sri Lanka/Ilankai\", \"Cabo Verde\", \"Ha\u00c3\u00afti/Dayti\"), lifeexpectancy (55.0, 74.5, 37.2), capital (1780, 3337, 2695), surfacearea (65301.0, 462840.0, 4000.0) | sqlite_sequence : seq (4079), name (\"city\") | country_lifeexpectancy : sum_lifeexpectancy (69.5, 64.5, 73.1), avg_lifeexpectancy (55.0, 60.6, 49.2), min_lifeexpectancy (71.3, 69.3, 57.4), max_lifeexpectancy (49.8, 62.5, 75.7) | city : population (241910, 117258, 266569), district (\"Umbria\", \"Madhya Pradesh\", \"Pennsylvania\"), id (2426, 3269, 885), name (\"Rio Grande\", \"Drobeta-Turnu Severin\", \"Nou\u00c3\u00a2dhibou\"), countrycode (\"TUR\", \"GNQ\", \"PCN\")", 
        "new_table_name": "country_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Central Africa\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(lifeexpectancy) from country where region = \"Central Africa\"", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Region", 
            "=", 
            "``", 
            "Central", 
            "Africa", 
            "''"
        ]
    }, 
    {
        "query2": "select sum_population, max_gnp from country_population_gnp where continent = \"Asia\"", 
        "schema_without_content": "city : id , district , population , countrycode , name  | country : surfacearea , code , indepyear , code2 , region , headofstate , capital , continent , gnpold , name , localname , population , lifeexpectancy , gnp , governmentform  | country_population_gnp : sum_gnp , min_gnp , sum_population , min_population , avg_population , max_gnp , avg_gnp , max_population  | sqlite_sequence : name , seq  | countrylanguage : countrycode , language , isofficial , percentage ", 
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "gnp", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "population", 
            "and", 
            "maximum", 
            "GNP", 
            "in", 
            "Asia", 
            "?"
        ], 
        "all_raw_cols": [
            "population", 
            "gnp"
        ], 
        "question": "What is the total population and maximum GNP in Asia?", 
        "all_cols": [
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_gnp", 
            "avg_gnp", 
            "min_gnp", 
            "max_gnp"
        ], 
        "schema_with_content": "city : id (2337, 3346, 2722), district (\"Krim\", \"Montevideo\", \"Yaracuy\"), population (118858, 103653, 193174), countrycode (\"MYS\", \"BHR\", \"SVK\"), name (\"Taman\", \"Tokyo\", \"Terrassa\") | country : surfacearea (199.0, 4000.0, 17364.0), code (\"BEL\", \"ARE\", \"DMA\"), indepyear (1830, 1350, 1984), code2 (\"MP\", \"LB\", \"BS\"), region (\"Southern Africa\", \"Micronesia/Caribbean\", \"Micronesia/Caribbean\"), headofstate (\"Johannes Paavali II\", \"Abdelaziz Bouteflika\", \"Idriss D\u00c3\u00a9by\"), capital (3261, 584, 933), continent (\"Africa\", \"Africa\", \"Oceania\"), gnpold (243.0, 1081.0, 360478.0), name (\"Bangladesh\", \"Sweden\", \"Kyrgyzstan\"), localname (\"Ecuador\", \"T\u00c3\u00bcrkmenostan\", \"T\u00e2\u0080\u0099ai-wan\"), population (79832000, 11000, 94000), lifeexpectancy (40.4, 79.0, 68.4), gnp (14194.0, 553233.0, 37966.0), governmentform (\"Autonomous Area\", \"Islamic Republic\", \"Monarchy\") | country_population_gnp : sum_gnp (141.0, 1813.0, 1161755.0), min_gnp (1292.0, 86503.0, 11705.0), sum_population (62565000, 10097000, 14786000), min_population (4629000, 68000, 1277558000), avg_population (2500, 23930000, 861000), max_gnp (8005.0, 109.0, 180375.0), avg_gnp (15706.0, 3787042.0, 2328.0), max_population (3869000, 2153000, 5171300) | sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : countrycode (\"UMI\", \"BMU\", \"LSO\"), language (\"Mon-khmer\", \"Songhai-zerma\", \"Philippene Languages\"), isofficial (\"T\", \"F\"), percentage (29.3, 23.4, 5.3)", 
        "new_table_name": "country_population_gnp", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "GNP", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''"
        ]
    }, 
    {
        "query2": "select sum_population, max_gnp from country_population_gnp where continent = \"Asia\"", 
        "schema_without_content": "city : name , district , id , population , countrycode  | country : gnp , headofstate , capital , lifeexpectancy , localname , continent , code2 , code , population , surfacearea , governmentform , name , gnpold , region , indepyear  | country_population_gnp : avg_population , min_population , avg_gnp , max_gnp , sum_population , min_gnp , sum_gnp , max_population  | countrylanguage : isofficial , percentage , language , countrycode  | sqlite_sequence : name , seq ", 
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "gnp", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "people", 
            "live", 
            "in", 
            "Asia", 
            ",", 
            "and", 
            "what", 
            "is", 
            "the", 
            "largest", 
            "GNP", 
            "among", 
            "them", 
            "?"
        ], 
        "all_raw_cols": [
            "population", 
            "gnp"
        ], 
        "question": "How many people live in Asia, and what is the largest GNP among them?", 
        "all_cols": [
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_gnp", 
            "avg_gnp", 
            "min_gnp", 
            "max_gnp"
        ], 
        "schema_with_content": "city : name (\"Pjatigorsk\", \"Beawar\", \"Jaipur\"), district (\"Okayama\", \"Toamasina\", \"Golestan\"), id (3313, 2536, 3277), population (123930, 375055, 97300), countrycode (\"BLZ\", \"BEL\", \"SDN\") | country : gnp (5121.0, 141.0, 722.0), headofstate (\"Ricardo Lagos Escobar\", \"Qabus ibn Sa\u00c2\u00b4id\", \"Nursultan Nazarbajev\"), capital (3017, 3173, 191), lifeexpectancy (54.9, 46.7, 63.7), localname (\"Heard and McDonald Islands\", \"Norfolk Island\", \"Nicaragua\"), continent (\"Antarctica\", \"Antarctica\", \"Africa\"), code2 (\"FK\", \"JM\", \"JO\"), code (\"MEX\", \"TUR\", \"CYM\"), population (29490000, 51654000, 126714000), surfacearea (242900.0, 151.0, 23200.0), governmentform (\"Dependent Territory of the UK\", \"Republic\", \"Administrated by the UN\"), name (\"Spain\", \"British Indian Ocean Territory\", \"Russian Federation\"), gnpold (64960.0, 1746.0, 4697.0), region (\"North America\", \"Micronesia\", \"Southern and Central Asia\"), indepyear (1980, 1581, 1776) | country_population_gnp : avg_population (5171300, 83000, 2500), min_population (3567000, 77000, 217000), avg_gnp (681.0, 121914.0, 174099.0), max_gnp (553233.0, 8444.0, 174099.0), sum_population (23115000, 2153000, 11234000), min_gnp (54669.0, 776739.0, 3205.0), sum_gnp (27037.0, 21929.0, 6064.0), max_population (8861400, 181000, 5083000) | countrylanguage : isofficial (\"T\", \"F\"), percentage (9.1, 22.4, 19.7), language (\"Kirgiz\", \"Hebrew\", \"Atayal\"), countrycode (\"FRA\", \"FRO\", \"MRT\") | sqlite_sequence : name (\"city\"), seq (4079)", 
        "new_table_name": "country_population_gnp", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "GNP", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''"
        ]
    }, 
    {
        "query2": "select avg_lifeexpectancy from country_lifeexpectancy where continent = \"Africa\" and governmentform = \"Republic\"", 
        "schema_without_content": "countrylanguage : language , percentage , countrycode , isofficial  | country : surfacearea , indepyear , region , gnpold , localname , code2 , name , headofstate , gnp , population , lifeexpectancy , code , capital , continent , governmentform \" | city : district , countrycode , name , id , population  | sqlite_sequence : seq , name  | country_lifeexpectancy : max_lifeexpectancy , min_lifeexpectancy , sum_lifeexpectancy , avg_lifeexpectancy ", 
        "query1": "select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "in", 
            "African", 
            "countries", 
            "that", 
            "are", 
            "republics", 
            "?"
        ], 
        "all_raw_cols": [
            "lifeexpectancy"
        ], 
        "question": "What is the average life expectancy in African countries that are republics?", 
        "all_cols": [
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "countrylanguage : language (\"Greenlandic\", \"Bugi\", \"Norwegian\"), percentage (0.2, 33.0, 23.3), countrycode (\"SPM\", \"YEM\", \"CCK\"), isofficial (\"T\", \"F\") | country : surfacearea (5765.0, 322463.0, 1705.0), indepyear (1991, 843, 1976), region (\"Southern Europe\", \"Antarctica\", \"Western Europe\"), gnpold (2102826.0, 6097.0, 6097.0), localname (\"Marshall Islands/Majol\", \"Nederlandse Antillen\", \"Honduras\"), code2 (\"KW\", \"BN\", \"LC\"), name (\"Virgin Islands, U.S.\", \"Bosnia and Herzegovina\", \"Sudan\"), headofstate (\"Ante Jelavic\", \"Chen Shui-bian\", \"Akihito\"), gnp (55017.0, 2012.0, 2012.0), population (10278100, 50456000, 20000), lifeexpectancy (62.2, 76.9, 63.3), code (\"COL\", \"MUS\", \"MOZ\"), capital (2508, 3063, 1), continent (\"Antarctica\", \"South America\", \"North America\"), governmentform (\"Part of Denmark\", \"Part of Denmark\", \"Constitutional Monarchy (Emirate)\") | city : district (\"South Dakota\", \"Hajd\u00c3\u00ba-Bihar\", \"Bishkek shaary\"), countrycode (\"NFK\", \"DEU\", \"AND\"), name (\"Ciudad Bol\u00c3\u00advar\", \"Nishinomiya\", \"S\u00c3\u00a3o Gon\u00c3\u00a7alo\"), id (1518, 272, 3863), population (261911, 143286, 317600) | sqlite_sequence : seq (4079), name (\"city\") | country_lifeexpectancy : max_lifeexpectancy (75.2, 63.3, 70.9), min_lifeexpectancy (78.4, 72.3, 51.6), sum_lifeexpectancy (71.4, 66.3, 73.3), avg_lifeexpectancy (71.5, 73.2, 73.4)", 
        "new_table_name": "country_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Africa\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"Republic\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Africa", 
            "''", 
            "AND", 
            "GovernmentForm", 
            "=", 
            "``", 
            "Republic", 
            "''"
        ]
    }, 
    {
        "query2": "select avg_lifeexpectancy from country_lifeexpectancy where continent = \"Africa\" and governmentform = \"Republic\"", 
        "schema_without_content": "city : countrycode , population , district , id , name  | countrylanguage : language , countrycode , percentage , isofficial  | sqlite_sequence : seq , name  | country : name , code2 , gnp , lifeexpectancy , capital , surfacearea , code , population , governmentform , localname , continent , gnpold , region , indepyear , headofstate  | country_lifeexpectancy : avg_lifeexpectancy , max_lifeexpectancy , min_lifeexpectancy , sum_lifeexpectancy ", 
        "query1": "select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "for", 
            "countries", 
            "in", 
            "Africa", 
            "which", 
            "are", 
            "republics", 
            "?"
        ], 
        "all_raw_cols": [
            "lifeexpectancy"
        ], 
        "question": "Give the average life expectancy for countries in Africa which are republics?", 
        "all_cols": [
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "city : countrycode (\"ASM\", \"ALB\", \"FSM\"), population (4017733, 386855, 130200), district (\"Koror\", \"Dakhlet Nou\u00c3\u00a2dhibou\", \"Attika\"), id (379, 1041, 989), name (\"Minatitl\u00c3\u00a1n\", \"Matsudo\", \"D\u00c3\u00bcren\") | countrylanguage : language (\"Lithuanian\", \"Chokwe\", \"Slovene\"), countrycode (\"CCK\", \"MRT\", \"TGO\"), percentage (33.0, 7.0, 8.6), isofficial (\"T\", \"F\") | sqlite_sequence : seq (4079), name (\"city\") | country : name (\"Suriname\", \"Lebanon\", \"French Polynesia\"), code2 (\"GU\", \"PL\", \"AT\"), gnp (16904.0, 746.0, 75921.0), lifeexpectancy (78.9, 63.3, 74.5), capital (2696, 3248, 645), surfacearea (581730.0, 527968.0, 160.0), code (\"FJI\", \"BOL\", \"BRA\"), population (19000, 3698500, 119000), governmentform (\"Part of Denmark\", \"Commonwealth of the US\", \"Occupied by Marocco\"), localname (\"Guam\", \"Ukrajina\", \"Nepal\"), continent (\"North America\", \"Europe\", \"Oceania\"), gnpold (1296830.0, 135636.0, 30373.0), region (\"Southern Africa\", \"Eastern Africa\", \"Southern Africa\"), indepyear (1901, 1902, 1945), headofstate (\"Islam Karimov\", \"Jorge Batlle Ib\u00c3\u00a1\u00c3\u00b1ez\", \"Abdullah II\") | country_lifeexpectancy : avg_lifeexpectancy (76.5, 74.7, 73.7), max_lifeexpectancy (68.4, 66.4, 78.6), min_lifeexpectancy (54.7, 42.9, 46.0), sum_lifeexpectancy (59.5, 73.1, 63.2)", 
        "new_table_name": "country_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Africa\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"Republic\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(lifeexpectancy) from country where continent = \"Africa\" and governmentform = \"Republic\"", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Africa", 
            "''", 
            "AND", 
            "GovernmentForm", 
            "=", 
            "``", 
            "Republic", 
            "''"
        ]
    }, 
    {
        "query2": "select sum_surfacearea from country_surfacearea where continent = \"Asia\" or continent = \"Europe\"", 
        "schema_without_content": "city : population , id , district , countrycode , name  | country : capital , name , indepyear , code2 , population , gnp , lifeexpectancy , localname , headofstate , region , continent , surfacearea , governmentform , code , gnpold  | country_surfacearea : avg_surfacearea , sum_surfacearea , max_surfacearea , min_surfacearea  | sqlite_sequence : name , seq  | countrylanguage : isofficial , countrycode , percentage , language ", 
        "query1": "select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "or", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "continents", 
            "Asia", 
            "and", 
            "Europe", 
            "?"
        ], 
        "all_raw_cols": [
            "surfacearea"
        ], 
        "question": "What is the total surface area of the continents Asia and Europe?", 
        "all_cols": [
            "sum_surfacearea", 
            "avg_surfacearea", 
            "min_surfacearea", 
            "max_surfacearea"
        ], 
        "schema_with_content": "city : population (295058, 183912, 241771), id (2866, 178, 3034), district (\"Managua\", \"Kansas\", \"East Flanderi\"), countrycode (\"HRV\", \"MMR\", \"BWA\"), name (\"Bani Suwayf\", \"Toyota\", \"Utsunomiya\") | country : capital (2447, 1530, 2914), name (\"United States Minor Outlying Islands\", \"Brazil\", \"Nepal\"), indepyear (885, 1350, 1966), code2 (\"GH\", \"GF\", \"CR\"), population (32300, 5496000, 6217000), gnp (10692.0, 2036.0, 320749.0), lifeexpectancy (45.6, 46.0, 77.8), localname (\"Uruguay\", \"Komori/Comores\", \"Soomaaliya\"), headofstate (\"\", \"Leonid Kut\u00c5\u00a1ma\", \"Alfonso Portillo Cabrera\"), region (\"Australia and New Zealand\", \"British Islands\", \"Eastern Africa\"), continent (\"Oceania\", \"Europe\", \"North America\"), surfacearea (300000.0, 1399.0, 175016.0), governmentform (\"Socialistic Republic\", \"Overseas Department of France\", \"Nonmetropolitan Territory of New Zealand\"), code (\"SYR\", \"TUR\", \"TJK\"), gnpold (5639.0, 7388.0, 58549.0) | country_surfacearea : avg_surfacearea (1221037.0, 25713.0, 9251.0), sum_surfacearea (331689.0, 1566500.0, 964.0), max_surfacearea (1904569.0, 130000.0, 430.0), min_surfacearea (270534.0, 7780.0, 637657.0) | sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"ZMB\", \"TZA\", \"GMB\"), percentage (2.4, 7.6, 1.7), language (\"Warrau\", \"Crioulo\", \"Gio\")", 
        "new_table_name": "country_surfacearea", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ], 
                "or", 
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Europe\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "OR", 
            "Continent", 
            "=", 
            "``", 
            "Europe", 
            "''"
        ]
    }, 
    {
        "query2": "select sum_surfacearea from country_surfacearea where continent = \"Asia\" or continent = \"Europe\"", 
        "schema_without_content": "city : population , id , countrycode , name , district  | sqlite_sequence : name , seq  | country : governmentform \", \"Socialistic State\", name , gnp , indepyear , localname , gnpold , population , code2 , capital , continent , surfacearea , code , region , lifeexpectancy , headofstate  | countrylanguage : percentage , isofficial , countrycode , language  | country_surfacearea : avg_surfacearea , max_surfacearea , sum_surfacearea , min_surfacearea ", 
        "query1": "select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "or", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "total", 
            "surface", 
            "area", 
            "covered", 
            "by", 
            "countries", 
            "in", 
            "Asia", 
            "or", 
            "Europe", 
            "."
        ], 
        "all_raw_cols": [
            "surfacearea"
        ], 
        "question": "Give the total surface area covered by countries in Asia or Europe.", 
        "all_cols": [
            "sum_surfacearea", 
            "avg_surfacearea", 
            "min_surfacearea", 
            "max_surfacearea"
        ], 
        "schema_with_content": "city : population (264670, 95165, 159665), id (2974, 1938, 3484), countrycode (\"SOM\", \"NLD\", \"LBR\"), name (\"Juazeiro\", \"Allende\", \"Nowshera\"), district (\"Ciego de \u00c3\u0081vila\", \"KwaZulu-Natal\", \"Gumma\") | sqlite_sequence : name (\"city\"), seq (4079) | country : governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Monarchy (Emirate)\", \"Socialistic State\"), name (\"Niger\", \"Panama\", \"Nepal\"), gnp (334.0, 8287.0, 105.0), indepyear (1945, 1841, 1948), localname (\"Saint Helena\", \"Zimbabwe\", \"Portugal\"), gnpold (153907.0, 15129.0, 539.0), population (4459000, 9586000, 37032000), code2 (\"KM\", \"KR\", \"FK\"), capital (2484, 1786, 201), continent (\"Africa\", \"Africa\", \"Asia\"), surfacearea (462840.0, 1221037.0, 1075.0), code (\"MKD\", \"NFK\", \"MTQ\"), region (\"Western Europe\", \"Micronesia\", \"Southern Europe\"), lifeexpectancy (60.2, 72.7, 48.8), headofstate (\"Chen Shui-bian\", \"Alfonso Portillo Cabrera\", \"Mohammad Omar\") | countrylanguage : percentage (10.5, 43.7, 12.9), isofficial (\"T\", \"F\"), countrycode (\"PSE\", \"VAT\", \"DZA\"), language (\"Mbete\", \"Chamorro\", \"Banja\") | country_surfacearea : avg_surfacearea (56785.0, 344.0, 316.0), max_surfacearea (475442.0, 274000.0, 5130.0), sum_surfacearea (1104300.0, 12173.0, 62422.0), min_surfacearea (33851.0, 53.0, 83859.0)", 
        "new_table_name": "country_surfacearea", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ], 
                "or", 
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Europe\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(surfacearea) from country where continent = \"Asia\" or continent = \"Europe\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "OR", 
            "Continent", 
            "=", 
            "``", 
            "Europe", 
            "''"
        ]
    }, 
    {
        "query2": "select sum_population from city_population where district = \"Gelderland\"", 
        "schema_without_content": "countrylanguage : countrycode , language , percentage , isofficial  | city : district , name , population , id , countrycode  | country : indepyear , region , lifeexpectancy , name , localname , gnp , population , capital , governmentform , gnpold , headofstate , code2 , surfacearea , code , continent  | city_population : min_population , max_population , avg_population , sum_population  | sqlite_sequence : seq , name ", 
        "query1": "select sum(population) from city where district = \"Gelderland\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "city", 
            "where", 
            "district", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "people", 
            "live", 
            "in", 
            "Gelderland", 
            "district", 
            "?"
        ], 
        "all_raw_cols": [
            "population"
        ], 
        "question": "How many people live in Gelderland district?", 
        "all_cols": [
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population"
        ], 
        "schema_with_content": "countrylanguage : countrycode (\"SDN\", \"JPN\", \"IRN\"), language (\"Papiamento\", \"Lotuko\", \"Tibetan\"), percentage (45.5, 12.5, 65.0), isofficial (\"T\", \"F\") | city : district (\"Yamanashi\", \"Primorje\", \"al-Hasaka\"), name (\"Jakutsk\", \"Korhogo\", \"Okinawa\"), population (142044, 95411, 124215), id (3136, 3214, 457), countrycode (\"CPV\", \"PRT\", \"LBR\") | country : indepyear (1830, 1350, 1961), region (\"Micronesia/Caribbean\", \"Melanesia\", \"Southern Africa\"), lifeexpectancy (70.0, 70.3, 51.6), name (\"Saudi Arabia\", \"South Africa\", \"Saint Vincent and the Grenadines\"), localname (\"Ecuador\", \"T\u00e2\u0080\u0099ai-wan\", \"Grenada\"), gnp (14194.0, 63.2, 998.0), population (20000, 2856000, 4478500), capital (645, 919, 2447), governmentform (\"Special Administrative Region of China\", \"Autonomous Area\", \"Constitutional Monarchy\"), gnpold (2383.0, 8700.0, 755.0), headofstate (\"Yoweri Museveni\", \"Tr\u00c3\u00a2n Duc Luong\", \"Alfonso Portillo Cabrera\"), code2 (\"SK\", \"PK\", \"PA\"), surfacearea (314.0, 17818.0, 1221037.0), code (\"PAK\", \"CAF\", \"ARE\"), continent (\"North America\", \"Asia\", \"Europe\") | city_population : min_population (130800, 281248, 173163), max_population (279183, 103962, 319033), avg_population (365463, 130800, 101984), sum_population (126346, 102176, 88987) | sqlite_sequence : seq (4079), name (\"city\")", 
        "new_table_name": "city_population", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "city", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"Gelderland\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population) from city where district = \"Gelderland\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            "FROM", 
            "city", 
            "WHERE", 
            "District", 
            "=", 
            "``", 
            "Gelderland", 
            "''"
        ]
    }, 
    {
        "query2": "select sum_population from city_population where district = \"Gelderland\"", 
        "schema_without_content": "sqlite_sequence : name , seq  | city_population : sum_population , max_population , avg_population , min_population  | city : district , population , name , id , countrycode  | country : governmentform \", capital , code , gnp , surfacearea , headofstate , population , continent , name , indepyear , region , gnpold , localname , code2 , lifeexpectancy  | countrylanguage : language , countrycode , isofficial , percentage ", 
        "query1": "select sum(population) from city where district = \"Gelderland\"", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "city", 
            "where", 
            "district", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "population", 
            "of", 
            "Gelderland", 
            "district", 
            "?"
        ], 
        "all_raw_cols": [
            "population"
        ], 
        "question": "What is the total population of Gelderland district?", 
        "all_cols": [
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population"
        ], 
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | city_population : sum_population (309010, 95311, 164092), max_population (586300, 101000, 117539), avg_population (179000, 134355, 141700), min_population (133859, 115171, 100079) | city : district (\"Idaho\", \"Par\u00c3\u00a1\", \"San Miguelito\"), population (149473, 101792, 288100), name (\"Sariwon\", \"Chang-won\", \"Rawalpindi\"), id (3727, 2468, 2488), countrycode (\"MWI\", \"HND\", \"CHL\") | country : governmentform (\"Commonwealth of the US\", \"Islamic Emirate\", \"Constitutional Monarchy (Emirate)\"), capital (3017, 538, 2486), code (\"SWE\", \"ZMB\", \"CIV\"), gnp (612.0, 75921.0, 195746.0), surfacearea (193.0, 751.0, 637657.0), headofstate (\"Norodom Sihanouk\", \"kenraali Than Shwe\", \"Heyd\u00c3\u00a4r \u00c3\u0084liyev\"), population (18827000, 217000, 31147000), continent (\"North America\", \"North America\", \"Asia\"), name (\"Singapore\", \"Finland\", \"Germany\"), indepyear (1955, 1983, 1946), region (\"Micronesia\", \"Southeast Asia\", \"Melanesia\"), gnpold (430572.0, 173610.0, 2383.0), localname (\"To\u00c3\u00a7ikiston\", \"Qatar\", \"Al-Maghrib\"), code2 (\"SY\", \"SB\", \"GE\"), lifeexpectancy (63.1, 69.1, 69.9) | countrylanguage : language (\"Tadzhik\", \"Cakchiquel\", \"Dagara\"), countrycode (\"ISL\", \"MSR\", \"LAO\"), isofficial (\"T\", \"F\"), percentage (5.1, 16.1, 28.8)", 
        "new_table_name": "city_population", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "city", 
                "id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"Gelderland\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population) from city where district = \"Gelderland\"", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            "FROM", 
            "city", 
            "WHERE", 
            "District", 
            "=", 
            "``", 
            "Gelderland", 
            "''"
        ]
    }, 
    {
        "query2": "select avg_gnp, sum_population from country_gnp_population where governmentform = \"US Territory\"", 
        "schema_without_content": "city : id , countrycode , district , name , population  | country : indepyear , gnp , lifeexpectancy , population , gnpold , headofstate , capital , name , region , code2 , surfacearea , governmentform , code , localname , continent  | sqlite_sequence : seq , name  | countrylanguage : isofficial , percentage , countrycode , language  | country_gnp_population : sum_gnp , avg_gnp , min_population , min_gnp , max_population , sum_population , avg_population , max_gnp ", 
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "gnp", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "country", 
            "where", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "GNP", 
            "and", 
            "total", 
            "population", 
            "in", 
            "all", 
            "nations", 
            "whose", 
            "government", 
            "is", 
            "US", 
            "territory", 
            "?"
        ], 
        "all_raw_cols": [
            "gnp", 
            "population"
        ], 
        "question": "What is the average GNP and total population in all nations whose government is US territory?", 
        "all_cols": [
            "sum_gnp", 
            "avg_gnp", 
            "min_gnp", 
            "max_gnp", 
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population"
        ], 
        "schema_with_content": "city : id (417, 1662, 2068), countrycode (\"GUF\", \"NIU\", \"BHS\"), district (\"Toyama\", \"Basra\", \"Aksaray\"), name (\"Shivapuri\", \"Irvine\", \"Gillingham\"), population (113428, 195400, 125341) | country : indepyear (1806, 1945, 1956), gnp (19008.0, 722.0, 121914.0), lifeexpectancy (73.3, 78.1, 73.2), population (2583000, 56000, 428000), gnpold (10169.0, 325.0, 7388.0), headofstate (\"Sellapan Rama Nathan\", \"\u00c3\u0093lafur Ragnar Gr\u00c3\u00admsson\", \"Mswati III\"), capital (2437, 3209, 2452), name (\"Mauritius\", \"Zimbabwe\", \"Zimbabwe\"), region (\"Western Europe\", \"Australia and New Zealand\", \"Micronesia\"), code2 (\"VE\", \"BB\", \"MU\"), surfacearea (357022.0, 48511.0, 6.0), governmentform (\"Parlementary Monarchy\", \"US Territory\", \"Nonmetropolitan Territory of New Zealand\"), code (\"GUF\", \"TKM\", \"PAK\"), localname (\"Bosna i Hercegovina\", \"Uruguay\", \"Iran\"), continent (\"Antarctica\", \"Asia\", \"Antarctica\") | sqlite_sequence : seq (4079), name (\"city\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (95.6, 91.5, 3.5), countrycode (\"NER\", \"DMA\", \"IRQ\"), language (\"Ful\", \"Punjabi\", \"Kanem-bornu\") | country_gnp_population : sum_gnp (14194.0, 3563.0, 17000.0), avg_gnp (3459.0, 36124.0, 102896.0), min_population (34000, 3615000, 75967000), min_gnp (65107.0, 3527.0, 4127.0), max_population (6188000, 22244000, 3615000), sum_population (2583000, 45611000, 10925000), avg_population (754700, 8861400, 8000), max_gnp (195746.0, 12178.0, 746.0)", 
        "new_table_name": "country_gnp_population", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"US Territory\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "GNP", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "GovernmentForm", 
            "=", 
            "``", 
            "US", 
            "Territory", 
            "''"
        ]
    }, 
    {
        "query2": "select avg_gnp, sum_population from country_gnp_population where governmentform = \"US Territory\"", 
        "schema_without_content": "sqlite_sequence : name , seq  | city : population , name , district , id , countrycode  | country_gnp_population : min_population , avg_population , sum_population , max_population , sum_gnp , max_gnp , min_gnp , avg_gnp  | countrylanguage : percentage , isofficial , language , countrycode  | country : gnp , population , code2 , headofstate , region , code , continent , indepyear , localname , lifeexpectancy , capital , gnpold , governmentform \", \"Emirate Federation\", \"Republic\", name , surfacearea ", 
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "gnp", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "country", 
            "where", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "mean", 
            "GNP", 
            "and", 
            "total", 
            "population", 
            "of", 
            "nations", 
            "which", 
            "are", 
            "considered", 
            "US", 
            "territory", 
            "."
        ], 
        "all_raw_cols": [
            "gnp", 
            "population"
        ], 
        "question": "Give the mean GNP and total population of nations which are considered US territory.", 
        "all_cols": [
            "sum_gnp", 
            "avg_gnp", 
            "min_gnp", 
            "max_gnp", 
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population"
        ], 
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | city : population (308571, 299801, 170697), name (\"Lubao\", \"Taejon\", \"Pekan Baru\"), district (\"Midi-Pyr\u00c3\u00a9n\u00c3\u00a9es\", \"Santaf\u00c3\u00a9 de Bogot\u00c3\u00a1\", \"Biskra\"), id (799, 1218, 4066), countrycode (\"GHA\", \"ABW\", \"HTI\") | country_gnp_population : min_population (4807000, 22244000, 2583000), avg_population (5171300, 156483000, 4478500), sum_population (126714000, 22720000, 154000), max_population (24039000, 241000, 2000), sum_gnp (6.0, 8255.0, 146.0), max_gnp (2036.0, 5749.0, 9174.0), min_gnp (96.0, 414972.0, 4251.0), avg_gnp (1706.0, 6064.0, 2357.0) | countrylanguage : percentage (63.1, 11.2, 95.7), isofficial (\"T\", \"F\"), language (\"Warrau\", \"Soga\", \"Nubian Languages\"), countrycode (\"VCT\", \"MCO\", \"GUY\") | country : gnp (4768.0, 320749.0, 19008.0), population (11201000, 77000, 0), code2 (\"UM\", \"GP\", \"KY\"), headofstate (\"Mamadou Tandja\", \"Luis \u00c3\u0081ngel Gonz\u00c3\u00a1lez Macchi\", \"Ismail Omar Guelleh\"), region (\"South America\", \"Southeast Asia\", \"South America\"), code (\"NPL\", \"POL\", \"DNK\"), continent (\"Europe\", \"Antarctica\", \"Asia\"), indepyear (1769, 1953, 1981), localname (\"Centrafrique/B\u00c3\u00aa-Afr\u00c3\u00aeka\", \"Soomaaliya\", \"Moldova\"), lifeexpectancy (68.4, 55.0, 68.4), capital (3212, 916, 2453), gnpold (4361.0, 917719.0, 1767.0), governmentform (\"Constitutional Monarchy (Emirate)\", \"Emirate Federation\", \"Republic\"), name (\"Indonesia\", \"Burkina Faso\", \"Angola\"), surfacearea (118484.0, 11000.0, 112088.0)", 
        "new_table_name": "country_gnp_population", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"US Territory\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "GNP", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "GovernmentForm", 
            "=", 
            "``", 
            "US", 
            "Territory", 
            "''"
        ]
    }, 
    {
        "query2": "select count_language from country_countrylanguage_language where name = \"Aruba\"", 
        "schema_without_content": "countrylanguage : language , countrycode , percentage , isofficial  | country_countrylanguage_language : avg_language , max_language , sum_language , min_language , name  | city : countrycode , district , population , name , id  | sqlite_sequence : name , seq  | country : headofstate  Arafat\", \"Bharrat Jagdeo\", \"Mathieu K\u00c3\u00a9r\u00c3\u00a9kou\", surfacearea , gnp , continent , capital , name , population , gnpold , code2 , localname \", \"Cameroun/Cameroon\", indepyear , governmentform , lifeexpectancy , region , code ", 
        "query1": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "t2", 
            ".", 
            "language", 
            ")", 
            "from", 
            "country", 
            "as", 
            "t1", 
            "join", 
            "countrylanguage", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "code", 
            "=", 
            "t2", 
            ".", 
            "countrycode", 
            "where", 
            "t1", 
            ".", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "number", 
            "of", 
            "languages", 
            "used", 
            "in", 
            "Aruba", 
            "?"
        ], 
        "all_raw_cols": [
            "name", 
            "language"
        ], 
        "question": "What is the total number of languages used in Aruba?", 
        "all_cols": [
            "name", 
            "sum_language", 
            "avg_language", 
            "min_language", 
            "max_language"
        ], 
        "schema_with_content": "countrylanguage : language (\"Kuy\", \"Kayah\", \"Swedish\"), countrycode (\"MUS\", \"MYS\", \"GUF\"), percentage (99.9, 40.8, 58.3), isofficial (\"T\", \"F\") | country_countrylanguage_language : avg_language (\"Bicol\", \"Nama\", \"Mortlock\"), max_language (\"Romansh\", \"Somali\", \"French\"), sum_language (\"Chin\", \"Acholi\", \"Nuer\"), min_language (\"Rundi\", \"Fang\", \"Ndebele\"), name (\"Falkland Islands\", \"Nauru\", \"Benin\") | city : countrycode (\"FIN\", \"CMR\", \"BDI\"), district (\"Aquitaine\", \"Mizoram\", \"Hajd\u00c3\u00ba-Bihar\"), population (177522, 147738, 327211), name (\"Coatzacoalcos\", \"Salatiga\", \"Navolato\"), id (886, 3939, 2091) | sqlite_sequence : name (\"city\"), seq (4079) | country : headofstate (\"Yasser (Yasir) Arafat\", \"Bharrat Jagdeo\", \"Mathieu K\u00c3\u00a9r\u00c3\u00a9kou\"), surfacearea (1267000.0, 51100.0, 603700.0), gnp (9333.0, 293.0, 42168.0), continent (\"North America\", \"South America\", \"South America\"), capital (919, 716, 916), name (\"Eritrea\", \"Cape Verde\", \"Ethiopia\"), population (34000, 1987800, 7000), gnpold (6328.0, 30373.0, 1161.0), code2 (\"IN\", \"FI\", \"ST\"), localname (\"Yisra\u00e2\u0080\u0099el/Isra\u00e2\u0080\u0099il\", \"Choson Minjujuui In\u00c2\u00b4min Konghwaguk (Bukhan)\", \"Cameroun/Cameroon\"), indepyear (1912, 1919, 1976), governmentform (\"Monarchy\", \"Autonomous Area\", \"Part of Denmark\"), lifeexpectancy (60.0, 63.7, 62.2), region (\"Central America\", \"North America\", \"Eastern Africa\"), code (\"BHR\", \"REU\", \"SYR\")", 
        "new_table_name": "country_countrylanguage_language", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ], 
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ], 
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Aruba\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"", 
        "query_toks": [
            "SELECT", 
            "COUNT", 
            "(", 
            "T2.Language", 
            ")", 
            "FROM", 
            "country", 
            "AS", 
            "T1", 
            "JOIN", 
            "countrylanguage", 
            "AS", 
            "T2", 
            "ON", 
            "T1.Code", 
            "=", 
            "T2.CountryCode", 
            "WHERE", 
            "T1.Name", 
            "=", 
            "``", 
            "Aruba", 
            "''"
        ]
    }, 
    {
        "query2": "select count_language from country_countrylanguage_language where name = \"Aruba\"", 
        "schema_without_content": "country_countrylanguage_language : max_language , avg_language , name , sum_language , min_language  | countrylanguage : isofficial , percentage , language , countrycode  | country : capital , headofstate , localname , continent , code , name , indepyear , region , gnpold , surfacearea , lifeexpectancy , gnp , population , code2 , governmentform  | city : district , population , countrycode , id , name  | sqlite_sequence : name , seq ", 
        "query1": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "t2", 
            ".", 
            "language", 
            ")", 
            "from", 
            "country", 
            "as", 
            "t1", 
            "join", 
            "countrylanguage", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "code", 
            "=", 
            "t2", 
            ".", 
            "countrycode", 
            "where", 
            "t1", 
            ".", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "languages", 
            "are", 
            "spoken", 
            "in", 
            "Aruba", 
            "?"
        ], 
        "all_raw_cols": [
            "name", 
            "language"
        ], 
        "question": "How many languages are spoken in Aruba?", 
        "all_cols": [
            "name", 
            "sum_language", 
            "avg_language", 
            "min_language", 
            "max_language"
        ], 
        "schema_with_content": "country_countrylanguage_language : max_language (\"Abhyasi\", \"Balante\", \"Sinaberberi\"), avg_language (\"Malenasian Languages\", \"Cebuano\", \"Punjabi\"), name (\"Dominica\", \"Suriname\", \"Equatorial Guinea\"), sum_language (\"Miskito\", \"Danish\", \"Punu\"), min_language (\"Avarian\", \"Futuna\", \"Ijo\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (32.0, 23.5, 2.7), language (\"Mboshi\", \"Berberi\", \"Sunda\"), countrycode (\"VNM\", \"CPV\", \"IDN\") | country : capital (2507, 3162, 2710), headofstate (\"Vernon Shaw\", \"Chen Shui-bian\", \"Taufa'ahau Tupou IV\"), localname (\"Norge\", \"Bouvet\u00c3\u00b8ya\", \"Az\u00c3\u00a4rbaycan\"), continent (\"North America\", \"Antarctica\", \"Asia\"), code (\"BVT\", \"TKL\", \"MMR\"), name (\"Trinidad and Tobago\", \"Saint Kitts and Nevis\", \"Mexico\"), indepyear (None, 1776, 1492), region (\"Micronesia\", \"British Islands\", \"Southern Africa\"), gnpold (3371.0, 119833.0, 1145372.0), surfacearea (650.0, 41526.0, 1102.0), lifeexpectancy (70.9, 45.2, 45.3), gnp (63.2, 2352.0, 10226.0), population (20212000, 1295000, 146934000), code2 (\"LA\", \"AS\", \"AT\"), governmentform (\"Islamic Emirate\", \"Monarchy\", \"Commonwealth of the US\") | city : district (\"Bac Thai\", \"Kirovograd\", \"Heilongjiang\"), population (205100, 47900, 246833), countrycode (\"CAN\", \"AZE\", \"OMN\"), id (3388, 1746, 1748), name (\"Yuzhou\", \"Kamoke\", \"Manado\") | sqlite_sequence : name (\"city\"), seq (4079)", 
        "new_table_name": "country_countrylanguage_language", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ], 
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ], 
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Aruba\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = \"Aruba\"", 
        "query_toks": [
            "SELECT", 
            "COUNT", 
            "(", 
            "T2.Language", 
            ")", 
            "FROM", 
            "country", 
            "AS", 
            "T1", 
            "JOIN", 
            "countrylanguage", 
            "AS", 
            "T2", 
            "ON", 
            "T1.Code", 
            "=", 
            "T2.CountryCode", 
            "WHERE", 
            "T1.Name", 
            "=", 
            "``", 
            "Aruba", 
            "''"
        ]
    }, 
    {
        "query2": "select count_language, name from country_countrylanguage_language where number > 2", 
        "schema_without_content": "city : population , district , name \", \"Nijmegen\", countrycode , id  | country : governmentform \", \"Co-administrated\", name , code , headofstate , gnpold , code2 , surfacearea , localname , region , capital , gnp , lifeexpectancy , continent , population , indepyear  | sqlite_sequence : seq , name  | country_countrylanguage_language : avg_language , number, max_language , name , min_language , sum_language  | countrylanguage : isofficial , countrycode , percentage , language ", 
        "query1": "select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "t2", 
            ".", 
            "language", 
            ")", 
            ",", 
            "t1", 
            ".", 
            "name", 
            "from", 
            "country", 
            "as", 
            "t1", 
            "join", 
            "countrylanguage", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "code", 
            "=", 
            "t2", 
            ".", 
            "countrycode", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "name", 
            "having", 
            "count", 
            "(", 
            "*", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "country", 
            "name", 
            "and", 
            "the", 
            "numbers", 
            "of", 
            "languages", 
            "spoken", 
            "for", 
            "each", 
            "country", 
            "that", 
            "speaks", 
            "at", 
            "least", 
            "3", 
            "languages", 
            "."
        ], 
        "all_raw_cols": [
            "name", 
            "number", 
            "language"
        ], 
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", 
        "all_cols": [
            "name", 
            "number", 
            "sum_language", 
            "avg_language", 
            "min_language", 
            "max_language"
        ], 
        "schema_with_content": "city : population (94900, 222859, 233041), district (\"Zinder\", \"Sidi Bel Abb\u00c3\u00a8s\", \"Sakarya\"), name (\"Nueva San Salvador\", \"Bender (T\u00c3\u00aeghina)\", \"Nijmegen\"), countrycode (\"AGO\", \"RUS\", \"FIN\"), id (2418, 1037, 849) | country : governmentform (\"Dependent Territory of the UK\", \"Monarchy (Emirate)\", \"Co-administrated\"), name (\"Congo, The Democratic Republic of the\", \"Belgium\", \"Fiji Islands\"), code (\"BFA\", \"CZE\", \"GHA\"), headofstate (\"Islam Karimov\", \"V\u00c3\u00a1clav Havel\", \"Kumba Ial\u00c3\u00a1\"), gnpold (10285.0, 2559.0, 2149.0), code2 (\"QA\", \"KZ\", \"UG\"), surfacearea (238391.0, 17075400.0, 5130.0), localname (\"YeItyop\u00c2\u00b4iya\", \"Latvija\", \"Sesel/Seychelles\"), region (\"Micronesia/Caribbean\", \"Southern Africa\", \"Southeast Asia\"), capital (148, 1380, 915), gnp (320749.0, 598862.0, 2223.0), lifeexpectancy (79.4, 62.5, 71.1), continent (\"Antarctica\", \"North America\", \"Asia\"), population (50, 15942000, 79832000), indepyear (1960, 1917, 1960) | sqlite_sequence : seq (4079), name (\"city\") | country_countrylanguage_language : avg_language (\"Kuranko\", \"Uzbek\", \"Bali\"), number(5, 9, 5), max_language (\"Sunda\", \"Malay-English\", \"Vietnamese\"), name (\"Albania\", \"Brunei\", \"Morocco\"), min_language (\"Chamorro\", \"Garo\", \"Tongan\"), sum_language (\"Avarian\", \"Songhai\", \"Mandyako\") | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"CPV\", \"MEX\", \"CIV\"), percentage (17.3, 14.8, 92.5), language (\"Tuvalu\", \"Javanese\", \"Zapotec\")", 
        "new_table_name": "country_countrylanguage_language", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ], 
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ], 
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    9, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            3, 
                            0, 
                            false
                        ], 
                        null
                    ], 
                    2.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2", 
        "query_toks": [
            "SELECT", 
            "COUNT", 
            "(", 
            "T2.Language", 
            ")", 
            ",", 
            "T1.Name", 
            "FROM", 
            "country", 
            "AS", 
            "T1", 
            "JOIN", 
            "countrylanguage", 
            "AS", 
            "T2", 
            "ON", 
            "T1.Code", 
            "=", 
            "T2.CountryCode", 
            "GROUP", 
            "BY", 
            "T1.Name", 
            "HAVING", 
            "COUNT", 
            "(", 
            "*", 
            ")", 
            ">", 
            "2"
        ]
    }, 
    {
        "query2": "select count_language, name from country_countrylanguage_language where number > 2", 
        "schema_without_content": "country : population , governmentform , indepyear , gnpold , code , region , continent , name , surfacearea , headofstate , gnp , localname , lifeexpectancy , capital , code2  | sqlite_sequence : name , seq  | country_countrylanguage_language : min_language , max_language , name , avg_language , number, sum_language  | city : district , name , id , countrycode , population  | countrylanguage : percentage , language , isofficial , countrycode ", 
        "query1": "select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "t2", 
            ".", 
            "language", 
            ")", 
            ",", 
            "t1", 
            ".", 
            "name", 
            "from", 
            "country", 
            "as", 
            "t1", 
            "join", 
            "countrylanguage", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "code", 
            "=", 
            "t2", 
            ".", 
            "countrycode", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "name", 
            "having", 
            "count", 
            "(", 
            "*", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "of", 
            "countries", 
            "that", 
            "speak", 
            "more", 
            "than", 
            "2", 
            "languages", 
            ",", 
            "as", 
            "well", 
            "as", 
            "how", 
            "many", 
            "languages", 
            "they", 
            "speak", 
            "?"
        ], 
        "all_raw_cols": [
            "name", 
            "number", 
            "language"
        ], 
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", 
        "all_cols": [
            "name", 
            "number", 
            "sum_language", 
            "avg_language", 
            "min_language", 
            "max_language"
        ], 
        "schema_with_content": "country : population (15211000, 149000, 9169000), governmentform (\"Nonmetropolitan Territory of France\", \"Constitutional Monarchy, Federation\", \"Parliamentary Coprincipality\"), indepyear (1769, 1903, 1984), gnpold (5670.0, 189122.0, 19769.0), code (\"KGZ\", \"SLV\", \"ETH\"), region (\"Nordic Countries\", \"Eastern Europe\", \"South America\"), continent (\"South America\", \"South America\", \"North America\"), name (\"Israel\", \"Madagascar\", \"Afghanistan\"), surfacearea (1138914.0, 160.0, 459.0), headofstate (\"Azali Assoumani\", None, \"Kuniwo Nakamura\"), gnp (4768.0, 69213.0, 283.0), localname (\"Pakistan\", \"Malta\", \"Burkina Faso\"), lifeexpectancy (50.5, 52.3, 50.5), capital (3770, 3209, 4068), code2 (\"PK\", \"CF\", \"DJ\") | sqlite_sequence : name (\"city\"), seq (4079) | country_countrylanguage_language : min_language (\"Puyi\", \"Ainu\", \"Czech and Moravian\"), max_language (\"Ibibio\", \"Mixed Languages\", \"Kamba\"), name (\"Malawi\", \"Barbados\", \"Botswana\"), avg_language (\"Gogo\", \"Mandarin Chinese\", \"Abhyasi\"), number(2, 3, 9), sum_language (\"Embera\", \"Puyi\", \"Ronga\") | city : district (\"Atyrau\", \"Malopolskie\", \"Dar es Salaam\"), name (\"Chang-won\", \"Norwalk\", \"An\u00c3\u00a1polis\"), id (2621, 2083, 2085), countrycode (\"NRU\", \"LBN\", \"GUF\"), population (368993, 101300, 98049) | countrylanguage : percentage (18.4, 44.6, 50.7), language (\"Fijian\", \"Tamashek\", \"Latvian\"), isofficial (\"T\", \"F\"), countrycode (\"ERI\", \"SHN\", \"FLK\")", 
        "new_table_name": "country_countrylanguage_language", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ], 
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ], 
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    9, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            3, 
                            0, 
                            false
                        ], 
                        null
                    ], 
                    2.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select count(t2.language), t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having count(*) > 2", 
        "query_toks": [
            "SELECT", 
            "COUNT", 
            "(", 
            "T2.Language", 
            ")", 
            ",", 
            "T1.Name", 
            "FROM", 
            "country", 
            "AS", 
            "T1", 
            "JOIN", 
            "countrylanguage", 
            "AS", 
            "T2", 
            "ON", 
            "T1.Code", 
            "=", 
            "T2.CountryCode", 
            "GROUP", 
            "BY", 
            "T1.Name", 
            "HAVING", 
            "COUNT", 
            "(", 
            "*", 
            ")", 
            ">", 
            "2"
        ]
    }, 
    {
        "query2": "select sum_population, governmentform from country_population_lifeexpectancy where avg_lifeexpectancy > 72", 
        "schema_without_content": "sqlite_sequence : name , seq  | countrylanguage : countrycode , isofficial , language , percentage  | country_population_lifeexpectancy : max_lifeexpectancy , max_population , min_lifeexpectancy , min_population , sum_population , avg_lifeexpectancy , sum_lifeexpectancy , governmentform , avg_population  | country : code , lifeexpectancy , capital , name , surfacearea , gnpold , region , population , headofstate , continent , code2 , localname , governmentform , indepyear , gnp  | city : id , countrycode , name , population , district ", 
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "governmentform", 
            "from", 
            "country", 
            "group", 
            "by", 
            "governmentform", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "government", 
            "form", 
            "name", 
            "and", 
            "total", 
            "population", 
            "for", 
            "each", 
            "government", 
            "form", 
            "whose", 
            "average", 
            "life", 
            "expectancy", 
            "is", 
            "longer", 
            "than", 
            "72", 
            "."
        ], 
        "all_raw_cols": [
            "governmentform", 
            "population", 
            "lifeexpectancy"
        ], 
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", 
        "all_cols": [
            "governmentform", 
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : countrycode (\"FRO\", \"GRD\", \"NIU\"), isofficial (\"T\", \"F\"), language (\"Bengali\", \"Macedonian\", \"Maori\"), percentage (4.5, 74.1, 92.5) | country_population_lifeexpectancy : max_lifeexpectancy (64.0, 44.0, 53.2), max_population (64000, 444000, 2153000), min_lifeexpectancy (75.6, 74.5, 64.0), min_population (1726000, 16125000, 59225700), sum_population (6097000, 4854000, 2662000), avg_lifeexpectancy (64.0, 73.1, 70.9), sum_lifeexpectancy (77.4, 46.0, 47.4), governmentform (\"Autonomous Area\", \"Parlementary Monarchy\", \"Parliamentary Coprincipality\"), avg_population (24318000, 98881000, 217000) | country : code (\"SOM\", \"ZWE\", \"GUF\"), lifeexpectancy (70.3, 77.7, 70.9), capital (3248, 2509, 179), name (\"Seychelles\", \"Paraguay\", \"Cameroon\"), surfacearea (549.0, 622.0, 316.0), gnpold (420.0, 383.0, 46966.0), region (\"South America\", \"North America\", \"Southern and Central Asia\"), population (754700, 37032000, 19000), headofstate (\"Abdoulaye Wade\", \"Rainier III\", \"Hamad ibn Khalifa al-Thani\"), continent (\"South America\", \"Oceania\", \"Oceania\"), code2 (\"IR\", \"CV\", \"GN\"), localname (\"Vanuatu\", \"Argentina\", \"Macau/Aomen\"), governmentform (\"Dependent Territory of the US\", \"Overseas Department of France\", \"Islamic Emirate\"), indepyear (1955, 1821, 1978), gnp (571.0, 2357.0, 4397.0) | city : id (972, 1792, 2340), countrycode (\"VIR\", \"CRI\", \"NPL\"), name (\"J\u00c3\u00b6nk\u00c3\u00b6ping\", \"Hamamatsu\", \"Pitesti\"), population (133859, 389815, 97860), district (\"Chaco\", \"Hadramawt\", \"Shamal Sina\")", 
        "new_table_name": "country_population_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    19, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "GovernmentForm", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "GovernmentForm", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ">", 
            "72"
        ]
    }, 
    {
        "query2": "select sum_population, governmentform from country_population_lifeexpectancy where avg_lifeexpectancy > 72", 
        "schema_without_content": "city : name , district , id , population , countrycode  | country_population_lifeexpectancy : min_lifeexpectancy , max_lifeexpectancy , sum_lifeexpectancy , min_population , governmentform \", \"Republic\", \"Islamic Emirate\", avg_population , max_population , avg_lifeexpectancy , sum_population  | countrylanguage : countrycode , isofficial , percentage , language  | country : lifeexpectancy , code , governmentform \", \"People'sRepublic\", \"Monarchy \", code2 , gnpold , indepyear , surfacearea , continent , gnp , population , capital , region , headofstate , name , localname  | sqlite_sequence : name , seq ", 
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "governmentform", 
            "from", 
            "country", 
            "group", 
            "by", 
            "governmentform", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "different", 
            "government", 
            "forms", 
            "and", 
            "what", 
            "is", 
            "the", 
            "total", 
            "population", 
            "of", 
            "each", 
            "for", 
            "government", 
            "forms", 
            "that", 
            "have", 
            "an", 
            "average", 
            "life", 
            "expectancy", 
            "greater", 
            "than", 
            "72", 
            "?"
        ], 
        "all_raw_cols": [
            "governmentform", 
            "population", 
            "lifeexpectancy"
        ], 
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", 
        "all_cols": [
            "governmentform", 
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "city : name (\"Talkha\", \"Dasmari\u00c3\u00b1as\", \"Inazawa\"), district (\"West Irian\", \"Tianjin\", \"Kang-won\"), id (1731, 2227, 3803), population (126305, 114024, 97900), countrycode (\"URY\", \"MAR\", \"IRQ\") | country_population_lifeexpectancy : min_lifeexpectancy (49.2, 76.5, 75.2), max_lifeexpectancy (74.5, 49.0, 47.4), sum_lifeexpectancy (71.8, 68.6, 37.8), min_population (8091800, 31147000, 1226000), governmentform (\"Constitutional Monarchy (Emirate)\", \"Republic\", \"Islamic Emirate\"), avg_population (103000, 77000, 39441700), max_population (5171300, 23115000, 27000), avg_lifeexpectancy (70.8, 63.3, 51.0), sum_population (3567000, 19680000, 8861400) | countrylanguage : countrycode (\"COL\", \"CHN\", \"GHA\"), isofficial (\"T\", \"F\"), percentage (98.1, 79.8, 90.0), language (\"Khoekhoe\", \"Kongo\", \"Southsotho\") | country : lifeexpectancy (64.0, 76.4, 73.3), code (\"BOL\", \"NER\", \"CHE\"), governmentform (\"Constitutional Monarchy (Emirate)\", \"People'sRepublic\", \"Monarchy (Emirate)\"), code2 (\"TC\", \"FK\", \"CG\"), gnpold (73132.0, 171028.0, 215002.0), indepyear (1979, 1946, 1838), surfacearea (3287263.0, 245857.0, 1104300.0), continent (\"Europe\", \"Europe\", \"Asia\"), gnp (17000.0, 283.0, 818.0), population (61399000, 241000, 21778000), capital (2697, 3580, 2734), region (\"Western Africa\", \"South America\", \"Antarctica\"), headofstate (\"Heyd\u00c3\u00a4r \u00c3\u0084liyev\", \"Islam Karimov\", \"Margrethe II\"), name (\"Netherlands Antilles\", \"Bouvet Island\", \"Fiji Islands\"), localname (\"Malta\", \"Saint Lucia\", \"Bangladesh\") | sqlite_sequence : name (\"city\"), seq (4079)", 
        "new_table_name": "country_population_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    19, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "GovernmentForm", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "GovernmentForm", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ">", 
            "72"
        ]
    }, 
    {
        "query2": "select sum_population, avg_lifeexpectancy, continent from country_population_lifeexpectancy where avg_lifeexpectancy < 72", 
        "schema_without_content": "sqlite_sequence : name , seq  | countrylanguage : percentage , isofficial , countrycode , language  | country_population_lifeexpectancy : avg_lifeexpectancy , min_lifeexpectancy , avg_population , max_population , sum_population , min_population , continent , sum_lifeexpectancy , max_lifeexpectancy  | city : countrycode , district , name , id , population  | country : code2 , gnpold , code , capital , localname , lifeexpectancy , name , governmentform , continent , surfacearea , gnp , population , headofstate , indepyear , region ", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "and", 
            "total", 
            "population", 
            "for", 
            "each", 
            "continent", 
            "where", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "is", 
            "shorter", 
            "than", 
            "72", 
            "?"
        ], 
        "all_raw_cols": [
            "continent", 
            "population", 
            "lifeexpectancy"
        ], 
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", 
        "all_cols": [
            "continent", 
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : percentage (98.3, 57.5, 14.0), isofficial (\"T\", \"F\"), countrycode (\"TKM\", \"MYT\", \"TMP\"), language (\"Ouaddai\", \"Mant\u00c5\u00a1u\", \"Saraiki\") | country_population_lifeexpectancy : avg_lifeexpectancy (69.9, 69.3, 73.4), min_lifeexpectancy (51.1, 67.2, 37.5), avg_population (3520000, 3972000, 98881000), max_population (7000, 1295000, 66591000), sum_population (4968000, 46844000, 2943000), min_population (18827000, 98881000, 1622000), continent (\"Antarctica\", \"North America\", \"Asia\"), sum_lifeexpectancy (64.0, 66.3, 69.9), max_lifeexpectancy (78.0, 51.0, 73.8) | city : countrycode (\"NFK\", \"HND\", \"SMR\"), district (\"Nakhon Sawan\", \"Mizoram\", \"Jalisco\"), name (\"Serravalle\", \"Hsinchu\", \"Yangjiang\"), id (2860, 2879, 718), population (139710, 524000, 93350) | country : code2 (\"PN\", \"MY\", \"IO\"), gnpold (21300.0, 31966.0, 6887.0), code (\"HND\", \"TON\", \"KOR\"), capital (2821, 3250, 583), localname (\"Centrafrique/B\u00c3\u00aa-Afr\u00c3\u00aeka\", \"kaNgwane\", \"R\u00c3\u00a9union\"), lifeexpectancy (66.2, 52.3, 74.4), name (\"Guinea\", \"Nauru\", \"Guadeloupe\"), governmentform (\"Dependent Territory of Norway\", \"Dependent Territory of Norway\", \"Overseas Department of France\"), continent (\"North America\", \"Asia\", \"Africa\"), surfacearea (316.0, 637657.0, 1705.0), gnp (1263.0, 102896.0, 2108.0), population (7651000, 328000, 5171300), headofstate (\"Jos\u00c3\u00a9 Alexandre Gusm\u00c3\u00a3o\", \"Valdas Adamkus\", \"Qabus ibn Sa\u00c2\u00b4id\"), indepyear (1350, 1958, 1841), region (\"Central America\", \"Central Africa\", \"South America\")", 
        "new_table_name": "country_population_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ]
    }, 
    {
        "query2": "select sum_population, avg_lifeexpectancy, continent from country_population_lifeexpectancy where avg_lifeexpectancy < 72", 
        "schema_without_content": "country : headofstate , indepyear , name , gnpold , code2 , governmentform , capital , code , lifeexpectancy , localname , gnp , continent , region , surfacearea , population  | city : name , id , district , population , countrycode  | country_population_lifeexpectancy : continent , sum_population , max_lifeexpectancy , sum_lifeexpectancy , max_population , min_lifeexpectancy , min_population , avg_population , avg_lifeexpectancy  | sqlite_sequence : seq , name  | countrylanguage : percentage , isofficial , countrycode , language ", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "different", 
            "continents", 
            "and", 
            "the", 
            "total", 
            "popuation", 
            "and", 
            "average", 
            "life", 
            "expectancy", 
            "corresponding", 
            "to", 
            "each", 
            ",", 
            "for", 
            "continents", 
            "that", 
            "have", 
            "an", 
            "average", 
            "life", 
            "expectancy", 
            "less", 
            "than", 
            "72", 
            "?"
        ], 
        "all_raw_cols": [
            "continent", 
            "population", 
            "lifeexpectancy"
        ], 
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", 
        "all_cols": [
            "continent", 
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_lifeexpectancy", 
            "avg_lifeexpectancy", 
            "min_lifeexpectancy", 
            "max_lifeexpectancy"
        ], 
        "schema_with_content": "country : headofstate (\"\u00c3\u0089mile Lahoud\", \"Norodom Sihanouk\", \"Carl XVI Gustaf\"), indepyear (1993, 1966, 1828), name (\"Brunei\", \"Mozambique\", \"Denmark\"), gnpold (52037.0, 119833.0, 227757.0), code2 (\"CI\", \"HR\", \"GU\"), governmentform (\"Islamic Republic\", \"Islamic Emirate\", \"Socialistic State\"), capital (2698, 69, 1365), code (\"RUS\", \"FJI\", \"GRL\"), lifeexpectancy (77.8, 66.0, 48.8), localname (\"Guyane fran\u00c3\u00a7aise\", \"T\u00c3\u00bcrkiye\", \"Ha\u00c3\u00afti/Dayti\"), gnp (13714.0, 97.0, 6648.0), continent (\"Africa\", \"North America\", \"Antarctica\"), region (\"Southern and Central Asia\", \"Eastern Europe\", \"Eastern Africa\"), surfacearea (96.0, 91982.0, 91982.0), population (23930000, 12646000, 8495000) | city : name (\"Mahabad\", \"Munich [M\u00c3\u00bcnchen]\", \"Bridgeport\"), id (1443, 3415, 2121), district (\"Katsina\", \"Ningxia\", \"Samara\"), population (127801, 146262, 111500), countrycode (\"PLW\", \"BRN\", \"FSM\") | country_population_lifeexpectancy : continent (\"Oceania\", \"Oceania\", \"Europe\"), sum_population (8091800, 190000, 77000), max_lifeexpectancy (37.5, 66.0, 77.8), sum_lifeexpectancy (37.5, 68.9, 53.2), max_population (38653600, 38653600, 1226000), min_lifeexpectancy (66.0, 70.3, 74.5), min_population (10925000, 5605000, 270000), avg_population (5433000, 25662000, 33517000), avg_lifeexpectancy (76.5, None, 68.7) | sqlite_sequence : seq (4079), name (\"city\") | countrylanguage : percentage (34.8, 46.0, 3.1), isofficial (\"T\", \"F\"), countrycode (\"AND\", \"NGA\", \"BGR\"), language (\"Khoekhoe\", \"Hebrew\", \"Santhali\")", 
        "new_table_name": "country_population_lifeexpectancy", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ]
    }, 
    {
        "query2": "select sum_population, avg_surfacearea from country_population_surfacearea where continent = \"North America\" and surfacearea > 3000", 
        "schema_without_content": "city : population , id , district , countrycode , name  | country : name , code , lifeexpectancy , code2 , capital , indepyear , gnp , localname , gnpold , governmentform , continent , population , region , surfacearea , headofstate  | country_population_surfacearea : avg_surfacearea , min_surfacearea , sum_population , sum_surfacearea , min_population , avg_population , max_surfacearea , max_population  | countrylanguage : language , percentage , countrycode , isofficial  | sqlite_sequence : seq , name ", 
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "surfacearea", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "population", 
            "and", 
            "average", 
            "area", 
            "of", 
            "countries", 
            "in", 
            "the", 
            "continent", 
            "of", 
            "North", 
            "America", 
            "whose", 
            "area", 
            "is", 
            "bigger", 
            "than", 
            "3000\uff1f"
        ], 
        "all_raw_cols": [
            "population", 
            "surfacearea"
        ], 
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f", 
        "all_cols": [
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_surfacearea", 
            "avg_surfacearea", 
            "min_surfacearea", 
            "max_surfacearea"
        ], 
        "schema_with_content": "city : population (131090, 221754, 205086), id (1435, 522, 3222), district (\"Denizli\", \"Rond\u00c3\u00b4nia\", \"Quind\u00c3\u00ado\"), countrycode (\"MLI\", \"DOM\", \"BIH\"), name (\"Panabo\", \"Saanich\", \"Beaumont\") | country : name (\"Dominican Republic\", \"Djibouti\", \"French Southern territories\"), code (\"EGY\", \"HKG\", \"MYS\"), lifeexpectancy (80.7, 39.3, 49.8), code2 (\"PG\", \"ZW\", \"RU\"), capital (65, 537, 587), indepyear (1993, 1951, 1944), gnp (17121.0, 3563.0, 82710.0), localname (\"Trinidad and Tobago\", \"Costa Rica\", \"Espa\u00c3\u00b1a\"), gnpold (3338.0, 1312.0, 189122.0), governmentform (\"Federal Republic\", \"Parlementary Monarchy\", \"Islamic Republic\"), continent (\"Oceania\", \"Africa\", \"Europe\"), population (51654000, 27000, 56000), region (\"Western Africa\", \"Micronesia/Caribbean\", \"Southern Africa\"), surfacearea (13878.0, 377829.0, 1284000.0), headofstate (\"Valdas Adamkus\", \"Mary McAleese\", \"Joseph Kabila\") | country_population_surfacearea : avg_surfacearea (36125.0, 581730.0, 108889.0), min_surfacearea (1285216.0, 388.0, 923768.0), sum_population (456000, 11937000, 2583000), sum_surfacearea (301316.0, 17075400.0, 41526.0), min_population (2124000, 861000, 25662000), avg_population (2024000, 270000, 600), max_surfacearea (883749.0, 923768.0, 56785.0), max_population (11234000, 817000, 6188000) | countrylanguage : language (\"Puyi\", \"Kpelle\", \"Kalenjin\"), percentage (23.5, 4.2, 12.0), countrycode (\"NGA\", \"URY\", \"TJK\"), isofficial (\"T\", \"F\") | sqlite_sequence : seq (4079), name (\"city\")", 
        "new_table_name": "country_population_surfacearea", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"North America\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    3000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "North", 
            "America", 
            "''", 
            "AND", 
            "SurfaceArea", 
            ">", 
            "3000"
        ]
    }, 
    {
        "query2": "select sum_population, avg_surfacearea from country_population_surfacearea where continent = \"North America\" and surfacearea > 3000", 
        "schema_without_content": "country : name , continent , governmentform , population , lifeexpectancy , region , gnp , capital , surfacearea , localname , headofstate , indepyear , gnpold , code2 , code  | city : countrycode , district , id , population , name \", \"La Rioja\" | country_population_surfacearea : sum_population , max_population , min_surfacearea , avg_surfacearea , min_population , max_surfacearea , sum_surfacearea , avg_population  | countrylanguage : percentage , language , isofficial , countrycode  | sqlite_sequence : seq , name ", 
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "surfacearea", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "total", 
            "population", 
            "and", 
            "average", 
            "surface", 
            "area", 
            "corresponding", 
            "to", 
            "countries", 
            "in", 
            "Noth", 
            "America", 
            "that", 
            "have", 
            "a", 
            "surface", 
            "area", 
            "greater", 
            "than", 
            "3000", 
            "."
        ], 
        "all_raw_cols": [
            "population", 
            "surfacearea"
        ], 
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.", 
        "all_cols": [
            "sum_population", 
            "avg_population", 
            "min_population", 
            "max_population", 
            "sum_surfacearea", 
            "avg_surfacearea", 
            "min_surfacearea", 
            "max_surfacearea"
        ], 
        "schema_with_content": "country : name (\"Togo\", \"Bhutan\", \"Guam\"), continent (\"Asia\", \"Oceania\", \"Asia\"), governmentform (\"Autonomous Area\", \"Territory of Australia\", \"Nonmetropolitan Territory of New Zealand\"), population (12000, 68000, 68000), lifeexpectancy (76.8, 66.3, 67.3), region (\"Southern Europe\", \"North America\", \"Middle East\"), gnp (14194.0, 5328.0, 84982.0), capital (2454, 3339, 716), surfacearea (2724900.0, 48511.0, 29800.0), localname (\"Burundi/Uburundi\", \"Indonesia\", \"Nihon/Nippon\"), headofstate (\"Luis \u00c3\u0081ngel Gonz\u00c3\u00a1lez Macchi\", \"Abdurrahman Wahid\", \"Benjamin William Mkapa\"), indepyear (1953, 1910, 1499), gnpold (5279.0, 1915.0, 5639.0), code2 (\"PL\", \"AN\", \"GU\"), code (\"STP\", \"ATA\", \"MNP\") | city : countrycode (\"BOL\", \"MCO\", \"TJK\"), district (\"\u00c5\u00a0iauliai\", \"Severn\u00c3\u00ad Cechy\", \"V\u00c3\u00a4stmanlands l\u00c3\u00a4n\"), id (824, 1505, 3119), population (2016131, 273786, 129700), name (\"Gandhidham\", \"Kataka (Cuttack)\", \"La Rioja\") | country_population_surfacearea : sum_population (170115000, 20212000, 22256000), max_population (126714000, 6000, 43000), min_surfacearea (14874.0, 6.0, 357022.0), avg_surfacearea (1285216.0, 12173.0, 2780400.0), min_population (0, 57680000, 5171300), max_surfacearea (238533.0, 342000.0, 47000.0), sum_surfacearea (505992.0, 751.0, 14.0), avg_population (217000, 8190900, 9169000) | countrylanguage : percentage (92.5, 20.9, 1.1), language (\"Xhosa\", \"Khmer\", \"Kirundi\"), isofficial (\"T\", \"F\"), countrycode (\"VUT\", \"BLR\", \"MHL\") | sqlite_sequence : seq (4079), name (\"city\")", 
        "new_table_name": "country_population_surfacearea", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "country", 
                "code"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"North America\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    3000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "North", 
            "America", 
            "''", 
            "AND", 
            "SurfaceArea", 
            ">", 
            "3000"
        ]
    }, 
    {
        "query2": "select language, countrycode, max_percentage from countrylanguage_percentage", 
        "schema_without_content": "countrylanguage_percentage : countrycode , language , min_percentage , max_percentage , sum_percentage , avg_percentage  | city : countrycode , district , name , population , id  | countrylanguage : percentage , countrycode , language , isofficial  | sqlite_sequence : name , seq  | country : name , population , gnp , surfacearea , lifeexpectancy , capital , code , code2 , gnpold , indepyear , continent , headofstate , localname , region , governmentform \", \"Islamic Republic\", \"US Territory\"", 
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query_toks_no_value": [
            "select", 
            "language", 
            ",", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "language", 
            "spoken", 
            "by", 
            "the", 
            "largest", 
            "percentage", 
            "of", 
            "people", 
            "in", 
            "each", 
            "country", 
            "?"
        ], 
        "all_raw_cols": [
            "language", 
            "countrycode", 
            "percentage"
        ], 
        "question": "What is the language spoken by the largest percentage of people in each country?", 
        "all_cols": [
            "language", 
            "countrycode", 
            "sum_percentage", 
            "avg_percentage", 
            "min_percentage", 
            "max_percentage"
        ], 
        "schema_with_content": "countrylanguage_percentage : countrycode (\"AZE\", \"SPM\", \"SLV\"), language (\"Moba\", \"Slovene\", \"Masai\"), min_percentage (93.4, 66.5, 1.8), max_percentage (2.0, 4.9, 12.9), sum_percentage (8.5, 95.8, 11.9), avg_percentage (51.5, 7.8, 32.0) | city : countrycode (\"PAN\", \"ALB\", \"HKG\"), district (\"Brasov\", \"Riika\", \"Kumamoto\"), name (\"Habarovsk\", \"Tondabayashi\", \"Hagonoy\"), population (351944, 109520, 1317000), id (2060, 2328, 1847) | countrylanguage : percentage (3.9, 46.0, 64.7), countrycode (\"KWT\", \"ETH\", \"BEN\"), language (\"Dutch\", \"Balochi\", \"Tsonga\"), isofficial (\"T\", \"F\") | sqlite_sequence : name (\"city\"), seq (4079) | country : name (\"Pakistan\", \"Niger\", \"Sierra Leone\"), population (214000, 27000, 270000), gnp (5333.0, 197.0, 1990.0), surfacearea (1104300.0, 4033.0, 110994.0), lifeexpectancy (72.8, 70.4, 79.0), capital (2885, 144, 1532), code (\"VCT\", \"WLF\", \"TON\"), code2 (\"HT\", \"PR\", \"GE\"), gnpold (23383.0, 82239.0, 105116.0), indepyear (1981, 1847, 1769), continent (\"Oceania\", \"Asia\", \"Antarctica\"), headofstate (\"Henri\", \"Aljaksandr Luka\u00c5\u00a1enka\", \"Ahmed Tejan Kabbah\"), localname (\"Libiya\", \"Macau/Aomen\", \"Magyarorsz\u00c3\u00a1g\"), region (\"Middle East\", \"Middle East\", \"Southeast Asia\"), governmentform (\"Monarchy (Emirate)\", \"Islamic Republic\", \"US Territory\")", 
        "new_table_name": "countrylanguage_percentage", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query_toks": [
            "SELECT", 
            "LANGUAGE", 
            ",", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ]
    }, 
    {
        "query2": "select language, countrycode, max_percentage from countrylanguage_percentage", 
        "schema_without_content": "sqlite_sequence : name , seq  | country : capital , governmentform , lifeexpectancy , region , gnp , surfacearea , gnpold , population , name , code2 , code , localname , indepyear , continent , headofstate  | city : countrycode , district , name , id , population  | countrylanguage : language , isofficial , countrycode , percentage  | countrylanguage_percentage : avg_percentage , max_percentage , sum_percentage , language , countrycode , min_percentage ", 
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query_toks_no_value": [
            "select", 
            "language", 
            ",", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "country", 
            "codes", 
            "of", 
            "the", 
            "different", 
            "countries", 
            ",", 
            "and", 
            "what", 
            "are", 
            "the", 
            "languages", 
            "spoken", 
            "by", 
            "the", 
            "greatest", 
            "percentage", 
            "of", 
            "people", 
            "for", 
            "each", 
            "?"
        ], 
        "all_raw_cols": [
            "language", 
            "countrycode", 
            "percentage"
        ], 
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", 
        "all_cols": [
            "language", 
            "countrycode", 
            "sum_percentage", 
            "avg_percentage", 
            "min_percentage", 
            "max_percentage"
        ], 
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2913, 917, 35), governmentform (\"Occupied by Marocco\", \"Constitutional Monarchy, Federation\", \"Islamic Republic\"), lifeexpectancy (60.6, 70.9, 75.8), region (\"Central America\", \"Central America\", \"Caribbean\"), gnp (510.0, 195746.0, 6353.0), surfacearea (28748.0, 83859.0, 242900.0), gnpold (755.0, 256092.0, 129092.0), population (7430000, 2943000, 38653600), name (\"Ghana\", \"Malawi\", \"Bouvet Island\"), code2 (\"VG\", \"NZ\", \"MX\"), code (\"AIA\", \"KGZ\", \"ZMB\"), localname (\"Terres australes fran\u00c3\u00a7aises\", \"Kenya\", \"Lietuva\"), indepyear (1979, 1830, 1906), continent (\"Asia\", \"Africa\", \"Europe\"), headofstate (\"Bakili Muluzi\", \"Charles Taylor\", \"Jorge Batlle Ib\u00c3\u00a1\u00c3\u00b1ez\") | city : countrycode (\"CAF\", \"HUN\", \"CIV\"), district (\"Arizona\", \"Santiago del Estero\", \"Home Island\"), name (\"Urmia\", \"Roma\", \"Budapest\"), id (3272, 2777, 3510), population (126475, 107781, 386081) | countrylanguage : language (\"Punjabi\", \"Karakalpak\", \"Chibcha\"), isofficial (\"T\", \"F\"), countrycode (\"DEU\", \"SLE\", \"KIR\"), percentage (90.7, 90.6, 1.3) | countrylanguage_percentage : avg_percentage (34.3, 5.9, 39.9), max_percentage (14.0, 17.3, 93.6), sum_percentage (5.1, 19.5, 4.4), language (\"Maguindanao\", \"Kono-vai\", \"Diola\"), countrycode (\"ESH\", \"BMU\", \"VAT\"), min_percentage (99.1, 31.7, 1.9)", 
        "new_table_name": "countrylanguage_percentage", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query_toks": [
            "SELECT", 
            "LANGUAGE", 
            ",", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ]
    }, 
    {
        "query2": "select number, max_percentage from countrylanguage_percentage where language = \"Spanish\" group by countrycode", 
        "schema_without_content": "sqlite_sequence : name , seq  | countrylanguage : countrycode , percentage , language , isofficial  | country : code , headofstate , code2 , lifeexpectancy , continent , gnp , surfacearea , region , capital , localname , population , gnpold , name , indepyear , governmentform  | countrylanguage_percentage : min_percentage , avg_percentage , max_percentage , sum_percentage , number | city : id , countrycode , population , district , name ", 
        "query1": "select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "*", 
            ")", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "where", 
            "language", 
            "=", 
            "value", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "number", 
            "of", 
            "countries", 
            "where", 
            "Spanish", 
            "is", 
            "spoken", 
            "by", 
            "the", 
            "largest", 
            "percentage", 
            "of", 
            "people", 
            "?"
        ], 
        "all_raw_cols": [
            "number", 
            "percentage"
        ], 
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", 
        "all_cols": [
            "number", 
            "sum_percentage", 
            "avg_percentage", 
            "min_percentage", 
            "max_percentage"
        ], 
        "schema_with_content": "sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : countrycode (\"FRA\", \"THA\", \"TWN\"), percentage (98.3, 19.2, 5.4), language (\"Comorian-madagassi\", \"Nyakusa\", \"Kurdish\"), isofficial (\"T\", \"F\") | country : code (\"GRC\", \"SYR\", \"BLZ\"), headofstate (\"Vojislav Ko\u00c5\u00a1tunica\", \"Hugo B\u00c3\u00a1nzer Su\u00c3\u00a1rez\", \"Mohammad Omar\"), code2 (\"VG\", \"QA\", \"MU\"), lifeexpectancy (59.8, 75.2, 80.1), continent (\"South America\", \"Antarctica\", \"Antarctica\"), gnp (598862.0, 10692.0, 6648.0), surfacearea (464.0, 30518.0, 151.0), region (\"Polynesia\", \"South America\", \"Baltic Countries\"), capital (3225, 939, 2912), localname (\"\u00c2\u00b4Uman\", \"R\u00c3\u00a9publique D\u00c3\u00a9mocratique du Congo\", \"Uganda\"), population (21000, 380200, 21778000), gnpold (6328.0, 1767.0, 5670.0), name (\"Tokelau\", \"Papua New Guinea\", \"Saudi Arabia\"), indepyear (1903, 1906, 1903), governmentform (\"Part of Denmark\", \"Federal Republic\", \"Emirate Federation\") | countrylanguage_percentage : min_percentage (30.0, 3.0, 31.7), avg_percentage (18.1, 47.4, 57.5), max_percentage (64.4, 98.0, 26.3), sum_percentage (5.7, 3.3, 7.0), number(2, 6, 8) | city : id (157, 2862, 1441), countrycode (\"NLD\", \"ZWE\", \"BWA\"), population (350043, 1096829, 1018938), district (\"New South Wales\", \"T\u00c5\u00a1ernivtsi\", \"Sardinia\"), name (\"Almirante Brown\", \"Anshun\", \"El Cajon\")", 
        "new_table_name": "countrylanguage_percentage", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            24, 
                            false
                        ], 
                        null
                    ], 
                    "\"Spanish\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                0, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks": [
            "SELECT", 
            "count", 
            "(", 
            "*", 
            ")", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "WHERE", 
            "LANGUAGE", 
            "=", 
            "``", 
            "Spanish", 
            "''", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ]
    }, 
    {
        "query2": "select number, max_percentage from countrylanguage_percentage where language = \"Spanish\" group by countrycode", 
        "schema_without_content": "country : name , population , headofstate , indepyear , gnpold , governmentform \", code , continent , localname , surfacearea , code2 , lifeexpectancy , capital , region , gnp  | countrylanguage : isofficial , percentage , countrycode , language  | countrylanguage_percentage : sum_percentage , min_percentage , max_percentage , number, avg_percentage  | sqlite_sequence : name , seq  | city : countrycode , district , population , name , id ", 
        "query1": "select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "*", 
            ")", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "where", 
            "language", 
            "=", 
            "value", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "Count", 
            "the", 
            "number", 
            "of", 
            "countries", 
            "for", 
            "which", 
            "Spanish", 
            "is", 
            "the", 
            "predominantly", 
            "spoken", 
            "language", 
            "."
        ], 
        "all_raw_cols": [
            "number", 
            "percentage"
        ], 
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.", 
        "all_cols": [
            "number", 
            "sum_percentage", 
            "avg_percentage", 
            "min_percentage", 
            "max_percentage"
        ], 
        "schema_with_content": "country : name (\"Puerto Rico\", \"Somalia\", \"Maldives\"), population (2943000, 98881000, 2000), headofstate (\"Johannes Paavali II\", \"Fernando Henrique Cardoso\", \"Ali Abdallah Salih\"), indepyear (1980, 885, 1844), gnpold (2287.0, 8920.0, 119946.0), governmentform (\"Administrated by the UN\", \"Nonmetropolitan Territory of France\", \"Monarchy (Sultanate)\"), code (\"CZE\", \"NGA\", \"TKL\"), continent (\"Antarctica\", \"Antarctica\", \"Asia\"), localname (\"Guadeloupe\", \"Kiribati\", \"Jugoslavija\"), surfacearea (622.0, 13120000.0, 163610.0), code2 (\"CO\", \"SD\", \"ZM\"), lifeexpectancy (60.2, 57.4, 75.7), capital (35, 645, 1450), region (\"South America\", \"Eastern Africa\", \"Central Africa\"), gnp (212.0, 34100.0, 553233.0) | countrylanguage : isofficial (\"T\", \"F\"), percentage (17.1, 52.6, 50.0), countrycode (\"PRT\", \"BTN\", \"VGB\"), language (\"Comorian\", \"Hadjarai\", \"Diola\") | countrylanguage_percentage : sum_percentage (18.1, 7.4, 16.0), min_percentage (60.3, 53.1, 50.4), max_percentage (21.1, 4.4, 97.2), number(10, 2, 7), avg_percentage (89.0, 50.4, 98.9) | sqlite_sequence : name (\"city\"), seq (4079) | city : countrycode (\"FRA\", \"BOL\", \"VAT\"), district (\"Burjatia\", \"Gifu\", \"L\u00c3\u00a4nsimaa\"), population (105643, 109268, 191615), name (\"Rybnik\", \"Taliao\", \"Sharq al-Nil\"), id (649, 4034, 1734)", 
        "new_table_name": "countrylanguage_percentage", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            24, 
                            false
                        ], 
                        null
                    ], 
                    "\"Spanish\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                0, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select count(*), max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks": [
            "SELECT", 
            "count", 
            "(", 
            "*", 
            ")", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "WHERE", 
            "LANGUAGE", 
            "=", 
            "``", 
            "Spanish", 
            "''", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ]
    }, 
    {
        "query2": "select countrycode, max_percentage from countrylanguage_percentage where language = \"Spanish\" group by countrycode", 
        "schema_without_content": "countrylanguage_percentage : min_percentage , countrycode , sum_percentage , avg_percentage , max_percentage  | country : name , capital , indepyear , governmentform , gnp , headofstate , region , continent , code , code2 , localname , population , surfacearea , lifeexpectancy , gnpold  | city : id , countrycode , district , population , name  | countrylanguage : isofficial , language , percentage , countrycode  | sqlite_sequence : seq , name ", 
        "query1": "select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks_no_value": [
            "select", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "where", 
            "language", 
            "=", 
            "value", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "codes", 
            "of", 
            "countries", 
            "where", 
            "Spanish", 
            "is", 
            "spoken", 
            "by", 
            "the", 
            "largest", 
            "percentage", 
            "of", 
            "people", 
            "?"
        ], 
        "all_raw_cols": [
            "countrycode", 
            "percentage"
        ], 
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", 
        "all_cols": [
            "countrycode", 
            "sum_percentage", 
            "avg_percentage", 
            "min_percentage", 
            "max_percentage"
        ], 
        "schema_with_content": "countrylanguage_percentage : min_percentage (91.5, 47.5, 10.3), countrycode (\"MLT\", \"HUN\", \"CPV\"), sum_percentage (81.0, 15.0, 13.9), avg_percentage (11.4, 76.8, 7.0), max_percentage (6.7, 82.2, 0.5) | country : name (\"Belize\", \"R\u00c3\u00a9union\", \"Paraguay\"), capital (55, 3171, 915), indepyear (1977, 1947, 1983), governmentform (\"Socialistic Republic\", \"Occupied by Marocco\", \"Independent Church State\"), gnp (2012.0, 34100.0, 2328.0), headofstate (\"Lansana Cont\u00c3\u00a9\", \"Omar Hassan Ahmad al-Bashir\", \"Tarja Halonen\"), region (\"Southern Europe\", \"Northern Africa\", \"Southeast Asia\"), continent (\"Oceania\", \"Antarctica\", \"Africa\"), code (\"NRU\", \"COL\", \"NAM\"), code2 (\"BB\", \"ER\", \"IO\"), localname (\"Zimbabwe\", \"Saint Vincent and the Grenadines\", \"France\"), population (16223000, 2124000, 1008000), surfacearea (2780400.0, 238533.0, 301316.0), lifeexpectancy (59.8, 77.1, 68.6), gnpold (82239.0, 917719.0, 793.0) | city : id (1266, 2357, 259), countrycode (\"BLR\", \"ERI\", \"ARE\"), district (\"Basse-Terre\", \"Miranda\", \"Lima\"), population (371900, 393664, 601794), name (\"Belgaum\", \"Maribor\", \"Campo Grande\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Akan\", \"Bali\", \"Masana\"), percentage (4.8, 97.6, 2.3), countrycode (\"TCA\", \"LSO\", \"IND\") | sqlite_sequence : seq (4079), name (\"city\")", 
        "new_table_name": "countrylanguage_percentage", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            24, 
                            false
                        ], 
                        null
                    ], 
                    "\"Spanish\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks": [
            "SELECT", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "WHERE", 
            "LANGUAGE", 
            "=", 
            "``", 
            "Spanish", 
            "''", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ]
    }, 
    {
        "query2": "select countrycode, max_percentage from countrylanguage_percentage where language = \"Spanish\" group by countrycode", 
        "schema_without_content": "countrylanguage_percentage : min_percentage , avg_percentage , countrycode , max_percentage , sum_percentage  | city : district , population , name , countrycode , id  | country : gnpold , region , headofstate , surfacearea , lifeexpectancy , localname , population , continent , capital , indepyear , code2 , governmentform , code , name , gnp  | sqlite_sequence : name , seq  | countrylanguage : percentage , language , isofficial , countrycode ", 
        "query1": "select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks_no_value": [
            "select", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "where", 
            "language", 
            "=", 
            "value", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "codes", 
            "of", 
            "countries", 
            "for", 
            "which", 
            "Spanish", 
            "is", 
            "the", 
            "predominantly", 
            "spoken", 
            "language", 
            "."
        ], 
        "all_raw_cols": [
            "countrycode", 
            "percentage"
        ], 
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.", 
        "all_cols": [
            "countrycode", 
            "sum_percentage", 
            "avg_percentage", 
            "min_percentage", 
            "max_percentage"
        ], 
        "schema_with_content": "countrylanguage_percentage : min_percentage (95.9, 86.2, 7.7), avg_percentage (21.1, 1.5, 53.1), countrycode (\"JOR\", \"TON\", \"STP\"), max_percentage (36.4, 39.4, 20.0), sum_percentage (21.4, 26.3, 10.8) | city : district (\"Sivas\", \"Habarovsk\", \"Hhohho\"), population (209235, 155554, 476668), name (\"Vacoas-Phoenix\", \"Baliuag\", \"Valencia\"), countrycode (\"YUG\", \"VEN\", \"PSE\"), id (774, 1738, 4049) | country : gnpold (3338.0, 15519.0, 19769.0), region (\"Eastern Europe\", \"Polynesia\", \"Micronesia\"), headofstate (\"Moshe Katzav\", \"Gnassingb\u00c3\u00a9 Eyad\u00c3\u00a9ma\", \"Francisco Guillermo Flores P\u00c3\u00a9rez\"), surfacearea (10990.0, 2780400.0, 4000.0), lifeexpectancy (71.4, 66.4, 69.5), localname (\"Guinea Ecuatorial\", \"Togo\", \"Tanzania\"), population (8190900, 4629000, 181000), continent (\"Antarctica\", \"Asia\", \"Africa\"), capital (54, 3320, 1447), indepyear (1902, 1948, 1825), code2 (\"NC\", \"AF\", \"MD\"), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Federation\", \"Federation\"), code (\"BGD\", \"HTI\", \"COG\"), name (\"Albania\", \"Nicaragua\", \"Aruba\"), gnp (1449.0, 351182.0, 21929.0) | sqlite_sequence : name (\"city\"), seq (4079) | countrylanguage : percentage (8.5, 9.5, 97.6), language (\"Tagalog\", \"Arabic-French\", \"Tharu\"), isofficial (\"T\", \"F\"), countrycode (\"ARM\", \"MRT\", \"NIC\")", 
        "new_table_name": "countrylanguage_percentage", 
        "db_id": "world_1", 
        "tables_with_pkeys": [
            [
                "countrylanguage", 
                "countrycode"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            24, 
                            false
                        ], 
                        null
                    ], 
                    "\"Spanish\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select countrycode, max(percentage) from countrylanguage where language = \"Spanish\" group by countrycode", 
        "query_toks": [
            "SELECT", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "WHERE", 
            "LANGUAGE", 
            "=", 
            "``", 
            "Spanish", 
            "''", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ]
    }, 
    {
        "query2": "select avg_attendance from show_attendance", 
        "schema_without_content": "show_attendance : avg_attendance , sum_attendance , min_attendance , max_attendance  | orchestra : orchestra_id , conductor_id , major_record_format , record_company , orchestra , year_of_founded  | show : result , if_first_show , attendance , show_id , performance_id  | performance : share , performance_id , weekly_rank , type , official_ratings_ , date , orchestra_id  | conductor : conductor_id , age , nationality , year_of_work , name ", 
        "query1": "select avg(attendance) from show", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "attendance", 
            ")", 
            "from", 
            "show"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "attendance", 
            "of", 
            "shows", 
            "?"
        ], 
        "all_raw_cols": [
            "attendance"
        ], 
        "question": "What is the average attendance of shows?", 
        "all_cols": [
            "sum_attendance", 
            "avg_attendance", 
            "min_attendance", 
            "max_attendance"
        ], 
        "schema_with_content": "show_attendance : avg_attendance (2431.0, 555.0, 695.0), sum_attendance (2431.0, 555.0, 2431.0), min_attendance (1026.0, 1026.0, 695.0), max_attendance (555.0, 2431.0, 1026.0) | orchestra : orchestra_id (8, 3, 10), conductor_id (5, 9, 11), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), record_company (\"Columbia Masterworks\", \"Philips\", \"Kultur\"), orchestra (\"Seattle Symphony Orchestra\", \"Detroit Symphony Orchestra\", \"Detroit Symphony Orchestra\"), year_of_founded (2002.0, 2003.0, 2009.0) | show : result (\"T\", \"F\"), if_first_show (\"Glebe Park\", \"Fir Park\", \"Fir Park\"), attendance (1925.0, 1925.0, 555.0), show_id (4, 2, 5), performance_id (1, 2, 4) | performance : share (\"29.4%\", \"29.2%\", \"28.0%\"), performance_id (6, 3, 2), weekly_rank (\"15\", \"12\", \"12\"), type (\"Auditions 3\", \"Live final\", \"Auditions 2\"), official_ratings_(millions) (8.38, 7.39, 7.39), date (\"10 June\", \"16 June\", \"16 June\"), orchestra_id (9, 10, 11) | conductor : conductor_id (7, 4, 2), age (47, 43, 50), nationality (\"USA\", \"UK\", \"France\"), year_of_work (11, 16, 11), name (\"Paul Jorgensen\", \"Valeri Gergiev\", \"Colin Davis\")", 
        "new_table_name": "show_attendance", 
        "db_id": "orchestra", 
        "tables_with_pkeys": [
            [
                "show", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(attendance) from show", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Attendance", 
            ")", 
            "FROM", 
            "SHOW"
        ]
    }, 
    {
        "query2": "select avg_attendance from show_attendance", 
        "schema_without_content": "orchestra : conductor_id , major_record_format , orchestra_id , orchestra , year_of_founded , record_company  | conductor : age , nationality , year_of_work , conductor_id , name  | show_attendance : avg_attendance , min_attendance , sum_attendance , max_attendance  | performance : share , performance_id , orchestra_id , official_ratings_ , date , type , weekly_rank  | show : if_first_show , result , attendance , show_id , performance_id ", 
        "query1": "select avg(attendance) from show", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "attendance", 
            ")", 
            "from", 
            "show"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "average", 
            "attendance", 
            "across", 
            "all", 
            "shows", 
            "."
        ], 
        "all_raw_cols": [
            "attendance"
        ], 
        "question": "Return the average attendance across all shows.", 
        "all_cols": [
            "sum_attendance", 
            "avg_attendance", 
            "min_attendance", 
            "max_attendance"
        ], 
        "schema_with_content": "orchestra : conductor_id (1, 11, 8), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra_id (7, 5, 4), orchestra (\"Detroit Symphony Orchestra\", \"Columbia Symphony Orchestra\", \"Royal Danish Orchestra\"), year_of_founded (2002.0, 2003.0, 2007.0), record_company (\"Deutsche Grammophon\", \"EMI\", \"Kultur\") | conductor : age (42, 42, 43), nationality (\"USA\", \"UK\", \"France\"), year_of_work (21, 6, 10), conductor_id (5, 10, 7), name (\"Valeri Gergiev\", \"Colin Davis\", \"Antal Brown\") | show_attendance : avg_attendance (2431.0, 1026.0, 1925.0), min_attendance (695.0, 1026.0, 555.0), sum_attendance (1925.0, 1026.0, 555.0), max_attendance (2431.0, 1925.0, 1026.0) | performance : share (\"28.0%\", \"28.0%\", \"28.0%\"), performance_id (3, 11, 2), orchestra_id (4, 6, 5), official_ratings_(millions) (9.28, 5.2, 8.36), date (\"2007\", \"14 June\", \"9 June\"), type (\"Auditions 2\", \"Live final results\", \"Auditions 1\"), weekly_rank (\"7\", \"TBC\", \"11\") | show : if_first_show (\"Fir Park\", \"Glebe Park\", \"Glebe Park\"), result (\"T\", \"F\"), attendance (1026.0, 1026.0, 2431.0), show_id (5, 2, 5), performance_id (3, 4, 5)", 
        "new_table_name": "show_attendance", 
        "db_id": "orchestra", 
        "tables_with_pkeys": [
            [
                "show", 
                null
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(attendance) from show", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Attendance", 
            ")", 
            "FROM", 
            "SHOW"
        ]
    }, 
    {
        "query2": "select max_share, min_share from performance_share where type != \"Live final\"", 
        "schema_without_content": "show : performance_id , result , show_id , if_first_show , attendance  | performance_share : max_share , sum_share , min_share , avg_share  | conductor : nationality , name , conductor_id , age , year_of_work  | performance : weekly_rank , share , official_ratings_ , performance_id , date , orchestra_id , type  | orchestra : orchestra , major_record_format , year_of_founded , record_company , conductor_id , orchestra_id ", 
        "query1": "select max(share), min(share) from performance where type != \"Live final\"", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "share", 
            ")", 
            ",", 
            "min", 
            "(", 
            "share", 
            ")", 
            "from", 
            "performance", 
            "where", 
            "type", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "maximum", 
            "and", 
            "minimum", 
            "share", 
            "of", 
            "performances", 
            "whose", 
            "type", 
            "is", 
            "not", 
            "``", 
            "Live", 
            "final", 
            "''", 
            "."
        ], 
        "all_raw_cols": [
            "share"
        ], 
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", 
        "all_cols": [
            "sum_share", 
            "avg_share", 
            "min_share", 
            "max_share"
        ], 
        "schema_with_content": "show : performance_id (3, 2, 3), result (\"T\", \"F\"), show_id (3, 3, 5), if_first_show (\"Glebe Park\", \"St. Mirren Park\", \"Glebe Park\"), attendance (695.0, 2431.0, 695.0) | performance_share : max_share (\"44.7%\", \"34.0%\", \"34%\"), sum_share (\"29.2%\", \"38.1%\", \"29.2%\"), min_share (\"34.0%\", \"34%\", \"29.2%\"), avg_share (\"40.9%\", \"34.0%\", \"29.2%\") | conductor : nationality (\"USA\", \"UK\", \"France\"), name (\"Colin Davis\", \"Antal Brown\", \"Gerard Schwarz\"), conductor_id (10, 2, 10), age (40, 47, 42), year_of_work (10, 20, 6) | performance : weekly_rank (\"1\", \"9\", \"12\"), share (\"40.9%\", \"29.2%\", \"22.7%\"), official_ratings_(millions) (7.51, 11.45, 8.36), performance_id (11, 2, 5), date (\"17 June\", \"13 June\", \"2007\"), orchestra_id (11, 7, 5), type (\"Live final results\", \"Semi-final 3\", \"Live final results\") | orchestra : orchestra (\"Seattle Symphony Orchestra\", \"Royal Danish Orchestra\", \"Detroit Symphony Orchestra\"), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), year_of_founded (2002.0, 2004.0, 2009.0), record_company (\"Philips\", \"Kultur\", \"Philips\"), conductor_id (5, 7, 8), orchestra_id (2, 2, 4)", 
        "new_table_name": "performance_share", 
        "db_id": "orchestra", 
        "tables_with_pkeys": [
            [
                "performance", 
                "performance_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ], 
                    "\"Live final\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(share), min(share) from performance where type != \"Live final\"", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "SHARE", 
            ")", 
            ",", 
            "min", 
            "(", 
            "SHARE", 
            ")", 
            "FROM", 
            "performance", 
            "WHERE", 
            "TYPE", 
            "!", 
            "=", 
            "``", 
            "Live", 
            "final", 
            "''"
        ]
    }, 
    {
        "query2": "select max_share, min_share from performance_share where type != \"Live final\"", 
        "schema_without_content": "performance : weekly_rank , official_ratings_ , type , share , orchestra_id , performance_id , date  | conductor : age , nationality , year_of_work , name , conductor_id  | performance_share : avg_share , min_share , max_share , sum_share  | show : attendance , show_id , if_first_show , performance_id , result  | orchestra : conductor_id , year_of_founded , record_company , orchestra_id , major_record_format , orchestra ", 
        "query1": "select max(share), min(share) from performance where type != \"Live final\"", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "share", 
            ")", 
            ",", 
            "min", 
            "(", 
            "share", 
            ")", 
            "from", 
            "performance", 
            "where", 
            "type", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "maximum", 
            "and", 
            "minimum", 
            "shares", 
            "for", 
            "performances", 
            "that", 
            "do", 
            "not", 
            "have", 
            "the", 
            "type", 
            "``", 
            "Live", 
            "final", 
            "''", 
            "."
        ], 
        "all_raw_cols": [
            "share"
        ], 
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", 
        "all_cols": [
            "sum_share", 
            "avg_share", 
            "min_share", 
            "max_share"
        ], 
        "schema_with_content": "performance : weekly_rank (\"13\", \"13\", \"15\"), official_ratings_(millions) (9.28, 9.29, 7.51), type (\"Auditions 3\", \"Semi-final 3\", \"Auditions 3\"), share (\"22.7%\", \"44.7%\", \"44.7%\"), orchestra_id (2, 3, 8), performance_id (8, 7, 2), date (\"12 June\", \"9 June\", \"15 June\") | conductor : age (41, 49, 43), nationality (\"USA\", \"UK\", \"France\"), year_of_work (10, 10, 12), name (\"Robert Craft\", \"Gerard Schwarz\", \"Robert Craft\"), conductor_id (4, 12, 12) | performance_share : avg_share (\"34%\", \"43.7%\", \"44.7%\"), min_share (\"28.0%\", \"22.7%\", \"22.7%\"), max_share (\"38.1%\", \"22.7%\", \"43.7%\"), sum_share (\"44.7%\", \"28.0%\", \"29.3%\") | show : attendance (555.0, 2431.0, 695.0), show_id (1, 1, 3), if_first_show (\"Fir Park\", \"St. Mirren Park\", \"St. Mirren Park\"), performance_id (4, 1, 3), result (\"T\", \"F\") | orchestra : conductor_id (2, 7, 6), year_of_founded (2002.0, 2008.0, 2009.0), record_company (\"Deutsche Grammophon\", \"Deutsche Grammophon\", \"Kultur\"), orchestra_id (9, 4, 7), major_record_format (\"CD\", \"CD / LP\", \"DVD\"), orchestra (\"San Francisco Symphony Orchestra\", \"Orchestre de Paris\", \"Kirov Orchestra\")", 
        "new_table_name": "performance_share", 
        "db_id": "orchestra", 
        "tables_with_pkeys": [
            [
                "performance", 
                "performance_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ], 
                    "\"Live final\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(share), min(share) from performance where type != \"Live final\"", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "SHARE", 
            ")", 
            ",", 
            "min", 
            "(", 
            "SHARE", 
            ")", 
            "FROM", 
            "performance", 
            "WHERE", 
            "TYPE", 
            "!", 
            "=", 
            "``", 
            "Live", 
            "final", 
            "''"
        ]
    }, 
    {
        "query2": "select avg_age from dogs_age", 
        "schema_without_content": "dogs_age : sum_age , min_age , avg_age , max_age  | charges : charge_type , charge_amount , charge_id  | treatment_types : treatment_type_description , treatment_type_code  | sizes : size_description , size_code  | breeds : breed_name , breed_code  | owners : city , first_name , street , home_phone , zip_code , owner_id , state , email_address , cell_number , last_name  | treatments : treatment_type_code , professional_id , cost_of_treatment , treatment_id , dog_id , date_of_treatment  | professionals : email_address , city , role_code , zip_code , first_name , street , professional_id , home_phone , cell_number , state , last_name  | dogs : dog_id , gender , owner_id , size_code , date_arrived , date_departed , date_adopted , date_of_birth , abandoned_yn , name , breed_code , age , weight ", 
        "query1": "select avg(age) from dogs", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "age", 
            ")", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "age", 
            "of", 
            "all", 
            "the", 
            "dogs", 
            "?"
        ], 
        "all_raw_cols": [
            "age"
        ], 
        "question": "What is the average age of all the dogs?", 
        "all_cols": [
            "sum_age", 
            "avg_age", 
            "min_age", 
            "max_age"
        ], 
        "schema_with_content": "dogs_age : sum_age (\"1\", \"2\", \"9\"), min_age (\"5\", \"3\", \"2\"), avg_age (\"9\", \"4\", \"8\"), max_age (\"5\", \"4\", \"2\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | owners : city (\"East Hillardberg\", \"New Margaretteborough\", \"Port Zackery\"), first_name (\"Nora\", \"Johann\", \"Adelle\"), street (\"51934 Treutel Harbor\", \"15828 Spencer Extensions\", \"1204 Mae Highway Apt. 107\"), home_phone (\"1-332-849-1908\", \"066.264.7885\", \"893-862-5295x61709\"), zip_code (\"22731\", \"35747\", \"36871\"), owner_id (4, 11, 1), state (\"NewYork\", \"Virginia\", \"Indiana\"), email_address (\"ymaggio@example.com\", \"hudson.favian@example.com\", \"wpfeffer@example.net\"), cell_number (\"1-739-421-2225x38148\", \"481-483-9083x37986\", \"341.667.8085\"), last_name (\"Schmitt\", \"Nicolas\", \"Haley\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (5, 9, 14), cost_of_treatment (567, 139, 514), treatment_id (6, 15, 2), dog_id (7, 14, 12), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-10 11:45:58\", \"2018-02-28 17:09:43\") | professionals : email_address (\"marquardt.furman@example.org\", \"mekhi.little@example.org\", \"jeichmann@example.com\"), city (\"Baileymouth\", \"Baileymouth\", \"Borisside\"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"84515\", \"17902\", \"06646\"), first_name (\"Danny\", \"Vernice\", \"Vernice\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), professional_id (9, 5, 3), home_phone (\"1-138-287-3775\", \"1-138-287-3775\", \"022.529.0550x1319\"), cell_number (\"880-659-7577x736\", \"328.842.3792\", \"139-321-7313\"), state (\"NewMexico\", \"SouthCarolina\", \"Utah\"), last_name (\"Hyatt\", \"Pouros\", \"Hyatt\") | dogs : dog_id (10, 11, 4), gender (\"1\", \"0\"), owner_id (14, 1, 1), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-10-24 04:45:13\", \"2017-12-29 06:08:26\", \"2017-12-22 05:02:02\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 06:58:44\", \"2018-03-25 05:07:47\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-02-25 23:45:30\", \"2018-02-25 23:45:30\"), date_of_birth (\"2008-10-09 22:38:53\", \"2012-10-14 14:44:37\", \"2017-09-19 05:39:09\"), abandoned_yn (\"1\", \"0\"), name (\"Mavis\", \"Merritt\", \"Troy\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"1\", \"8\", \"2\"), weight (\"3.52\", \"2.18\", \"9.48\")", 
        "new_table_name": "dogs_age", 
        "db_id": "dog_kennels", 
        "tables_with_pkeys": [
            [
                "dogs", 
                "dog_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(age) from dogs", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "age", 
            ")", 
            "FROM", 
            "Dogs"
        ]
    }, 
    {
        "query2": "select avg_age from dogs_age", 
        "schema_without_content": "treatment_types : treatment_type_code , treatment_type_description  | dogs_age : sum_age , avg_age , max_age , min_age  | charges : charge_type , charge_amount , charge_id  | owners : street , first_name , email_address , city , home_phone , owner_id , state , zip_code , last_name , cell_number  | professionals : zip_code , street , city , last_name , home_phone , professional_id , role_code , cell_number , state , email_address , first_name  | breeds : breed_code , breed_name  | sizes : size_code , size_description  | dogs : age , dog_id , date_arrived , breed_code , gender , name , abandoned_yn , date_adopted , owner_id , size_code , weight , date_of_birth , date_departed  | treatments : dog_id , professional_id , treatment_id , date_of_treatment , treatment_type_code , cost_of_treatment ", 
        "query1": "select avg(age) from dogs", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "age", 
            ")", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "Compute", 
            "the", 
            "average", 
            "age", 
            "of", 
            "all", 
            "the", 
            "dogs", 
            "."
        ], 
        "all_raw_cols": [
            "age"
        ], 
        "question": "Compute the average age of all the dogs.", 
        "all_cols": [
            "sum_age", 
            "avg_age", 
            "min_age", 
            "max_age"
        ], 
        "schema_with_content": "treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | dogs_age : sum_age (\"3\", \"2\", \"5\"), avg_age (\"8\", \"3\", \"8\"), max_age (\"8\", \"1\", \"5\"), min_age (\"9\", \"9\", \"8\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | owners : street (\"60352 Kayleigh Crossing Suite 700\", \"1858 Jan Park\", \"9212 Rosenbaum Lights\"), first_name (\"Nora\", \"Emelie\", \"Jaclyn\"), email_address (\"fschoen@example.net\", \"ybergstrom@example.com\", \"ymaggio@example.com\"), city (\"Barrettburgh\", \"East Maribelbury\", \"Brakusfurt\"), home_phone (\"1-682-845-0116x63235\", \"893-862-5295x61709\", \"1-332-849-1908\"), owner_id (14, 1, 8), state (\"NewYork\", \"Wisconsin\", \"Arkansas\"), zip_code (\"78297\", \"78297\", \"22731\"), last_name (\"Mertz\", \"Hamill\", \"Feil\"), cell_number (\"481-483-9083x37986\", \"478.978.0729\", \"739-136-7202\") | professionals : zip_code (\"98844\", \"02281\", \"67980\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), city (\"South Rockyport\", \"Domenickton\", \"East Ila\"), last_name (\"Walter\", \"Hayes\", \"Hayes\"), home_phone (\"1-138-287-3775\", \"022.529.0550x1319\", \"246-951-0080x76716\"), professional_id (10, 6, 2), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"499-434-0215x1628\", \"1-258-285-4707x8020\", \"1-185-137-1945x409\"), state (\"Wyoming\", \"Mississippi\", \"SouthCarolina\"), email_address (\"jacynthe.mclaughlin@example.net\", \"deanna.schuster@example.com\", \"west.eula@example.net\"), first_name (\"Jayson\", \"Lesly\", \"Domenica\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | dogs : age (\"5\", \"5\", \"9\"), dog_id (11, 6, 12), date_arrived (\"2017-12-22 05:02:02\", \"2017-10-24 04:45:13\", \"2018-01-02 03:15:29\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), name (\"Mavis\", \"Evangeline\", \"Hipolito\"), abandoned_yn (\"1\", \"0\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-18 15:12:50\", \"2018-03-10 15:06:43\"), owner_id (1, 8, 7), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.96\", \"8.95\", \"4.36\"), date_of_birth (\"2008-10-09 22:38:53\", \"2012-07-11 17:15:10\", \"2015-02-26 21:31:22\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 05:07:47\", \"2018-03-25 04:50:22\") | treatments : dog_id (1, 7, 4), professional_id (10, 4, 14), treatment_id (1, 8, 12), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-15 20:25:34\", \"2018-03-15 20:25:34\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (852, 681, 139)", 
        "new_table_name": "dogs_age", 
        "db_id": "dog_kennels", 
        "tables_with_pkeys": [
            [
                "dogs", 
                "dog_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select avg(age) from dogs", 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "age", 
            ")", 
            "FROM", 
            "Dogs"
        ]
    }, 
    {
        "query2": "select max_age from dogs_age", 
        "schema_without_content": "breeds : breed_name , breed_code  | sizes : size_code , size_description  | dogs : date_of_birth , gender , name , size_code , date_departed , date_adopted , breed_code , age , owner_id , date_arrived , weight , dog_id , abandoned_yn  | dogs_age : min_age , avg_age , sum_age , max_age  | treatment_types : treatment_type_description , treatment_type_code  | professionals : zip_code , professional_id , email_address , role_code , first_name , home_phone 0259033559\", \"304-4499x59146\", street , state , city , last_name , cell_number  | treatments : cost_of_treatment , dog_id , professional_id , treatment_type_code , date_of_treatment , treatment_id  | charges : charge_type , charge_id , charge_amount  | owners : last_name , street , city , first_name , state , cell_number 768-5439x484\", \"768-5439x484\", \"762.589.6117x1328\", email_address , zip_code , owner_id , home_phone ", 
        "query1": "select max(age) from dogs", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "age", 
            ")", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "age", 
            "of", 
            "the", 
            "oldest", 
            "dog", 
            "?"
        ], 
        "all_raw_cols": [
            "age"
        ], 
        "question": "What is the age of the oldest dog?", 
        "all_cols": [
            "sum_age", 
            "avg_age", 
            "min_age", 
            "max_age"
        ], 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | dogs : date_of_birth (\"2018-03-17 04:05:12\", \"2013-02-13 05:15:21\", \"2012-10-14 14:44:37\"), gender (\"1\", \"0\"), name (\"Merritt\", \"George\", \"Evangeline\"), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-24 23:48:59\", \"2018-03-24 19:36:59\", \"2018-03-25 14:15:41\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-25 08:12:51\", \"2018-03-06 16:32:11\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"3\", \"4\", \"6\"), owner_id (2, 2, 7), date_arrived (\"2017-06-18 19:45:38\", \"2017-10-24 04:45:13\", \"2017-10-24 04:45:13\"), weight (\"2.18\", \"9.8\", \"5.16\"), dog_id (1, 12, 3), abandoned_yn (\"1\", \"0\") | dogs_age : min_age (\"6\", \"4\", \"1\"), avg_age (\"9\", \"2\", \"4\"), sum_age (\"5\", \"9\", \"5\"), max_age (\"1\", \"2\", \"2\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | professionals : zip_code (\"43129\", \"07412\", \"54312\"), professional_id (13, 9, 2), email_address (\"cole.margarita@example.org\", \"delphine29@example.com\", \"marquardt.furman@example.org\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Taryn\", \"Monte\", \"Velva\"), home_phone (\"1-138-287-3775\", \"+02(1)0259033559\", \"(920)304-4499x59146\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), state (\"Montana\", \"SouthCarolina\", \"Indiana\"), city (\"Domenickton\", \"North Adelberttown\", \"Borisside\"), last_name (\"Hayes\", \"Watsica\", \"Pouros\"), cell_number (\"880-659-7577x736\", \"139-321-7313\", \"00230569697\") | treatments : cost_of_treatment (681, 266, 349), dog_id (4, 10, 10), professional_id (7, 9, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-04 20:33:43\", \"2018-03-15 19:10:02\"), treatment_id (1, 3, 11) | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | owners : last_name (\"Stoltenberg\", \"Stoltenberg\", \"Stoltenberg\"), street (\"9212 Rosenbaum Lights\", \"60352 Kayleigh Crossing Suite 700\", \"9212 Rosenbaum Lights\"), city (\"Lake Carleyborough\", \"Lake Valentin\", \"Brakusfurt\"), first_name (\"Orlando\", \"Jaclyn\", \"Emelie\"), state (\"NewYork\", \"Arizona\", \"Wisconsin\"), cell_number (\"(722)768-5439x484\", \"(722)768-5439x484\", \"762.589.6117x1328\"), email_address (\"christy49@example.org\", \"hudson.favian@example.com\", \"margaretta.runte@example.net\"), zip_code (\"61019\", \"92406\", \"11990\"), owner_id (12, 5, 12), home_phone (\"130-796-4589x05454\", \"1-332-849-1908\", \"066.264.7885\")", 
        "new_table_name": "dogs_age", 
        "db_id": "dog_kennels", 
        "tables_with_pkeys": [
            [
                "dogs", 
                "dog_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(age) from dogs", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "age", 
            ")", 
            "FROM", 
            "Dogs"
        ]
    }, 
    {
        "query2": "select max_age from dogs_age", 
        "schema_without_content": "dogs : weight , age , dog_id , date_adopted , breed_code , size_code , gender , date_of_birth , owner_id , abandoned_yn , date_arrived , date_departed , name  | treatment_types : treatment_type_code , treatment_type_description  | owners : city , first_name , home_phone , zip_code , cell_number 9217952551\", \"762.589.6117x1328\", \"478.978.0729\", last_name , email_address , street , owner_id , state  | sizes : size_code , size_description  | charges : charge_type , charge_id , charge_amount  | treatments : treatment_id , professional_id , dog_id , date_of_treatment , cost_of_treatment , treatment_type_code  | professionals : first_name , last_name , city , professional_id , street , email_address , home_phone 1132733868\", \"346.594.3739\", \"1-138-287-3775\", zip_code , cell_number 939-2435x80863\", state , role_code  | breeds : breed_code , breed_name  | dogs_age : sum_age , min_age , max_age , avg_age ", 
        "query1": "select max(age) from dogs", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "age", 
            ")", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "Tell", 
            "me", 
            "the", 
            "age", 
            "of", 
            "the", 
            "oldest", 
            "dog", 
            "."
        ], 
        "all_raw_cols": [
            "age"
        ], 
        "question": "Tell me the age of the oldest dog.", 
        "all_cols": [
            "sum_age", 
            "avg_age", 
            "min_age", 
            "max_age"
        ], 
        "schema_with_content": "dogs : weight (\"8.16\", \"2.18\", \"8.96\"), age (\"4\", \"4\", \"3\"), dog_id (10, 3, 9), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-06 16:32:11\", \"2018-02-27 00:27:57\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), date_of_birth (\"2015-02-26 21:31:22\", \"2012-01-27 05:11:53\", \"2012-05-03 21:42:25\"), owner_id (3, 6, 3), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-04-20 00:58:55\", \"2018-01-02 03:15:29\", \"2017-12-29 23:24:13\"), date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 06:46:07\", \"2018-03-24 23:48:59\"), name (\"Kacey\", \"Narciso\", \"Jesus\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : city (\"Port Zackery\", \"Lake Valentin\", \"Port Zackery\"), first_name (\"Jaclyn\", \"Orlando\", \"Emelie\"), home_phone (\"1-682-845-0116x63235\", \"893-862-5295x61709\", \"01802479758\"), zip_code (\"25609\", \"78297\", \"00589\"), cell_number (\"+70(4)9217952551\", \"762.589.6117x1328\", \"478.978.0729\"), last_name (\"DuBuque\", \"Nicolas\", \"Rippin\"), email_address (\"marks.gail@example.org\", \"ymaggio@example.com\", \"wpfeffer@example.net\"), street (\"6950 Katherine Forges Apt. 630\", \"1204 Mae Highway Apt. 107\", \"6950 Katherine Forges Apt. 630\"), owner_id (8, 13, 13), state (\"Washington\", \"Wisconsin\", \"Arizona\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | treatments : treatment_id (1, 7, 14), professional_id (6, 8, 4), dog_id (14, 2, 7), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-14 19:10:40\", \"2018-03-15 19:10:02\"), cost_of_treatment (945, 147, 407), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\") | professionals : first_name (\"Ruben\", \"Winfield\", \"Velva\"), last_name (\"Hayes\", \"Pouros\", \"Kshlerin\"), city (\"North Odellfurt\", \"Juddton\", \"Juddton\"), professional_id (8, 9, 2), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), email_address (\"delphine29@example.com\", \"lourdes.lowe@example.net\", \"lucile.shanahan@example.org\"), home_phone (\"+43(5)1132733868\", \"346.594.3739\", \"1-138-287-3775\"), zip_code (\"17902\", \"07412\", \"34041\"), cell_number (\"139-321-7313\", \"139-321-7313\", \"(275)939-2435x80863\"), state (\"Mississippi\", \"Wyoming\", \"California\"), role_code (\"Employee\", \"Veterenarian\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | dogs_age : sum_age (\"8\", \"3\", \"4\"), min_age (\"9\", \"3\", \"4\"), max_age (\"5\", \"4\", \"8\"), avg_age (\"5\", \"5\", \"8\")", 
        "new_table_name": "dogs_age", 
        "db_id": "dog_kennels", 
        "tables_with_pkeys": [
            [
                "dogs", 
                "dog_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(age) from dogs", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "age", 
            ")", 
            "FROM", 
            "Dogs"
        ]
    }, 
    {
        "query2": "select max_charge_amount from charges_charge_amount", 
        "schema_without_content": "charges : charge_id , charge_type , charge_amount  | treatments : dog_id , treatment_id , treatment_type_code , date_of_treatment , cost_of_treatment , professional_id  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | charges_charge_amount : avg_charge_amount , max_charge_amount , min_charge_amount , sum_charge_amount  | owners : home_phone , zip_code , last_name , state , street , city , owner_id , email_address , first_name , cell_number 4323592985\" | breeds : breed_name , breed_code  | professionals : state , city , email_address , professional_id , street , zip_code , role_code , last_name , home_phone , first_name , cell_number  | dogs : date_of_birth , name , abandoned_yn , date_departed , weight , size_code , date_arrived , age , date_adopted , gender , owner_id , breed_code , dog_id ", 
        "query1": "select max(charge_amount) from charges", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "charge_amount", 
            ")", 
            "from", 
            "charges"
        ], 
        "question_toks": [
            "How", 
            "much", 
            "does", 
            "the", 
            "most", 
            "expensive", 
            "charge", 
            "type", 
            "costs", 
            "?"
        ], 
        "all_raw_cols": [
            "charge_amount"
        ], 
        "question": "How much does the most expensive charge type costs?", 
        "all_cols": [
            "sum_charge_amount", 
            "avg_charge_amount", 
            "min_charge_amount", 
            "max_charge_amount"
        ], 
        "schema_with_content": "charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | treatments : dog_id (2, 14, 15), treatment_id (7, 15, 1), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-15 19:10:02\", \"2018-03-11 04:23:15\"), cost_of_treatment (567, 349, 668), professional_id (8, 4, 4) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | charges_charge_amount : avg_charge_amount (98, 322, 640), max_charge_amount (98, 322, 640), min_charge_amount (98, 322, 640), sum_charge_amount (98, 322, 640) | owners : home_phone (\"1-332-849-1908\", \"893-862-5295x61709\", \"363.948.1090\"), zip_code (\"00589\", \"00589\", \"11990\"), last_name (\"Hamill\", \"Funk\", \"Ondricka\"), state (\"Vermont\", \"Pennsylvania\", \"Wisconsin\"), street (\"692 Jaskolski Forges\", \"6950 Katherine Forges Apt. 630\", \"89011 Kertzmann Spring Suite 642\"), city (\"New Margaretteborough\", \"West Leonard\", \"Lake Carleyborough\"), owner_id (1, 5, 7), email_address (\"margaretta.runte@example.net\", \"kturner@example.net\", \"wpfeffer@example.net\"), first_name (\"Emelie\", \"Tre\", \"Lorenz\"), cell_number (\"481-483-9083x37986\", \"762.589.6117x1328\", \"+00(2)4323592985\") | breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | professionals : state (\"Alabama\", \"Utah\", \"Utah\"), city (\"North Odellfurt\", \"North Adelberttown\", \"Kirastad\"), email_address (\"marquardt.furman@example.org\", \"delphine29@example.com\", \"jerrod.bahringer@example.org\"), professional_id (10, 13, 15), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), zip_code (\"17902\", \"07412\", \"52476\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Jacobs\", \"Pouros\", \"Hyatt\"), home_phone (\"1-138-287-3775\", \"971.048.3763x9404\", \"346.594.3739\"), first_name (\"Monte\", \"Karley\", \"Danny\"), cell_number (\"328.842.3792\", \"328.842.3792\", \"609-405-2990\") | dogs : date_of_birth (\"2012-05-03 21:42:25\", \"2012-05-03 21:42:25\", \"2012-01-27 05:11:53\"), name (\"Bessie\", \"Troy\", \"Evangeline\"), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 14:15:41\", \"2018-03-25 05:07:47\"), weight (\"9.48\", \"9.8\", \"8.96\"), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-10-25 00:55:34\", \"2017-07-25 15:19:07\", \"2017-10-16 20:06:21\"), age (\"1\", \"6\", \"8\"), date_adopted (\"2018-03-23 16:02:04\", \"2018-02-25 23:45:30\", \"2018-03-18 15:12:50\"), gender (\"1\", \"0\"), owner_id (6, 2, 3), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (6, 9, 2)", 
        "new_table_name": "charges_charge_amount", 
        "db_id": "dog_kennels", 
        "tables_with_pkeys": [
            [
                "charges", 
                "charge_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(charge_amount) from charges", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "charge_amount", 
            ")", 
            "FROM", 
            "Charges"
        ]
    }, 
    {
        "query2": "select max_charge_amount from charges_charge_amount", 
        "schema_without_content": "charges : charge_id , charge_type , charge_amount  | owners : city , cell_number 768-5439x484\", street , last_name , zip_code , state , home_phone , first_name , owner_id , email_address  | breeds : breed_code , breed_name  | sizes : size_description , size_code  | treatments : cost_of_treatment , dog_id , date_of_treatment , professional_id , treatment_type_code , treatment_id  | charges_charge_amount : max_charge_amount , min_charge_amount , avg_charge_amount , sum_charge_amount  | dogs : abandoned_yn , age , gender , date_adopted , owner_id , date_arrived , date_of_birth , name , date_departed , weight , dog_id , breed_code , size_code  | treatment_types : treatment_type_code , treatment_type_description  | professionals : city , zip_code , street , role_code , state , professional_id , home_phone , cell_number , first_name , email_address , last_name ", 
        "query1": "select max(charge_amount) from charges", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "charge_amount", 
            ")", 
            "from", 
            "charges"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "charge", 
            "amount", 
            "of", 
            "the", 
            "most", 
            "expensive", 
            "charge", 
            "type", 
            "?"
        ], 
        "all_raw_cols": [
            "charge_amount"
        ], 
        "question": "What is the charge amount of the most expensive charge type?", 
        "all_cols": [
            "sum_charge_amount", 
            "avg_charge_amount", 
            "min_charge_amount", 
            "max_charge_amount"
        ], 
        "schema_with_content": "charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | owners : city (\"Beerton\", \"Port Reannamouth\", \"New Margaretteborough\"), cell_number (\"478.978.0729\", \"633.455.3045x85484\", \"(722)768-5439x484\"), street (\"15828 Spencer Extensions\", \"89011 Kertzmann Spring Suite 642\", \"692 Jaskolski Forges\"), last_name (\"Stoltenberg\", \"Rippin\", \"Fisher\"), zip_code (\"36871\", \"02647\", \"11990\"), state (\"Maryland\", \"Maryland\", \"Arkansas\"), home_phone (\"1-332-849-1908\", \"066.264.7885\", \"1-346-655-5842x768\"), first_name (\"Nora\", \"Cindy\", \"Cindy\"), owner_id (7, 3, 10), email_address (\"hudson.favian@example.com\", \"wpfeffer@example.net\", \"ymaggio@example.com\") | breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatments : cost_of_treatment (428, 266, 139), dog_id (10, 2, 15), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-13 12:22:58\", \"2018-03-13 12:22:58\"), professional_id (14, 14, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (10, 15, 9) | charges_charge_amount : max_charge_amount (98, 322, 640), min_charge_amount (98, 322, 640), avg_charge_amount (98, 322, 640), sum_charge_amount (98, 322, 640) | dogs : abandoned_yn (\"1\", \"0\"), age (\"3\", \"9\", \"5\"), gender (\"1\", \"0\"), date_adopted (\"2018-03-05 06:05:23\", \"2018-03-05 06:05:23\", \"2018-03-21 10:41:18\"), owner_id (2, 5, 6), date_arrived (\"2017-09-08 20:10:13\", \"2018-01-02 03:15:29\", \"2017-04-15 09:25:31\"), date_of_birth (\"2013-02-13 05:15:21\", \"2017-09-19 05:39:09\", \"2013-02-20 14:50:56\"), name (\"Mavis\", \"Jesus\", \"Evangeline\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 15:05:16\", \"2018-03-25 04:50:22\"), weight (\"8.96\", \"2.18\", \"9.8\"), dog_id (2, 11, 14), breed_code (\"ESK\", \"BUL\", \"HUS\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | professionals : city (\"South Rockyport\", \"South Rockyport\", \"Baileymouth\"), zip_code (\"33020\", \"41215\", \"54312\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), role_code (\"Employee\", \"Veterenarian\"), state (\"California\", \"California\", \"California\"), professional_id (7, 4, 15), home_phone (\"320-508-6023\", \"346.594.3739\", \"246-951-0080x76716\"), cell_number (\"00230569697\", \"461-801-2600\", \"328.842.3792\"), first_name (\"Olaf\", \"Monte\", \"Karley\"), email_address (\"cole.margarita@example.org\", \"uboehm@example.org\", \"jeichmann@example.com\"), last_name (\"Frami\", \"Watsica\", \"Kshlerin\")", 
        "new_table_name": "charges_charge_amount", 
        "db_id": "dog_kennels", 
        "tables_with_pkeys": [
            [
                "charges", 
                "charge_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select max(charge_amount) from charges", 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "charge_amount", 
            ")", 
            "FROM", 
            "Charges"
        ]
    }, 
    {
        "query2": "select citizenship, max_net_worth_millions from singer_net_worth_millions", 
        "schema_without_content": "song : title , highest_position , song_id , singer_id , sales  | singer_net_worth_millions : max_net_worth_millions , min_net_worth_millions , sum_net_worth_millions , citizenship , avg_net_worth_millions  | singer : singer_id , birth_year , citizenship , net_worth_millions , name ", 
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query_toks_no_value": [
            "select", 
            "citizenship", 
            ",", 
            "max", 
            "(", 
            "net_worth_millions", 
            ")", 
            "from", 
            "singer", 
            "group", 
            "by", 
            "citizenship"
        ], 
        "question_toks": [
            "Show", 
            "different", 
            "citizenships", 
            "and", 
            "the", 
            "maximum", 
            "net", 
            "worth", 
            "of", 
            "singers", 
            "of", 
            "each", 
            "citizenship", 
            "."
        ], 
        "all_raw_cols": [
            "citizenship", 
            "net_worth_millions"
        ], 
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", 
        "all_cols": [
            "citizenship", 
            "sum_net_worth_millions", 
            "avg_net_worth_millions", 
            "min_net_worth_millions", 
            "max_net_worth_millions"
        ], 
        "schema_with_content": "song : title (\"Call on Me\", \"Call on Me\", \"Cha Cha Slide\"), highest_position (1.0, 3.0), song_id (3, 2, 6), singer_id (2, 2, 1), sales (292000.0, 351421.0, 351421.0) | singer_net_worth_millions : max_net_worth_millions (12.7, 17.4, 17.8), min_net_worth_millions (17.0, 17.0, 30.0), sum_net_worth_millions (17.8, 28.8, 17.4), citizenship (\"Australia\", \"United States\", \"Australia\"), avg_net_worth_millions (17.8, 17.4, 17.0) | singer : singer_id (8, 5, 1), birth_year (1942.0, 1940.0, 1940.0), citizenship (\"Australia\", \"Australia\", \"Germany\"), net_worth_millions (26.3, 14.3, 14.3), name (\"Iris Fontbona\", \"Christy Walton\", \"Alice Walton\")", 
        "new_table_name": "singer_net_worth_millions", 
        "db_id": "singer", 
        "tables_with_pkeys": [
            [
                "singer", 
                "singer_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    5, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query_toks": [
            "SELECT", 
            "Citizenship", 
            ",", 
            "max", 
            "(", 
            "Net_Worth_Millions", 
            ")", 
            "FROM", 
            "singer", 
            "GROUP", 
            "BY", 
            "Citizenship"
        ]
    }, 
    {
        "query2": "select citizenship, max_net_worth_millions from singer_net_worth_millions", 
        "schema_without_content": "singer_net_worth_millions : max_net_worth_millions , avg_net_worth_millions , sum_net_worth_millions , min_net_worth_millions , citizenship  | singer : name , birth_year , citizenship , singer_id , net_worth_millions  | song : sales , singer_id , title \", \"Cha Cha Slide\", \"Left Outside Alone\", highest_position , song_id ", 
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query_toks_no_value": [
            "select", 
            "citizenship", 
            ",", 
            "max", 
            "(", 
            "net_worth_millions", 
            ")", 
            "from", 
            "singer", 
            "group", 
            "by", 
            "citizenship"
        ], 
        "question_toks": [
            "For", 
            "each", 
            "citizenship", 
            ",", 
            "what", 
            "is", 
            "the", 
            "maximum", 
            "net", 
            "worth", 
            "?"
        ], 
        "all_raw_cols": [
            "citizenship", 
            "net_worth_millions"
        ], 
        "question": "For each citizenship, what is the maximum net worth?", 
        "all_cols": [
            "citizenship", 
            "sum_net_worth_millions", 
            "avg_net_worth_millions", 
            "min_net_worth_millions", 
            "max_net_worth_millions"
        ], 
        "schema_with_content": "singer_net_worth_millions : max_net_worth_millions (14.3, 26.3, 14.3), avg_net_worth_millions (28.8, 30.0, 17.4), sum_net_worth_millions (17.4, 26.3, 17.4), min_net_worth_millions (17.8, 17.4, 17.4), citizenship (\"Germany\", \"United States\", \"Australia\") | singer : name (\"Iris Fontbona\", \"Susanne Klatten\", \"Alice Walton\"), birth_year (1949.0, 1962.0, 1942.0), citizenship (\"Chile\", \"Chile\", \"United States\"), singer_id (5, 4, 1), net_worth_millions (28.8, 26.3, 14.3) | song : sales (552407.0, 335000.0, 1094000.0), singer_id (6, 2, 2), title (\"F**k It (I Don't Want You Back)\", \"Cha Cha Slide\", \"Left Outside Alone\"), highest_position (1.0, 3.0), song_id (1, 2, 2)", 
        "new_table_name": "singer_net_worth_millions", 
        "db_id": "singer", 
        "tables_with_pkeys": [
            [
                "singer", 
                "singer_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    5, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query_toks": [
            "SELECT", 
            "Citizenship", 
            ",", 
            "max", 
            "(", 
            "Net_Worth_Millions", 
            ")", 
            "FROM", 
            "singer", 
            "GROUP", 
            "BY", 
            "Citizenship"
        ]
    }, 
    {
        "query2": "select name, sum_sales from singer_song_sales", 
        "schema_without_content": "singer_song_sales : avg_sales , max_sales , sum_sales , min_sales , name  | singer : birth_year , net_worth_millions , citizenship , singer_id , name  | song : highest_position , sales , title , song_id , singer_id ", 
        "query1": "select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name", 
        "query_toks_no_value": [
            "select", 
            "t1", 
            ".", 
            "name", 
            ",", 
            "sum", 
            "(", 
            "t2", 
            ".", 
            "sales", 
            ")", 
            "from", 
            "singer", 
            "as", 
            "t1", 
            "join", 
            "song", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "singer_id", 
            "=", 
            "t2", 
            ".", 
            "singer_id", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "name"
        ], 
        "question_toks": [
            "Show", 
            "the", 
            "names", 
            "of", 
            "singers", 
            "and", 
            "the", 
            "total", 
            "sales", 
            "of", 
            "their", 
            "songs", 
            "."
        ], 
        "all_raw_cols": [
            "name", 
            "sales"
        ], 
        "question": "Show the names of singers and the total sales of their songs.", 
        "all_cols": [
            "name", 
            "sum_sales", 
            "avg_sales", 
            "min_sales", 
            "max_sales"
        ], 
        "schema_with_content": "singer_song_sales : avg_sales (552407.0, 292000.0, 300000.0), max_sales (1094000.0, 292000.0, 351421.0), sum_sales (552407.0, 300000.0, 335000.0), min_sales (552407.0, 275000.0, 351421.0), name (\"Jacqueline Mars\", \"Iris Fontbona\", \"Jacqueline Mars\") | singer : birth_year (1948.0, 1940.0, 1948.0), net_worth_millions (17.4, 12.7, 12.7), citizenship (\"United States\", \"Germany\", \"France\"), singer_id (1, 6, 3), name (\"Christy Walton\", \"Jacqueline Mars\", \"Gina Rinehart\") | song : highest_position (1.0, 3.0), sales (1094000.0, 292000.0, 552407.0), title (\"Do They Know It's Christmas\", \"Do They Know It's Christmas\", \"Cha Cha Slide\"), song_id (6, 7, 6), singer_id (2, 4, 2)", 
        "new_table_name": "singer_song_sales", 
        "db_id": "singer", 
        "tables_with_pkeys": [
            [
                "singer", 
                "singer_id"
            ], 
            [
                "song", 
                "song_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ], 
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            8, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    2, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name", 
        "query_toks": [
            "SELECT", 
            "T1.Name", 
            ",", 
            "sum", 
            "(", 
            "T2.Sales", 
            ")", 
            "FROM", 
            "singer", 
            "AS", 
            "T1", 
            "JOIN", 
            "song", 
            "AS", 
            "T2", 
            "ON", 
            "T1.Singer_ID", 
            "=", 
            "T2.Singer_ID", 
            "GROUP", 
            "BY", 
            "T1.Name"
        ]
    }, 
    {
        "query2": "select name, sum_sales from singer_song_sales", 
        "schema_without_content": "song : highest_position , title , sales , singer_id , song_id  | singer : net_worth_millions , citizenship , singer_id , name , birth_year  | singer_song_sales : sum_sales , max_sales , min_sales , avg_sales , name ", 
        "query1": "select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name", 
        "query_toks_no_value": [
            "select", 
            "t1", 
            ".", 
            "name", 
            ",", 
            "sum", 
            "(", 
            "t2", 
            ".", 
            "sales", 
            ")", 
            "from", 
            "singer", 
            "as", 
            "t1", 
            "join", 
            "song", 
            "as", 
            "t2", 
            "on", 
            "t1", 
            ".", 
            "singer_id", 
            "=", 
            "t2", 
            ".", 
            "singer_id", 
            "group", 
            "by", 
            "t1", 
            ".", 
            "name"
        ], 
        "question_toks": [
            "For", 
            "each", 
            "singer", 
            "name", 
            ",", 
            "what", 
            "is", 
            "the", 
            "total", 
            "sales", 
            "for", 
            "their", 
            "songs", 
            "?"
        ], 
        "all_raw_cols": [
            "name", 
            "sales"
        ], 
        "question": "For each singer name, what is the total sales for their songs?", 
        "all_cols": [
            "name", 
            "sum_sales", 
            "avg_sales", 
            "min_sales", 
            "max_sales"
        ], 
        "schema_with_content": "song : highest_position (1.0, 3.0), title (\"Do They Know It's Christmas\", \"All This Time\", \"Do They Know It's Christmas\"), sales (351421.0, 300000.0, 300000.0), singer_id (5, 6, 6), song_id (8, 7, 4) | singer : net_worth_millions (12.7, 12.7, 17.4), citizenship (\"United States\", \"United States\", \"Australia\"), singer_id (2, 5, 3), name (\"Christy Walton\", \"Iris Fontbona\", \"Iris Fontbona\"), birth_year (1949.0, 1944.0, 1948.0) | singer_song_sales : sum_sales (351421.0, 1094000.0, 552407.0), max_sales (351421.0, 261000.0, 552407.0), min_sales (335000.0, 300000.0, 552407.0), avg_sales (292000.0, 1094000.0, 300000.0), name (\"Jacqueline Mars\", \"Alice Walton\", \"Susanne Klatten\")", 
        "new_table_name": "singer_song_sales", 
        "db_id": "singer", 
        "tables_with_pkeys": [
            [
                "singer", 
                "singer_id"
            ], 
            [
                "song", 
                "song_id"
            ]
        ], 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ], 
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": [
                    [
                        false, 
                        2, 
                        [
                            0, 
                            [
                                0, 
                                1, 
                                false
                            ], 
                            null
                        ], 
                        [
                            0, 
                            8, 
                            false
                        ], 
                        null
                    ]
                ]
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    2, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "orig_query": "select t1.name, sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t1.name", 
        "query_toks": [
            "SELECT", 
            "T1.Name", 
            ",", 
            "sum", 
            "(", 
            "T2.Sales", 
            ")", 
            "FROM", 
            "singer", 
            "AS", 
            "T1", 
            "JOIN", 
            "song", 
            "AS", 
            "T2", 
            "ON", 
            "T1.Singer_ID", 
            "=", 
            "T2.Singer_ID", 
            "GROUP", 
            "BY", 
            "T1.Name"
        ]
    }
]