[
    {
        "schema_without_content": "stadium : lowest , location , capacity , stadium_id , highest , average , name  | singer : song_release_year , is_male , name , country , age , song_name , singer_id  | singer_country : country , singer_id  | concert : stadium_id , concert_id , concert_name , theme , year  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.name, t2.country, t1.age from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id order by t1.age desc", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "Show", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "for", 
            "all", 
            "singers", 
            "ordered", 
            "by", 
            "age", 
            "from", 
            "the", 
            "oldest", 
            "to", 
            "the", 
            "youngest", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", 
        "schema_with_content": "stadium : lowest (533, 411, 331), location (\"Ayr United\", \"Queen's Park\", \"Ayr United\"), capacity (4000, 3100, 2000), stadium_id (4, 10, 2), highest (1125, 921, 921), average (730, 638, 642), name (\"Hampden Park\", \"Glebe Park\", \"Somerset Park\") | singer : song_release_year (\"1992\", \"1992\", \"2014\"), is_male (\"F\", \"T\"), name (\"John Nizinik\", \"Justin Brown\", \"Justin Brown\"), country (\"Netherlands\", \"United States\", \"France\"), age (43, 29, 41), song_name (\"Gentleman\", \"Hey Oh\", \"Gentleman\"), singer_id (5, 1, 1) | singer_country : country (\"Netherlands\", \"United States\", \"France\"), singer_id (4, 5, 4) | concert : stadium_id (\"10\", \"9\", \"1\"), concert_id (1, 3, 6), concert_name (\"Auditions\", \"Home Visits\", \"Auditions\"), theme (\"Wide Awake\", \"Wide Awake\", \"Free choice 2\"), year (\"2014\", \"2015\") | singer_in_concert : concert_id (4, 4, 2), singer_id (\"6\", \"4\", \"6\")", 
        "orig_query": "select name, country, age from singer order by age desc", 
        "query1": "select name, country, age from singer order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "country"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : lowest , highest , name , location , stadium_id , average , capacity  | singer : age , song_name , country , song_release_year , singer_id , name , is_male  | singer_age : age , singer_id  | concert : theme , stadium_id , concert_name , concert_id , year  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t1.name, t1.country, t2.age from singer as t1 join singer_age as t2 on t1.singer_id = t2.singer_id order by t2.age desc", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "Show", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "for", 
            "all", 
            "singers", 
            "ordered", 
            "by", 
            "age", 
            "from", 
            "the", 
            "oldest", 
            "to", 
            "the", 
            "youngest", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", 
        "schema_with_content": "stadium : lowest (411, 404, 331), highest (1057, 2363, 4812), name (\"Somerset Park\", \"Somerset Park\", \"Stark's Park\"), location (\"Ayr United\", \"Peterhead\", \"Raith Rovers\"), stadium_id (6, 9, 3), average (864, 642, 642), capacity (2000, 3960, 3960) | singer : age (32, 41, 43), song_name (\"Hey Oh\", \"Sun\", \"Hey Oh\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2003\", \"2014\", \"2008\"), singer_id (4, 5, 4), name (\"Joe Sharp\", \"Tribal King\", \"Joe Sharp\"), is_male (\"F\", \"T\") | singer_age : age (32, 41, 43), singer_id (6, 4, 1) | concert : theme (\"Party All Night\", \"Wide Awake\", \"Bleeding Love\"), stadium_id (\"9\", \"1\", \"10\"), concert_name (\"Week 1\", \"Auditions\", \"Home Visits\"), concert_id (4, 3, 3), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"6\", \"6\", \"5\"), concert_id (6, 2, 4)", 
        "orig_query": "select name, country, age from singer order by age desc", 
        "query1": "select name, country, age from singer order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "age"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : average , capacity , lowest , stadium_id , name , highest , location  | singer : age , is_male , song_release_year , song_name , singer_id , name , country  | singer_name : singer_id , name  | concert : year , stadium_id , concert_name , concert_id , theme  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t2.name, t1.country, t1.age from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id order by t1.age desc", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "Show", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "for", 
            "all", 
            "singers", 
            "ordered", 
            "by", 
            "age", 
            "from", 
            "the", 
            "oldest", 
            "to", 
            "the", 
            "youngest", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", 
        "schema_with_content": "stadium : average (730, 615, 552), capacity (10104, 10104, 3960), lowest (466, 404, 466), stadium_id (10, 4, 3), name (\"Balmoor\", \"Glebe Park\", \"Somerset Park\"), highest (2363, 1763, 2363), location (\"Arbroath\", \"East Fife\", \"Alloa Athletic\") | singer : age (25, 25, 32), is_male (\"F\", \"T\"), song_release_year (\"2013\", \"2003\", \"2008\"), song_name (\"You\", \"Gentleman\", \"Gentleman\"), singer_id (6, 1, 2), name (\"Justin Brown\", \"Timbaland\", \"Joe Sharp\"), country (\"Netherlands\", \"United States\", \"France\") | singer_name : singer_id (1, 4, 6), name (\"Justin Brown\", \"Timbaland\", \"Joe Sharp\") | concert : year (\"2014\", \"2015\"), stadium_id (\"10\", \"9\", \"9\"), concert_name (\"Week 1\", \"Home Visits\", \"Week 2\"), concert_id (1, 1, 1), theme (\"Bleeding Love\", \"Free choice 2\", \"Wide Awake\") | singer_in_concert : singer_id (\"2\", \"6\", \"5\"), concert_id (6, 6, 6)", 
        "orig_query": "select name, country, age from singer order by age desc", 
        "query1": "select name, country, age from singer order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "name"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : lowest , average , highest , name , stadium_id , location , capacity  | singer : song_release_year , name , singer_id , country , is_male , song_name , age  | singer_country : singer_id , country  | concert : stadium_id , concert_name , concert_id , year , theme  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.name, t2.country, t1.age from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id order by t1.age desc", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            ",", 
            "countries", 
            ",", 
            "and", 
            "ages", 
            "for", 
            "every", 
            "singer", 
            "in", 
            "descending", 
            "order", 
            "of", 
            "age", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "What are the names, countries, and ages for every singer in descending order of age?", 
        "schema_with_content": "stadium : lowest (411, 1294, 400), average (2106, 638, 2106), highest (1125, 1980, 780), name (\"Balmoor\", \"Stark's Park\", \"Somerset Park\"), stadium_id (5, 4, 2), location (\"Ayr United\", \"Brechin City\", \"Brechin City\"), capacity (4000, 3100, 11998) | singer : song_release_year (\"2003\", \"2016\", \"2014\"), name (\"Joe Sharp\", \"Tribal King\", \"Timbaland\"), singer_id (3, 2, 1), country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), song_name (\"Love\", \"Dangerous\", \"Dangerous\"), age (41, 29, 32) | singer_country : singer_id (6, 5, 1), country (\"Netherlands\", \"United States\", \"France\") | concert : stadium_id (\"9\", \"2\", \"7\"), concert_name (\"Week 2\", \"Auditions\", \"Home Visits\"), concert_id (5, 5, 4), year (\"2014\", \"2015\"), theme (\"Party All Night\", \"Party All Night\", \"Bleeding Love\") | singer_in_concert : concert_id (1, 2, 3), singer_id (\"6\", \"2\", \"6\")", 
        "orig_query": "select name, country, age from singer order by age desc", 
        "query1": "select name, country, age from singer order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "country"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : name , lowest , stadium_id , highest , location , capacity , average  | singer : song_release_year , is_male , country , singer_id , song_name , name , age  | singer_age : age , singer_id  | concert : concert_name , stadium_id , concert_id , theme , year  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t1.name, t1.country, t2.age from singer as t1 join singer_age as t2 on t1.singer_id = t2.singer_id order by t2.age desc", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            ",", 
            "countries", 
            ",", 
            "and", 
            "ages", 
            "for", 
            "every", 
            "singer", 
            "in", 
            "descending", 
            "order", 
            "of", 
            "age", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "What are the names, countries, and ages for every singer in descending order of age?", 
        "schema_with_content": "stadium : name (\"Stark's Park\", \"Hampden Park\", \"Somerset Park\"), lowest (331, 533, 1057), stadium_id (7, 3, 9), highest (2363, 1125, 780), location (\"Brechin City\", \"Ayr United\", \"Peterhead\"), capacity (4125, 10104, 3808), average (642, 2106, 730) | singer : song_release_year (\"2016\", \"2016\", \"2008\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 6, 6), song_name (\"Dangerous\", \"Gentleman\", \"Love\"), name (\"Timbaland\", \"Timbaland\", \"Timbaland\"), age (29, 29, 29) | singer_age : age (29, 29, 29), singer_id (3, 3, 4) | concert : concert_name (\"Auditions\", \"Home Visits\", \"Week 1\"), stadium_id (\"2\", \"9\", \"7\"), concert_id (5, 2, 5), theme (\"Wide Awake\", \"Happy Tonight\", \"Free choice 2\"), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"2\", \"5\", \"4\"), concert_id (5, 3, 6)", 
        "orig_query": "select name, country, age from singer order by age desc", 
        "query1": "select name, country, age from singer order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "age"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : highest , capacity , lowest , name , average , location , stadium_id  | singer : name , song_release_year , age , singer_id , country , song_name , is_male  | singer_name : name , singer_id  | concert : year , theme , stadium_id , concert_name , concert_id  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t2.name, t1.country, t1.age from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id order by t1.age desc", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            ",", 
            "countries", 
            ",", 
            "and", 
            "ages", 
            "for", 
            "every", 
            "singer", 
            "in", 
            "descending", 
            "order", 
            "of", 
            "age", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            ",", 
            "age", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "What are the names, countries, and ages for every singer in descending order of age?", 
        "schema_with_content": "stadium : highest (1057, 921, 2363), capacity (52500, 4125, 3960), lowest (466, 404, 315), name (\"Glebe Park\", \"Balmoor\", \"Stark's Park\"), average (615, 615, 1477), location (\"Ayr United\", \"Arbroath\", \"Brechin City\"), stadium_id (7, 4, 5) | singer : name (\"Rose White\", \"Tribal King\", \"Tribal King\"), song_release_year (\"2014\", \"2008\", \"2016\"), age (29, 25, 43), singer_id (5, 3, 5), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Love\", \"Sun\", \"Love\"), is_male (\"F\", \"T\") | singer_name : name (\"Rose White\", \"Tribal King\", \"Tribal King\"), singer_id (1, 6, 5) | concert : year (\"2014\", \"2015\"), theme (\"Free choice\", \"Free choice\", \"Happy Tonight\"), stadium_id (\"1\", \"1\", \"2\"), concert_name (\"Super bootcamp\", \"Super bootcamp\", \"Week 2\"), concert_id (1, 6, 3) | singer_in_concert : singer_id (\"4\", \"4\", \"2\"), concert_id (3, 2, 3)", 
        "orig_query": "select name, country, age from singer order by age desc", 
        "query1": "select name, country, age from singer order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "name"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : stadium_id , name , location , highest , capacity , average , lowest  | singer : song_release_year , name , is_male , country , singer_id , song_name , age  | singer_song_release_year : song_release_year , singer_id  | concert : year , stadium_id , concert_id , theme , concert_name  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.song_name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "song_name", 
            ",", 
            "song_release_year", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Show", 
            "the", 
            "name", 
            "and", 
            "the", 
            "release", 
            "year", 
            "of", 
            "the", 
            "song", 
            "by", 
            "the", 
            "youngest", 
            "singer", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "song_name", 
            ",", 
            "song_release_year", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "LIMIT", 
            "1"
        ], 
        "question": "Show the name and the release year of the song by the youngest singer.", 
        "schema_with_content": "stadium : stadium_id (3, 7, 6), name (\"Hampden Park\", \"Balmoor\", \"Hampden Park\"), location (\"Peterhead\", \"Raith Rovers\", \"Brechin City\"), highest (1125, 921, 2363), capacity (3808, 10104, 2000), average (642, 2106, 1477), lowest (466, 400, 1294) | singer : song_release_year (\"1992\", \"2008\", \"1992\"), name (\"Joe Sharp\", \"Justin Brown\", \"Timbaland\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (5, 2, 5), song_name (\"Gentleman\", \"Dangerous\", \"Gentleman\"), age (41, 25, 52) | singer_song_release_year : song_release_year (\"1992\", \"2008\", \"1992\"), singer_id (5, 4, 6) | concert : year (\"2014\", \"2015\"), stadium_id (\"7\", \"7\", \"1\"), concert_id (5, 4, 2), theme (\"Party All Night\", \"Happy Tonight\", \"Happy Tonight\"), concert_name (\"Week 1\", \"Week 2\", \"Super bootcamp\") | singer_in_concert : concert_id (6, 1, 2), singer_id (\"2\", \"4\", \"6\")", 
        "orig_query": "select song_name, song_release_year from singer order by age limit 1", 
        "query1": "select song_name, song_release_year from singer order by age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "song_release_year"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : stadium_id , highest , name , average , lowest , location , capacity  | singer : is_male , song_release_year , name , country , singer_id , song_name , age  | singer_song_name : singer_id , song_name  | concert : year , theme , concert_name , stadium_id , concert_id  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t2.song_name, t1.song_release_year from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "song_name", 
            ",", 
            "song_release_year", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Show", 
            "the", 
            "name", 
            "and", 
            "the", 
            "release", 
            "year", 
            "of", 
            "the", 
            "song", 
            "by", 
            "the", 
            "youngest", 
            "singer", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "song_name", 
            ",", 
            "song_release_year", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "LIMIT", 
            "1"
        ], 
        "question": "Show the name and the release year of the song by the youngest singer.", 
        "schema_with_content": "stadium : stadium_id (6, 6, 10), highest (1057, 1057, 1057), name (\"Gayfield Park\", \"Balmoor\", \"Bayview Stadium\"), average (1477, 1477, 615), lowest (466, 533, 400), location (\"Arbroath\", \"East Fife\", \"Alloa Athletic\"), capacity (3808, 4000, 4000) | singer : is_male (\"F\", \"T\"), song_release_year (\"2008\", \"1992\", \"2008\"), name (\"Joe Sharp\", \"Tribal King\", \"Rose White\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (5, 3, 2), song_name (\"You\", \"Dangerous\", \"Gentleman\"), age (32, 41, 25) | singer_song_name : singer_id (2, 2, 2), song_name (\"You\", \"Dangerous\", \"Gentleman\") | concert : year (\"2014\", \"2015\"), theme (\"Free choice\", \"Free choice\", \"Free choice\"), concert_name (\"Week 2\", \"Week 1\", \"Auditions\"), stadium_id (\"9\", \"10\", \"10\"), concert_id (6, 5, 2) | singer_in_concert : concert_id (4, 2, 1), singer_id (\"2\", \"4\", \"5\")", 
        "orig_query": "select song_name, song_release_year from singer order by age limit 1", 
        "query1": "select song_name, song_release_year from singer order by age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "song_name"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : highest , location , capacity , average , name , lowest , stadium_id  | singer : singer_id , song_release_year , age , name , is_male , country , song_name  | singer_song_release_year : song_release_year , singer_id  | concert : stadium_id , year , theme , concert_name , concert_id  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.song_name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "song_name", 
            ",", 
            "song_release_year", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "release", 
            "years", 
            "for", 
            "all", 
            "the", 
            "songs", 
            "of", 
            "the", 
            "youngest", 
            "singer", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "song_name", 
            ",", 
            "song_release_year", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the names and release years for all the songs of the youngest singer?", 
        "schema_with_content": "stadium : highest (780, 1125, 921), location (\"Arbroath\", \"Stirling Albion\", \"Queen's Park\"), capacity (3808, 10104, 52500), average (638, 1477, 637), name (\"Bayview Stadium\", \"Stark's Park\", \"Somerset Park\"), lowest (404, 331, 315), stadium_id (10, 9, 6) | singer : singer_id (4, 4, 4), song_release_year (\"2014\", \"2013\", \"2013\"), age (32, 32, 52), name (\"Timbaland\", \"Timbaland\", \"John Nizinik\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Gentleman\", \"Gentleman\", \"Love\") | singer_song_release_year : song_release_year (\"2014\", \"2013\", \"2013\"), singer_id (6, 3, 5) | concert : stadium_id (\"10\", \"10\", \"2\"), year (\"2014\", \"2015\"), theme (\"Happy Tonight\", \"Free choice\", \"Free choice\"), concert_name (\"Auditions\", \"Super bootcamp\", \"Auditions\"), concert_id (2, 3, 3) | singer_in_concert : concert_id (3, 6, 5), singer_id (\"4\", \"2\", \"3\")", 
        "orig_query": "select song_name, song_release_year from singer order by age limit 1", 
        "query1": "select song_name, song_release_year from singer order by age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "song_release_year"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : stadium_id , capacity , location , average , name , highest , lowest  | singer : singer_id , age , is_male , country , name , song_release_year , song_name  | singer_song_name : song_name , singer_id  | concert : stadium_id , year , theme , concert_name , concert_id  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t2.song_name, t1.song_release_year from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "song_name", 
            ",", 
            "song_release_year", 
            "from", 
            "singer", 
            "order", 
            "by", 
            "age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "release", 
            "years", 
            "for", 
            "all", 
            "the", 
            "songs", 
            "of", 
            "the", 
            "youngest", 
            "singer", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "song_name", 
            ",", 
            "song_release_year", 
            "FROM", 
            "singer", 
            "ORDER", 
            "BY", 
            "age", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the names and release years for all the songs of the youngest singer?", 
        "schema_with_content": "stadium : stadium_id (7, 3, 10), capacity (52500, 11998, 4000), location (\"Brechin City\", \"Raith Rovers\", \"Stirling Albion\"), average (615, 642, 642), name (\"Balmoor\", \"Stark's Park\", \"Glebe Park\"), highest (1125, 1057, 837), lowest (404, 466, 1294) | singer : singer_id (4, 1, 4), age (41, 29, 41), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), name (\"John Nizinik\", \"Tribal King\", \"Justin Brown\"), song_release_year (\"2003\", \"2008\", \"1992\"), song_name (\"Gentleman\", \"Sun\", \"Sun\") | singer_song_name : song_name (\"Gentleman\", \"Sun\", \"Sun\"), singer_id (4, 5, 2) | concert : stadium_id (\"1\", \"2\", \"1\"), year (\"2014\", \"2015\"), theme (\"Bleeding Love\", \"Free choice 2\", \"Free choice\"), concert_name (\"Home Visits\", \"Super bootcamp\", \"Home Visits\"), concert_id (4, 4, 5) | singer_in_concert : concert_id (6, 5, 4), singer_id (\"6\", \"6\", \"6\")", 
        "orig_query": "select song_name, song_release_year from singer order by age limit 1", 
        "query1": "select song_name, song_release_year from singer order by age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "song_name"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : stadium_id , average , name , lowest , capacity , location , highest  | stadium_name : name , stadium_id  | singer : song_name , is_male , singer_id , name , age , country , song_release_year  | concert : theme , year , stadium_id , concert_id , concert_name  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "location", 
            ",", 
            "name", 
            "from", 
            "stadium", 
            "where", 
            "capacity", 
            "between", 
            "value", 
            "and", 
            "value"
        ], 
        "question_toks": [
            "Show", 
            "location", 
            "and", 
            "name", 
            "for", 
            "all", 
            "stadiums", 
            "with", 
            "a", 
            "capacity", 
            "between", 
            "5000", 
            "and", 
            "10000", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "LOCATION", 
            ",", 
            "name", 
            "FROM", 
            "stadium", 
            "WHERE", 
            "capacity", 
            "BETWEEN", 
            "5000", 
            "AND", 
            "10000"
        ], 
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", 
        "schema_with_content": "stadium : stadium_id (9, 2, 2), average (642, 1477, 552), name (\"Bayview Stadium\", \"Hampden Park\", \"Glebe Park\"), lowest (533, 331, 331), capacity (2000, 4000, 11998), location (\"Raith Rovers\", \"Alloa Athletic\", \"Stirling Albion\"), highest (780, 1057, 2363) | stadium_name : name (\"Bayview Stadium\", \"Hampden Park\", \"Glebe Park\"), stadium_id (1, 1, 7) | singer : song_name (\"Hey Oh\", \"Sun\", \"Sun\"), is_male (\"F\", \"T\"), singer_id (5, 2, 5), name (\"Rose White\", \"John Nizinik\", \"John Nizinik\"), age (29, 52, 25), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2008\", \"2003\", \"2016\") | concert : theme (\"Bleeding Love\", \"Free choice\", \"Party All Night\"), year (\"2014\", \"2015\"), stadium_id (\"7\", \"10\", \"2\"), concert_id (2, 4, 5), concert_name (\"Super bootcamp\", \"Super bootcamp\", \"Week 1\") | singer_in_concert : concert_id (3, 3, 3), singer_id (\"2\", \"2\", \"6\")", 
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000", 
        "query1": "select location, name from stadium where capacity between 5000 and 10000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    1, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5000.0, 
                    10000.0
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "name"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : stadium_id , lowest , capacity , name , highest , average , location  | stadium_location : stadium_id , location  | singer : is_male , singer_id , name , age , song_name , country , song_release_year  | concert : year , theme , stadium_id , concert_name , concert_id  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t2.location, t1.name from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "location", 
            ",", 
            "name", 
            "from", 
            "stadium", 
            "where", 
            "capacity", 
            "between", 
            "value", 
            "and", 
            "value"
        ], 
        "question_toks": [
            "Show", 
            "location", 
            "and", 
            "name", 
            "for", 
            "all", 
            "stadiums", 
            "with", 
            "a", 
            "capacity", 
            "between", 
            "5000", 
            "and", 
            "10000", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "LOCATION", 
            ",", 
            "name", 
            "FROM", 
            "stadium", 
            "WHERE", 
            "capacity", 
            "BETWEEN", 
            "5000", 
            "AND", 
            "10000"
        ], 
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", 
        "schema_with_content": "stadium : stadium_id (7, 4, 4), lowest (411, 533, 331), capacity (11998, 3960, 3100), name (\"Glebe Park\", \"Gayfield Park\", \"Forthbank Stadium\"), highest (4812, 837, 1125), average (2106, 637, 638), location (\"Brechin City\", \"Stirling Albion\", \"Arbroath\") | stadium_location : stadium_id (2, 4, 6), location (\"Brechin City\", \"Stirling Albion\", \"Arbroath\") | singer : is_male (\"F\", \"T\"), singer_id (6, 4, 4), name (\"Timbaland\", \"John Nizinik\", \"Timbaland\"), age (52, 25, 52), song_name (\"Gentleman\", \"Hey Oh\", \"Dangerous\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2003\", \"2016\", \"2014\") | concert : year (\"2014\", \"2015\"), theme (\"Party All Night\", \"Free choice\", \"Happy Tonight\"), stadium_id (\"9\", \"10\", \"1\"), concert_name (\"Auditions\", \"Week 1\", \"Super bootcamp\"), concert_id (6, 1, 4) | singer_in_concert : concert_id (5, 3, 5), singer_id (\"3\", \"6\", \"3\")", 
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000", 
        "query1": "select location, name from stadium where capacity between 5000 and 10000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    1, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5000.0, 
                    10000.0
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "location"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : capacity , location , name , average , lowest , stadium_id , highest  | stadium_name : stadium_id , name  | singer : singer_id , age , name , is_male , song_name , song_release_year , country  | concert : year , concert_name , stadium_id , concert_id , theme  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "location", 
            ",", 
            "name", 
            "from", 
            "stadium", 
            "where", 
            "capacity", 
            "between", 
            "value", 
            "and", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "locations", 
            "and", 
            "names", 
            "of", 
            "all", 
            "stations", 
            "with", 
            "capacity", 
            "between", 
            "5000", 
            "and", 
            "10000", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "LOCATION", 
            ",", 
            "name", 
            "FROM", 
            "stadium", 
            "WHERE", 
            "capacity", 
            "BETWEEN", 
            "5000", 
            "AND", 
            "10000"
        ], 
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", 
        "schema_with_content": "stadium : capacity (3100, 3960, 52500), location (\"Peterhead\", \"Stirling Albion\", \"Ayr United\"), name (\"Somerset Park\", \"Balmoor\", \"Recreation Park\"), average (642, 637, 730), lowest (466, 466, 466), stadium_id (9, 5, 7), highest (780, 2363, 1763) | stadium_name : stadium_id (2, 7, 2), name (\"Somerset Park\", \"Balmoor\", \"Recreation Park\") | singer : singer_id (5, 4, 1), age (43, 43, 29), name (\"Tribal King\", \"Rose White\", \"Justin Brown\"), is_male (\"F\", \"T\"), song_name (\"You\", \"Gentleman\", \"Sun\"), song_release_year (\"2013\", \"2014\", \"2003\"), country (\"Netherlands\", \"United States\", \"France\") | concert : year (\"2014\", \"2015\"), concert_name (\"Home Visits\", \"Auditions\", \"Week 1\"), stadium_id (\"7\", \"1\", \"2\"), concert_id (3, 2, 1), theme (\"Happy Tonight\", \"Free choice 2\", \"Free choice 2\") | singer_in_concert : singer_id (\"4\", \"6\", \"4\"), concert_id (3, 4, 5)", 
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000", 
        "query1": "select location, name from stadium where capacity between 5000 and 10000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    1, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5000.0, 
                    10000.0
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "name"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : stadium_id , location , average , name , highest , lowest , capacity  | stadium_location : stadium_id , location  | singer : name , song_name , country , song_release_year , age , singer_id , is_male  | concert : stadium_id , theme , year , concert_id , concert_name  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t2.location, t1.name from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "location", 
            ",", 
            "name", 
            "from", 
            "stadium", 
            "where", 
            "capacity", 
            "between", 
            "value", 
            "and", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "locations", 
            "and", 
            "names", 
            "of", 
            "all", 
            "stations", 
            "with", 
            "capacity", 
            "between", 
            "5000", 
            "and", 
            "10000", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "LOCATION", 
            ",", 
            "name", 
            "FROM", 
            "stadium", 
            "WHERE", 
            "capacity", 
            "BETWEEN", 
            "5000", 
            "AND", 
            "10000"
        ], 
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", 
        "schema_with_content": "stadium : stadium_id (3, 2, 5), location (\"Queen's Park\", \"Stirling Albion\", \"Alloa Athletic\"), average (864, 864, 2106), name (\"Recreation Park\", \"Forthbank Stadium\", \"Somerset Park\"), highest (1980, 1057, 4812), lowest (404, 533, 404), capacity (2000, 2000, 3808) | stadium_location : stadium_id (2, 10, 10), location (\"Queen's Park\", \"Stirling Albion\", \"Alloa Athletic\") | singer : name (\"Tribal King\", \"Rose White\", \"Tribal King\"), song_name (\"Sun\", \"You\", \"Hey Oh\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2008\", \"2013\", \"2008\"), age (52, 41, 32), singer_id (3, 5, 4), is_male (\"F\", \"T\") | concert : stadium_id (\"7\", \"7\", \"1\"), theme (\"Wide Awake\", \"Happy Tonight\", \"Happy Tonight\"), year (\"2014\", \"2015\"), concert_id (2, 3, 6), concert_name (\"Home Visits\", \"Super bootcamp\", \"Super bootcamp\") | singer_in_concert : concert_id (1, 6, 4), singer_id (\"4\", \"5\", \"6\")", 
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000", 
        "query1": "select location, name from stadium where capacity between 5000 and 10000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    1, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5000.0, 
                    10000.0
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "location"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : capacity , lowest , location , name , highest , stadium_id , average  | stadium_capacity : capacity , stadium_id  | singer : country , is_male , age , song_release_year , name , singer_id , song_name  | concert : concert_id , stadium_id , concert_name , theme , year  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "capacity", 
            "from", 
            "stadium", 
            "order", 
            "by", 
            "average", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "capacity", 
            "for", 
            "the", 
            "stadium", 
            "with", 
            "highest", 
            "average", 
            "attendance", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "capacity", 
            "FROM", 
            "stadium", 
            "ORDER", 
            "BY", 
            "average", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the name and capacity for the stadium with highest average attendance?", 
        "schema_with_content": "stadium : capacity (2000, 4000, 3808), lowest (1057, 1057, 411), location (\"Brechin City\", \"East Fife\", \"East Fife\"), name (\"Recreation Park\", \"Hampden Park\", \"Forthbank Stadium\"), highest (837, 1763, 1763), stadium_id (10, 5, 6), average (864, 552, 615) | stadium_capacity : capacity (2000, 4000, 3808), stadium_id (1, 3, 7) | singer : country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), age (25, 41, 52), song_release_year (\"2008\", \"2013\", \"2013\"), name (\"Rose White\", \"Tribal King\", \"Rose White\"), singer_id (5, 2, 6), song_name (\"You\", \"Sun\", \"Dangerous\") | concert : concert_id (5, 5, 6), stadium_id (\"10\", \"2\", \"7\"), concert_name (\"Week 1\", \"Auditions\", \"Week 2\"), theme (\"Free choice 2\", \"Free choice 2\", \"Party All Night\"), year (\"2014\", \"2015\") | singer_in_concert : concert_id (2, 3, 6), singer_id (\"3\", \"4\", \"4\")", 
        "orig_query": "select name, capacity from stadium order by average desc limit 1", 
        "query1": "select name, capacity from stadium order by average desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "capacity"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : location , highest , stadium_id , capacity , name , lowest , average  | stadium_name : name , stadium_id  | singer : name , country , song_release_year , singer_id , is_male , age , song_name  | concert : concert_id , year , theme , concert_name , stadium_id  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t2.name, t1.capacity from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "capacity", 
            "from", 
            "stadium", 
            "order", 
            "by", 
            "average", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "capacity", 
            "for", 
            "the", 
            "stadium", 
            "with", 
            "highest", 
            "average", 
            "attendance", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "capacity", 
            "FROM", 
            "stadium", 
            "ORDER", 
            "BY", 
            "average", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the name and capacity for the stadium with highest average attendance?", 
        "schema_with_content": "stadium : location (\"Ayr United\", \"Arbroath\", \"Peterhead\"), highest (837, 2363, 921), stadium_id (1, 9, 7), capacity (3100, 10104, 3960), name (\"Recreation Park\", \"Bayview Stadium\", \"Hampden Park\"), lowest (533, 466, 1057), average (864, 864, 642) | stadium_name : name (\"Recreation Park\", \"Bayview Stadium\", \"Hampden Park\"), stadium_id (1, 5, 9) | singer : name (\"Justin Brown\", \"Timbaland\", \"Rose White\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2013\", \"2008\", \"2013\"), singer_id (4, 6, 4), is_male (\"F\", \"T\"), age (32, 25, 41), song_name (\"Dangerous\", \"Love\", \"Dangerous\") | concert : concert_id (3, 4, 5), year (\"2014\", \"2015\"), theme (\"Party All Night\", \"Party All Night\", \"Party All Night\"), concert_name (\"Super bootcamp\", \"Home Visits\", \"Super bootcamp\"), stadium_id (\"7\", \"1\", \"2\") | singer_in_concert : singer_id (\"5\", \"2\", \"3\"), concert_id (5, 6, 2)", 
        "orig_query": "select name, capacity from stadium order by average desc limit 1", 
        "query1": "select name, capacity from stadium order by average desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "name"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : capacity , stadium_id , lowest , name , average , highest , location  | stadium_capacity : capacity , stadium_id  | singer : song_release_year , age , name , is_male , song_name , country , singer_id  | concert : concert_id , year , concert_name , stadium_id , theme  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "capacity", 
            "from", 
            "stadium", 
            "order", 
            "by", 
            "average", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "capacity", 
            "for", 
            "the", 
            "stadium", 
            "with", 
            "the", 
            "highest", 
            "average", 
            "attendance", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "capacity", 
            "FROM", 
            "stadium", 
            "ORDER", 
            "BY", 
            "average", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the name and capacity for the stadium with the highest average attendance?", 
        "schema_with_content": "stadium : capacity (3808, 4125, 3808), stadium_id (6, 9, 9), lowest (331, 400, 466), name (\"Bayview Stadium\", \"Stark's Park\", \"Glebe Park\"), average (638, 2106, 615), highest (1980, 2363, 780), location (\"Brechin City\", \"Alloa Athletic\", \"East Fife\") | stadium_capacity : capacity (3808, 4125, 3808), stadium_id (10, 6, 2) | singer : song_release_year (\"2003\", \"2014\", \"1992\"), age (52, 41, 41), name (\"Tribal King\", \"Timbaland\", \"John Nizinik\"), is_male (\"F\", \"T\"), song_name (\"You\", \"Love\", \"You\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (6, 5, 5) | concert : concert_id (5, 4, 5), year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Week 1\", \"Week 2\"), stadium_id (\"9\", \"9\", \"7\"), theme (\"Party All Night\", \"Party All Night\", \"Party All Night\") | singer_in_concert : concert_id (1, 5, 4), singer_id (\"6\", \"2\", \"4\")", 
        "orig_query": "select name, capacity from stadium order by average desc limit 1", 
        "query1": "select name, capacity from stadium order by average desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "capacity"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : name , capacity , location , highest , lowest , stadium_id , average  | stadium_name : stadium_id , name  | singer : song_name , singer_id , age , name , song_release_year , is_male , country  | concert : concert_id , theme , concert_name , stadium_id , year  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t2.name, t1.capacity from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "capacity", 
            "from", 
            "stadium", 
            "order", 
            "by", 
            "average", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "capacity", 
            "for", 
            "the", 
            "stadium", 
            "with", 
            "the", 
            "highest", 
            "average", 
            "attendance", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "capacity", 
            "FROM", 
            "stadium", 
            "ORDER", 
            "BY", 
            "average", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the name and capacity for the stadium with the highest average attendance?", 
        "schema_with_content": "stadium : name (\"Forthbank Stadium\", \"Somerset Park\", \"Balmoor\"), capacity (4125, 3960, 10104), location (\"Queen's Park\", \"Alloa Athletic\", \"Peterhead\"), highest (1763, 1763, 2363), lowest (404, 1057, 315), stadium_id (3, 6, 4), average (638, 642, 552) | stadium_name : stadium_id (9, 6, 7), name (\"Forthbank Stadium\", \"Somerset Park\", \"Balmoor\") | singer : song_name (\"Dangerous\", \"Sun\", \"Gentleman\"), singer_id (2, 6, 2), age (41, 41, 41), name (\"Justin Brown\", \"Justin Brown\", \"Justin Brown\"), song_release_year (\"2013\", \"1992\", \"2003\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\") | concert : concert_id (4, 4, 1), theme (\"Wide Awake\", \"Free choice\", \"Party All Night\"), concert_name (\"Home Visits\", \"Week 1\", \"Week 2\"), stadium_id (\"7\", \"7\", \"1\"), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"3\", \"6\", \"6\"), concert_id (1, 2, 2)", 
        "orig_query": "select name, capacity from stadium order by average desc limit 1", 
        "query1": "select name, capacity from stadium order by average desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "stadium": "name"
        }, 
        "primary_key": {
            "stadium": "stadium_id"
        }
    }, 
    {
        "schema_without_content": "stadium : lowest , location , highest , average , name , stadium_id , capacity  | singer : singer_id , country , song_release_year , age , name , song_name , is_male  | singer_country : singer_id , country  | concert : stadium_id , theme , concert_name , concert_id , year  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            "from", 
            "singer", 
            "where", 
            "song_name", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "what", 
            "is", 
            "the", 
            "name", 
            "and", 
            "nation", 
            "of", 
            "the", 
            "singer", 
            "who", 
            "have", 
            "a", 
            "song", 
            "having", 
            "'Hey", 
            "'", 
            "in", 
            "its", 
            "name", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            "FROM", 
            "singer", 
            "WHERE", 
            "song_name", 
            "LIKE", 
            "'", 
            "%", 
            "Hey", 
            "%", 
            "'"
        ], 
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", 
        "schema_with_content": "stadium : lowest (466, 315, 400), location (\"Stirling Albion\", \"Alloa Athletic\", \"Brechin City\"), highest (780, 1763, 1125), average (2106, 864, 638), name (\"Stark's Park\", \"Somerset Park\", \"Recreation Park\"), stadium_id (1, 3, 6), capacity (52500, 3100, 52500) | singer : singer_id (3, 5, 6), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2008\", \"2013\", \"2014\"), age (41, 29, 29), name (\"Justin Brown\", \"Joe Sharp\", \"Timbaland\"), song_name (\"Gentleman\", \"Love\", \"Hey Oh\"), is_male (\"F\", \"T\") | singer_country : singer_id (5, 6, 4), country (\"Netherlands\", \"United States\", \"France\") | concert : stadium_id (\"1\", \"9\", \"2\"), theme (\"Wide Awake\", \"Wide Awake\", \"Free choice\"), concert_name (\"Week 2\", \"Week 1\", \"Week 1\"), concert_id (6, 2, 3), year (\"2014\", \"2015\") | singer_in_concert : singer_id (\"2\", \"4\", \"5\"), concert_id (3, 4, 5)", 
        "orig_query": "select name, country from singer where song_name like '%Hey%'", 
        "query1": "select name, country from singer where song_name like '%Hey%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"%Hey%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "country"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : name , average , highest , stadium_id , location , lowest , capacity  | singer : is_male , age , name , song_name , country , singer_id , song_release_year  | singer_name : name , singer_id  | concert : theme , year , stadium_id , concert_id , concert_name  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            "from", 
            "singer", 
            "where", 
            "song_name", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "what", 
            "is", 
            "the", 
            "name", 
            "and", 
            "nation", 
            "of", 
            "the", 
            "singer", 
            "who", 
            "have", 
            "a", 
            "song", 
            "having", 
            "'Hey", 
            "'", 
            "in", 
            "its", 
            "name", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            "FROM", 
            "singer", 
            "WHERE", 
            "song_name", 
            "LIKE", 
            "'", 
            "%", 
            "Hey", 
            "%", 
            "'"
        ], 
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", 
        "schema_with_content": "stadium : name (\"Glebe Park\", \"Bayview Stadium\", \"Bayview Stadium\"), average (642, 638, 2106), highest (780, 837, 4812), stadium_id (5, 4, 4), location (\"Peterhead\", \"Raith Rovers\", \"Stirling Albion\"), lowest (1057, 400, 1057), capacity (4125, 2000, 4125) | singer : is_male (\"F\", \"T\"), age (25, 52, 29), name (\"Justin Brown\", \"Rose White\", \"Timbaland\"), song_name (\"Love\", \"Dangerous\", \"Sun\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (4, 4, 6), song_release_year (\"2014\", \"2003\", \"2003\") | singer_name : name (\"Justin Brown\", \"Rose White\", \"Timbaland\"), singer_id (2, 6, 4) | concert : theme (\"Happy Tonight\", \"Free choice 2\", \"Party All Night\"), year (\"2014\", \"2015\"), stadium_id (\"10\", \"1\", \"10\"), concert_id (2, 4, 1), concert_name (\"Home Visits\", \"Auditions\", \"Home Visits\") | singer_in_concert : concert_id (4, 3, 5), singer_id (\"5\", \"5\", \"6\")", 
        "orig_query": "select name, country from singer where song_name like '%Hey%'", 
        "query1": "select name, country from singer where song_name like '%Hey%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"%Hey%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "name"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : capacity , location , highest , average , stadium_id , lowest , name  | singer : name , age , country , singer_id , song_release_year , is_male , song_name  | singer_country : country , singer_id  | concert : concert_name , theme , concert_id , stadium_id , year  | singer_in_concert : concert_id , singer_id ", 
        "query2": "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            "from", 
            "singer", 
            "where", 
            "song_name", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "country", 
            "of", 
            "origin", 
            "of", 
            "every", 
            "singer", 
            "who", 
            "has", 
            "a", 
            "song", 
            "with", 
            "the", 
            "word", 
            "'Hey", 
            "'", 
            "in", 
            "its", 
            "title", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            "FROM", 
            "singer", 
            "WHERE", 
            "song_name", 
            "LIKE", 
            "'", 
            "%", 
            "Hey", 
            "%", 
            "'"
        ], 
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", 
        "schema_with_content": "stadium : capacity (3960, 52500, 52500), location (\"Raith Rovers\", \"East Fife\", \"Alloa Athletic\"), highest (837, 1057, 1763), average (552, 2106, 552), stadium_id (9, 6, 6), lowest (466, 533, 400), name (\"Gayfield Park\", \"Somerset Park\", \"Stark's Park\") | singer : name (\"Timbaland\", \"Tribal King\", \"John Nizinik\"), age (25, 25, 32), country (\"Netherlands\", \"United States\", \"France\"), singer_id (1, 1, 3), song_release_year (\"2013\", \"2003\", \"2013\"), is_male (\"F\", \"T\"), song_name (\"Gentleman\", \"Hey Oh\", \"Hey Oh\") | singer_country : country (\"Netherlands\", \"United States\", \"France\"), singer_id (5, 2, 4) | concert : concert_name (\"Auditions\", \"Auditions\", \"Week 1\"), theme (\"Free choice 2\", \"Party All Night\", \"Free choice\"), concert_id (5, 2, 4), stadium_id (\"2\", \"1\", \"1\"), year (\"2014\", \"2015\") | singer_in_concert : concert_id (1, 6, 6), singer_id (\"2\", \"5\", \"5\")", 
        "orig_query": "select name, country from singer where song_name like '%Hey%'", 
        "query1": "select name, country from singer where song_name like '%Hey%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"%Hey%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "country"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "stadium : average , location , lowest , name , stadium_id , highest , capacity  | singer : song_name , name , age , singer_id , is_male , song_release_year , country  | singer_name : singer_id , name  | concert : theme , stadium_id , concert_id , year , concert_name  | singer_in_concert : singer_id , concert_id ", 
        "query2": "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'", 
        "db_id": "concert_singer", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "country", 
            "from", 
            "singer", 
            "where", 
            "song_name", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "country", 
            "of", 
            "origin", 
            "of", 
            "every", 
            "singer", 
            "who", 
            "has", 
            "a", 
            "song", 
            "with", 
            "the", 
            "word", 
            "'Hey", 
            "'", 
            "in", 
            "its", 
            "title", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "country", 
            "FROM", 
            "singer", 
            "WHERE", 
            "song_name", 
            "LIKE", 
            "'", 
            "%", 
            "Hey", 
            "%", 
            "'"
        ], 
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", 
        "schema_with_content": "stadium : average (638, 1477, 615), location (\"Alloa Athletic\", \"Raith Rovers\", \"Brechin City\"), lowest (315, 411, 1057), name (\"Stark's Park\", \"Bayview Stadium\", \"Stark's Park\"), stadium_id (10, 4, 9), highest (1763, 2363, 4812), capacity (3960, 10104, 3808) | singer : song_name (\"Gentleman\", \"You\", \"Gentleman\"), name (\"Justin Brown\", \"John Nizinik\", \"Justin Brown\"), age (43, 25, 43), singer_id (5, 1, 6), is_male (\"F\", \"T\"), song_release_year (\"2008\", \"2016\", \"2016\"), country (\"Netherlands\", \"United States\", \"France\") | singer_name : singer_id (5, 3, 2), name (\"Justin Brown\", \"John Nizinik\", \"Justin Brown\") | concert : theme (\"Free choice\", \"Party All Night\", \"Party All Night\"), stadium_id (\"10\", \"9\", \"1\"), concert_id (4, 6, 6), year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Week 2\", \"Auditions\") | singer_in_concert : singer_id (\"3\", \"2\", \"2\"), concert_id (4, 1, 4)", 
        "orig_query": "select name, country from singer where song_name like '%Hey%'", 
        "query1": "select name, country from singer where song_name like '%Hey%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"%Hey%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "name"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "student : major , lname , advisor , city_code , fname , sex , stuid , age  | has_pet : stuid , petid  | pets : petid , weight , pettype , pet_age  | pets_pettype : petid , pettype ", 
        "query2": "select max(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "maximum", 
            "weight", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            ".", 
            "List", 
            "the", 
            "maximum", 
            "weight", 
            "and", 
            "pet", 
            "type", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "petType", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "petType"
        ], 
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", 
        "schema_with_content": "student : major (520, 540, 540), lname (\"Epp\", \"Adams\", \"Adams\"), advisor (1148, 7723, 8721), city_code (\"LOS\", \"HOU\", \"ATL\"), fname (\"Charles\", \"Paul\", \"Lisa\"), sex (\"F\", \"M\"), stuid (1012, 1016, 1025), age (26, 16, 20) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")", 
        "orig_query": "select max(weight), pettype from pets group by pettype", 
        "query1": "select max(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : sex , city_code , age , stuid , major , advisor , lname , fname  | has_pet : stuid , petid  | pets : pet_age , weight , petid , pettype  | pets_weight : petid , weight ", 
        "query2": "select max(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "maximum", 
            "weight", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            ".", 
            "List", 
            "the", 
            "maximum", 
            "weight", 
            "and", 
            "pet", 
            "type", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "petType", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "petType"
        ], 
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", 
        "schema_with_content": "student : sex (\"F\", \"M\"), city_code (\"DET\", \"BOS\", \"NYC\"), age (27, 26, 16), stuid (1025, 1005, 1007), major (550, 50, 600), advisor (9172, 7134, 8918), lname (\"Leighton\", \"Shieber\", \"Schultz\"), fname (\"Dinesh\", \"William\", \"Derek\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\") | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)", 
        "orig_query": "select max(weight), pettype from pets group by pettype", 
        "query1": "select max(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "weight"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : stuid , city_code , age , advisor , fname , sex , lname , major  | has_pet : petid , stuid  | pets : pet_age , pettype , petid , weight  | pets_pettype : petid , pettype ", 
        "query2": "select max(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "maximum", 
            "weight", 
            "and", 
            "type", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "petType", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "petType"
        ], 
        "question": "List the maximum weight and type for each type of pet.", 
        "schema_with_content": "student : stuid (1026, 1001, 1002), city_code (\"PHL\", \"BAL\", \"PIT\"), age (21, 19, 26), advisor (7712, 8741, 8772), fname (\"Paul\", \"Stacy\", \"Andy\"), sex (\"F\", \"M\"), lname (\"Schmidt\", \"Simms\", \"Pang\"), major (50, 50, 550) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")", 
        "orig_query": "select max(weight), pettype from pets group by pettype", 
        "query1": "select max(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : city_code , fname , age , stuid , sex , advisor , major , lname  | has_pet : stuid , petid  | pets : pet_age , pettype , weight , petid  | pets_weight : weight , petid ", 
        "query2": "select max(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "maximum", 
            "weight", 
            "and", 
            "type", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "petType", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "petType"
        ], 
        "question": "List the maximum weight and type for each type of pet.", 
        "schema_with_content": "student : city_code (\"DET\", \"DET\", \"PEK\"), fname (\"Michael\", \"Dinesh\", \"William\"), age (26, 19, 27), stuid (1019, 1018, 1015), sex (\"F\", \"M\"), advisor (8741, 1148, 1121), major (540, 540, 520), lname (\"Smith\", \"Tai\", \"Kumar\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003) | pets_weight : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003)", 
        "orig_query": "select max(weight), pettype from pets group by pettype", 
        "query1": "select max(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "weight"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : advisor , age , sex , major , lname , stuid , fname , city_code  | has_pet : stuid , petid  | pets : petid , pet_age , pettype , weight  | pets_pettype : pettype , petid ", 
        "query2": "select t2.pettype, t1.weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid order by t1.pet_age limit 1", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "pettype", 
            ",", 
            "weight", 
            "from", 
            "pets", 
            "order", 
            "by", 
            "pet_age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "type", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "youngest", 
            "pet", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "pettype", 
            ",", 
            "weight", 
            "FROM", 
            "pets", 
            "ORDER", 
            "BY", 
            "pet_age", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the type and weight of the youngest pet.", 
        "schema_with_content": "student : advisor (8918, 7723, 8772), age (18, 22, 22), sex (\"F\", \"M\"), major (540, 600, 540), lname (\"Kumar\", \"Lee\", \"Apap\"), stuid (1021, 1019, 1006), fname (\"Stacy\", \"William\", \"Ian\"), city_code (\"LON\", \"HOU\", \"NYC\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)", 
        "orig_query": "select pettype, weight from pets order by pet_age limit 1", 
        "query1": "select pettype, weight from pets order by pet_age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : city_code , major , age , fname , advisor , stuid , sex , lname  | has_pet : stuid , petid  | pets : petid , weight , pet_age , pettype  | pets_weight : petid , weight ", 
        "query2": "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid order by t1.pet_age limit 1", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "pettype", 
            ",", 
            "weight", 
            "from", 
            "pets", 
            "order", 
            "by", 
            "pet_age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "type", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "youngest", 
            "pet", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "pettype", 
            ",", 
            "weight", 
            "FROM", 
            "pets", 
            "ORDER", 
            "BY", 
            "pet_age", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the type and weight of the youngest pet.", 
        "schema_with_content": "student : city_code (\"DAL\", \"DAL\", \"LOS\"), major (100, 520, 50), age (17, 20, 17), fname (\"George\", \"David\", \"Arthur\"), advisor (8721, 5718, 8918), stuid (1027, 1011, 1015), sex (\"F\", \"M\"), lname (\"Kumar\", \"Shieber\", \"Kumar\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), pettype (\"cat\", \"dog\") | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)", 
        "orig_query": "select pettype, weight from pets order by pet_age limit 1", 
        "query1": "select pettype, weight from pets order by pet_age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "weight"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : city_code , advisor , fname , stuid , sex , major , lname , age  | has_pet : petid , stuid  | pets : petid , pet_age , weight , pettype  | pets_pettype : petid , pettype ", 
        "query2": "select t2.pettype, t1.weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid order by t1.pet_age limit 1", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "pettype", 
            ",", 
            "weight", 
            "from", 
            "pets", 
            "order", 
            "by", 
            "pet_age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "type", 
            "of", 
            "pet", 
            "is", 
            "the", 
            "youngest", 
            "animal", 
            ",", 
            "and", 
            "how", 
            "much", 
            "does", 
            "it", 
            "weigh", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "pettype", 
            ",", 
            "weight", 
            "FROM", 
            "pets", 
            "ORDER", 
            "BY", 
            "pet_age", 
            "LIMIT", 
            "1"
        ], 
        "question": "What type of pet is the youngest animal, and how much does it weigh?", 
        "schema_with_content": "student : city_code (\"LON\", \"ROC\", \"WAS\"), advisor (8423, 9172, 8721), fname (\"Ian\", \"Shiela\", \"Eric\"), stuid (1012, 1010, 1028), sex (\"F\", \"M\"), major (50, 520, 550), lname (\"Norris\", \"Jones\", \"Kim\"), age (19, 20, 18) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : petid (2001, 2002, 2003), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\") | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")", 
        "orig_query": "select pettype, weight from pets order by pet_age limit 1", 
        "query1": "select pettype, weight from pets order by pet_age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : stuid , sex , major , age , lname , fname , city_code , advisor  | has_pet : petid , stuid  | pets : pettype , weight , pet_age , petid  | pets_weight : petid , weight ", 
        "query2": "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid order by t1.pet_age limit 1", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "pettype", 
            ",", 
            "weight", 
            "from", 
            "pets", 
            "order", 
            "by", 
            "pet_age", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "type", 
            "of", 
            "pet", 
            "is", 
            "the", 
            "youngest", 
            "animal", 
            ",", 
            "and", 
            "how", 
            "much", 
            "does", 
            "it", 
            "weigh", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "pettype", 
            ",", 
            "weight", 
            "FROM", 
            "pets", 
            "ORDER", 
            "BY", 
            "pet_age", 
            "LIMIT", 
            "1"
        ], 
        "question": "What type of pet is the youngest animal, and how much does it weigh?", 
        "schema_with_content": "student : stuid (1016, 1002, 1019), sex (\"F\", \"M\"), major (50, 600, 520), age (17, 20, 18), lname (\"Han\", \"Cheng\", \"Smith\"), fname (\"David\", \"Ian\", \"Linda\"), city_code (\"HOU\", \"DAL\", \"DAL\"), advisor (7134, 1121, 8741) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : pettype (\"cat\", \"dog\"), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1), petid (2001, 2002, 2003) | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)", 
        "orig_query": "select pettype, weight from pets order by pet_age limit 1", 
        "query1": "select pettype, weight from pets order by pet_age limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "weight"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : age , fname , lname , advisor , sex , stuid , major , city_code  | has_pet : stuid , petid  | pets : weight , pettype , pet_age , petid  | pets_pet_age : petid , pet_age ", 
        "query2": "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "age", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "Find the average and maximum age for each type of pet.", 
        "schema_with_content": "student : age (19, 17, 16), fname (\"Dinesh\", \"William\", \"Stacy\"), lname (\"Davis\", \"Rugh\", \"Schwartz\"), advisor (1121, 2311, 8772), sex (\"F\", \"M\"), stuid (1025, 1016, 1018), major (520, 540, 550), city_code (\"PHL\", \"HKG\", \"CHI\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), petid (2001, 2002, 2003) | pets_pet_age : petid (2001, 2002, 2003), pet_age (3, 2, 1)", 
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pet_age"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : age , sex , city_code , stuid , major , fname , lname , advisor  | has_pet : stuid , petid  | pets : weight , pettype , petid , pet_age  | pets_pettype : petid , pettype ", 
        "query2": "select avg(t1.pet_age), max(t1.pet_age), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "age", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "Find the average and maximum age for each type of pet.", 
        "schema_with_content": "student : age (19, 20, 19), sex (\"F\", \"M\"), city_code (\"SFO\", \"LON\", \"ATL\"), stuid (1005, 1022, 1016), major (100, 50, 520), fname (\"Bruce\", \"Bruce\", \"Susan\"), lname (\"Schwartz\", \"Wilson\", \"Shieber\"), advisor (2192, 7792, 1148) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")", 
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : age , city_code , advisor , sex , fname , lname , stuid , major  | has_pet : stuid , petid  | pets : pet_age , weight , petid , pettype  | pets_pet_age : pet_age , petid ", 
        "query2": "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "age", 
            "for", 
            "each", 
            "pet", 
            "type", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "What is the average and maximum age for each pet type?", 
        "schema_with_content": "student : age (16, 22, 26), city_code (\"SFO\", \"CHI\", \"CHI\"), advisor (2311, 7712, 8918), sex (\"F\", \"M\"), fname (\"Michael\", \"Dinesh\", \"David\"), lname (\"Schwartz\", \"Nelson\", \"Kumar\"), stuid (1021, 1001, 1026), major (600, 520, 50) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\") | pets_pet_age : pet_age (3, 2, 1), petid (2001, 2002, 2003)", 
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pet_age"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : city_code , fname , age , lname , stuid , sex , major , advisor  | has_pet : stuid , petid  | pets : weight , petid , pettype , pet_age  | pets_pettype : pettype , petid ", 
        "query2": "select avg(t1.pet_age), max(t1.pet_age), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "and", 
            "maximum", 
            "age", 
            "for", 
            "each", 
            "pet", 
            "type", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "max", 
            "(", 
            "pet_age", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "What is the average and maximum age for each pet type?", 
        "schema_with_content": "student : city_code (\"NAR\", \"LON\", \"NAR\"), fname (\"Lisa\", \"Shiela\", \"Ian\"), age (22, 16, 19), lname (\"Pang\", \"Schmidt\", \"Nelson\"), stuid (1001, 1023, 1011), sex (\"F\", \"M\"), major (520, 50, 520), advisor (2192, 8423, 8723) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)", 
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : fname , advisor , lname , sex , age , city_code , major , stuid  | has_pet : stuid , petid  | pets : weight , pettype , pet_age , petid  | pets_pettype : petid , pettype ", 
        "query2": "select avg(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "weight", 
            "for", 
            "each", 
            "pet", 
            "type", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "Find the average weight for each pet type.", 
        "schema_with_content": "student : fname (\"Mark\", \"Ian\", \"Arthur\"), advisor (8772, 5718, 8772), lname (\"Cheng\", \"Wilson\", \"Simms\"), sex (\"F\", \"M\"), age (26, 18, 16), city_code (\"PEK\", \"ROC\", \"HKG\"), major (600, 100, 540), stuid (1017, 1010, 1031) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), petid (2001, 2002, 2003) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")", 
        "orig_query": "select avg(weight), pettype from pets group by pettype", 
        "query1": "select avg(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : fname , advisor , major , age , stuid , lname , sex , city_code  | has_pet : stuid , petid  | pets : weight , pettype , petid , pet_age  | pets_weight : petid , weight ", 
        "query2": "select avg(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "weight", 
            "for", 
            "each", 
            "pet", 
            "type", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "Find the average weight for each pet type.", 
        "schema_with_content": "student : fname (\"Lisa\", \"Shiela\", \"Charles\"), advisor (7792, 8723, 1121), major (100, 600, 50), age (19, 26, 18), stuid (1030, 1032, 1030), lname (\"Thornton\", \"Woods\", \"Rugh\"), sex (\"F\", \"M\"), city_code (\"HKG\", \"SFO\", \"WAS\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), pet_age (3, 2, 1) | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)", 
        "orig_query": "select avg(weight), pettype from pets group by pettype", 
        "query1": "select avg(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "weight"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : age , stuid , city_code , sex , major , fname , advisor , lname  | has_pet : stuid , petid  | pets : pettype , pet_age , weight , petid  | pets_pettype : pettype , petid ", 
        "query2": "select avg(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "What is the average weight for each type of pet?", 
        "schema_with_content": "student : age (19, 18, 20), stuid (1008, 1031, 1025), city_code (\"NAR\", \"DET\", \"NYC\"), sex (\"F\", \"M\"), major (100, 540, 540), fname (\"Michael\", \"Dinesh\", \"William\"), advisor (7134, 5718, 2192), lname (\"Jones\", \"Gompers\", \"Cheng\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)", 
        "orig_query": "select avg(weight), pettype from pets group by pettype", 
        "query1": "select avg(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "pettype"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "student : lname , age , stuid , fname , city_code , major , advisor , sex  | has_pet : petid , stuid  | pets : petid , pettype , pet_age , weight  | pets_weight : weight , petid ", 
        "query2": "select avg(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype", 
        "db_id": "pets_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "from", 
            "pets", 
            "group", 
            "by", 
            "pettype"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "for", 
            "each", 
            "type", 
            "of", 
            "pet", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "pettype", 
            "FROM", 
            "pets", 
            "GROUP", 
            "BY", 
            "pettype"
        ], 
        "question": "What is the average weight for each type of pet?", 
        "schema_with_content": "student : lname (\"Nelson\", \"Rugh\", \"Smith\"), age (26, 19, 27), stuid (1009, 1029, 1031), fname (\"Susan\", \"Charles\", \"Arthur\"), city_code (\"NAR\", \"ROC\", \"PIT\"), major (550, 50, 600), advisor (1121, 8721, 2311), sex (\"F\", \"M\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3) | pets_weight : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003)", 
        "orig_query": "select avg(weight), pettype from pets group by pettype", 
        "query1": "select avg(weight), pettype from pets group by pettype", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    12, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "pets": "weight"
        }, 
        "primary_key": {
            "pets": "petid"
        }
    }, 
    {
        "schema_without_content": "continents : continent , contid  | countries : continent , countryid , countryname  | car_makers : country , fullname , id , maker  | model_list : modelid , maker , model  | model_list_model : model , modelid  | car_names : makeid , make , model  | cars_data : id , weight , mpg , edispl , horsepower , cylinders , accelerate , year ", 
        "query2": "select t1.maker, t2.model from model_list as t1 join model_list_model as t2 on t1.modelid = t2.modelid", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "maker", 
            ",", 
            "model", 
            "from", 
            "model_list"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "all", 
            "the", 
            "makers", 
            "and", 
            "models", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Maker", 
            ",", 
            "Model", 
            "FROM", 
            "MODEL_LIST", 
            ";"
        ], 
        "question": "What are all the makers and models?", 
        "schema_with_content": "continents : continent (\"america\", \"africa\", \"europe\"), contid (5, 1, 5) | countries : continent (1, 2, 1), countryid (4, 11, 8), countryname (\"usa\", \"brazil\", \"korea\") | car_makers : country (\"6\", \"7\", \"5\"), fullname (\"Honda\", \"Chrysler\", \"Daimler Benz\"), id (16, 11, 6), maker (\"daimler benz\", \"renault\", \"bmw\") | model_list : modelid (9, 11, 11), maker (17, 2, 9), model (\"chrysler\", \"mercedes\", \"fiat\") | model_list_model : model (\"chrysler\", \"mercedes\", \"fiat\"), modelid (21, 25, 35) | car_names : makeid (330, 89, 401), make (\"plymouth custom suburb\", \"dodge colt\", \"chevrolet chevelle malibu classic\"), model (\"dodge\", \"opel\", \"fiat\") | cars_data : id (3, 35, 222), weight (3900, 1963, 1915), mpg (\"37.3\", \"19.2\", \"32.7\"), edispl (134.0, 151.0, 115.0), horsepower (\"158\", \"130\", \"77\"), cylinders (6, 8, 3), accelerate (21.8, 13.9, 14.7), year (1971, 1981, 1974)", 
        "orig_query": "select maker, model from model_list", 
        "query1": "select maker, model from model_list", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "model_list": "model"
        }, 
        "primary_key": {
            "model_list": "modelid"
        }
    }, 
    {
        "schema_without_content": "continents : contid , continent  | countries : continent , countryname , countryid  | car_makers : maker , id , country , fullname  | model_list : maker , modelid , model  | model_list_maker : maker , modelid  | car_names : model , make , makeid  | cars_data : weight , mpg , cylinders , edispl , year , id , horsepower , accelerate ", 
        "query2": "select t2.maker, t1.model from model_list as t1 join model_list_maker as t2 on t1.modelid = t2.modelid", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "maker", 
            ",", 
            "model", 
            "from", 
            "model_list"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "all", 
            "the", 
            "makers", 
            "and", 
            "models", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Maker", 
            ",", 
            "Model", 
            "FROM", 
            "MODEL_LIST", 
            ";"
        ], 
        "question": "What are all the makers and models?", 
        "schema_with_content": "continents : contid (4, 4, 2), continent (\"australia\", \"asia\", \"america\") | countries : continent (4, 5, 4), countryname (\"japan\", \"sweden\", \"egypt\"), countryid (1, 13, 5) | car_makers : maker (\"triumph\", \"chrysler\", \"fiat\"), id (5, 15, 3), country (\"2\", \"5\", \"6\"), fullname (\"American Motor Company\", \"Opel\", \"Hyundai\") | model_list : maker (22, 4, 22), modelid (12, 35, 31), model (\"pontiac\", \"plymouth\", \"kia\") | model_list_maker : maker (22, 4, 22), modelid (19, 19, 9) | car_names : model (\"fiat\", \"ford\", \" volkswagen\"), make (\"citroen ds-21 pallas\", \"dodge colt\", \"dodge d200\"), makeid (40, 386, 136) | cars_data : weight (1867, 2228, 2050), mpg (\"26\", \"39.4\", \"26.6\"), cylinders (6, 4, 5), edispl (110.0, 134.0, 199.0), year (1974, 1971, 1973), id (2, 318, 318), horsepower (\"53\", \"81\", \"133\"), accelerate (15.6, 16.4, 15.0)", 
        "orig_query": "select maker, model from model_list", 
        "query1": "select maker, model from model_list", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "model_list": "maker"
        }, 
        "primary_key": {
            "model_list": "modelid"
        }
    }, 
    {
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : fullname , maker , country , id  | model_list : model , modelid , maker  | model_list_model : modelid , model  | car_names : make \", \"toyota celica gt liftback\", model , makeid  | cars_data : horsepower , mpg , accelerate , weight , id , cylinders , edispl , year ", 
        "query2": "select t1.maker, t2.model from model_list as t1 join model_list_model as t2 on t1.modelid = t2.modelid", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "maker", 
            ",", 
            "model", 
            "from", 
            "model_list"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "makers", 
            "and", 
            "models", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Maker", 
            ",", 
            "Model", 
            "FROM", 
            "MODEL_LIST", 
            ";"
        ], 
        "question": "What are the makers and models?", 
        "schema_with_content": "continents : contid (3, 3, 3), continent (\"australia\", \"africa\", \"africa\") | countries : countryid (1, 1, 13), continent (5, 1, 3), countryname (\"france\", \"italy\", \"korea\") | car_makers : fullname (\"Triumph\", \"Opel\", \"General Motors\"), maker (\"opel\", \"chrysler\", \"ford\"), country (\"1\", \"2\", \"3\"), id (8, 1, 15) | model_list : model (\"capri\", \"plymouth\", \"honda\"), modelid (19, 3, 1), maker (17, 6, 19) | model_list_model : modelid (36, 30, 26), model (\"capri\", \"plymouth\", \"honda\") | car_names : make (\"ford torino 500\", \"oldsmobile cutlass ciera (diesel)\", \"toyota celica gt liftback\"), model (\"subaru\", \"saab\", \"mazda\"), makeid (292, 242, 108) | cars_data : horsepower (\"158\", \"215\", \"60\"), mpg (\"32.8\", \"18.6\", \"11\"), accelerate (16.9, 16.1, 22.2), weight (2189, 2582, 4042), id (132, 110, 95), cylinders (6, 3, 4), edispl (115.0, 91.0, 146.0), year (1970, 1974, 1979)", 
        "orig_query": "select maker, model from model_list", 
        "query1": "select maker, model from model_list", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "model_list": "model"
        }, 
        "primary_key": {
            "model_list": "modelid"
        }
    }, 
    {
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : maker , country , id , fullname  | model_list : modelid , maker , model  | model_list_maker : modelid , maker  | car_names : makeid , model , make  | cars_data : horsepower , weight , edispl , mpg , id , year , cylinders , accelerate ", 
        "query2": "select t2.maker, t1.model from model_list as t1 join model_list_maker as t2 on t1.modelid = t2.modelid", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "maker", 
            ",", 
            "model", 
            "from", 
            "model_list"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "makers", 
            "and", 
            "models", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Maker", 
            ",", 
            "Model", 
            "FROM", 
            "MODEL_LIST", 
            ";"
        ], 
        "question": "What are the makers and models?", 
        "schema_with_content": "continents : contid (2, 5, 5), continent (\"america\", \"africa\", \"america\") | countries : countryid (15, 7, 6), continent (1, 3, 2), countryname (\"sweden\", \"germany\", \"egypt\") | car_makers : maker (\"daimler benz\", \"opel\", \"opel\"), country (\"6\", \"1\", \"1\"), id (1, 8, 7), fullname (\"Toyota\", \"Volkswagen\", \"Ford Motor Company\") | model_list : modelid (11, 5, 21), maker (12, 15, 20), model (\"subaru\", \"plymouth\", \"renault\") | model_list_maker : modelid (11, 5, 2), maker (12, 15, 20) | car_names : makeid (314, 155, 36), model (\"mercury\", \"datsun\", \"hi\"), make (\"mazda glc custom\", \"saab 99e\", \"toyota corolla 1200\") | cars_data : horsepower (\"105\", \"97\", \"67\"), weight (4499, 3190, 3193), edispl (120.0, 146.0, 260.0), mpg (\"13\", \"30.9\", \"44\"), id (171, 117, 351), year (1974, 1970, 1973), cylinders (8, 4, 6), accelerate (20.5, 16.7, 14.5)", 
        "orig_query": "select maker, model from model_list", 
        "query1": "select maker, model from model_list", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "model_list": "maker"
        }, 
        "primary_key": {
            "model_list": "modelid"
        }
    }, 
    {
        "schema_without_content": "continents : contid , continent  | countries : countryid , countryname , continent  | car_makers : maker , country , id , fullname  | model_list : model , modelid , maker  | car_names : make , model , makeid  | cars_data : horsepower , year , cylinders , edispl , mpg , id , weight , accelerate  | cars_data_year : year , id ", 
        "query2": "select avg(t1.weight), t2.year from cars_data as t1 join cars_data_year as t2 on t1.id = t2.id group by t2.year", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "year", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "year"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "of", 
            "cars", 
            "each", 
            "year", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Weight", 
            ")", 
            ",", 
            "YEAR", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "YEAR", 
            ";"
        ], 
        "question": "What is the average weight of cars each year?", 
        "schema_with_content": "continents : contid (4, 4, 5), continent (\"america\", \"asia\", \"asia\") | countries : countryid (7, 13, 11), countryname (\"uk\", \"uk\", \"sweden\"), continent (3, 3, 2) | car_makers : maker (\"gm\", \"opel\", \"saab\"), country (\"8\", \"6\", \"6\"), id (5, 20, 11), fullname (\"Saab\", \"Daimler Benz\", \"Volvo\") | model_list : model (\"subaru\", \"hi\", \"mercedes-benz\"), modelid (25, 13, 21), maker (6, 1, 23) | car_names : make (\"plymouth valiant custom\", \"ford granada l\", \"plymouth fury gran sedan\"), model (\"mercedes-benz\", \"triumph\", \"pontiac\"), makeid (32, 367, 182) | cars_data : horsepower (\"208\", \"65\", \"170\"), year (1981, 1976, 1976), cylinders (6, 3, 6), edispl (81.0, 131.0, 231.0), mpg (\"25.1\", \"30.7\", \"31.3\"), id (346, 323, 37), weight (3245, 1836, 4140), accelerate (21.5, 18.8, 17.4) | cars_data_year : year (1981, 1976, 1976), id (350, 301, 55)", 
        "orig_query": "select avg(weight), year from cars_data group by year", 
        "query1": "select avg(weight), year from cars_data group by year", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "year"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "continents : continent , contid  | countries : countryname , countryid , continent  | car_makers : id , country , fullname , maker  | model_list : model , maker , modelid  | car_names : make \", \"volkswagen rabbit l\", makeid , model  | cars_data : year , horsepower , edispl , mpg , accelerate , weight , id , cylinders  | cars_data_weight : id , weight ", 
        "query2": "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "year", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "year"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "of", 
            "cars", 
            "each", 
            "year", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Weight", 
            ")", 
            ",", 
            "YEAR", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "YEAR", 
            ";"
        ], 
        "question": "What is the average weight of cars each year?", 
        "schema_with_content": "continents : continent (\"africa\", \"europe\", \"asia\"), contid (1, 3, 2) | countries : countryname (\"uk\", \"uk\", \"nigeria\"), countryid (3, 6, 6), continent (4, 3, 4) | car_makers : id (9, 18, 3), country (\"2\", \"3\", \"8\"), fullname (\"Honda\", \"Daimler Benz\", \"Saab\"), maker (\"mazda\", \"honda\", \"mazda\") | model_list : model (\"chevrolet\", \"volkswagen\", \"renault\"), maker (22, 21, 19), modelid (15, 35, 35) | car_names : make (\"audi 4000\", \"amc matador (sw)\", \"volkswagen rabbit l\"), makeid (351, 350, 365), model (\"dodge\", \"amc\", \"bmw\") | cars_data : year (1971, 1982, 1976), horsepower (\"165\", \"90\", \"64\"), edispl (111.0, 120.0, 305.0), mpg (\"19.8\", \"39.4\", \"34.1\"), accelerate (16.9, 13.5, 17.9), weight (2639, 3892, 3432), id (394, 371, 257), cylinders (4, 4, 3) | cars_data_weight : id (96, 263, 132), weight (2639, 3892, 3432)", 
        "orig_query": "select avg(weight), year from cars_data group by year", 
        "query1": "select avg(weight), year from cars_data group by year", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "weight"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "continents : continent , contid  | countries : countryid , continent , countryname  | car_makers : fullname , country , maker , id  | model_list : maker , modelid , model  | car_names : makeid , model , make  | cars_data : horsepower , cylinders , edispl , weight , accelerate , mpg , id , year  | cars_data_year : year , id ", 
        "query2": "select avg(t1.weight), t2.year from cars_data as t1 join cars_data_year as t2 on t1.id = t2.id group by t2.year", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "year", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "year"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "and", 
            "year", 
            "for", 
            "each", 
            "year", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Weight", 
            ")", 
            ",", 
            "YEAR", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "YEAR", 
            ";"
        ], 
        "question": "What is the average weight and year for each year?", 
        "schema_with_content": "continents : continent (\"africa\", \"america\", \"africa\"), contid (1, 5, 1) | countries : countryid (6, 8, 11), continent (5, 5, 3), countryname (\"japan\", \"new zealand\", \"brazil\") | car_makers : fullname (\"Chrysler\", \"Opel\", \"Opel\"), country (\"2\", \"8\", \"6\"), maker (\"volvo\", \"peugeaut\", \"honda\"), id (4, 9, 6) | model_list : maker (6, 21, 3), modelid (11, 28, 30), model (\"saab\", \"datsun\", \"bmw\") | car_names : makeid (198, 312, 342), model (\"buick\", \"bmw\", \"saab\"), make (\"fiat 131\", \"dodge st. regis\", \"dodge coronet custom\") | cars_data : horsepower (\"140\", \"98\", \"116\"), cylinders (4, 8, 5), edispl (168.0, 79.0, 156.0), weight (4376, 4141, 4456), accelerate (17.3, 17.9, 14.8), mpg (\"25.4\", \"40.8\", \"27.2\"), id (60, 158, 212), year (1975, 1977, 1980) | cars_data_year : year (1975, 1977, 1980), id (265, 381, 385)", 
        "orig_query": "select avg(weight), year from cars_data group by year", 
        "query1": "select avg(weight), year from cars_data group by year", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "year"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "continents : contid , continent  | countries : countryname , countryid , continent  | car_makers : id , country , maker , fullname  | model_list : model , modelid , maker  | car_names : model , makeid , make  | cars_data : weight , year , accelerate , cylinders , mpg , horsepower , id , edispl  | cars_data_weight : weight , id ", 
        "query2": "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "weight", 
            ")", 
            ",", 
            "year", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "year"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "weight", 
            "and", 
            "year", 
            "for", 
            "each", 
            "year", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "Weight", 
            ")", 
            ",", 
            "YEAR", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "YEAR", 
            ";"
        ], 
        "question": "What is the average weight and year for each year?", 
        "schema_with_content": "continents : contid (4, 2, 2), continent (\"africa\", \"europe\", \"australia\") | countries : countryname (\"sweden\", \"new zealand\", \"germany\"), countryid (11, 14, 7), continent (5, 5, 1) | car_makers : id (1, 8, 16), country (\"6\", \"2\", \"7\"), maker (\"bmw\", \"chrysler\", \"kia\"), fullname (\"Volvo\", \"Volkswagen\", \"Citroen\") | model_list : model (\"capri\", \"datsun\", \"capri\"), modelid (12, 29, 26), maker (5, 17, 14) | car_names : model (\"mercedes-benz\", \"dodge\", \"capri\"), makeid (122, 317, 270), make (\"ford mustang boss 302\", \"toyota corolla liftback\", \"plymouth fury gran sedan\") | cars_data : weight (3645, 2279, 2108), year (1971, 1974, 1977), accelerate (13.0, 16.0, 13.8), cylinders (5, 8, 3), mpg (\"31\", \"20.8\", \"14.5\"), horsepower (\"208\", \"69\", \"null\"), id (325, 156, 274), edispl (307.0, 107.0, 78.0) | cars_data_weight : weight (3645, 2279, 2108), id (325, 215, 65)", 
        "orig_query": "select avg(weight), year from cars_data group by year", 
        "query1": "select avg(weight), year from cars_data group by year", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "weight"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "continents : continent , contid  | countries : countryid , countryname , continent  | car_makers : id , fullname , maker , country  | model_list : maker , model , modelid  | car_names : make , makeid , model  | cars_data : year , accelerate , weight , cylinders , mpg , id , horsepower , edispl  | cars_data_accelerate : id , accelerate ", 
        "query2": "select max(t2.accelerate), t1.cylinders from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "accelerate", 
            ")", 
            ",", 
            "cylinders", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "cylinders"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "accelerate", 
            "for", 
            "different", 
            "number", 
            "of", 
            "cylinders", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Accelerate", 
            ")", 
            ",", 
            "Cylinders", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "Cylinders", 
            ";"
        ], 
        "question": "What is the maximum accelerate for different number of cylinders?", 
        "schema_with_content": "continents : continent (\"europe\", \"asia\", \"africa\"), contid (5, 1, 4) | countries : countryid (12, 2, 14), countryname (\"brazil\", \"brazil\", \"germany\"), continent (5, 5, 5) | car_makers : id (12, 22, 13), fullname (\"Citroen\", \"American Motor Company\", \"Renault\"), maker (\"citroen\", \"kia\", \"opel\"), country (\"7\", \"7\", \"5\") | model_list : maker (19, 23, 9), model (\"peugeot\", \"hi\", \"kia\"), modelid (12, 6, 28) | car_names : make (\"plymouth fury iii\", \"toyota corona liftback\", \"volkswagen super beetle 117\"), makeid (247, 265, 39), model (\"ford\", \"fiat\", \"mazda\") | cars_data : year (1971, 1982, 1979), accelerate (18.0, 16.0, 21.5), weight (2279, 2745, 2678), cylinders (8, 5, 5), mpg (\"null\", \"18.2\", \"33.5\"), id (257, 319, 273), horsepower (\"180\", \"86\", \"125\"), edispl (96.0, 97.5, 110.0) | cars_data_accelerate : id (37, 227, 300), accelerate (18.0, 16.0, 21.5)", 
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    18, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                22, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "accelerate"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : id , fullname , country , maker  | model_list : maker , modelid , model  | car_names : makeid , make , model  | cars_data : year , horsepower , accelerate , mpg , id , weight , cylinders , edispl  | cars_data_cylinders : id , cylinders ", 
        "query2": "select max(t1.accelerate), t2.cylinders from cars_data as t1 join cars_data_cylinders as t2 on t1.id = t2.id group by t2.cylinders", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "accelerate", 
            ")", 
            ",", 
            "cylinders", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "cylinders"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "accelerate", 
            "for", 
            "different", 
            "number", 
            "of", 
            "cylinders", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Accelerate", 
            ")", 
            ",", 
            "Cylinders", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "Cylinders", 
            ";"
        ], 
        "question": "What is the maximum accelerate for different number of cylinders?", 
        "schema_with_content": "continents : contid (1, 3, 2), continent (\"africa\", \"africa\", \"asia\") | countries : countryid (5, 1, 13), continent (3, 5, 1), countryname (\"japan\", \"germany\", \"new zealand\") | car_makers : id (11, 16, 1), fullname (\"Honda\", \"Chrysler\", \"Nissan Motors\"), country (\"1\", \"4\", \"1\"), maker (\"fiat\", \"subaru\", \"nissan\") | model_list : maker (10, 8, 6), modelid (16, 24, 20), model (\"pontiac\", \"pontiac\", \"chrysler\") | car_names : makeid (197, 169, 340), make (\"chevrolet nova custom\", \"volkswagen rabbit\", \"honda civic 1300\"), model (\"hi\", \"volkswagen\", \"mercury\") | cars_data : year (1978, 1981, 1978), horsepower (\"85\", \"96\", \"167\"), accelerate (11.0, 20.5, 15.5), mpg (\"9\", \"44.6\", \"21\"), id (25, 272, 176), weight (1968, 2278, 2430), cylinders (5, 4, 5), edispl (116.0, 383.0, 140.0) | cars_data_cylinders : id (297, 237, 261), cylinders (5, 4, 5)", 
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    18, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                22, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "cylinders"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "continents : contid , continent  | countries : continent , countryname , countryid  | car_makers : id , country , fullname , maker  | model_list : modelid , maker , model  | car_names : makeid , make \", \"toyota carina\", \"ford mustang ii\", model  | cars_data : weight , mpg , accelerate , id , horsepower , year , cylinders , edispl  | cars_data_accelerate : id , accelerate ", 
        "query2": "select max(t2.accelerate), t1.cylinders from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "accelerate", 
            ")", 
            ",", 
            "cylinders", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "cylinders"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "accelerate", 
            "for", 
            "all", 
            "the", 
            "different", 
            "cylinders", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Accelerate", 
            ")", 
            ",", 
            "Cylinders", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "Cylinders", 
            ";"
        ], 
        "question": "What is the maximum accelerate for all the different cylinders?", 
        "schema_with_content": "continents : contid (1, 5, 4), continent (\"asia\", \"america\", \"australia\") | countries : continent (4, 4, 1), countryname (\"mexico\", \"nigeria\", \"usa\"), countryid (2, 8, 2) | car_makers : id (12, 13, 3), country (\"5\", \"2\", \"2\"), fullname (\"Volkswagen\", \"Subaru\", \"Honda\"), maker (\"hyundai\", \"honda\", \"volvo\") | model_list : modelid (11, 33, 24), maker (22, 18, 18), model (\"peugeot\", \"capri\", \"scion\") | car_names : makeid (188, 72, 98), make (\"vw dasher (diesel)\", \"toyota carina\", \"ford mustang ii\"), model (\"mazda\", \"datsun\", \"dodge\") | cars_data : weight (2700, 2572, 2565), mpg (\"20.5\", \"22.3\", \"18.2\"), accelerate (16.9, 22.2, 15.1), id (10, 214, 401), horsepower (\"122\", \"152\", \"76\"), year (1980, 1974, 1977), cylinders (6, 6, 6), edispl (231.0, 383.0, 350.0) | cars_data_accelerate : id (369, 113, 262), accelerate (16.9, 22.2, 15.1)", 
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    18, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                22, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "accelerate"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "continents : continent , contid  | countries : countryid , countryname , continent  | car_makers : country , id , maker , fullname  | model_list : modelid , model , maker  | car_names : makeid , make , model  | cars_data : mpg , cylinders , horsepower , accelerate , year , id , edispl , weight  | cars_data_cylinders : cylinders , id ", 
        "query2": "select max(t1.accelerate), t2.cylinders from cars_data as t1 join cars_data_cylinders as t2 on t1.id = t2.id group by t2.cylinders", 
        "db_id": "car_1", 
        "query_toks_no_value": [
            "select", 
            "max", 
            "(", 
            "accelerate", 
            ")", 
            ",", 
            "cylinders", 
            "from", 
            "cars_data", 
            "group", 
            "by", 
            "cylinders"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "maximum", 
            "accelerate", 
            "for", 
            "all", 
            "the", 
            "different", 
            "cylinders", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "max", 
            "(", 
            "Accelerate", 
            ")", 
            ",", 
            "Cylinders", 
            "FROM", 
            "CARS_DATA", 
            "GROUP", 
            "BY", 
            "Cylinders", 
            ";"
        ], 
        "question": "What is the maximum accelerate for all the different cylinders?", 
        "schema_with_content": "continents : continent (\"europe\", \"america\", \"europe\"), contid (2, 2, 4) | countries : countryid (12, 10, 8), countryname (\"nigeria\", \"uk\", \"italy\"), continent (1, 2, 1) | car_makers : country (\"7\", \"2\", \"8\"), id (15, 8, 17), maker (\"daimler benz\", \"triumph\", \"kia\"), fullname (\"Honda\", \"Kia Motors\", \"Nissan Motors\") | model_list : modelid (25, 28, 33), model (\"kia\", \"citroen\", \"triumph\"), maker (7, 23, 22) | car_names : makeid (114, 119, 62), make (\"volvo diesel\", \"toyota corolla liftback\", \"mazda glc\"), model (\"buick\", \"triumph\", \" volkswagen\") | cars_data : mpg (\"25.1\", \"43.4\", \"33.5\"), cylinders (4, 4, 5), horsepower (\"83\", \"79\", \"190\"), accelerate (14.8, 17.5, 21.8), year (1973, 1980, 1977), id (80, 258, 272), edispl (108.0, 232.0, 144.0), weight (2215, 4380, 3353) | cars_data_cylinders : cylinders (4, 4, 5), id (383, 49, 179)", 
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    18, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                22, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                18, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cars_data": "cylinders"
        }, 
        "primary_key": {
            "cars_data": "id"
        }
    }, 
    {
        "schema_without_content": "airlines : abbreviation , airline , country , uid  | airlines_airline : airline , uid  | airports : countryabbrev , country , airportname , airportcode , city  | flights : destairport , flightno , airline , sourceairport ", 
        "query2": "select t2.airline, t1.abbreviation from airlines as t1 join airlines_airline as t2 on t1.uid = t2.uid where t1.country = \"USA\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "airline", 
            ",", 
            "abbreviation", 
            "from", 
            "airlines", 
            "where", 
            "country", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "all", 
            "airline", 
            "names", 
            "and", 
            "their", 
            "abbreviations", 
            "in", 
            "``", 
            "USA", 
            "''", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Airline", 
            ",", 
            "Abbreviation", 
            "FROM", 
            "AIRLINES", 
            "WHERE", 
            "Country", 
            "=", 
            "``", 
            "USA", 
            "''"
        ], 
        "question": "List all airline names and their abbreviations in \"USA\".", 
        "schema_with_content": "airlines : abbreviation (\"JetBlue\", \"Southwest\", \"JetBlue\"), airline (\"American Airlines\", \"United Airlines\", \"Southwest Airlines\"), country (\"USA\"), uid (8, 11, 2) | airlines_airline : airline (\"American Airlines\", \"United Airlines\", \"Southwest Airlines\"), uid (12, 4, 3) | airports : countryabbrev (\"US \", \"US\"), country (\"United States \"), airportname (\"Alliance \", \"Outagamie County \", \"Albany NAS \"), airportcode (\"RLI\", \"ANI\", \"ANQ\"), city (\"Amery \", \"Aspen \", \"Aleknagik \") | flights : destairport (\" QAW\", \" ANB\", \" LTS\"), flightno (158, 1178, 748), airline (4, 11, 5), sourceairport (\" AHT\", \" AQY\", \" ADK\")", 
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"", 
        "query1": "select airline, abbreviation from airlines where country = \"USA\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airlines": "airline"
        }, 
        "primary_key": {
            "airlines": "uid"
        }
    }, 
    {
        "schema_without_content": "airlines : country , uid , airline , abbreviation  | airlines_abbreviation : uid , abbreviation  | airports : airportcode , airportname , city , country , countryabbrev  | flights : flightno , destairport , airline , sourceairport ", 
        "query2": "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = \"USA\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "airline", 
            ",", 
            "abbreviation", 
            "from", 
            "airlines", 
            "where", 
            "country", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "all", 
            "airline", 
            "names", 
            "and", 
            "their", 
            "abbreviations", 
            "in", 
            "``", 
            "USA", 
            "''", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Airline", 
            ",", 
            "Abbreviation", 
            "FROM", 
            "AIRLINES", 
            "WHERE", 
            "Country", 
            "=", 
            "``", 
            "USA", 
            "''"
        ], 
        "question": "List all airline names and their abbreviations in \"USA\".", 
        "schema_with_content": "airlines : country (\"USA\"), uid (2, 2, 12), airline (\"American Airlines\", \"Delta Airlines\", \"Delta Airlines\"), abbreviation (\"UAL\", \"Northwest\", \"Frontier\") | airlines_abbreviation : uid (9, 5, 6), abbreviation (\"UAL\", \"Northwest\", \"Frontier\") | airports : airportcode (\"AMN\", \"AGN\", \"AXX\"), airportname (\"Albuquerque International \", \"Amook \", \"Merrill Field \"), city (\" Alexander City AL  \", \"Arcata \", \"Aiken \"), country (\"United States \"), countryabbrev (\"US \", \"US\") | flights : flightno (1118, 740, 982), destairport (\" RLI\", \" AET\", \" MMI\"), airline (6, 7, 11), sourceairport (\" AKP\", \" OTS\", \" CAK\")", 
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"", 
        "query1": "select airline, abbreviation from airlines where country = \"USA\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airlines": "abbreviation"
        }, 
        "primary_key": {
            "airlines": "uid"
        }
    }, 
    {
        "schema_without_content": "airlines : uid , abbreviation , airline , country  | airlines_airline : uid , airline  | airports : airportname , country , countryabbrev , city , airportcode  | flights : sourceairport , destairport , flightno , airline ", 
        "query2": "select t2.airline, t1.abbreviation from airlines as t1 join airlines_airline as t2 on t1.uid = t2.uid where t1.country = \"USA\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "airline", 
            ",", 
            "abbreviation", 
            "from", 
            "airlines", 
            "where", 
            "country", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "airline", 
            "names", 
            "and", 
            "abbreviations", 
            "for", 
            "airlines", 
            "in", 
            "the", 
            "USA", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Airline", 
            ",", 
            "Abbreviation", 
            "FROM", 
            "AIRLINES", 
            "WHERE", 
            "Country", 
            "=", 
            "``", 
            "USA", 
            "''"
        ], 
        "question": "What are the airline names and abbreviations for airlines in the USA?", 
        "schema_with_content": "airlines : uid (1, 2, 5), abbreviation (\"JetBlue\", \"JetBlue\", \"Allegiant\"), airline (\"US Airways\", \"United Airlines\", \"JetBlue Airways\"), country (\"USA\") | airlines_airline : uid (2, 1, 7), airline (\"US Airways\", \"United Airlines\", \"JetBlue Airways\") | airports : airportname (\"Ainsworth \", \"Ashland \", \"Alpine \"), country (\"United States \"), countryabbrev (\"US \", \"US\"), city (\"Akhiok \", \"Alexandria \", \"Albert Lea \"), airportcode (\"ANB\", \"ALB\", \"NDV\") | flights : sourceairport (\" RFK\", \" ANC\", \" AST\"), destairport (\" AXB\", \" NDV\", \" ANQ\"), flightno (1064, 622, 839), airline (12, 12, 8)", 
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"", 
        "query1": "select airline, abbreviation from airlines where country = \"USA\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airlines": "airline"
        }, 
        "primary_key": {
            "airlines": "uid"
        }
    }, 
    {
        "schema_without_content": "airlines : abbreviation , country , airline , uid  | airlines_abbreviation : abbreviation , uid  | airports : countryabbrev , city , country , airportname , airportcode  | flights : sourceairport , flightno , destairport , airline ", 
        "query2": "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = \"USA\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "airline", 
            ",", 
            "abbreviation", 
            "from", 
            "airlines", 
            "where", 
            "country", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "airline", 
            "names", 
            "and", 
            "abbreviations", 
            "for", 
            "airlines", 
            "in", 
            "the", 
            "USA", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Airline", 
            ",", 
            "Abbreviation", 
            "FROM", 
            "AIRLINES", 
            "WHERE", 
            "Country", 
            "=", 
            "``", 
            "USA", 
            "''"
        ], 
        "question": "What are the airline names and abbreviations for airlines in the USA?", 
        "schema_with_content": "airlines : abbreviation (\"Allegiant\", \"Allegiant\", \"Continental\"), country (\"USA\"), airline (\"United Airlines\", \"Allegiant Air\", \"Virgin America\"), uid (9, 6, 1) | airlines_abbreviation : abbreviation (\"Allegiant\", \"Allegiant\", \"Continental\"), uid (12, 6, 6) | airports : countryabbrev (\"US \", \"US\"), city (\"Arapahoe \", \"Akiak \", \"Aleneva \"), country (\"United States \"), airportname (\"Outagamie County \", \"Municipal \", \"Ohio University \"), airportcode (\"ANP\", \"ADT\", \"AKP\") | flights : sourceairport (\" LTS\", \" ANN\", \" HMN\"), flightno (888, 56, 711), destairport (\" APV\", \" AKO\", \" AKK\"), airline (2, 12, 8)", 
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"", 
        "query1": "select airline, abbreviation from airlines where country = \"USA\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airlines": "abbreviation"
        }, 
        "primary_key": {
            "airlines": "uid"
        }
    }, 
    {
        "schema_without_content": "airlines : airline , uid , country , abbreviation  | airports : countryabbrev , airportname , city , country , airportcode  | airports_country : country , airportcode  | flights : flightno , sourceairport , airline , destairport ", 
        "query2": "select t1.city, t2.country from airports as t1 join airports_country as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "city", 
            ",", 
            "country", 
            "from", 
            "airports", 
            "where", 
            "airportname", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "city", 
            "and", 
            "country", 
            "is", 
            "the", 
            "Alton", 
            "airport", 
            "at", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "City", 
            ",", 
            "Country", 
            "FROM", 
            "AIRPORTS", 
            "WHERE", 
            "AirportName", 
            "=", 
            "``", 
            "Alton", 
            "''"
        ], 
        "question": "Which city and country is the Alton airport at?", 
        "schema_with_content": "airlines : airline (\"Allegiant Air\", \"Delta Airlines\", \"US Airways\"), uid (7, 2, 4), country (\"USA\"), abbreviation (\"Continental\", \"Allegiant\", \"American\") | airports : countryabbrev (\"US \", \"US\"), airportname (\"Aspen \", \"Apple Valley \", \"Anita Bay \"), city (\"Alamosa \", \"Aleneva \", \"Afton \"), country (\"United States \"), airportcode (\"ABL\", \"AEL\", \"ABI\") | airports_country : country (\"United States \"), airportcode (\"AHN\", \"ABR\", \"ALM\") | flights : flightno (1189, 1274, 923), sourceairport (\" AAF\", \" MRI\", \" AAF\"), airline (10, 8, 10), destairport (\" ABY\", \" AED\", \" ADG\")", 
        "orig_query": "select city, country from airports where airportname = \"Alton\"", 
        "query1": "select city, country from airports where airportname = \"Alton\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"Alton\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airports": "country"
        }, 
        "primary_key": {
            "airports": "airportcode"
        }
    }, 
    {
        "schema_without_content": "airlines : abbreviation , country , uid , airline  | airports : city , airportname , country , airportcode , countryabbrev  | airports_city : city , airportcode  | flights : sourceairport , airline , destairport , flightno ", 
        "query2": "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "city", 
            ",", 
            "country", 
            "from", 
            "airports", 
            "where", 
            "airportname", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "city", 
            "and", 
            "country", 
            "is", 
            "the", 
            "Alton", 
            "airport", 
            "at", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "City", 
            ",", 
            "Country", 
            "FROM", 
            "AIRPORTS", 
            "WHERE", 
            "AirportName", 
            "=", 
            "``", 
            "Alton", 
            "''"
        ], 
        "question": "Which city and country is the Alton airport at?", 
        "schema_with_content": "airlines : abbreviation (\"Northwest\", \"Virgin\", \"Continental\"), country (\"USA\"), uid (4, 11, 4), airline (\"AirTran Airways\", \"Southwest Airlines\", \"Northwest Airlines\") | airports : city (\"Arlington Heights \", \" Alexander City AL  \", \"Allakaket \"), airportname (\"Phillips AAF \", \"Tri-State Steuben Cty \", \"Adak Island Ns \"), country (\"United States \"), airportcode (\"AKO\", \"KKI\", \"AMW\"), countryabbrev (\"US \", \"US\") | airports_city : city (\"Arlington Heights \", \" Alexander City AL  \", \"Allakaket \"), airportcode (\"ABR\", \"RFK\", \"APG\") | flights : sourceairport (\" TDW\", \" AIV\", \" ADR\"), airline (3, 12, 12), destairport (\" ANC\", \" ABY\", \" RFK\"), flightno (1376, 1041, 364)", 
        "orig_query": "select city, country from airports where airportname = \"Alton\"", 
        "query1": "select city, country from airports where airportname = \"Alton\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"Alton\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airports": "city"
        }, 
        "primary_key": {
            "airports": "airportcode"
        }
    }, 
    {
        "schema_without_content": "airlines : abbreviation , airline , country , uid  | airports : airportname , countryabbrev , airportcode , city , country  | airports_country : airportcode , country  | flights : sourceairport , flightno , destairport , airline ", 
        "query2": "select t1.city, t2.country from airports as t1 join airports_country as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "city", 
            ",", 
            "country", 
            "from", 
            "airports", 
            "where", 
            "airportname", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "city", 
            "and", 
            "country", 
            "for", 
            "the", 
            "Alton", 
            "airport", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "City", 
            ",", 
            "Country", 
            "FROM", 
            "AIRPORTS", 
            "WHERE", 
            "AirportName", 
            "=", 
            "``", 
            "Alton", 
            "''"
        ], 
        "question": "Give the city and country for the Alton airport.", 
        "schema_with_content": "airlines : abbreviation (\"Virgin\", \"UAL\", \"American\"), airline (\"American Airlines\", \"Virgin America\", \"JetBlue Airways\"), country (\"USA\"), uid (3, 5, 8) | airports : airportname (\"Aleneva \", \"Phillips AAF \", \"Andrews \"), countryabbrev (\"US \", \"US\"), airportcode (\"ALI\", \"ESF\", \"AID\"), city (\"Arctic Village \", \"Alameda \", \" Neptune  \"), country (\"United States \") | airports_country : airportcode (\"ANI\", \"ANV\", \"AIK\"), country (\"United States \") | flights : sourceairport (\" ATO\", \" AOS\", \" HMN\"), flightno (284, 839, 545), destairport (\" RLI\", \" ABR\", \" QAW\"), airline (7, 1, 7)", 
        "orig_query": "select city, country from airports where airportname = \"Alton\"", 
        "query1": "select city, country from airports where airportname = \"Alton\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"Alton\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airports": "country"
        }, 
        "primary_key": {
            "airports": "airportcode"
        }
    }, 
    {
        "schema_without_content": "airlines : uid , abbreviation , country , airline  | airports : country , countryabbrev , airportcode , airportname , city  | airports_city : airportcode , city  | flights : destairport , sourceairport , airline , flightno ", 
        "query2": "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\"", 
        "db_id": "flight_2", 
        "query_toks_no_value": [
            "select", 
            "city", 
            ",", 
            "country", 
            "from", 
            "airports", 
            "where", 
            "airportname", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "city", 
            "and", 
            "country", 
            "for", 
            "the", 
            "Alton", 
            "airport", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "City", 
            ",", 
            "Country", 
            "FROM", 
            "AIRPORTS", 
            "WHERE", 
            "AirportName", 
            "=", 
            "``", 
            "Alton", 
            "''"
        ], 
        "question": "Give the city and country for the Alton airport.", 
        "schema_with_content": "airlines : uid (10, 5, 5), abbreviation (\"AirTran\", \"Delta\", \"USAir\"), country (\"USA\"), airline (\"Northwest Airlines\", \"Allegiant Air\", \"American Airlines\") | airports : country (\"United States \"), countryabbrev (\"US \", \"US\"), airportcode (\"AND\", \"APG\", \"ALN\"), airportname (\"Ada \", \"Alyeska \", \"Zahns \"), city (\"Amityville \", \"Ashley \", \"Andrews \") | airports_city : airportcode (\"AXN\", \"ASX\", \"AAF\"), city (\"Amityville \", \"Ashley \", \"Andrews \") | flights : destairport (\" ESF\", \" NDV\", \" AIK\"), sourceairport (\" ATS\", \" AKK\", \" NGZ\"), airline (3, 11, 1), flightno (681, 386, 479)", 
        "orig_query": "select city, country from airports where airportname = \"Alton\"", 
        "query1": "select city, country from airports where airportname = \"Alton\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"Alton\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "airports": "city"
        }, 
        "primary_key": {
            "airports": "airportcode"
        }
    }, 
    {
        "schema_without_content": "employee : employee_id , name , age , city  | shop : location , number_products , manager_name , district , name , shop_id  | shop_manager_name : manager_name , shop_id  | hiring : employee_id , is_full_time , start_from , shop_id  | evaluation : year_awarded , bonus , employee_id ", 
        "query2": "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "manager_name", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "manager", 
            "name", 
            "and", 
            "district", 
            "of", 
            "the", 
            "shop", 
            "whose", 
            "number", 
            "of", 
            "products", 
            "is", 
            "the", 
            "largest", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "manager_name", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the manager name and district of the shop whose number of products is the largest.", 
        "schema_with_content": "employee : employee_id (6, 3, 5), name (\"Jason Hobson\", \"Phil Vickery\", \"Louis Deacon\"), age (29, 23, 28), city (\"Wasps\", \"Bath\", \"Leicester\") | shop : location (\"Kuopio\", \"Kotka\", \"Jakobstad\"), number_products (6000, 10770, 10770), manager_name (\"Tommi Kautonen\", \"Ilkka M\u00c3\u00a4kel\u00c3\u00a4\", \"Mika Laurikainen\"), district (\"Finnair Stadium\", \"Magnum Areena\", \"Arto Tolsa Areena\"), name (\"FF Jaro\", \"FF Jaro\", \"HJK\"), shop_id (5, 4, 9) | shop_manager_name : manager_name (\"Tommi Kautonen\", \"Ilkka M\u00c3\u00a4kel\u00c3\u00a4\", \"Mika Laurikainen\"), shop_id (9, 3, 1) | hiring : employee_id (3, 6, 2), is_full_time (\"T\", \"F\"), start_from (\"2010\", \"2013\", \"2013\"), shop_id (8, 2, 4) | evaluation : year_awarded (\"2011\", \"2011\", \"2017\"), bonus (3200.0, 3200.0, 3000.0), employee_id (\"10\", \"4\", \"4\")", 
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1", 
        "query1": "select manager_name, district from shop order by number_products desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "manager_name"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : age , city , name , employee_id  | shop : number_products , shop_id , location , district , name , manager_name  | shop_district : district , shop_id  | hiring : start_from , shop_id , employee_id , is_full_time  | evaluation : employee_id , year_awarded , bonus ", 
        "query2": "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "manager_name", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "manager", 
            "name", 
            "and", 
            "district", 
            "of", 
            "the", 
            "shop", 
            "whose", 
            "number", 
            "of", 
            "products", 
            "is", 
            "the", 
            "largest", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "manager_name", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the manager name and district of the shop whose number of products is the largest.", 
        "schema_with_content": "employee : age (29, 43, 43), city (\"Leicester\", \"Bath\", \"Sale\"), name (\"Phil Vickery\", \"George Chuter\", \"Mark Regan\"), employee_id (10, 8, 1) | shop : number_products (6000, 5000, 5000), shop_id (1, 6, 2), location (\"Turku\", \"Espoo\", \"Kotka\"), district (\"Tehtaan kentt\u00c3\u00a4\", \"Magnum Areena\", \"Jakobstads Centralplan\"), name (\"IFK Mariehamn\", \"FC KooTeePee\", \"FC Lahti\"), manager_name (\"Ilkka M\u00c3\u00a4kel\u00c3\u00a4\", \"Antti Muurinen\", \"Tommi Kautonen\") | shop_district : district (\"Tehtaan kentt\u00c3\u00a4\", \"Magnum Areena\", \"Jakobstads Centralplan\"), shop_id (7, 5, 7) | hiring : start_from (\"2003\", \"2008\", \"2011\"), shop_id (8, 6, 4), employee_id (1, 1, 1), is_full_time (\"T\", \"F\") | evaluation : employee_id (\"1\", \"10\", \"2\"), year_awarded (\"2017\", \"2017\", \"2015\"), bonus (4000.0, 3200.0, 3200.0)", 
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1", 
        "query1": "select manager_name, district from shop order by number_products desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "district"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : city , age , employee_id , name  | shop : number_products , location , district , manager_name , shop_id , name  | shop_manager_name : shop_id , manager_name  | hiring : employee_id , shop_id , start_from , is_full_time  | evaluation : employee_id , bonus , year_awarded ", 
        "query2": "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "manager_name", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "manager", 
            "name", 
            "and", 
            "district", 
            "of", 
            "the", 
            "shop", 
            "that", 
            "sells", 
            "the", 
            "largest", 
            "number", 
            "of", 
            "products", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "manager_name", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the manager name and district of the shop that sells the largest number of products?", 
        "schema_with_content": "employee : city (\"Bath\", \"Leicester\", \"Bristol\"), age (23, 23, 36), employee_id (7, 4, 8), name (\"Mark Regan\", \"Mark Regan\", \"Tim Payne\") | shop : number_products (5000, 15000, 10770), location (\"Turku\", \"Espoo\", \"Lahti\"), district (\"Magnum Areena\", \"Magnum Areena\", \"Finnair Stadium\"), manager_name (\"Kai Nyyss\u00c3\u00b6nen\", \"Mika Lehkosuo\", \"Antti Muurinen\"), shop_id (1, 3, 4), name (\"HJK\", \"FC Haka\", \"FC Haka\") | shop_manager_name : shop_id (4, 5, 9), manager_name (\"Kai Nyyss\u00c3\u00b6nen\", \"Mika Lehkosuo\", \"Antti Muurinen\") | hiring : employee_id (7, 3, 1), shop_id (8, 4, 2), start_from (\"2008\", \"2010\", \"2010\"), is_full_time (\"T\", \"F\") | evaluation : employee_id (\"1\", \"10\", \"2\"), bonus (2900.0, 3000.0, 2900.0), year_awarded (\"2016\", \"2017\", \"2017\")", 
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1", 
        "query1": "select manager_name, district from shop order by number_products desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "manager_name"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : employee_id , name , age , city  | shop : location , manager_name , name , number_products , district , shop_id  | shop_district : district , shop_id  | hiring : employee_id , is_full_time , start_from , shop_id  | evaluation : employee_id , bonus , year_awarded ", 
        "query2": "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "manager_name", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "manager", 
            "name", 
            "and", 
            "district", 
            "of", 
            "the", 
            "shop", 
            "that", 
            "sells", 
            "the", 
            "largest", 
            "number", 
            "of", 
            "products", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "manager_name", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the manager name and district of the shop that sells the largest number of products?", 
        "schema_with_content": "employee : employee_id (9, 10, 10), name (\"Tim Payne\", \"Louis Deacon\", \"Steve Borthwick\"), age (43, 32, 36), city (\"Bath\", \"Bristol\", \"Bath\") | shop : location (\"Kotka\", \"Mariehamn\", \"Espoo\"), manager_name (\"Olli Huttunen\", \"Job Dragtsma\", \"Mika Laurikainen\"), name (\"HJK\", \"KuPS\", \"HJK\"), number_products (10770, 15000, 3500), district (\"Veritas Stadion\", \"Veritas Stadion\", \"Wikl\u00c3\u00b6f Holding Arena\"), shop_id (7, 2, 2) | shop_district : district (\"Veritas Stadion\", \"Veritas Stadion\", \"Wikl\u00c3\u00b6f Holding Arena\"), shop_id (1, 1, 5) | hiring : employee_id (1, 1, 4), is_full_time (\"T\", \"F\"), start_from (\"2008\", \"2012\", \"2003\"), shop_id (4, 2, 2) | evaluation : employee_id (\"10\", \"1\", \"4\"), bonus (3000.0, 4000.0, 3200.0), year_awarded (\"2018\", \"2018\", \"2015\")", 
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1", 
        "query1": "select manager_name, district from shop order by number_products desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "district"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : age , city , name , employee_id  | shop : manager_name , district , number_products , name , location , shop_id  | shop_district : shop_id , district  | hiring : start_from , shop_id , is_full_time , employee_id  | evaluation : employee_id , bonus , year_awarded ", 
        "query2": "select t1.name, t1.location, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "location", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "name", 
            ",", 
            "location", 
            "and", 
            "district", 
            "of", 
            "all", 
            "shops", 
            "in", 
            "descending", 
            "order", 
            "of", 
            "number", 
            "of", 
            "products", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "LOCATION", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC"
        ], 
        "question": "Return the name, location and district of all shops in descending order of number of products.", 
        "schema_with_content": "employee : age (32, 36, 43), city (\"Bristol\", \"Bristol\", \"Bath\"), name (\"Mark Regan\", \"Jason Hobson\", \"Jason Hobson\"), employee_id (6, 1, 2) | shop : manager_name (\"Kai Nyyss\u00c3\u00b6nen\", \"Mika Lehkosuo\", \"Pekka Lyyski\"), district (\"Wikl\u00c3\u00b6f Holding Arena\", \"Lahden Stadion\", \"Veritas Stadion\"), number_products (10770, 15000, 5000), name (\"FC Haka\", \"KuPS\", \"FC Haka\"), location (\"Kotka\", \"Mariehamn\", \"Jakobstad\"), shop_id (3, 9, 1) | shop_district : shop_id (4, 6, 3), district (\"Wikl\u00c3\u00b6f Holding Arena\", \"Lahden Stadion\", \"Veritas Stadion\") | hiring : start_from (\"2003\", \"2013\", \"2010\"), shop_id (4, 5, 4), is_full_time (\"T\", \"F\"), employee_id (1, 5, 1) | evaluation : employee_id (\"4\", \"1\", \"4\"), bonus (4000.0, 4000.0, 2900.0), year_awarded (\"2018\", \"2015\", \"2016\")", 
        "orig_query": "select name, location, district from shop order by number_products desc", 
        "query1": "select name, location, district from shop order by number_products desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "district"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : name , employee_id , city , age  | shop : shop_id , location , district , number_products , name , manager_name  | shop_name : shop_id , name  | hiring : is_full_time , start_from , shop_id , employee_id  | evaluation : bonus , year_awarded , employee_id ", 
        "query2": "select t2.name, t1.location, t1.district from shop as t1 join shop_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "location", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "name", 
            ",", 
            "location", 
            "and", 
            "district", 
            "of", 
            "all", 
            "shops", 
            "in", 
            "descending", 
            "order", 
            "of", 
            "number", 
            "of", 
            "products", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "LOCATION", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC"
        ], 
        "question": "Return the name, location and district of all shops in descending order of number of products.", 
        "schema_with_content": "employee : name (\"Steve Borthwick\", \"Tim Payne\", \"Mark Regan\"), employee_id (1, 5, 9), city (\"Sale\", \"Sale\", \"Leicester\"), age (28, 36, 40) | shop : shop_id (9, 9, 6), location (\"Espoo\", \"Valkeakoski\", \"Kuopio\"), district (\"Jakobstads Centralplan\", \"Magnum Areena\", \"Veritas Stadion\"), number_products (1600, 4780, 10770), name (\"FC Honka\", \"FC Inter\", \"FF Jaro\"), manager_name (\"Antti Muurinen\", \"Mika Laurikainen\", \"Olli Huttunen\") | shop_name : shop_id (1, 3, 1), name (\"FC Honka\", \"FC Inter\", \"FF Jaro\") | hiring : is_full_time (\"T\", \"F\"), start_from (\"2010\", \"2013\", \"2013\"), shop_id (1, 4, 1), employee_id (6, 5, 5) | evaluation : bonus (2900.0, 4000.0, 4000.0), year_awarded (\"2016\", \"2015\", \"2018\"), employee_id (\"4\", \"4\", \"7\")", 
        "orig_query": "select name, location, district from shop order by number_products desc", 
        "query1": "select name, location, district from shop order by number_products desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "name"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : name , city , employee_id , age  | shop : name , shop_id , district , number_products , manager_name , location  | shop_location : shop_id , location  | hiring : is_full_time , employee_id , start_from , shop_id  | evaluation : year_awarded , employee_id , bonus ", 
        "query2": "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "location", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "name", 
            ",", 
            "location", 
            "and", 
            "district", 
            "of", 
            "all", 
            "shops", 
            "in", 
            "descending", 
            "order", 
            "of", 
            "number", 
            "of", 
            "products", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "LOCATION", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC"
        ], 
        "question": "Return the name, location and district of all shops in descending order of number of products.", 
        "schema_with_content": "employee : name (\"Louis Deacon\", \"Phil Vickery\", \"Steve Borthwick\"), city (\"Sale\", \"Bath\", \"Wasps\"), employee_id (8, 1, 8), age (29, 32, 30) | shop : name (\"FF Jaro\", \"FC Honka\", \"FC Lahti\"), shop_id (8, 3, 2), district (\"Tehtaan kentt\u00c3\u00a4\", \"Veritas Stadion\", \"Arto Tolsa Areena\"), number_products (10770, 3516, 3500), manager_name (\"Job Dragtsma\", \"Pekka Lyyski\", \"Mika Lehkosuo\"), location (\"Kuopio\", \"Espoo\", \"Kotka\") | shop_location : shop_id (9, 8, 2), location (\"Kuopio\", \"Espoo\", \"Kotka\") | hiring : is_full_time (\"T\", \"F\"), employee_id (4, 1, 3), start_from (\"2012\", \"2013\", \"2003\"), shop_id (5, 2, 6) | evaluation : year_awarded (\"2016\", \"2016\", \"2017\"), employee_id (\"7\", \"10\", \"1\"), bonus (4000.0, 4000.0, 3000.0)", 
        "orig_query": "select name, location, district from shop order by number_products desc", 
        "query1": "select name, location, district from shop order by number_products desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "location"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : employee_id , age , name , city  | shop : district , number_products , manager_name , shop_id , name , location  | shop_district : district , shop_id  | hiring : employee_id , is_full_time , shop_id , start_from  | evaluation : bonus , year_awarded , employee_id ", 
        "query2": "select t1.name, t1.location, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "location", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc"
        ], 
        "question_toks": [
            "Sort", 
            "all", 
            "the", 
            "shops", 
            "by", 
            "number", 
            "products", 
            "in", 
            "descending", 
            "order", 
            ",", 
            "and", 
            "return", 
            "the", 
            "name", 
            ",", 
            "location", 
            "and", 
            "district", 
            "of", 
            "each", 
            "shop", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "LOCATION", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC"
        ], 
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", 
        "schema_with_content": "employee : employee_id (9, 10, 1), age (30, 23, 36), name (\"Phil Vickery\", \"Steve Borthwick\", \"Jason Hobson\"), city (\"Bristol\", \"Bristol\", \"Bristol\") | shop : district (\"Tapiolan Urheilupuisto\", \"Tehtaan kentt\u00c3\u00a4\", \"Arto Tolsa Areena\"), number_products (3500, 4780, 6000), manager_name (\"Job Dragtsma\", \"Kai Nyyss\u00c3\u00b6nen\", \"Job Dragtsma\"), shop_id (9, 8, 4), name (\"IFK Mariehamn\", \"IFK Mariehamn\", \"FF Jaro\"), location (\"Mariehamn\", \"Jakobstad\", \"Mariehamn\") | shop_district : district (\"Tapiolan Urheilupuisto\", \"Tehtaan kentt\u00c3\u00a4\", \"Arto Tolsa Areena\"), shop_id (8, 1, 5) | hiring : employee_id (7, 2, 6), is_full_time (\"T\", \"F\"), shop_id (4, 4, 2), start_from (\"2003\", \"2011\", \"2003\") | evaluation : bonus (4000.0, 3200.0, 4000.0), year_awarded (\"2016\", \"2015\", \"2017\"), employee_id (\"2\", \"7\", \"10\")", 
        "orig_query": "select name, location, district from shop order by number_products desc", 
        "query1": "select name, location, district from shop order by number_products desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "district"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : name , city , age , employee_id  | shop : location , shop_id , manager_name , number_products , name , district  | shop_name : name , shop_id  | hiring : start_from , employee_id , is_full_time , shop_id  | evaluation : employee_id , bonus , year_awarded ", 
        "query2": "select t2.name, t1.location, t1.district from shop as t1 join shop_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "location", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc"
        ], 
        "question_toks": [
            "Sort", 
            "all", 
            "the", 
            "shops", 
            "by", 
            "number", 
            "products", 
            "in", 
            "descending", 
            "order", 
            ",", 
            "and", 
            "return", 
            "the", 
            "name", 
            ",", 
            "location", 
            "and", 
            "district", 
            "of", 
            "each", 
            "shop", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "LOCATION", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC"
        ], 
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", 
        "schema_with_content": "employee : name (\"Louis Deacon\", \"Lee Mears\", \"Jason Hobson\"), city (\"Bristol\", \"Sale\", \"Bristol\"), age (40, 43, 23), employee_id (1, 7, 10) | shop : location (\"Mariehamn\", \"Lahti\", \"Kuopio\"), shop_id (6, 1, 2), manager_name (\"Job Dragtsma\", \"Olli Huttunen\", \"Kai Nyyss\u00c3\u00b6nen\"), number_products (6000, 3500, 3516), name (\"HJK\", \"IFK Mariehamn\", \"FC KooTeePee\"), district (\"Lahden Stadion\", \"Finnair Stadium\", \"Wikl\u00c3\u00b6f Holding Arena\") | shop_name : name (\"HJK\", \"IFK Mariehamn\", \"FC KooTeePee\"), shop_id (1, 5, 5) | hiring : start_from (\"2011\", \"2003\", \"2009\"), employee_id (7, 3, 2), is_full_time (\"T\", \"F\"), shop_id (1, 4, 4) | evaluation : employee_id (\"7\", \"2\", \"4\"), bonus (3200.0, 3200.0, 3000.0), year_awarded (\"2015\", \"2018\", \"2018\")", 
        "orig_query": "select name, location, district from shop order by number_products desc", 
        "query1": "select name, location, district from shop order by number_products desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "name"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "employee : city , employee_id , name , age  | shop : district , shop_id , location , name , number_products , manager_name  | shop_location : location , shop_id  | hiring : is_full_time , start_from , employee_id , shop_id  | evaluation : bonus , year_awarded , employee_id ", 
        "query2": "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc", 
        "db_id": "employee_hire_evaluation", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "location", 
            ",", 
            "district", 
            "from", 
            "shop", 
            "order", 
            "by", 
            "number_products", 
            "desc"
        ], 
        "question_toks": [
            "Sort", 
            "all", 
            "the", 
            "shops", 
            "by", 
            "number", 
            "products", 
            "in", 
            "descending", 
            "order", 
            ",", 
            "and", 
            "return", 
            "the", 
            "name", 
            ",", 
            "location", 
            "and", 
            "district", 
            "of", 
            "each", 
            "shop", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "LOCATION", 
            ",", 
            "district", 
            "FROM", 
            "shop", 
            "ORDER", 
            "BY", 
            "number_products", 
            "DESC"
        ], 
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", 
        "schema_with_content": "employee : city (\"Sale\", \"Leicester\", \"Bristol\"), employee_id (6, 1, 9), name (\"Mark Regan\", \"Tim Payne\", \"Louis Deacon\"), age (28, 23, 32) | shop : district (\"Arto Tolsa Areena\", \"Veritas Stadion\", \"Veritas Stadion\"), shop_id (2, 6, 3), location (\"Lahti\", \"Kotka\", \"Helsinki\"), name (\"FC Haka\", \"FC Inter\", \"FC Honka\"), number_products (10000, 3500, 3500), manager_name (\"Mika Lehkosuo\", \"Olli Huttunen\", \"Job Dragtsma\") | shop_location : location (\"Lahti\", \"Kotka\", \"Helsinki\"), shop_id (9, 2, 7) | hiring : is_full_time (\"T\", \"F\"), start_from (\"2011\", \"2012\", \"2008\"), employee_id (1, 3, 7), shop_id (1, 4, 4) | evaluation : bonus (4000.0, 4000.0, 2900.0), year_awarded (\"2017\", \"2016\", \"2015\"), employee_id (\"10\", \"2\", \"7\")", 
        "orig_query": "select name, location, district from shop order by number_products desc", 
        "query1": "select name, location, district from shop order by number_products desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                8, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "shop": "location"
        }, 
        "primary_key": {
            "shop": "shop_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_type_code , version_number , date_effective_to , template_id , template_details , date_effective_from  | documents : document_id , other_details , template_id , document_name , document_description  | documents_document_description : document_description , document_id  | paragraphs : paragraph_text , paragraph_id , document_id , other_details ", 
        "query2": "select t1.document_id, t1.document_name, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "from", 
            "documents"
        ], 
        "question_toks": [
            "List", 
            "document", 
            "IDs", 
            ",", 
            "document", 
            "names", 
            ",", 
            "and", 
            "document", 
            "descriptions", 
            "for", 
            "all", 
            "documents", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "FROM", 
            "Documents"
        ], 
        "question": "List document IDs, document names, and document descriptions for all documents.", 
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"CV\", \"PP\"), template_type_description (\"CV\", \"Advertisement\", \"CV\") | templates : template_type_code (\"PP\", \"BK\", \"CV\"), version_number (5, 8, 0), date_effective_to (\"1973-01-12 14:13:34\", \"1993-03-24 14:30:23\", \"1975-07-16 04:52:10\"), template_id (9, 20, 9), template_details (\"\"), date_effective_from (\"1986-12-09 14:51:36\", \"2003-06-05 04:03:45\", \"1979-12-24 10:28:16\") | documents : document_id (2394, 3830, 801801), other_details (None), template_id (10, 8, 6), document_name (\"Welcome to NY\", \"How to read a book\", \"How Google people work\"), document_description (\"z\", \"u\", \"u\") | documents_document_description : document_description (\"z\", \"u\", \"u\"), document_id (1, 651512, 76) | paragraphs : paragraph_text (\"UK\", \"Fiji\", \"Jersey\"), paragraph_id (510442723, 65, 7), document_id (16514113, 3, 16514113), other_details (None)", 
        "orig_query": "select document_id, document_name, document_description from documents", 
        "query1": "select document_id, document_name, document_description from documents", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_description"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : version_number , date_effective_to , template_id , template_type_code , date_effective_from , template_details  | documents : document_description , document_name , document_id , other_details , template_id  | documents_document_name : document_name , document_id  | paragraphs : other_details , document_id , paragraph_id , paragraph_text ", 
        "query2": "select t1.document_id, t2.document_name, t1.document_description from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "from", 
            "documents"
        ], 
        "question_toks": [
            "List", 
            "document", 
            "IDs", 
            ",", 
            "document", 
            "names", 
            ",", 
            "and", 
            "document", 
            "descriptions", 
            "for", 
            "all", 
            "documents", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "FROM", 
            "Documents"
        ], 
        "question": "List document IDs, document names, and document descriptions for all documents.", 
        "schema_with_content": "ref_template_types : template_type_code (\"BK\", \"PP\", \"PP\"), template_type_description (\"Presentation\", \"Book\", \"Advertisement\") | templates : version_number (2, 3, 2), date_effective_to (\"1989-11-24 19:06:06\", \"2000-10-22 11:57:12\", \"1980-05-07 12:15:47\"), template_id (19, 19, 6), template_type_code (\"BK\", \"BK\", \"CV\"), date_effective_from (\"1979-12-24 10:28:16\", \"1996-02-04 11:27:24\", \"1975-05-20 22:51:19\"), template_details (\"\") | documents : document_description (\"f\", \"h\", \"f\"), document_name (\"A history of Arts\", \"Understanding DB\", \"Palm reading\"), document_id (16514113, 33930, 2394), other_details (None), template_id (7, 11, 6) | documents_document_name : document_name (\"A history of Arts\", \"Understanding DB\", \"Palm reading\"), document_id (0, 3, 1) | paragraphs : other_details (None), document_id (2394, 385906526, 3830), paragraph_id (7, 7, 946335436), paragraph_text (\"Palestinian Territory\", \"Japan\", \"Jersey\")", 
        "orig_query": "select document_id, document_name, document_description from documents", 
        "query1": "select document_id, document_name, document_description from documents", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_name"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , date_effective_from , template_type_code , template_details , version_number , date_effective_to  | documents : other_details , template_id , document_id , document_description , document_name  | documents_document_description : document_id , document_description  | paragraphs : paragraph_text , document_id , paragraph_id , other_details ", 
        "query2": "select t1.document_id, t1.document_name, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "from", 
            "documents"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "ids", 
            ",", 
            "names", 
            ",", 
            "and", 
            "descriptions", 
            "for", 
            "all", 
            "documents", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "FROM", 
            "Documents"
        ], 
        "question": "What are the ids, names, and descriptions for all documents?", 
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Book\", \"Presentation\"), template_type_code (\"PPT\", \"CV\", \"CV\") | templates : template_id (4, 23, 25), date_effective_from (\"2003-06-05 04:03:45\", \"2008-08-01 13:57:26\", \"2008-08-01 13:57:26\"), template_type_code (\"BK\", \"PPT\", \"PP\"), template_details (\"\"), version_number (8, 8, 6), date_effective_to (\"1993-03-24 14:30:23\", \"1980-05-07 12:15:47\", \"2008-01-05 14:19:28\") | documents : other_details (None), template_id (14, 14, 25), document_id (16514113, 385906526, 3), document_description (\"k\", \"r\", \"n\"), document_name (\"Palm reading\", \"Data base\", \"Do not panic\") | documents_document_description : document_id (651512, 50123, 3830), document_description (\"k\", \"r\", \"n\") | paragraphs : paragraph_text (\"Papua New Guinea\", \"Japan\", \"Brazil\"), document_id (3540024, 3540024, 16514113), paragraph_id (280120913, 765713812, 7), other_details (None)", 
        "orig_query": "select document_id, document_name, document_description from documents", 
        "query1": "select document_id, document_name, document_description from documents", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_description"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , template_type_code , template_details , date_effective_from , version_number , date_effective_to  | documents : template_id , other_details , document_id , document_name , document_description  | documents_document_name : document_id , document_name  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ", 
        "query2": "select t1.document_id, t2.document_name, t1.document_description from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "from", 
            "documents"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "ids", 
            ",", 
            "names", 
            ",", 
            "and", 
            "descriptions", 
            "for", 
            "all", 
            "documents", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "document_name", 
            ",", 
            "document_description", 
            "FROM", 
            "Documents"
        ], 
        "question": "What are the ids, names, and descriptions for all documents?", 
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Paper\", \"Paper\"), template_type_code (\"PPT\", \"AD\", \"BK\") | templates : template_id (11, 21, 8), template_type_code (\"BK\", \"AD\", \"PP\"), template_details (\"\"), date_effective_from (\"2010-09-24 01:15:11\", \"1986-11-14 12:20:18\", \"1999-06-21 11:10:30\"), version_number (6, 5, 0), date_effective_to (\"1995-09-19 22:27:48\", \"1974-09-14 06:34:39\", \"1975-07-16 04:52:10\") | documents : template_id (22, 22, 8), other_details (None), document_id (1, 76, 3540024), document_name (\"Introduction of OS\", \"Robbin CV\", \"Palm reading\"), document_description (\"u\", \"f\", \"n\") | documents_document_name : document_id (3830, 651512, 2394), document_name (\"Introduction of OS\", \"Robbin CV\", \"Palm reading\") | paragraphs : other_details (None), paragraph_text (\"Jersey\", \"Indonesia\", \"Ireland\"), document_id (2394, 3, 16514113), paragraph_id (65, 510442723, 571212310)", 
        "orig_query": "select document_id, document_name, document_description from documents", 
        "query1": "select document_id, document_name, document_description from documents", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_name"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , template_details , date_effective_from , template_type_code , version_number , date_effective_to  | documents : template_id , document_id , other_details , document_name , document_description  | documents_document_name : document_id , document_name  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ", 
        "query2": "select t2.document_name, t1.template_id from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_name", 
            ",", 
            "template_id", 
            "from", 
            "documents", 
            "where", 
            "document_description", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "document", 
            "name", 
            "and", 
            "template", 
            "id", 
            "for", 
            "document", 
            "with", 
            "description", 
            "with", 
            "the", 
            "letter", 
            "'w", 
            "'", 
            "in", 
            "it", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "document_name", 
            ",", 
            "template_id", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "Document_Description", 
            "LIKE", 
            "``", 
            "%", 
            "w", 
            "%", 
            "''"
        ], 
        "question": "What is the document name and template id for document with description with the letter 'w' in it?", 
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"CV\", \"Book\"), template_type_code (\"CV\", \"PP\", \"PPT\") | templates : template_id (20, 23, 19), template_details (\"\"), date_effective_from (\"1999-06-21 11:10:30\", \"1986-11-14 12:20:18\", \"2005-11-12 07:09:48\"), template_type_code (\"CV\", \"BK\", \"CV\"), version_number (9, 3, 7), date_effective_to (\"1994-12-07 13:26:23\", \"1976-10-28 10:08:50\", \"1975-07-16 04:52:10\") | documents : template_id (4, 8, 6), document_id (801801, 1, 33930), other_details (None), document_name (\"Palm reading\", \"How to read a book\", \"Introduction of OS\"), document_description (\"r\", \"h\", \"n\") | documents_document_name : document_id (2394, 801801, 651512), document_name (\"Palm reading\", \"How to read a book\", \"Introduction of OS\") | paragraphs : other_details (None), paragraph_text (\"Somalia\", \"Somalia\", \"Senegal\"), document_id (2394, 3540024, 33930), paragraph_id (608931827, 608931827, 510442723)", 
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    "\"%w%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_name"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , template_id , version_number , template_details , template_type_code , date_effective_to  | documents : document_description , document_id , document_name , template_id , other_details  | documents_template_id : template_id , document_id  | paragraphs : paragraph_text , document_id , other_details , paragraph_id ", 
        "query2": "select t1.document_name, t2.template_id from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_name", 
            ",", 
            "template_id", 
            "from", 
            "documents", 
            "where", 
            "document_description", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "document", 
            "name", 
            "and", 
            "template", 
            "id", 
            "for", 
            "document", 
            "with", 
            "description", 
            "with", 
            "the", 
            "letter", 
            "'w", 
            "'", 
            "in", 
            "it", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "document_name", 
            ",", 
            "template_id", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "Document_Description", 
            "LIKE", 
            "``", 
            "%", 
            "w", 
            "%", 
            "''"
        ], 
        "question": "What is the document name and template id for document with description with the letter 'w' in it?", 
        "schema_with_content": "ref_template_types : template_type_code (\"PPT\", \"PP\", \"PP\"), template_type_description (\"Paper\", \"Advertisement\", \"Paper\") | templates : date_effective_from (\"2005-02-20 00:31:34\", \"2012-04-05 07:11:42\", \"1984-08-07 13:36:26\"), template_id (0, 6, 11), version_number (9, 5, 5), template_details (\"\"), template_type_code (\"BK\", \"PP\", \"BK\"), date_effective_to (\"1976-10-28 10:08:50\", \"2015-09-06 01:08:44\", \"1999-07-08 03:31:04\") | documents : document_description (\"w\", \"r\", \"k\"), document_id (76, 2394, 3), document_name (\"Summer Show\", \"Robbin CV\", \"Summer Show\"), template_id (20, 21, 14), other_details (None) | documents_template_id : template_id (20, 21, 14), document_id (80, 1, 2394) | paragraphs : paragraph_text (\"Jersey\", \"UK\", \"Papua New Guinea\"), document_id (651512, 50123, 80), other_details (None), paragraph_id (1104059, 65, 608931827)", 
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    "\"%w%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "template_id"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , date_effective_from , template_id , template_type_code , version_number , date_effective_to  | documents : template_id , document_id , other_details , document_description , document_name  | documents_document_name : document_id , document_name  | paragraphs : other_details , paragraph_id , document_id , paragraph_text ", 
        "query2": "select t2.document_name, t1.template_id from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_name", 
            ",", 
            "template_id", 
            "from", 
            "documents", 
            "where", 
            "document_description", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "names", 
            "and", 
            "template", 
            "ids", 
            "for", 
            "documents", 
            "that", 
            "contain", 
            "the", 
            "letter", 
            "w", 
            "in", 
            "their", 
            "description", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "document_name", 
            ",", 
            "template_id", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "Document_Description", 
            "LIKE", 
            "``", 
            "%", 
            "w", 
            "%", 
            "''"
        ], 
        "question": "Return the names and template ids for documents that contain the letter w in their description.", 
        "schema_with_content": "ref_template_types : template_type_description (\"Advertisement\", \"Paper\", \"Advertisement\"), template_type_code (\"BK\", \"AD\", \"AD\") | templates : template_details (\"\"), date_effective_from (\"2002-03-02 14:39:49\", \"1993-10-07 02:33:04\", \"1975-10-20 02:28:58\"), template_id (10, 20, 10), template_type_code (\"PP\", \"PPT\", \"PP\"), version_number (7, 6, 0), date_effective_to (\"1998-05-12 12:51:29\", \"1980-05-07 12:15:47\", \"1995-09-19 22:27:48\") | documents : template_id (10, 7, 10), document_id (33930, 1, 3830), other_details (None), document_description (\"f\", \"h\", \"b\"), document_name (\"Palm reading\", \"Robbin CV\", \"About Korea\") | documents_document_name : document_id (0, 50123, 3540024), document_name (\"Palm reading\", \"Robbin CV\", \"About Korea\") | paragraphs : other_details (None), paragraph_id (946335436, 16615, 3708), document_id (50123, 3540024, 16514113), paragraph_text (\"Senegal\", \"Ukraine\", \"Ukraine\")", 
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    "\"%w%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_name"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , version_number , template_type_code , date_effective_to , date_effective_from , template_details  | documents : document_id , other_details , document_name , template_id , document_description  | documents_template_id : document_id , template_id  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ", 
        "query2": "select t1.document_name, t2.template_id from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_name", 
            ",", 
            "template_id", 
            "from", 
            "documents", 
            "where", 
            "document_description", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "names", 
            "and", 
            "template", 
            "ids", 
            "for", 
            "documents", 
            "that", 
            "contain", 
            "the", 
            "letter", 
            "w", 
            "in", 
            "their", 
            "description", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "document_name", 
            ",", 
            "template_id", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "Document_Description", 
            "LIKE", 
            "``", 
            "%", 
            "w", 
            "%", 
            "''"
        ], 
        "question": "Return the names and template ids for documents that contain the letter w in their description.", 
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"CV\", \"Book\"), template_type_code (\"PPT\", \"PP\", \"PPT\") | templates : template_id (7, 25, 14), version_number (7, 5, 1), template_type_code (\"BK\", \"CV\", \"PP\"), date_effective_to (\"1980-05-07 12:15:47\", \"2007-06-06 06:18:53\", \"1994-12-07 13:26:23\"), date_effective_from (\"1975-10-20 02:28:58\", \"2002-08-25 13:26:23\", \"1993-10-07 02:33:04\"), template_details (\"\") | documents : document_id (3830, 33930, 801801), other_details (None), document_name (\"Do not panic\", \"Do not panic\", \"Introduction of OS\"), template_id (6, 11, 20), document_description (\"z\", \"z\", \"k\") | documents_template_id : document_id (2394, 1, 16514113), template_id (6, 11, 20) | paragraphs : paragraph_id (3708, 1104059, 7), document_id (3, 16514113, 50123), paragraph_text (\"Micronesia\", \"Japan\", \"Brazil\"), other_details (None)", 
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    "\"%w%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "template_id"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , template_id , version_number , template_details , date_effective_to , template_type_code  | documents : other_details , document_description , document_id , document_name , template_id  | documents_document_description : document_description , document_id  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ", 
        "query2": "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "document_description", 
            "from", 
            "documents", 
            "where", 
            "document_name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "document", 
            "id", 
            ",", 
            "template", 
            "id", 
            "and", 
            "description", 
            "for", 
            "document", 
            "named", 
            "``", 
            "Robbin", 
            "CV", 
            "''", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "Document_Description", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "document_name", 
            "=", 
            "``", 
            "Robbin", 
            "CV", 
            "''"
        ], 
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?", 
        "schema_with_content": "ref_template_types : template_type_code (\"CV\", \"PPT\", \"BK\"), template_type_description (\"Presentation\", \"Paper\", \"Book\") | templates : date_effective_from (\"1986-12-09 14:51:36\", \"1999-06-21 11:10:30\", \"1993-10-07 02:33:04\"), template_id (15, 8, 1), version_number (5, 8, 2), template_details (\"\"), date_effective_to (\"1973-01-12 14:13:34\", \"1974-09-14 06:34:39\", \"1999-07-08 03:31:04\"), template_type_code (\"BK\", \"PPT\", \"BK\") | documents : other_details (None), document_description (\"b\", \"n\", \"w\"), document_id (385906526, 33930, 50123), document_name (\"How Google people work\", \"A history of Arts\", \"Data base\"), template_id (20, 21, 1) | documents_document_description : document_description (\"b\", \"n\", \"w\"), document_id (82, 76, 33930) | paragraphs : paragraph_id (1104059, 7, 16615), document_id (651512, 33930, 3830), paragraph_text (\"Palestinian Territory\", \"Fiji\", \"Papua New Guinea\"), other_details (None)", 
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Robbin CV\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_description"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_to , date_effective_from , version_number , template_details , template_id , template_type_code  | documents : template_id , document_description , document_id , other_details , document_name  | documents_template_id : document_id , template_id  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ", 
        "query2": "select t1.document_id, t2.template_id, t1.document_description from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "document_description", 
            "from", 
            "documents", 
            "where", 
            "document_name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "document", 
            "id", 
            ",", 
            "template", 
            "id", 
            "and", 
            "description", 
            "for", 
            "document", 
            "named", 
            "``", 
            "Robbin", 
            "CV", 
            "''", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "Document_Description", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "document_name", 
            "=", 
            "``", 
            "Robbin", 
            "CV", 
            "''"
        ], 
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?", 
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"CV\", \"PPT\"), template_type_description (\"CV\", \"Advertisement\", \"Book\") | templates : date_effective_to (\"1974-09-14 06:34:39\", \"1976-10-28 10:08:50\", \"1980-05-07 12:15:47\"), date_effective_from (\"1984-08-07 13:36:26\", \"1975-10-20 02:28:58\", \"1997-04-17 08:29:44\"), version_number (4, 8, 9), template_details (\"\"), template_id (8, 14, 22), template_type_code (\"CV\", \"BK\", \"AD\") | documents : template_id (10, 10, 20), document_description (\"u\", \"y\", \"k\"), document_id (50123, 385906526, 3), other_details (None), document_name (\"Welcome to NY\", \"Do not panic\", \"Learning French\") | documents_template_id : document_id (16514113, 82, 801801), template_id (10, 10, 20) | paragraphs : paragraph_id (571212310, 1104059, 608931827), document_id (3540024, 385906526, 3830), paragraph_text (\"Somalia\", \"Senegal\", \"Japan\"), other_details (None)", 
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Robbin CV\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "template_id"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_from , template_type_code , version_number , template_id , template_details , date_effective_to  | documents : document_name , document_description , other_details , template_id , document_id  | documents_document_description : document_description , document_id  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ", 
        "query2": "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "document_description", 
            "from", 
            "documents", 
            "where", 
            "document_name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "document", 
            "id", 
            ",", 
            "template", 
            "id", 
            ",", 
            "and", 
            "description", 
            "for", 
            "the", 
            "document", 
            "with", 
            "the", 
            "name", 
            "Robbin", 
            "CV", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "Document_Description", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "document_name", 
            "=", 
            "``", 
            "Robbin", 
            "CV", 
            "''"
        ], 
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.", 
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"Presentation\", \"CV\"), template_type_code (\"BK\", \"AD\", \"PPT\") | templates : date_effective_from (\"1986-11-14 12:20:18\", \"1986-11-14 12:20:18\", \"2008-08-01 13:57:26\"), template_type_code (\"AD\", \"BK\", \"BK\"), version_number (0, 8, 4), template_id (1, 22, 19), template_details (\"\"), date_effective_to (\"1989-11-24 19:06:06\", \"1973-01-12 14:13:34\", \"2000-10-22 11:57:12\") | documents : document_name (\"Introduction of OS\", \"Data base\", \"How Google people work\"), document_description (\"f\", \"z\", \"r\"), other_details (None), template_id (11, 7, 6), document_id (1, 16514113, 0) | documents_document_description : document_description (\"f\", \"z\", \"r\"), document_id (82, 385906526, 3830) | paragraphs : other_details (None), paragraph_text (\"Jersey\", \"Palestinian Territory\", \"Jersey\"), document_id (80, 2394, 33930), paragraph_id (3708, 571212310, 608931827)", 
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Robbin CV\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "document_description"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , version_number , template_type_code , date_effective_from , template_details , date_effective_to  | documents : other_details , document_id , template_id , document_name , document_description  | documents_template_id : document_id , template_id  | paragraphs : other_details , document_id , paragraph_text , paragraph_id ", 
        "query2": "select t1.document_id, t2.template_id, t1.document_description from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\"", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "document_description", 
            "from", 
            "documents", 
            "where", 
            "document_name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "document", 
            "id", 
            ",", 
            "template", 
            "id", 
            ",", 
            "and", 
            "description", 
            "for", 
            "the", 
            "document", 
            "with", 
            "the", 
            "name", 
            "Robbin", 
            "CV", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "document_id", 
            ",", 
            "template_id", 
            ",", 
            "Document_Description", 
            "FROM", 
            "Documents", 
            "WHERE", 
            "document_name", 
            "=", 
            "``", 
            "Robbin", 
            "CV", 
            "''"
        ], 
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.", 
        "schema_with_content": "ref_template_types : template_type_description (\"Paper\", \"Book\", \"Book\"), template_type_code (\"PP\", \"PP\", \"BK\") | templates : template_id (4, 1, 20), version_number (6, 2, 9), template_type_code (\"CV\", \"PP\", \"AD\"), date_effective_from (\"1975-10-20 02:28:58\", \"2002-08-25 13:26:23\", \"1984-08-07 13:36:26\"), template_details (\"\"), date_effective_to (\"2007-06-06 06:18:53\", \"1992-05-02 20:06:11\", \"2000-10-22 11:57:12\") | documents : other_details (None), document_id (82, 16514113, 801801), template_id (1, 22, 20), document_name (\"About Korea\", \"Customer reviews\", \"How Google people work\"), document_description (\"h\", \"h\", \"b\") | documents_template_id : document_id (2394, 801801, 3), template_id (1, 22, 20) | paragraphs : other_details (None), document_id (651512, 50123, 33930), paragraph_text (\"Ukraine\", \"Ireland\", \"Indonesia\"), paragraph_id (946335436, 16615, 571212310)", 
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            11, 
                            false
                        ], 
                        null
                    ], 
                    "\"Robbin CV\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "documents": "template_id"
        }, 
        "primary_key": {
            "documents": "document_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_type_code , template_id , template_details , date_effective_from , version_number , date_effective_to  | templates_version_number : template_id , version_number  | documents : other_details , template_id , document_id , document_description , document_name  | paragraphs : paragraph_id , paragraph_text , other_details , document_id ", 
        "query2": "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "Show", 
            "template", 
            "ids", 
            ",", 
            "version", 
            "numbers", 
            ",", 
            "and", 
            "template", 
            "type", 
            "codes", 
            "for", 
            "all", 
            "templates", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "Show template ids, version numbers, and template type codes for all templates.", 
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"Presentation\", \"Paper\"), template_type_code (\"BK\", \"BK\", \"PPT\") | templates : template_type_code (\"CV\", \"PPT\", \"PP\"), template_id (24, 25, 19), template_details (\"\"), date_effective_from (\"1983-07-16 21:16:16\", \"1979-12-24 10:28:16\", \"1975-10-20 02:28:58\"), version_number (8, 5, 1), date_effective_to (\"1989-11-24 19:06:06\", \"1992-05-02 20:06:11\", \"1975-07-16 04:52:10\") | templates_version_number : template_id (14, 16, 24), version_number (8, 5, 1) | documents : other_details (None), template_id (8, 8, 4), document_id (651512, 385906526, 50123), document_description (\"z\", \"k\", \"h\"), document_name (\"Learning French\", \"Robbin CV\", \"Robbin CV\") | paragraphs : paragraph_id (243399026, 1104059, 9946), paragraph_text (\"Micronesia\", \"Jersey\", \"Ukraine\"), other_details (None), document_id (50123, 80, 651512)", 
        "orig_query": "select template_id, version_number, template_type_code from templates", 
        "query1": "select template_id, version_number, template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "version_number"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , date_effective_from , template_type_code , template_details , version_number , date_effective_to  | templates_template_type_code : template_type_code , template_id  | documents : document_name , other_details , document_id , template_id , document_description  | paragraphs : other_details , paragraph_id , document_id , paragraph_text ", 
        "query2": "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "Show", 
            "template", 
            "ids", 
            ",", 
            "version", 
            "numbers", 
            ",", 
            "and", 
            "template", 
            "type", 
            "codes", 
            "for", 
            "all", 
            "templates", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "Show template ids, version numbers, and template type codes for all templates.", 
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Paper\", \"CV\"), template_type_code (\"CV\", \"AD\", \"CV\") | templates : template_id (24, 18, 18), date_effective_from (\"1997-04-17 08:29:44\", \"1979-10-20 21:23:20\", \"1975-05-20 22:51:19\"), template_type_code (\"PPT\", \"CV\", \"BK\"), template_details (\"\"), version_number (2, 4, 3), date_effective_to (\"1994-12-07 13:26:23\", \"1975-07-16 04:52:10\", \"2008-01-05 14:19:28\") | templates_template_type_code : template_type_code (\"PPT\", \"CV\", \"BK\"), template_id (23, 11, 15) | documents : document_name (\"Introduction of OS\", \"About Korea\", \"How to write a CV\"), other_details (None), document_id (3830, 82, 3), template_id (11, 8, 11), document_description (\"y\", \"f\", \"w\") | paragraphs : other_details (None), paragraph_id (241, 571212310, 280120913), document_id (3540024, 3, 2394), paragraph_text (\"Indonesia\", \"Micronesia\", \"Papua New Guinea\")", 
        "orig_query": "select template_id, version_number, template_type_code from templates", 
        "query1": "select template_id, version_number, template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "template_type_code"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , version_number , template_id , date_effective_to , template_details , template_type_code  | templates_version_number : template_id , version_number  | documents : document_id , document_description , document_name , other_details , template_id  | paragraphs : document_id , paragraph_text , other_details , paragraph_id ", 
        "query2": "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "ids", 
            ",", 
            "version", 
            "numbers", 
            ",", 
            "and", 
            "type", 
            "codes", 
            "for", 
            "each", 
            "template", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "What are the ids, version numbers, and type codes for each template?", 
        "schema_with_content": "ref_template_types : template_type_code (\"CV\", \"PP\", \"BK\"), template_type_description (\"Paper\", \"CV\", \"Advertisement\") | templates : date_effective_from (\"1984-08-07 13:36:26\", \"1996-02-04 11:27:24\", \"1983-07-16 21:16:16\"), version_number (0, 6, 9), template_id (4, 0, 14), date_effective_to (\"1976-10-28 10:08:50\", \"1989-11-24 19:06:06\", \"1992-05-02 20:06:11\"), template_details (\"\"), template_type_code (\"CV\", \"BK\", \"CV\") | templates_version_number : template_id (11, 25, 20), version_number (0, 6, 9) | documents : document_id (76, 1, 385906526), document_description (\"u\", \"n\", \"k\"), document_name (\"How to write a CV\", \"Learning French\", \"How to read a book\"), other_details (None), template_id (4, 1, 21) | paragraphs : document_id (16514113, 16514113, 3), paragraph_text (\"Fiji\", \"Japan\", \"Ireland\"), other_details (None), paragraph_id (243399026, 280120913, 3708)", 
        "orig_query": "select template_id, version_number, template_type_code from templates", 
        "query1": "select template_id, version_number, template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "version_number"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_type_code , date_effective_from , date_effective_to , template_id , version_number , template_details  | templates_template_type_code : template_id , template_type_code  | documents : document_name , document_id , other_details , template_id , document_description  | paragraphs : paragraph_text , paragraph_id , other_details , document_id ", 
        "query2": "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "ids", 
            ",", 
            "version", 
            "numbers", 
            ",", 
            "and", 
            "type", 
            "codes", 
            "for", 
            "each", 
            "template", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "template_id", 
            ",", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "What are the ids, version numbers, and type codes for each template?", 
        "schema_with_content": "ref_template_types : template_type_description (\"Paper\", \"Advertisement\", \"CV\"), template_type_code (\"PPT\", \"PP\", \"PP\") | templates : template_type_code (\"PPT\", \"PPT\", \"PP\"), date_effective_from (\"1983-07-16 21:16:16\", \"2002-08-25 13:26:23\", \"1997-04-17 08:29:44\"), date_effective_to (\"2000-10-22 11:57:12\", \"1989-11-24 19:06:06\", \"2001-04-18 09:29:52\"), template_id (18, 16, 10), version_number (8, 5, 3), template_details (\"\") | templates_template_type_code : template_id (25, 7, 4), template_type_code (\"PPT\", \"PPT\", \"PP\") | documents : document_name (\"How to read a book\", \"How to write a CV\", \"Introduction of OS\"), document_id (50123, 385906526, 2394), other_details (None), template_id (7, 21, 20), document_description (\"b\", \"r\", \"f\") | paragraphs : paragraph_text (\"Palestinian Territory\", \"Brazil\", \"Jersey\"), paragraph_id (571212310, 608931827, 7), other_details (None), document_id (651512, 3830, 33930)", 
        "orig_query": "select template_id, version_number, template_type_code from templates", 
        "query1": "select template_id, version_number, template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "template_type_code"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : version_number , template_type_code , date_effective_from , date_effective_to , template_id , template_details  | templates_version_number : template_id , version_number  | documents : document_name , template_id , other_details , document_id , document_description  | paragraphs : document_id , paragraph_id , paragraph_text , other_details ", 
        "query2": "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates", 
            "where", 
            "version_number", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "version", 
            "number", 
            "and", 
            "template", 
            "type", 
            "code", 
            "for", 
            "the", 
            "template", 
            "with", 
            "version", 
            "number", 
            "later", 
            "than", 
            "5", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates", 
            "WHERE", 
            "version_number", 
            ">", 
            "5"
        ], 
        "question": "What is the version number and template type code for the template with version number later than 5?", 
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"PPT\", \"PPT\"), template_type_description (\"Paper\", \"Advertisement\", \"Book\") | templates : version_number (2, 6, 7), template_type_code (\"PP\", \"CV\", \"AD\"), date_effective_from (\"2005-02-20 00:31:34\", \"1997-04-17 08:29:44\", \"2012-04-05 07:11:42\"), date_effective_to (\"2006-02-06 23:52:04\", \"1995-09-19 22:27:48\", \"1989-11-24 19:06:06\"), template_id (11, 9, 0), template_details (\"\") | templates_version_number : template_id (4, 23, 22), version_number (2, 6, 7) | documents : document_name (\"Summer Show\", \"Robbin CV\", \"Palm reading\"), template_id (22, 10, 1), other_details (None), document_id (33930, 0, 385906526), document_description (\"y\", \"u\", \"b\") | paragraphs : document_id (33930, 16514113, 80), paragraph_id (241, 65, 1104059), paragraph_text (\"Brazil\", \"Palestinian Territory\", \"Japan\"), other_details (None)", 
        "orig_query": "select version_number, template_type_code from templates where version_number > 5", 
        "query1": "select version_number, template_type_code from templates where version_number > 5", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "version_number"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_details , date_effective_to , date_effective_from , template_id , template_type_code , version_number  | templates_template_type_code : template_id , template_type_code  | documents : document_description , other_details , document_id , document_name , template_id  | paragraphs : document_id , paragraph_id , paragraph_text , other_details ", 
        "query2": "select t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates", 
            "where", 
            "version_number", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "version", 
            "number", 
            "and", 
            "template", 
            "type", 
            "code", 
            "for", 
            "the", 
            "template", 
            "with", 
            "version", 
            "number", 
            "later", 
            "than", 
            "5", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates", 
            "WHERE", 
            "version_number", 
            ">", 
            "5"
        ], 
        "question": "What is the version number and template type code for the template with version number later than 5?", 
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"PPT\", \"BK\"), template_type_description (\"CV\", \"Book\", \"Paper\") | templates : template_details (\"\"), date_effective_to (\"1976-10-28 10:08:50\", \"2015-09-06 01:08:44\", \"2001-04-18 09:29:52\"), date_effective_from (\"2003-06-05 04:03:45\", \"2008-08-01 13:57:26\", \"1986-12-09 14:51:36\"), template_id (6, 21, 25), template_type_code (\"AD\", \"AD\", \"AD\"), version_number (9, 8, 0) | templates_template_type_code : template_id (14, 15, 16), template_type_code (\"AD\", \"AD\", \"AD\") | documents : document_description (\"w\", \"f\", \"z\"), other_details (None), document_id (1, 33930, 33930), document_name (\"How to read a book\", \"Do not panic\", \"Do not panic\"), template_id (20, 1, 8) | paragraphs : document_id (33930, 33930, 50123), paragraph_id (1104059, 280120913, 65), paragraph_text (\"Korea\", \"Fiji\", \"Somalia\"), other_details (None)", 
        "orig_query": "select version_number, template_type_code from templates where version_number > 5", 
        "query1": "select version_number, template_type_code from templates where version_number > 5", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "template_type_code"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , version_number , template_type_code , date_effective_to , template_id , date_effective_from  | templates_version_number : version_number , template_id  | documents : template_id , other_details , document_id , document_name , document_description  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ", 
        "query2": "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates", 
            "where", 
            "version_number", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "version", 
            "numbers", 
            "and", 
            "template", 
            "type", 
            "codes", 
            "of", 
            "templates", 
            "with", 
            "a", 
            "version", 
            "number", 
            "greater", 
            "than", 
            "5", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates", 
            "WHERE", 
            "version_number", 
            ">", 
            "5"
        ], 
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", 
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"Book\", \"Presentation\"), template_type_code (\"PPT\", \"BK\", \"BK\") | templates : template_details (\"\"), version_number (2, 7, 4), template_type_code (\"PP\", \"PPT\", \"CV\"), date_effective_to (\"1993-03-24 14:30:23\", \"1976-10-28 10:08:50\", \"1998-05-12 12:51:29\"), template_id (4, 10, 1), date_effective_from (\"1996-02-04 11:27:24\", \"1984-08-07 13:36:26\", \"2005-02-20 00:31:34\") | templates_version_number : version_number (2, 7, 4), template_id (21, 25, 11) | documents : template_id (25, 14, 22), other_details (None), document_id (0, 3830, 3540024), document_name (\"Understanding DB\", \"Customer reviews\", \"How Google people work\"), document_description (\"z\", \"h\", \"h\") | paragraphs : paragraph_id (608931827, 7, 280120913), document_id (80, 651512, 3), paragraph_text (\"Ukraine\", \"Papua New Guinea\", \"UK\"), other_details (None)", 
        "orig_query": "select version_number, template_type_code from templates where version_number > 5", 
        "query1": "select version_number, template_type_code from templates where version_number > 5", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "version_number"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , version_number , date_effective_from , template_type_code , template_id , date_effective_to  | templates_template_type_code : template_type_code , template_id  | documents : template_id , other_details , document_id , document_name , document_description  | paragraphs : document_id , paragraph_text , paragraph_id , other_details ", 
        "query2": "select t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "version_number", 
            ",", 
            "template_type_code", 
            "from", 
            "templates", 
            "where", 
            "version_number", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "version", 
            "numbers", 
            "and", 
            "template", 
            "type", 
            "codes", 
            "of", 
            "templates", 
            "with", 
            "a", 
            "version", 
            "number", 
            "greater", 
            "than", 
            "5", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "version_number", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates", 
            "WHERE", 
            "version_number", 
            ">", 
            "5"
        ], 
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", 
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"CV\", \"Presentation\"), template_type_code (\"BK\", \"CV\", \"BK\") | templates : template_details (\"\"), version_number (9, 6, 8), date_effective_from (\"1983-07-16 21:16:16\", \"1986-12-09 14:51:36\", \"1997-04-17 08:29:44\"), template_type_code (\"PP\", \"BK\", \"BK\"), template_id (25, 11, 18), date_effective_to (\"1995-09-19 22:27:48\", \"1989-11-24 19:06:06\", \"1999-07-08 03:31:04\") | templates_template_type_code : template_type_code (\"PP\", \"BK\", \"BK\"), template_id (22, 0, 20) | documents : template_id (6, 8, 8), other_details (None), document_id (0, 0, 3830), document_name (\"A history of Arts\", \"About Korea\", \"How to read a book\"), document_description (\"w\", \"y\", \"y\") | paragraphs : document_id (50123, 3830, 80), paragraph_text (\"Jersey\", \"Jersey\", \"UK\"), paragraph_id (241, 765713812, 65), other_details (None)", 
        "orig_query": "select version_number, template_type_code from templates where version_number > 5", 
        "query1": "select version_number, template_type_code from templates where version_number > 5", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    5.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "template_type_code"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_id , template_type_code , template_details , date_effective_from , date_effective_to , version_number  | templates_version_number : version_number , template_id  | documents : document_id , document_description , document_name , template_id , other_details  | paragraphs : paragraph_text , paragraph_id , document_id , other_details ", 
        "query2": "select min(t2.version_number), t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "version_number", 
            ")", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "What", 
            "the", 
            "smallest", 
            "version", 
            "number", 
            "and", 
            "its", 
            "template", 
            "type", 
            "code", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Version_Number", 
            ")", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "What the smallest version number and its template type code?", 
        "schema_with_content": "ref_template_types : template_type_code (\"PPT\", \"AD\", \"AD\"), template_type_description (\"Paper\", \"Presentation\", \"Advertisement\") | templates : template_id (18, 25, 9), template_type_code (\"PPT\", \"CV\", \"PPT\"), template_details (\"\"), date_effective_from (\"1975-10-20 02:28:58\", \"1993-10-07 02:33:04\", \"2010-09-24 01:15:11\"), date_effective_to (\"2007-06-06 06:18:53\", \"1989-11-24 19:06:06\", \"1998-05-12 12:51:29\"), version_number (0, 6, 4) | templates_version_number : version_number (0, 6, 4), template_id (4, 1, 15) | documents : document_id (2394, 82, 385906526), document_description (\"n\", \"w\", \"h\"), document_name (\"Data base\", \"Do not panic\", \"How to read a book\"), template_id (21, 14, 6), other_details (None) | paragraphs : paragraph_text (\"Jersey\", \"Japan\", \"Jersey\"), paragraph_id (7, 16615, 16615), document_id (2394, 33930, 3830), other_details (None)", 
        "orig_query": "select min(version_number), template_type_code from templates", 
        "query1": "select min(version_number), template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "version_number"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , date_effective_to , date_effective_from , template_type_code , template_details , version_number  | templates_template_type_code : template_type_code , template_id  | documents : document_id , template_id , other_details , document_name , document_description  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ", 
        "query2": "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "version_number", 
            ")", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "What", 
            "the", 
            "smallest", 
            "version", 
            "number", 
            "and", 
            "its", 
            "template", 
            "type", 
            "code", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Version_Number", 
            ")", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "What the smallest version number and its template type code?", 
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Book\", \"Paper\"), template_type_code (\"BK\", \"CV\", \"AD\") | templates : template_id (1, 24, 24), date_effective_to (\"2007-06-06 06:18:53\", \"1993-03-24 14:30:23\", \"2000-10-22 11:57:12\"), date_effective_from (\"1975-10-20 02:28:58\", \"2003-06-05 04:03:45\", \"1986-11-14 12:20:18\"), template_type_code (\"PPT\", \"BK\", \"PPT\"), template_details (\"\"), version_number (6, 2, 5) | templates_template_type_code : template_type_code (\"PPT\", \"BK\", \"PPT\"), template_id (21, 8, 8) | documents : document_id (3830, 3, 76), template_id (14, 6, 21), other_details (None), document_name (\"Understanding DB\", \"How Google people work\", \"Understanding DB\"), document_description (\"n\", \"y\", \"k\") | paragraphs : other_details (None), paragraph_text (\"Brazil\", \"Fiji\", \"Micronesia\"), document_id (385906526, 385906526, 80), paragraph_id (241, 241, 946335436)", 
        "orig_query": "select min(version_number), template_type_code from templates", 
        "query1": "select min(version_number), template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "template_type_code"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_from , template_id , template_type_code , date_effective_to , version_number , template_details  | templates_version_number : template_id , version_number  | documents : document_id , document_description , document_name , template_id , other_details  | paragraphs : other_details , paragraph_text , document_id , paragraph_id ", 
        "query2": "select min(t2.version_number), t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "version_number", 
            ")", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "lowest", 
            "version", 
            "number", 
            ",", 
            "along", 
            "with", 
            "its", 
            "corresponding", 
            "template", 
            "type", 
            "code", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Version_Number", 
            ")", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "Return the lowest version number, along with its corresponding template type code.", 
        "schema_with_content": "ref_template_types : template_type_description (\"Paper\", \"Book\", \"Book\"), template_type_code (\"CV\", \"PPT\", \"CV\") | templates : date_effective_from (\"1996-02-04 11:27:24\", \"1975-05-20 22:51:19\", \"1986-12-09 14:51:36\"), template_id (4, 4, 20), template_type_code (\"CV\", \"PPT\", \"AD\"), date_effective_to (\"1989-11-24 19:06:06\", \"2015-09-06 01:08:44\", \"2007-06-06 06:18:53\"), version_number (8, 8, 4), template_details (\"\") | templates_version_number : template_id (8, 14, 11), version_number (8, 8, 4) | documents : document_id (651512, 651512, 801801), document_description (\"y\", \"z\", \"w\"), document_name (\"How Google people work\", \"Summer Show\", \"Palm reading\"), template_id (21, 20, 7), other_details (None) | paragraphs : other_details (None), paragraph_text (\"Indonesia\", \"Somalia\", \"Ukraine\"), document_id (385906526, 50123, 16514113), paragraph_id (510442723, 3708, 765713812)", 
        "orig_query": "select min(version_number), template_type_code from templates", 
        "query1": "select min(version_number), template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "version_number"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_to , date_effective_from , version_number , template_type_code , template_details , template_id  | templates_template_type_code : template_id , template_type_code  | documents : document_description , document_name , document_id , other_details , template_id  | paragraphs : other_details , document_id , paragraph_text , paragraph_id ", 
        "query2": "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id", 
        "db_id": "cre_Doc_Template_Mgt", 
        "query_toks_no_value": [
            "select", 
            "min", 
            "(", 
            "version_number", 
            ")", 
            ",", 
            "template_type_code", 
            "from", 
            "templates"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "lowest", 
            "version", 
            "number", 
            ",", 
            "along", 
            "with", 
            "its", 
            "corresponding", 
            "template", 
            "type", 
            "code", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "min", 
            "(", 
            "Version_Number", 
            ")", 
            ",", 
            "template_type_code", 
            "FROM", 
            "Templates"
        ], 
        "question": "Return the lowest version number, along with its corresponding template type code.", 
        "schema_with_content": "ref_template_types : template_type_code (\"PPT\", \"PP\", \"CV\"), template_type_description (\"Book\", \"Book\", \"CV\") | templates : date_effective_to (\"2000-10-22 11:57:12\", \"1994-12-07 13:26:23\", \"1976-10-28 10:08:50\"), date_effective_from (\"1986-11-14 12:20:18\", \"2012-04-05 07:11:42\", \"1999-06-21 11:10:30\"), version_number (0, 5, 3), template_type_code (\"BK\", \"AD\", \"CV\"), template_details (\"\"), template_id (7, 11, 0) | templates_template_type_code : template_id (18, 22, 20), template_type_code (\"BK\", \"AD\", \"CV\") | documents : document_description (\"b\", \"b\", \"h\"), document_name (\"How to read a book\", \"Customer reviews\", \"Palm reading\"), document_id (80, 76, 16514113), other_details (None), template_id (7, 7, 7) | paragraphs : other_details (None), document_id (651512, 3830, 2394), paragraph_text (\"Jersey\", \"Palestinian Territory\", \"Indonesia\"), paragraph_id (510442723, 280120913, 608931827)", 
        "orig_query": "select min(version_number), template_type_code from templates", 
        "query1": "select min(version_number), template_type_code from templates", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        2, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "templates": "template_type_code"
        }, 
        "primary_key": {
            "templates": "template_id"
        }
    }, 
    {
        "schema_without_content": "course : course_id , staring_date , course  | teacher : age , name , hometown , teacher_id  | teacher_hometown : hometown , teacher_id  | course_arrange : teacher_id , course_id , grade ", 
        "query2": "select t1.age, t2.hometown from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id", 
        "db_id": "course_teach", 
        "query_toks_no_value": [
            "select", 
            "age", 
            ",", 
            "hometown", 
            "from", 
            "teacher"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "age", 
            "and", 
            "hometown", 
            "of", 
            "teachers", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Age", 
            ",", 
            "Hometown", 
            "FROM", 
            "teacher"
        ], 
        "question": "What are the age and hometown of teachers?", 
        "schema_with_content": "course : course_id (6, 1, 5), staring_date (\"15 May\", \"6 May\", \"11 May\"), course (\"French\", \"Sports\", \"Science\") | teacher : age (\"45\", \"39\", \"29\"), name (\"Lucy Wong\", \"Anne Walker\", \"Anne Walker\"), hometown (\"Little Lever Urban District\", \"Little Lever Urban District\", \"Bolton County Borough\"), teacher_id (6, 5, 3) | teacher_hometown : hometown (\"Little Lever Urban District\", \"Little Lever Urban District\", \"Bolton County Borough\"), teacher_id (1, 7, 5) | course_arrange : teacher_id (7, 5, 2), course_id (4, 2, 5), grade (7, 4, 4)", 
        "orig_query": "select age, hometown from teacher", 
        "query1": "select age, hometown from teacher", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "teacher": "hometown"
        }, 
        "primary_key": {
            "teacher": "teacher_id"
        }
    }, 
    {
        "schema_without_content": "course : course_id , course , staring_date  | teacher : teacher_id , hometown , name , age  | teacher_age : teacher_id , age  | course_arrange : grade , teacher_id , course_id ", 
        "query2": "select t2.age, t1.hometown from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id", 
        "db_id": "course_teach", 
        "query_toks_no_value": [
            "select", 
            "age", 
            ",", 
            "hometown", 
            "from", 
            "teacher"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "age", 
            "and", 
            "hometown", 
            "of", 
            "teachers", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Age", 
            ",", 
            "Hometown", 
            "FROM", 
            "teacher"
        ], 
        "question": "What are the age and hometown of teachers?", 
        "schema_with_content": "course : course_id (2, 1, 4), course (\"French\", \"Health\", \"History\"), staring_date (\"11 May\", \"17 May\", \"10 May\") | teacher : teacher_id (1, 6, 7), hometown (\"Bolton County Borough\", \"Bolton County Borough\", \"Turton Urban District\"), name (\"Lucy Wong\", \"Vicente Carretero\", \"Gustaaf Deloor\"), age (\"32\", \"29\", \"26\") | teacher_age : teacher_id (1, 4, 1), age (\"32\", \"29\", \"26\") | course_arrange : grade (7, 7, 1), teacher_id (7, 2, 2), course_id (4, 5, 4)", 
        "orig_query": "select age, hometown from teacher", 
        "query1": "select age, hometown from teacher", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "teacher": "age"
        }, 
        "primary_key": {
            "teacher": "teacher_id"
        }
    }, 
    {
        "schema_without_content": "course : course , staring_date , course_id  | teacher : name , age , teacher_id , hometown  | teacher_hometown : teacher_id , hometown  | course_arrange : grade , course_id , teacher_id ", 
        "query2": "select t1.age, t2.hometown from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id", 
        "db_id": "course_teach", 
        "query_toks_no_value": [
            "select", 
            "age", 
            ",", 
            "hometown", 
            "from", 
            "teacher"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "age", 
            "and", 
            "hometown", 
            "of", 
            "every", 
            "teacher", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Age", 
            ",", 
            "Hometown", 
            "FROM", 
            "teacher"
        ], 
        "question": "What is the age and hometown of every teacher?", 
        "schema_with_content": "course : course (\"Science\", \"Music\", \"Music\"), staring_date (\"10 May\", \"15 May\", \"13 May\"), course_id (9, 4, 2) | teacher : name (\"Gustaaf Deloor\", \"John Deloor\", \"Joseph Huts\"), age (\"45\", \"26\", \"26\"), teacher_id (5, 5, 3), hometown (\"Bolton County Borough\", \"Horwich Urban District\", \"Bolton County Borough\") | teacher_hometown : teacher_id (2, 1, 3), hometown (\"Bolton County Borough\", \"Horwich Urban District\", \"Bolton County Borough\") | course_arrange : grade (5, 4, 1), course_id (3, 5, 3), teacher_id (2, 3, 7)", 
        "orig_query": "select age, hometown from teacher", 
        "query1": "select age, hometown from teacher", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "teacher": "hometown"
        }, 
        "primary_key": {
            "teacher": "teacher_id"
        }
    }, 
    {
        "schema_without_content": "course : course , staring_date , course_id  | teacher : hometown , name , teacher_id , age  | teacher_age : age , teacher_id  | course_arrange : course_id , grade , teacher_id ", 
        "query2": "select t2.age, t1.hometown from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id", 
        "db_id": "course_teach", 
        "query_toks_no_value": [
            "select", 
            "age", 
            ",", 
            "hometown", 
            "from", 
            "teacher"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "age", 
            "and", 
            "hometown", 
            "of", 
            "every", 
            "teacher", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Age", 
            ",", 
            "Hometown", 
            "FROM", 
            "teacher"
        ], 
        "question": "What is the age and hometown of every teacher?", 
        "schema_with_content": "course : course (\"History\", \"Sports\", \"Bible\"), staring_date (\"15 May\", \"14 May\", \"9 May\"), course_id (2, 6, 7) | teacher : hometown (\"Bolton County Borough\", \"Little Lever Urban District\", \"Horwich Urban District\"), name (\"Vicente Carretero\", \"John Deloor\", \"Joseph Huts\"), teacher_id (2, 7, 7), age (\"29\", \"39\", \"26\") | teacher_age : age (\"29\", \"39\", \"26\"), teacher_id (3, 6, 5) | course_arrange : course_id (5, 2, 3), grade (7, 4, 4), teacher_id (2, 7, 6)", 
        "orig_query": "select age, hometown from teacher", 
        "query1": "select age, hometown from teacher", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "teacher": "age"
        }, 
        "primary_key": {
            "teacher": "teacher_id"
        }
    }, 
    {
        "schema_without_content": "museum : museum_id , open_year , name , num_of_staff  | visitor : age , id , name , level_of_membership  | visitor_level_of_membership : id , level_of_membership  | visit : museum_id , num_of_ticket , visitor_id , total_spent ", 
        "query2": "select t1.name, t2.level_of_membership from visitor as t1 join visitor_level_of_membership as t2 on t1.id = t2.id where t2.level_of_membership > 4 order by t1.age desc", 
        "db_id": "museum_visit", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "level_of_membership", 
            "from", 
            "visitor", 
            "where", 
            "level_of_membership", 
            ">", 
            "value", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "name", 
            "and", 
            "membership", 
            "level", 
            "of", 
            "the", 
            "visitors", 
            "whose", 
            "membership", 
            "level", 
            "is", 
            "higher", 
            "than", 
            "4", 
            ",", 
            "and", 
            "sort", 
            "by", 
            "their", 
            "age", 
            "from", 
            "old", 
            "to", 
            "young", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "Level_of_membership", 
            "FROM", 
            "visitor", 
            "WHERE", 
            "Level_of_membership", 
            ">", 
            "4", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", 
        "schema_with_content": "museum : museum_id (3, 7, 8), open_year (\"2008\", \"2008\", \"2009\"), name (\"Place Tower Museum\", \"Plaza Museum\", \"Willow Grande Museum\"), num_of_staff (15, 62, 17) | visitor : age (27, 56, 35), id (2, 6, 2), name (\"Rafael van der Vaart\", \"Guti Midfielder\", \"Fernando Gago\"), level_of_membership (5, 2, 6) | visitor_level_of_membership : id (5, 4, 3), level_of_membership (5, 2, 6) | visit : museum_id (2, 8, 1), num_of_ticket (24, 4, 10), visitor_id (\"5\", \"3\", \"6\"), total_spent (320.14, 320.44, 209.98)", 
        "orig_query": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc", 
        "query1": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            8, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    4.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "visitor": "level_of_membership"
        }, 
        "primary_key": {
            "visitor": "id"
        }
    }, 
    {
        "schema_without_content": "museum : num_of_staff , museum_id , open_year , name  | visitor : name , level_of_membership , id , age  | visitor_name : id , name  | visit : total_spent , museum_id , num_of_ticket , visitor_id ", 
        "query2": "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by t1.age desc", 
        "db_id": "museum_visit", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "level_of_membership", 
            "from", 
            "visitor", 
            "where", 
            "level_of_membership", 
            ">", 
            "value", 
            "order", 
            "by", 
            "age", 
            "desc"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "name", 
            "and", 
            "membership", 
            "level", 
            "of", 
            "the", 
            "visitors", 
            "whose", 
            "membership", 
            "level", 
            "is", 
            "higher", 
            "than", 
            "4", 
            ",", 
            "and", 
            "sort", 
            "by", 
            "their", 
            "age", 
            "from", 
            "old", 
            "to", 
            "young", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "Level_of_membership", 
            "FROM", 
            "visitor", 
            "WHERE", 
            "Level_of_membership", 
            ">", 
            "4", 
            "ORDER", 
            "BY", 
            "age", 
            "DESC"
        ], 
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", 
        "schema_with_content": "museum : num_of_staff (15, 18, 18), museum_id (7, 1, 4), open_year (\"2012\", \"2000\", \"2008\"), name (\"Jefferson Development Museum\", \"Capital Plaza Museum\", \"Jefferson Development Museum\") | visitor : name (\"Guti Midfielder\", \"Guti Midfielder\", \"Rafael van der Vaart\"), level_of_membership (8, 5, 2), id (3, 4, 3), age (56, 28, 56) | visitor_name : id (6, 1, 4), name (\"Guti Midfielder\", \"Guti Midfielder\", \"Rafael van der Vaart\") | visit : total_spent (320.44, 20.44, 320.44), museum_id (2, 2, 4), num_of_ticket (4, 10, 4), visitor_id (\"5\", \"3\", \"6\")", 
        "orig_query": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc", 
        "query1": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            8, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    4.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "visitor": "name"
        }, 
        "primary_key": {
            "visitor": "id"
        }
    }, 
    {
        "schema_without_content": "museum : name , open_year , num_of_staff , museum_id  | museum_num_of_staff : museum_id , num_of_staff  | visitor : name , id , level_of_membership , age  | visit : visitor_id , total_spent , museum_id , num_of_ticket ", 
        "query2": "select t2.num_of_staff, t1.open_year from museum as t1 join museum_num_of_staff as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'", 
        "db_id": "museum_visit", 
        "query_toks_no_value": [
            "select", 
            "num_of_staff", 
            ",", 
            "open_year", 
            "from", 
            "museum", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "opening", 
            "year", 
            "and", 
            "staff", 
            "number", 
            "of", 
            "the", 
            "museum", 
            "named", 
            "Plaza", 
            "Museum", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Num_of_Staff", 
            ",", 
            "Open_Year", 
            "FROM", 
            "museum", 
            "WHERE", 
            "name", 
            "=", 
            "'Plaza", 
            "Museum", 
            "'"
        ], 
        "question": "What are the opening year and staff number of the museum named Plaza Museum?", 
        "schema_with_content": "museum : name (\"Plaza Museum\", \"Central City District Residential Museum\", \"Plaza Museum\"), open_year (\"2012\", \"2009\", \"2011\"), num_of_staff (12, 62, 62), museum_id (2, 5, 6) | museum_num_of_staff : museum_id (3, 4, 7), num_of_staff (12, 62, 62) | visitor : name (\"Guti Midfielder\", \"Rafael van der Vaart\", \"Rafael van der Vaart\"), id (4, 2, 1), level_of_membership (6, 5, 8), age (36, 35, 36) | visit : visitor_id (\"5\", \"3\", \"6\"), total_spent (209.98, 320.44, 320.44), museum_id (4, 4, 4), num_of_ticket (24, 3, 2)", 
        "orig_query": "select num_of_staff, open_year from museum where name = 'Plaza Museum'", 
        "query1": "select num_of_staff, open_year from museum where name = 'Plaza Museum'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            2, 
                            false
                        ], 
                        null
                    ], 
                    "\"Plaza Museum\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "museum": "num_of_staff"
        }, 
        "primary_key": {
            "museum": "museum_id"
        }
    }, 
    {
        "schema_without_content": "museum : open_year , num_of_staff , museum_id , name  | museum_open_year : museum_id , open_year  | visitor : id , age , level_of_membership , name  | visit : total_spent , museum_id , num_of_ticket , visitor_id ", 
        "query2": "select t1.num_of_staff, t2.open_year from museum as t1 join museum_open_year as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'", 
        "db_id": "museum_visit", 
        "query_toks_no_value": [
            "select", 
            "num_of_staff", 
            ",", 
            "open_year", 
            "from", 
            "museum", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "opening", 
            "year", 
            "and", 
            "staff", 
            "number", 
            "of", 
            "the", 
            "museum", 
            "named", 
            "Plaza", 
            "Museum", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Num_of_Staff", 
            ",", 
            "Open_Year", 
            "FROM", 
            "museum", 
            "WHERE", 
            "name", 
            "=", 
            "'Plaza", 
            "Museum", 
            "'"
        ], 
        "question": "What are the opening year and staff number of the museum named Plaza Museum?", 
        "schema_with_content": "museum : open_year (\"2012\", \"2008\", \"2010\"), num_of_staff (16, 25, 18), museum_id (2, 6, 2), name (\"Plaza Museum\", \"Place Tower Museum\", \"RiverPark Museum\") | museum_open_year : museum_id (4, 4, 2), open_year (\"2012\", \"2008\", \"2010\") | visitor : id (3, 1, 1), age (36, 27, 27), level_of_membership (2, 5, 1), name (\"Gonzalo Higua\u00c3\u00adn \", \"Rafael van der Vaart\", \"Gonzalo Higua\u00c3\u00adn \") | visit : total_spent (320.44, 320.44, 20.44), museum_id (2, 8, 4), num_of_ticket (24, 3, 4), visitor_id (\"5\", \"3\", \"6\")", 
        "orig_query": "select num_of_staff, open_year from museum where name = 'Plaza Museum'", 
        "query1": "select num_of_staff, open_year from museum where name = 'Plaza Museum'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            2, 
                            false
                        ], 
                        null
                    ], 
                    "\"Plaza Museum\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "museum": "open_year"
        }, 
        "primary_key": {
            "museum": "museum_id"
        }
    }, 
    {
        "schema_without_content": "players : hand , first_name , country_code , last_name , birth_date , player_id  | players_birth_date : player_id , birth_date  | matches : winner_seed , loser_id , loser_ht , loser_seed , loser_name , winner_entry , loser_rank , score \", \"6-3 6-3\", \"6-2 5-7 6-4\", loser_hand , winner_rank_points , match_num , draw_size , round , winner_hand , winner_ioc , tourney_name , best_of , tourney_level , winner_ht , winner_id , winner_age , surface , winner_rank , loser_ioc , tourney_date , loser_entry , tourney_id , year , minutes , loser_rank_points , loser_age , winner_name  | rankings : player_id , ranking_points , ranking , tours , ranking_date ", 
        "query2": "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "birth_date", 
            "from", 
            "players", 
            "where", 
            "country_code", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "first", 
            "name", 
            "and", 
            "birth", 
            "date", 
            "of", 
            "all", 
            "players", 
            "from", 
            "the", 
            "country", 
            "with", 
            "code", 
            "USA", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "birth_date", 
            "FROM", 
            "players", 
            "WHERE", 
            "country_code", 
            "=", 
            "'USA", 
            "'"
        ], 
        "question": "List the first name and birth date of all players from the country with code USA.", 
        "schema_with_content": "players : hand (\"U\", \"\", \"U\"), first_name (\"Rui Jie\", \"Vera Carina\", \"Andrea Natalia\"), country_code (\"MLT\", \"ESP\", \"EGY\"), last_name (\"Udofa\", \"Valdes\", \"Capogrosso\"), birth_date (19891011, 19941129, 19750529), player_id (218643, 204683, 216012) | players_birth_date : player_id (206427, 203882, 217181), birth_date (19891011, 19941129, 19750529) | matches : winner_seed (27, 19, 8), loser_id (201621, 201596, 201527), loser_ht (163, 168, 176), loser_seed (22, 15, 28), loser_name (\"Victoria Azarenka\", \"Sara Errani\", \"Alize Cornet\"), winner_entry (\"\"), loser_rank (21, 14, 11), score (\"6-2 7-6(5)\", \"6-3 6-3\", \"6-2 5-7 6-4\"), loser_hand (\"R\", \"L\"), winner_rank_points (1215, 1076, 1290), match_num (198, 217, 294), draw_size (4, 32, 12), round (\"F\", \"RR\", \"F\"), winner_hand (\"R\", \"L\"), winner_ioc (\"SWE\", \"USA\", \"JPN\"), tourney_name (\"Madrid\", \"Washington\", \"Us Open\"), best_of (3), tourney_level (\"G\", \"G\", \"I\"), winner_ht (163, 184, 181), winner_id (201366, 201474, 201455), winner_age (24.402464065700002, 26.611909650900003, 24.958247775500002), surface (\"Hard\", \"Clay\", \"Grass\"), winner_rank (2, 15, 53), loser_ioc (\"GER\", \"TPE\", \"JPN\"), tourney_date (20161010, 20170424, 20160718), loser_entry (\"\"), tourney_id (\"2016-1051\", \"2017-M004\", \"2017-M021\"), year (2013, 2016, 2017), minutes (100, 153, 99), loser_rank_points (3160, 1729, 2730), loser_age (27.928815879499997, 27.635865845300003, 21.5222450376), winner_name (\"Roberta Vinci\", \"Kiki Bertens\", \"Angelique Kerber\") | rankings : player_id (209949, 212011, 206405), ranking_points (2463, 846, 2302), ranking (1096, 713, 880), tours (4, 20, 7), ranking_date (19870907, 20070122, 20090119)", 
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'", 
        "query1": "select first_name, birth_date from players where country_code = 'USA'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            6, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "birth_date"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : country_code , birth_date , first_name , player_id , last_name , hand  | players_first_name : first_name , player_id  | matches : draw_size , winner_hand , winner_entry , loser_rank , loser_name , loser_ht , minutes , surface , winner_rank , winner_age , loser_ioc , winner_rank_points , tourney_id , loser_rank_points , winner_id , match_num , year , tourney_name , loser_age , loser_entry , tourney_date , tourney_level , winner_name , round , winner_seed , best_of , loser_seed , winner_ht , loser_hand , score , loser_id , winner_ioc  | rankings : ranking , ranking_date , tours , player_id , ranking_points ", 
        "query2": "select t2.first_name, t1.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "birth_date", 
            "from", 
            "players", 
            "where", 
            "country_code", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "first", 
            "name", 
            "and", 
            "birth", 
            "date", 
            "of", 
            "all", 
            "players", 
            "from", 
            "the", 
            "country", 
            "with", 
            "code", 
            "USA", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "birth_date", 
            "FROM", 
            "players", 
            "WHERE", 
            "country_code", 
            "=", 
            "'USA", 
            "'"
        ], 
        "question": "List the first name and birth date of all players from the country with code USA.", 
        "schema_with_content": "players : country_code (\"BIH\", \"UKR\", \"TOG\"), birth_date (19640206, 19991002, 19750418), first_name (\"Iulia\", \"I Hui\", \"Vilma\"), player_id (218754, 209687, 203121), last_name (\"Moss\", \"Kelley\", \"Lopez Herrera\"), hand (\"L\", \"U\", \"L\") | players_first_name : first_name (\"Iulia\", \"I Hui\", \"Vilma\"), player_id (210712, 201925, 211114) | matches : draw_size (12, 128, 8), winner_hand (\"R\", \"L\"), winner_entry (\"\"), loser_rank (32, 4, 47), loser_name (\"Mona Barthel\", \"Lucie Safarova\", \"Irina Camelia Begu\"), loser_ht (175, 181, 159), minutes (89, 131, 121), surface (\"Hard\", \"Clay\", \"Grass\"), winner_rank (34, 48, 12), winner_age (32.1478439425, 27.578370978800002, 28.9336071184), loser_ioc (\"CZE\", \"CHN\", \"NED\"), winner_rank_points (2714, 2340, 6860), tourney_id (\"2017-1097\", \"2016-580\", \"2017-M004\"), loser_rank_points (3401, 6010, 3745), winner_id (201506, 201596, 201496), match_num (215, 224, 152), year (2013, 2016, 2017), tourney_name (\"French Open\", \"Biel\", \"Prague\"), loser_age (24.626967830300003, 30.9021218344, 25.541409993200002), loser_entry (\"\"), tourney_date (20160307, 20170717, 20170320), tourney_level (\"P\", \"G\", \"G\"), winner_name (\"Elina Svitolina\", \"Simona Halep\", \"Serena Williams\"), round (\"BR\", \"SF\", \"RR\"), winner_seed (19, 14, 18), best_of (3), loser_seed (29, 32, 28), winner_ht (163, 176, 185), loser_hand (\"R\", \"L\"), score (\"6-3 4-6 6-2\", \"6-2 3-6 7-5\", \"6-2 6-4\"), loser_id (201506, 201621, 200033), winner_ioc (\"JPN\", \"UKR\", \"UKR\") | rankings : ranking (1073, 88, 122), ranking_date (19990419, 20011217, 20080630), tours (30, 13, 24), player_id (201532, 213889, 212050), ranking_points (3036, 2535, 5585)", 
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'", 
        "query1": "select first_name, birth_date from players where country_code = 'USA'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            6, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : birth_date , player_id , hand , first_name , last_name , country_code  | players_birth_date : birth_date , player_id  | matches : loser_age , winner_rank , winner_ioc , loser_hand , loser_entry , loser_ioc , best_of , surface , score \", \"6-2 6-2\", \"7-6 6-1\", loser_name , winner_name , tourney_date , loser_id , draw_size , loser_ht , year , loser_rank , minutes , winner_rank_points , winner_hand , winner_seed , loser_seed , winner_id , tourney_name , winner_ht , tourney_id , tourney_level , winner_entry , loser_rank_points , winner_age , match_num , round  | rankings : ranking_points , ranking , player_id , tours , ranking_date ", 
        "query2": "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "birth_date", 
            "from", 
            "players", 
            "where", 
            "country_code", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "first", 
            "names", 
            "and", 
            "birth", 
            "dates", 
            "of", 
            "players", 
            "from", 
            "the", 
            "USA", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "birth_date", 
            "FROM", 
            "players", 
            "WHERE", 
            "country_code", 
            "=", 
            "'USA", 
            "'"
        ], 
        "question": "What are the first names and birth dates of players from the USA?", 
        "schema_with_content": "players : birth_date (19970920, 19590120, 20000811), player_id (219728, 217995, 215585), hand (\"U\", \"U\", \"\"), first_name (\"Barbare\", \"Anouschka\", \"Yoshimi\"), last_name (\"Hendry\", \"Sprinckmoller\", \"Madenoglou\"), country_code (\"ZIM\", \"RSA\", \"MEX\") | players_birth_date : birth_date (19970920, 19590120, 20000811), player_id (213545, 201299, 211676) | matches : loser_age (31.1348391513, 27.310061601599998, 28.517453798800002), winner_rank (58, 42, 53), winner_ioc (\"ROU\", \"USA\", \"NED\"), loser_hand (\"R\", \"L\"), loser_entry (\"\"), loser_ioc (\"AUS\", \"CHN\", \"TPE\"), best_of (3), surface (\"Hard\", \"Clay\", \"Grass\"), score (\"3-6 6-2 7-6(6)\", \"6-2 6-2\", \"7-6(6) 6-1\"), loser_name (\"Lesia Tsurenko\", \"Kirsten Flipkens\", \"Kirsten Flipkens\"), winner_name (\"Sloane Stephens\", \"Madison Keys\", \"Misaki Doi\"), tourney_date (20170807, 20160523, 20160307), loser_id (201397, 201495, 201585), draw_size (32, 64, 32), loser_ht (180, 165, 169), year (2013, 2016, 2017), loser_rank (66, 27, 23), minutes (89, 87, 152), winner_rank_points (2525, 3185, 1695), winner_hand (\"R\", \"L\"), winner_seed (9, 7, 8), loser_seed (15, 11, 2), winner_id (201311, 201458, 201535), tourney_name (\"Budapest\", \"'S-Hertogenbosch\", \"Wimbledon\"), winner_ht (162, 174, 179), tourney_id (\"2016-1049\", \"2017-1079\", \"2016-1064\"), tourney_level (\"I\", \"G\", \"G\"), winner_entry (\"\"), loser_rank_points (1550, 1665, 1015), winner_age (26.4804928131, 23.8877481177, 28.5557837098), match_num (292, 202, 220), round (\"R32\", \"R16\", \"BR\") | rankings : ranking_points (5475, 445, 2040), ranking (930, 282, 1433), player_id (206305, 210192, 214587), tours (23, 2, 36), ranking_date (19940718, 19950508, 19991101)", 
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'", 
        "query1": "select first_name, birth_date from players where country_code = 'USA'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            6, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "birth_date"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : first_name , birth_date , last_name , player_id , hand , country_code  | players_first_name : first_name , player_id  | matches : tourney_id , loser_seed , match_num , winner_name , winner_id , loser_ht , best_of , score , winner_ht , winner_rank , loser_age , draw_size , winner_hand , loser_ioc , tourney_level , winner_seed , loser_entry , winner_age , surface , round , winner_entry , winner_ioc , loser_rank , tourney_date , tourney_name , loser_id , minutes , loser_rank_points , year , loser_hand , winner_rank_points , loser_name  | rankings : ranking_date , tours , player_id , ranking , ranking_points ", 
        "query2": "select t2.first_name, t1.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "birth_date", 
            "from", 
            "players", 
            "where", 
            "country_code", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "first", 
            "names", 
            "and", 
            "birth", 
            "dates", 
            "of", 
            "players", 
            "from", 
            "the", 
            "USA", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "birth_date", 
            "FROM", 
            "players", 
            "WHERE", 
            "country_code", 
            "=", 
            "'USA", 
            "'"
        ], 
        "question": "What are the first names and birth dates of players from the USA?", 
        "schema_with_content": "players : first_name (\"Gloire\", \"Callie\", \"Sai Jayalakshmy\"), birth_date (20000322, 19591031, 19790217), last_name (\"Roubickova\", \"Arafa\", \"Halbauer\"), player_id (220512, 219762, 206919), hand (\"L\", \"R\", \"\"), country_code (\"IND\", \"ESA\", \"NZL\") | players_first_name : first_name (\"Gloire\", \"Callie\", \"Sai Jayalakshmy\"), player_id (217164, 215481, 217659) | matches : tourney_id (\"2017-M016\", \"2017-1027\", \"2017-M004\"), loser_seed (5, 22, 5), match_num (219, 296, 210), winner_name (\"Barbora Zahlavova Strycova\", \"Lucie Safarova\", \"Julia Goerges\"), winner_id (201521, 201325, 201594), loser_ht (169, 170, 175), best_of (3), score (\"6-1 6-3\", \"7-5 1-6 7-5\", \"7-5 4-6 6-4\"), winner_ht (163, 168, 164), winner_rank (16, 52, 31), loser_age (28.1998631075, 22.9596167009, 31.019849418200003), draw_size (4, 32, 4), winner_hand (\"R\", \"L\"), loser_ioc (\"ROU\", \"BEL\", \"ITA\"), tourney_level (\"G\", \"W\", \"G\"), winner_seed (14, 3, 18), loser_entry (\"\"), winner_age (34.4449007529, 35.6440793977, 27.4688569473), surface (\"Hard\", \"Clay\", \"Grass\"), round (\"R16\", \"R32\", \"SF\"), winner_entry (\"\"), winner_ioc (\"JPN\", \"JPN\", \"JPN\"), loser_rank (5, 19, 4), tourney_date (20170522, 20160801, 20170501), tourney_name (\"Australian Open\", \"Brisbane\", \"Budapest\"), loser_id (201499, 201514, 201505), minutes (145, 93, 83), loser_rank_points (3440, 2750, 2560), year (2013, 2016, 2017), loser_hand (\"R\", \"L\"), winner_rank_points (1015, 3540, 1076), loser_name (\"Angelique Kerber\", \"Annika Beck\", \"Magdalena Rybarikova\") | rankings : ranking_date (19970331, 20040202, 19940321), tours (19, 27, 15), player_id (201690, 204431, 214221), ranking (1379, 552, 443), ranking_points (5430, 2845, 432)", 
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'", 
        "query1": "select first_name, birth_date from players where country_code = 'USA'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            6, 
                            false
                        ], 
                        null
                    ], 
                    "\"USA\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : hand , birth_date , player_id , country_code , first_name , last_name  | players_first_name : player_id , first_name  | matches : round , loser_seed , loser_ioc , loser_hand , loser_name , loser_rank , draw_size , winner_seed , loser_rank_points , match_num , winner_age , winner_hand , winner_ht , year , tourney_level , score \", winner_rank , tourney_name , loser_age , loser_id , winner_ioc , loser_ht , winner_id , minutes , tourney_date , best_of , winner_entry , winner_name , tourney_id , winner_rank_points , surface , loser_entry  | rankings : ranking_points , ranking_date , ranking , tours , player_id ", 
        "query2": "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "country_code", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "first", 
            "name", 
            "and", 
            "country", 
            "code", 
            "of", 
            "the", 
            "oldest", 
            "player", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "country_code", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the first name and country code of the oldest player.", 
        "schema_with_content": "players : hand (\"U\", \"R\", \"L\"), birth_date (19770406, 19811030, 19870813), player_id (218617, 219864, 206209), country_code (\"TTO\", \"SAM\", \"MRN\"), first_name (\"Ariane\", \"Stephanie Mariel\", \"Anushka\"), last_name (\"Veraverbeke\", \"Sinha\", \"Tibuleac\") | players_first_name : player_id (213899, 211492, 211208), first_name (\"Ariane\", \"Stephanie Mariel\", \"Anushka\") | matches : round (\"BR\", \"BR\", \"R32\"), loser_seed (9, 16, 16), loser_ioc (\"BEL\", \"ESP\", \"ESP\"), loser_hand (\"R\", \"L\"), loser_name (\"Venus Williams\", \"Sloane Stephens\", \"Shuai Peng\"), loser_rank (14, 1, 7), draw_size (128, 8, 32), winner_seed (28, 6, 10), loser_rank_points (2975, 3325, 2416), match_num (218, 296, 211), winner_age (28.0355920602, 37.196440794000004, 24.4407939767), winner_hand (\"R\", \"L\"), winner_ht (177, 170, 179), year (2013, 2016, 2017), tourney_level (\"W\", \"I\", \"W\"), score (\"3-6 6-3 6-4\", \"6-1 3-0 RET\", \"6-3 7-6(4)\"), winner_rank (13, 6, 13), tourney_name (\"Doha\", \"Acapulco\", \"Auckland\"), loser_age (26.340862423, 31.249828884299998, 30.9404517454), loser_id (201427, 201693, 201621), winner_ioc (\"NED\", \"NED\", \"DEN\"), loser_ht (161, 182, 170), winner_id (201596, 202429, 200033), minutes (113, 51, 98), tourney_date (20160725, 20170508, 20160321), best_of (3), winner_entry (\"\"), winner_name (\"Barbora Zahlavova Strycova\", \"Lucie Safarova\", \"Kristina Mladenovic\"), tourney_id (\"2016-1051\", \"2017-M020\", \"2017-580\"), winner_rank_points (3855, 2081, 1377), surface (\"Hard\", \"Clay\", \"Grass\"), loser_entry (\"\") | rankings : ranking_points (3241, 2465, 3251), ranking_date (20161114, 20100719, 20060724), ranking (1005, 240, 1324), tours (7, 34, 18), player_id (211524, 213928, 205824)", 
        "orig_query": "select first_name, country_code from players order by birth_date limit 1", 
        "query1": "select first_name, country_code from players order by birth_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : player_id , first_name , birth_date , country_code , last_name , hand  | players_country_code : player_id , country_code  | matches : tourney_level , round , loser_age , loser_seed , tourney_id , winner_entry , loser_rank , winner_age , winner_rank_points , winner_hand , loser_rank_points , match_num , tourney_name , best_of , winner_id , loser_ht , loser_entry , winner_name , loser_id , surface , winner_ht , winner_rank , score  6-1\", \"3-6 6-3 6-4\", year , loser_hand , winner_ioc , minutes , loser_name , winner_seed , draw_size , tourney_date , loser_ioc  | rankings : ranking_points , tours , ranking , player_id , ranking_date ", 
        "query2": "select t1.first_name, t2.country_code from players as t1 join players_country_code as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "country_code", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "first", 
            "name", 
            "and", 
            "country", 
            "code", 
            "of", 
            "the", 
            "oldest", 
            "player", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "country_code", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the first name and country code of the oldest player.", 
        "schema_with_content": "players : player_id (204139, 220650, 212532), first_name (\"Sevvy\", \"Vlada\", \"Chirashanthi\"), birth_date (19590428, 19830115, 19840401), country_code (\"HON\", \"BRU\", \"ZAM\"), last_name (\"Sidorovich\", \"Stavridou\", \"Stemmer\"), hand (\"\", \"\", \"U\") | players_country_code : player_id (204071, 203795, 203007), country_code (\"HON\", \"BRU\", \"ZAM\") | matches : tourney_level (\"P\", \"P\", \"P\"), round (\"R16\", \"F\", \"RR\"), loser_age (24.6406570842, 26.340862423, 24.4435318275), loser_seed (1, 10, 13), tourney_id (\"2016-M009\", \"2016-1050\", \"2016-M015\"), winner_entry (\"\"), loser_rank (29, 4, 35), winner_age (23.961670089000002, 34.6557152635, 23.8877481177), winner_rank_points (1343, 2915, 845), winner_hand (\"R\", \"L\"), loser_rank_points (2240, 2140, 2975), match_num (213, 213, 209), tourney_name (\"Acapulco\", \"Birmingham\", \"Sydney\"), best_of (3), winner_id (202494, 201540, 202429), loser_ht (157, 184, 178), loser_entry (\"\"), winner_name (\"Angelique Kerber\", \"Jelena Jankovic\", \"Ekaterina Makarova\"), loser_id (201662, 201425, 201616), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ht (168, 174, 182), winner_rank (22, 45, 19), score (\"6-3 6-1\", \"6-4 6-7(4) 6-1\", \"3-6 6-3 6-4\"), year (2013, 2016, 2017), loser_hand (\"R\", \"L\"), winner_ioc (\"SRB\", \"HUN\", \"SWE\"), minutes (62, 116, 63), loser_name (\"Dominika Cibulkova\", \"Annika Beck\", \"Sara Errani\"), winner_seed (16, 24, 18), draw_size (32, 32, 8), tourney_date (20170220, 20170703, 20170213), loser_ioc (\"GER\", \"FRA\", \"ESP\") | rankings : ranking_points (1205, 1187, 2065), tours (18, 11, 34), ranking (303, 621, 639), player_id (214805, 203563, 202476), ranking_date (19940801, 19971215, 20040628)", 
        "orig_query": "select first_name, country_code from players order by birth_date limit 1", 
        "query1": "select first_name, country_code from players order by birth_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "country_code"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : country_code , last_name , hand , birth_date , first_name , player_id  | players_first_name : player_id , first_name  | matches : winner_hand , winner_id , winner_ioc , winner_entry , loser_age , loser_ioc , year , loser_name , loser_rank_points , best_of , loser_entry , winner_age , tourney_id , loser_rank , winner_seed , loser_ht , score  6-4\", \"6-3 6-2\", \"7-5 2-6 6-2\", loser_id , winner_rank , surface , match_num , winner_ht , winner_rank_points , round , loser_seed , winner_name , loser_hand , draw_size , tourney_level , minutes , tourney_date , tourney_name  | rankings : ranking_points , tours , ranking_date , player_id , ranking ", 
        "query2": "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "country_code", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            "name", 
            "and", 
            "country", 
            "code", 
            "of", 
            "the", 
            "oldest", 
            "player", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "country_code", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first name and country code of the oldest player?", 
        "schema_with_content": "players : country_code (\"LIE\", \"DOM\", \"GHA\"), last_name (\"Fidler\", \"Tang\", \"Jamrichova\"), hand (\"R\", \"R\", \"U\"), birth_date (19800911, 19741020, 19921226), first_name (\"Carin\", \"Mananchaya\", \"Seika\"), player_id (202374, 217222, 215109) | players_first_name : player_id (207924, 208601, 217179), first_name (\"Carin\", \"Mananchaya\", \"Seika\") | matches : winner_hand (\"R\", \"L\"), winner_id (202428, 201311, 201518), winner_ioc (\"POL\", \"AUS\", \"SWE\"), winner_entry (\"\"), loser_age (22.3080082136, 21.472963723499998, 25.149897330599998), loser_ioc (\"NED\", \"BEL\", \"ESP\"), year (2013, 2016, 2017), loser_name (\"Misaki Doi\", \"Stefanie Voegele\", \"Agnieszka Radwanska\"), loser_rank_points (4776, 8000, 4425), best_of (3), loser_entry (\"\"), winner_age (31.3073237509, 32.9719370294, 31.3073237509), tourney_id (\"2017-540\", \"2017-M035\", \"2017-0718\"), loser_rank (29, 81, 8), winner_seed (12, 12, 9), loser_ht (181, 185, 173), score (\"6-1 6-7(2) 6-4\", \"6-3 6-2\", \"7-5 2-6 6-2\"), loser_id (201595, 201311, 201662), winner_rank (26, 22, 61), surface (\"Hard\", \"Clay\", \"Grass\"), match_num (223, 222, 163), winner_ht (162, 172, 159), winner_rank_points (1715, 1037, 2714), round (\"F\", \"R32\", \"QF\"), loser_seed (22, 9, 10), winner_name (\"Angelique Kerber\", \"Victoria Azarenka\", \"Petra Kvitova\"), loser_hand (\"R\", \"L\"), draw_size (64, 12, 8), tourney_level (\"W\", \"P\", \"I\"), minutes (168, 148, 80), tourney_date (20161031, 20170501, 20160425), tourney_name (\"Singapore\", \"Beijing\", \"Madrid\") | rankings : ranking_points (5005, 324, 916), tours (34, 23, 23), ranking_date (20170109, 19980629, 20061113), player_id (206194, 210593, 203454), ranking (1339, 1227, 1223)", 
        "orig_query": "select first_name, country_code from players order by birth_date limit 1", 
        "query1": "select first_name, country_code from players order by birth_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : first_name , birth_date , hand , country_code , player_id , last_name  | players_country_code : country_code , player_id  | matches : surface , winner_entry , winner_hand , loser_age , tourney_date , year , score  6-2 8-6\", loser_ioc , draw_size , winner_seed , tourney_name , loser_name , round , minutes , loser_rank , winner_rank , winner_rank_points , winner_ioc , winner_ht , match_num , loser_hand , loser_entry , winner_id , loser_id , tourney_id , winner_name , loser_ht , loser_seed , winner_age , loser_rank_points , best_of , tourney_level  | rankings : ranking_date , player_id , ranking_points , ranking , tours ", 
        "query2": "select t1.first_name, t2.country_code from players as t1 join players_country_code as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "country_code", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            "name", 
            "and", 
            "country", 
            "code", 
            "of", 
            "the", 
            "oldest", 
            "player", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "country_code", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first name and country code of the oldest player?", 
        "schema_with_content": "players : first_name (\"Eun Young\", \"Aarthi\", \"Cho Won\"), birth_date (19710423, 19760424, 19870909), hand (\"\", \"L\", \"\"), country_code (\"MKD\", \"SLO\", \"REU\"), player_id (205804, 204954, 219366), last_name (\"De La Capilla\", \"Knickerbocker\", \"Tsadari\") | players_country_code : country_code (\"MKD\", \"SLO\", \"REU\"), player_id (209905, 208792, 201937) | matches : surface (\"Hard\", \"Clay\", \"Grass\"), winner_entry (\"\"), winner_hand (\"R\", \"L\"), loser_age (21.943874058899997, 26.078028747399998, 24.594113620799998), tourney_date (20160404, 20170828, 20160613), year (2013, 2016, 2017), score (\"3-6 6-1 6-4\", \"4-6 6-3 1-0 RET\", \"6-7(1) 6-2 8-6\"), loser_ioc (\"TPE\", \"ROU\", \"HUN\"), draw_size (8, 64, 12), winner_seed (13, 30, 10), tourney_name (\"Washington\", \"Eastbourne\", \"Montreal\"), loser_name (\"Kiki Bertens\", \"Venus Williams\", \"Timea Babos\"), round (\"BR\", \"R32\", \"RR\"), minutes (88, 111, 70), loser_rank (13, 21, 48), winner_rank (58, 2, 5), winner_rank_points (3135, 7050, 3060), winner_ioc (\"UKR\", \"ESP\", \"CZE\"), winner_ht (179, 179, 177), match_num (288, 299, 212), loser_hand (\"R\", \"L\"), loser_entry (\"\"), winner_id (201585, 201518, 201535), loser_id (201517, 201512, 201662), tourney_id (\"2016-520\", \"2017-1052\", \"2016-1064\"), winner_name (\"Jelena Jankovic\", \"Sloane Stephens\", \"Na Li\"), loser_ht (159, 162, 184), loser_seed (28, 25, 23), winner_age (27.2005475702, 25.7275838467, 36.027378507899996), loser_rank_points (4860, 1177, 5860), best_of (3), tourney_level (\"P\", \"W\", \"P\") | rankings : ranking_date (19920309, 19961202, 20070326), player_id (214804, 209869, 211408), ranking_points (2935, 4080, 4847), ranking (709, 896, 682), tours (33, 33, 4)", 
        "orig_query": "select first_name, country_code from players order by birth_date limit 1", 
        "query1": "select first_name, country_code from players order by birth_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "country_code"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : player_id , last_name , first_name , hand , birth_date , country_code  | players_first_name : first_name , player_id  | matches : winner_age , winner_entry , winner_rank_points , loser_ht , winner_name , winner_hand , winner_ioc , winner_rank , minutes , winner_id , tourney_id , surface , loser_rank , loser_seed , loser_rank_points , loser_ioc , loser_id , tourney_date , draw_size , round , winner_ht , loser_entry , tourney_name , year , best_of , winner_seed , loser_hand , tourney_level , score  1-6 6-2\", \"6-4 4-6 6-2\", \"7-5 6-0\", match_num , loser_name , loser_age  | rankings : tours , ranking , player_id , ranking_points , ranking_date ", 
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "first", 
            "and", 
            "last", 
            "name", 
            "of", 
            "all", 
            "players", 
            "in", 
            "the", 
            "order", 
            "of", 
            "birth", 
            "date", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "List the first and last name of all players in the order of birth date.", 
        "schema_with_content": "players : player_id (202034, 201756, 217387), last_name (\"Chidley\", \"Emmett\", \"Ciuca\"), first_name (\"Rui Jie\", \"Maura\", \"Janisse\"), hand (\"R\", \"R\", \"L\"), birth_date (19730516, 19980419, 19790719), country_code (\"SYR\", \"FIJ\", \"QAT\") | players_first_name : first_name (\"Rui Jie\", \"Maura\", \"Janisse\"), player_id (213213, 203649, 216115) | matches : winner_age (26.9596167009, 36.755646817199995, 22.3080082136), winner_entry (\"\"), winner_rank_points (3390, 1180, 1658), loser_ht (164, 161, 173), winner_name (\"Serena Williams\", \"Alize Cornet\", \"Roberta Vinci\"), winner_hand (\"R\", \"L\"), winner_ioc (\"ESP\", \"UKR\", \"FRA\"), winner_rank (2, 23, 52), minutes (73, 122, 108), winner_id (201419, 201493, 201521), tourney_id (\"2017-1039\", \"2016-1049\", \"2017-1039\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_rank (26, 3, 5), loser_seed (15, 2, 20), loser_rank_points (4190, 2900, 3010), loser_ioc (\"ITA\", \"CHN\", \"JPN\"), loser_id (201506, 201615, 201444), tourney_date (20160725, 20160801, 20160111), draw_size (4, 128, 32), round (\"QF\", \"RR\", \"F\"), winner_ht (170, 161, 178), loser_entry (\"\"), tourney_name (\"Moscow\", \"Bastad\", \"Brisbane\"), year (2013, 2016, 2017), best_of (3), winner_seed (5, 19, 11), loser_hand (\"R\", \"L\"), tourney_level (\"P\", \"P\", \"I\"), score (\"7-6(1) 1-6 6-2\", \"6-4 4-6 6-2\", \"7-5 6-0\"), match_num (274, 163, 300), loser_name (\"Misaki Doi\", \"Petra Kvitova\", \"Camila Giorgi\"), loser_age (23.227926078000003, 28.5448323066, 31.920602327199997) | rankings : tours (8, 40, 11), ranking (283, 609, 1073), player_id (206363, 201557, 206098), ranking_points (317, 719, 2965), ranking_date (20120402, 20080519, 20090504)", 
        "orig_query": "select first_name, last_name from players order by birth_date", 
        "query1": "select first_name, last_name from players order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : last_name , birth_date , hand , country_code , player_id , first_name  | players_last_name : last_name , player_id  | matches : loser_rank_points , loser_ht , winner_name , loser_age , year , winner_id , winner_rank , match_num , loser_hand , winner_entry , round , winner_seed , winner_ioc , winner_hand , best_of , winner_ht , loser_seed , loser_id , score  6-1 6-2\", \"6-2 3-6 6-2\", \"6-3 6-7 7-5\", winner_rank_points , tourney_date , draw_size , loser_ioc , tourney_level , loser_name , winner_age , tourney_name , minutes , tourney_id , loser_rank , loser_entry , surface  | rankings : tours , ranking_points , ranking_date , ranking , player_id ", 
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "first", 
            "and", 
            "last", 
            "name", 
            "of", 
            "all", 
            "players", 
            "in", 
            "the", 
            "order", 
            "of", 
            "birth", 
            "date", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "List the first and last name of all players in the order of birth date.", 
        "schema_with_content": "players : last_name (\"Astete\", \"Janis\", \"Zovincova\"), birth_date (19551017, 19900828, 19851112), hand (\"R\", \"L\", \"U\"), country_code (\"GRE\", \"YUG\", \"ANT\"), player_id (209584, 208451, 208649), first_name (\"Ya Ying\", \"Agata Jadwiga\", \"Lilija\") | players_last_name : last_name (\"Astete\", \"Janis\", \"Zovincova\"), player_id (202942, 207122, 214287) | matches : loser_rank_points (2745, 1245, 1150), loser_ht (185, 159, 172), winner_name (\"Angelique Kerber\", \"Yanina Wickmayer\", \"Julia Goerges\"), loser_age (28.421629021199998, 23.227926078000003, 23.638603696100002), year (2013, 2016, 2017), winner_id (201593, 201499, 201458), winner_rank (25, 48, 3), match_num (283, 264, 202), loser_hand (\"R\", \"L\"), winner_entry (\"\"), round (\"SF\", \"F\", \"BR\"), winner_seed (24, 18, 1), winner_ioc (\"DEN\", \"SRB\", \"GER\"), winner_hand (\"R\", \"L\"), best_of (3), winner_ht (179, 181, 176), loser_seed (6, 27, 14), loser_id (200748, 202470, 201585), score (\"6-7(3) 6-1 6-2\", \"6-2 3-6 6-2\", \"6-3 6-7(0) 7-5\"), winner_rank_points (2525, 7340, 2920), tourney_date (20170626, 20160222, 20160613), draw_size (4, 128, 64), loser_ioc (\"POL\", \"ROU\", \"TPE\"), tourney_level (\"P\", \"I\", \"G\"), loser_name (\"Julia Goerges\", \"Dominika Cibulkova\", \"Serena Williams\"), winner_age (26.4777549624, 27.947980835, 36.027378507899996), tourney_name (\"Bastad\", \"Florianopolis\", \"WTA Championships\"), minutes (67, 135, 94), tourney_id (\"2017-M009\", \"2016-M020\", \"2016-0602\"), loser_rank (13, 112, 24), loser_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\") | rankings : tours (27, 20, 26), ranking_points (1233, 606, 5440), ranking_date (19980309, 20100101, 20010604), ranking (1489, 855, 155), player_id (213672, 202641, 209866)", 
        "orig_query": "select first_name, last_name from players order by birth_date", 
        "query1": "select first_name, last_name from players order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "last_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : last_name , country_code , player_id , first_name , hand , birth_date  | players_first_name : player_id , first_name  | matches : winner_name , score  6-1 6-2\", \"7-6 6-2\", \"6-4 7-6\", loser_id , round , winner_hand , loser_ht , tourney_level , loser_rank_points , loser_entry , loser_name , winner_seed , year , minutes , tourney_name , winner_rank_points , surface , tourney_id , winner_id , winner_rank , loser_ioc , winner_ioc , tourney_date , loser_age , winner_age , draw_size , winner_entry , winner_ht , loser_hand , match_num , best_of , loser_rank , loser_seed  | rankings : player_id , ranking_date , tours , ranking_points , ranking ", 
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "full", 
            "names", 
            "of", 
            "all", 
            "players", 
            ",", 
            "sorted", 
            "by", 
            "birth", 
            "date", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "What are the full names of all players, sorted by birth date?", 
        "schema_with_content": "players : last_name (\"Niculaita\", \"Bazzano\", \"Mun\"), country_code (\"THA\", \"LES\", \"BEN\"), player_id (220137, 218302, 217515), first_name (\"Page\", \"Su Jeong\", \"Hee Jin\"), hand (\"U\", \"R\", \"R\"), birth_date (19930403, 19910502, 19810825) | players_first_name : player_id (218694, 205134, 204191), first_name (\"Page\", \"Su Jeong\", \"Hee Jin\") | matches : winner_name (\"Camila Giorgi\", \"Venus Williams\", \"Samantha Stosur\"), score (\"6-7(3) 6-1 6-2\", \"7-6(4) 6-2\", \"6-4 7-6(6)\"), loser_id (200748, 201458, 201662), round (\"R32\", \"RR\", \"SF\"), winner_hand (\"R\", \"L\"), loser_ht (164, 170, 159), tourney_level (\"W\", \"I\", \"G\"), loser_rank_points (7035, 3175, 6940), loser_entry (\"\"), loser_name (\"Stefanie Voegele\", \"Svetlana Kuznetsova\", \"Mona Barthel\"), winner_seed (2, 20, 9), year (2013, 2016, 2017), minutes (134, 134, 132), tourney_name (\"Roland Garros\", \"Kaohsiung\", \"Charleston\"), winner_rank_points (2451, 5196, 8330), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_id (\"2016-M014\", \"2016-0710\", \"2016-0602\"), winner_id (201540, 201594, 201593), winner_rank (61, 30, 7), loser_ioc (\"JPN\", \"SRB\", \"USA\"), winner_ioc (\"DEN\", \"FRA\", \"SWE\"), tourney_date (20170731, 20170821, 20170130), loser_age (34.8665297741, 22.4503764545, 27.832991101999998), winner_age (26.8911704312, 34.6557152635, 22.058863791900002), draw_size (64, 4, 4), winner_entry (\"\"), winner_ht (161, 175, 183), loser_hand (\"R\", \"L\"), match_num (296, 223, 297), best_of (3), loser_rank (22, 40, 47), loser_seed (14, 30, 17) | rankings : player_id (201474, 211396, 210375), ranking_date (20021230, 19900326, 20130708), tours (23, 9, 22), ranking_points (2089, 3780, 2957), ranking (942, 817, 1073)", 
        "orig_query": "select first_name, last_name from players order by birth_date", 
        "query1": "select first_name, last_name from players order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : country_code , birth_date , hand , player_id , last_name , first_name  | players_last_name : last_name , player_id  | matches : winner_hand , loser_hand , draw_size , loser_seed , surface , winner_ioc , tourney_id , loser_entry , loser_ioc , winner_rank_points , winner_id , tourney_level , match_num , loser_ht , loser_id , winner_seed , round , year , tourney_name , winner_age , tourney_date , winner_name , loser_rank_points , score  7-5 6-4\", \"7-5 6-0\", \"6-1 6-4\", loser_name , loser_age , loser_rank , winner_rank , best_of , winner_ht , minutes , winner_entry  | rankings : tours , ranking_points , ranking , player_id , ranking_date ", 
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "full", 
            "names", 
            "of", 
            "all", 
            "players", 
            ",", 
            "sorted", 
            "by", 
            "birth", 
            "date", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "What are the full names of all players, sorted by birth date?", 
        "schema_with_content": "players : country_code (\"MEX\", \"SRB\", \"DEN\"), birth_date (19880921, 19970906, 19781111), hand (\"L\", \"R\", \"\"), player_id (201529, 215479, 220248), last_name (\"Hogenkamp\", \"Ramirez\", \"Aybar\"), first_name (\"Erin Carol\", \"Jeong Ok\", \"Aylin\") | players_last_name : last_name (\"Hogenkamp\", \"Ramirez\", \"Aybar\"), player_id (212069, 215337, 213452) | matches : winner_hand (\"R\", \"L\"), loser_hand (\"R\", \"L\"), draw_size (64, 32, 4), loser_seed (8, 18, 9), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ioc (\"DEN\", \"CHN\", \"ROU\"), tourney_id (\"2016-1051\", \"2017-M020\", \"2017-0703\"), loser_entry (\"\"), loser_ioc (\"ROU\", \"UKR\", \"CZE\"), winner_rank_points (2695, 1715, 2900), winner_id (201518, 201662, 201504), tourney_level (\"I\", \"I\", \"W\"), match_num (295, 213, 225), loser_ht (177, 162, 157), loser_id (201520, 202494, 200748), winner_seed (28, 30, 3), round (\"F\", \"QF\", \"QF\"), year (2013, 2016, 2017), tourney_name (\"Bucharest\", \"Stanford\", \"Katowice\"), winner_age (28.574948665300003, 25.541409993200002, 24.9993155373), tourney_date (20170320, 20161003, 20170522), winner_name (\"Irina Camelia Begu\", \"Misaki Doi\", \"Angelique Kerber\"), loser_rank_points (2730, 2120, 2238), score (\"6-7(6) 7-5 6-4\", \"7-5 6-0\", \"6-1 6-4\"), loser_name (\"Timea Babos\", \"Venus Williams\", \"Barbora Zahlavova Strycova\"), loser_age (27.0472279261, 24.594113620799998, 33.4893908282), loser_rank (39, 14, 9), winner_rank (50, 53, 52), best_of (3), winner_ht (181, 180, 174), minutes (121, 97, 58), winner_entry (\"\") | rankings : tours (20, 4, 36), ranking_points (1680, 599, 3285), ranking (835, 364, 1261), player_id (203558, 211664, 215354), ranking_date (19880822, 20120604, 19981026)", 
        "orig_query": "select first_name, last_name from players order by birth_date", 
        "query1": "select first_name, last_name from players order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "last_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : last_name , birth_date , hand , first_name , country_code , player_id  | players_first_name : player_id , first_name  | matches : loser_age , best_of , winner_entry , loser_rank_points , draw_size , tourney_name , loser_rank , winner_age , winner_hand , loser_hand , winner_seed , winner_id , winner_rank , loser_id , tourney_level , winner_ioc , loser_seed , loser_ioc , minutes , year , winner_ht , tourney_id , round , winner_name , loser_name , match_num , loser_ht , score \", \"6-4 6-0\", \"6-3 7-6\", surface , loser_entry , winner_rank_points , tourney_date  | rankings : ranking_date , ranking , tours , ranking_points , player_id ", 
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "where", 
            "hand", 
            "=", 
            "value", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "first", 
            "and", 
            "last", 
            "name", 
            "of", 
            "all", 
            "players", 
            "who", 
            "are", 
            "left", 
            "/", 
            "L", 
            "hand", 
            "in", 
            "the", 
            "order", 
            "of", 
            "birth", 
            "date", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "WHERE", 
            "hand", 
            "=", 
            "'L", 
            "'", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.", 
        "schema_with_content": "players : last_name (\"Pienaar\", \"Siegler\", \"Osorio Pena\"), birth_date (20010601, 19870404, 19450925), hand (\"U\", \"\", \"R\"), first_name (\"Mylene\", \"Sayuri\", \"Yun Ling\"), country_code (\"NED\", \"VEN\", \"ROU\"), player_id (215995, 214726, 219682) | players_first_name : player_id (215397, 215554, 213958), first_name (\"Mylene\", \"Sayuri\", \"Yun Ling\") | matches : loser_age (30.7323750856, 23.2717316906, 30.250513347), best_of (3), winner_entry (\"\"), loser_rank_points (1840, 5830, 1960), draw_size (8, 32, 4), tourney_name (\"Madrid\", \"Bastad\", \"Miami\"), loser_rank (14, 18, 37), winner_age (27.430527036300003, 24.4407939767, 26.554414784400002), winner_hand (\"R\", \"L\"), loser_hand (\"R\", \"L\"), winner_seed (12, 19, 1), winner_id (200033, 201596, 202429), winner_rank (44, 82, 56), loser_id (201506, 201662, 201518), tourney_level (\"W\", \"G\", \"G\"), winner_ioc (\"HUN\", \"UKR\", \"SWE\"), loser_seed (26, 3, 15), loser_ioc (\"SRB\", \"RUS\", \"AUS\"), minutes (72, 60, 161), year (2013, 2016, 2017), winner_ht (170, 163, 170), tourney_id (\"2016-580\", \"2016-M015\", \"2016-1048\"), round (\"R32\", \"SF\", \"BR\"), winner_name (\"Sloane Stephens\", \"Serena Williams\", \"Camila Giorgi\"), loser_name (\"Petra Kvitova\", \"Samantha Stosur\", \"Coco Vandeweghe\"), match_num (298, 213, 209), loser_ht (177, 164, 163), score (\"4-6 6-4 7-6(3)\", \"6-4 6-0\", \"6-3 7-6(4)\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_entry (\"\"), winner_rank_points (845, 3401, 1658), tourney_date (20161017, 20170731, 20160620) | rankings : ranking_date (20110516, 19970519, 20021216), ranking (128, 131, 202), tours (24, 3, 40), ranking_points (2071, 4996, 2955), player_id (205964, 214724, 206292)", 
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"L\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : country_code , last_name , player_id , first_name , birth_date , hand  | players_last_name : player_id , last_name  | matches : winner_age , loser_seed , tourney_name , surface , match_num , winner_rank , loser_id , tourney_date , winner_ht , best_of , loser_age , loser_hand , tourney_level , winner_rank_points , winner_id , loser_rank , winner_name , minutes , loser_rank_points , draw_size , loser_ht , winner_seed , loser_name , round , winner_hand , winner_ioc , winner_entry , tourney_id , loser_entry , year , loser_ioc , score  6-4 6-3\" | rankings : ranking_date , ranking , tours , ranking_points , player_id ", 
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "where", 
            "hand", 
            "=", 
            "value", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "first", 
            "and", 
            "last", 
            "name", 
            "of", 
            "all", 
            "players", 
            "who", 
            "are", 
            "left", 
            "/", 
            "L", 
            "hand", 
            "in", 
            "the", 
            "order", 
            "of", 
            "birth", 
            "date", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "WHERE", 
            "hand", 
            "=", 
            "'L", 
            "'", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.", 
        "schema_with_content": "players : country_code (\"TJK\", \"HAI\", \"RSA\"), last_name (\"Kostikova\", \"Solorio\", \"Scheiflinger\"), player_id (207355, 200746, 219460), first_name (\"Bo Ra\", \"Gill\", \"Zina\"), birth_date (19480612, 19800702, 19881228), hand (\"R\", \"R\", \"\") | players_last_name : player_id (210030, 209683, 215398), last_name (\"Kostikova\", \"Solorio\", \"Scheiflinger\") | matches : winner_age (27.463381245700003, 36.027378507899996, 32.1478439425), loser_seed (23, 18, 8), tourney_name (\"Biel\", \"Istanbul\", \"Roland Garros\"), surface (\"Hard\", \"Clay\", \"Grass\"), match_num (148, 254, 283), winner_rank (35, 8, 33), loser_id (201320, 201514, 201493), tourney_date (20160208, 20160307, 20160822), winner_ht (173, 174, 184), best_of (3), loser_age (31.8631074606, 23.4387405886, 27.310061601599998), loser_hand (\"R\", \"L\"), tourney_level (\"P\", \"W\", \"P\"), winner_rank_points (4236, 2480, 5151), winner_id (201419, 201535, 201427), loser_rank (3, 10, 4), winner_name (\"Camila Giorgi\", \"Roberta Vinci\", \"Kristina Mladenovic\"), minutes (154, 0, 184), loser_rank_points (2120, 2094, 1577), draw_size (128, 12, 64), loser_ht (177, 180, 168), winner_seed (14, 12, 14), loser_name (\"Anastasia Pavlyuchenkova\", \"Sorana Cirstea\", \"Misaki Doi\"), round (\"QF\", \"BR\", \"QF\"), winner_hand (\"R\", \"L\"), winner_ioc (\"SVK\", \"NED\", \"SRB\"), winner_entry (\"\"), tourney_id (\"2017-1039\", \"2016-M004\", \"2016-M009\"), loser_entry (\"\"), year (2013, 2016, 2017), loser_ioc (\"RUS\", \"FRA\", \"AUS\"), score (\"6-4 1-6 6-4\", \"6-1 6-3\", \"6-7(3) 6-4 6-3\") | rankings : ranking_date (20030203, 20060703, 19970331), ranking (730, 587, 642), tours (16, 33, 1), ranking_points (10, 1850, 2604), player_id (201655, 202445, 211586)", 
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"L\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "last_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : first_name , hand , player_id , country_code , last_name , birth_date  | players_first_name : first_name , player_id  | matches : loser_hand , tourney_level , best_of , loser_entry , match_num , loser_name , score , winner_age , loser_seed , winner_name , tourney_name , winner_ioc , loser_ht , surface , winner_id , winner_seed , loser_rank_points , winner_entry , winner_hand , year , loser_id , winner_rank , tourney_date , tourney_id , round , winner_ht , draw_size , winner_rank_points , loser_age , minutes , loser_rank , loser_ioc  | rankings : player_id , ranking_date , tours , ranking_points , ranking ", 
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "where", 
            "hand", 
            "=", 
            "value", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "full", 
            "names", 
            "of", 
            "all", 
            "left", 
            "handed", 
            "players", 
            ",", 
            "in", 
            "order", 
            "of", 
            "birth", 
            "date", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "WHERE", 
            "hand", 
            "=", 
            "'L", 
            "'", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "What are the full names of all left handed players, in order of birth date?", 
        "schema_with_content": "players : first_name (\"Maryla\", \"Karima\", \"Ema\"), hand (\"R\", \"U\", \"\"), player_id (201396, 203978, 218783), country_code (\"BDI\", \"NOR\", \"GBR\"), last_name (\"Sanford\", \"Mothes Jobkel\", \"Caetano\"), birth_date (19960604, 19370923, 19900108) | players_first_name : first_name (\"Maryla\", \"Karima\", \"Ema\"), player_id (202432, 203998, 213997) | matches : loser_hand (\"R\", \"L\"), tourney_level (\"W\", \"G\", \"P\"), best_of (3), loser_entry (\"\"), match_num (285, 295, 291), loser_name (\"Jelena Jankovic\", \"Dominika Cibulkova\", \"Christina Mchale\"), score (\"6-0 3-6 6-2\", \"4-6 6-4 6-3\", \"6-0 3-6 6-2\"), winner_age (26.6529774127, 28.6105407255, 31.6495550992), loser_seed (13, 29, 9), winner_name (\"Samantha Stosur\", \"Simona Halep\", \"Roberta Vinci\"), tourney_name (\"Prague\", \"French Open\", \"Kaohsiung\"), winner_ioc (\"ITA\", \"CZE\", \"CHN\"), loser_ht (182, 177, 183), surface (\"Hard\", \"Clay\", \"Grass\"), winner_id (201596, 201325, 201474), winner_seed (30, 21, 12), loser_rank_points (1770, 1870, 2480), winner_entry (\"\"), winner_hand (\"R\", \"L\"), year (2013, 2016, 2017), loser_id (200033, 202470, 201311), winner_rank (6, 7, 5), tourney_date (20160509, 20170508, 20160418), tourney_id (\"2016-M035\", \"2016-1086\", \"2016-1074\"), round (\"F\", \"F\", \"RR\"), winner_ht (170, 172, 172), draw_size (12, 4, 32), winner_rank_points (1302, 3091, 3637), loser_age (34.4449007529, 25.842573579699998, 28.5448323066), minutes (93, 77, 86), loser_rank (11, 22, 24), loser_ioc (\"TPE\", \"RUS\", \"SVK\") | rankings : player_id (215234, 214821, 205977), ranking_date (19900910, 20000626, 20010507), tours (11, 19, 20), ranking_points (1039, 2117, 120), ranking (837, 833, 1419)", 
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"L\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "first_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "players : first_name , hand , last_name , country_code , birth_date , player_id  | players_last_name : last_name , player_id  | matches : loser_name , winner_rank_points , loser_rank_points , loser_ioc , winner_hand , loser_hand , winner_age , tourney_id , winner_entry , match_num , loser_rank , loser_id , winner_ioc , tourney_date , loser_seed , best_of , loser_ht , draw_size , winner_id , winner_seed , round , tourney_name , score  6-2 8-6\", minutes , winner_rank , winner_name , year , loser_age , surface , winner_ht , loser_entry , tourney_level  | rankings : ranking_points , player_id , ranking , tours , ranking_date ", 
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date", 
        "db_id": "wta_1", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            "from", 
            "players", 
            "where", 
            "hand", 
            "=", 
            "value", 
            "order", 
            "by", 
            "birth_date"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "full", 
            "names", 
            "of", 
            "all", 
            "left", 
            "handed", 
            "players", 
            ",", 
            "in", 
            "order", 
            "of", 
            "birth", 
            "date", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            "FROM", 
            "players", 
            "WHERE", 
            "hand", 
            "=", 
            "'L", 
            "'", 
            "ORDER", 
            "BY", 
            "birth_date"
        ], 
        "question": "What are the full names of all left handed players, in order of birth date?", 
        "schema_with_content": "players : first_name (\"Ayano\", \"Yeon Hee\", \"Halla\"), hand (\"R\", \"\", \"R\"), last_name (\"Suetrong\", \"Weiland\", \"Stocker Jones\"), country_code (\"FRA\", \"CMR\", \"URU\"), birth_date (19880731, 19860214, 19821105), player_id (201688, 207478, 215753) | players_last_name : last_name (\"Suetrong\", \"Weiland\", \"Stocker Jones\"), player_id (217119, 215901, 212810) | matches : loser_name (\"Julia Goerges\", \"Jelena Jankovic\", \"Kiki Bertens\"), winner_rank_points (1620, 5850, 1960), loser_rank_points (2045, 2146, 3285), loser_ioc (\"UKR\", \"NED\", \"ROU\"), winner_hand (\"R\", \"L\"), loser_hand (\"R\", \"L\"), winner_age (24.9965776865, 26.6502395619, 34.6173853525), tourney_id (\"2016-0804\", \"2017-M016\", \"2016-580\"), winner_entry (\"\"), match_num (280, 210, 264), loser_rank (25, 61, 61), loser_id (201455, 201539, 201458), winner_ioc (\"ITA\", \"CZE\", \"ROU\"), tourney_date (20161003, 20160627, 20160222), loser_seed (18, 29, 8), best_of (3), loser_ht (181, 168, 180), draw_size (8, 64, 128), winner_id (201693, 201596, 200033), winner_seed (28, 19, 11), round (\"RR\", \"SF\", \"SF\"), tourney_name (\"Olympics\", \"Birmingham\", \"Birmingham\"), score (\"6-2 4-6 6-3\", \"6-3 3-6 6-3 \", \"6-7(1) 6-2 8-6\"), minutes (152, 153, 68), winner_rank (58, 44, 52), winner_name (\"Serena Williams\", \"Karolina Pliskova\", \"Alize Cornet\"), year (2013, 2016, 2017), loser_age (36.1998631075, 31.9370294319, 29.8480492813), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ht (184, 182, 178), loser_entry (\"\"), tourney_level (\"P\", \"W\", \"I\") | rankings : ranking_points (4221, 6200, 4337), player_id (201653, 206289, 203284), ranking (462, 653, 1350), tours (25, 26, 22), ranking_date (20050919, 19930830, 20000214)", 
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            5, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"L\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "players": "last_name"
        }, 
        "primary_key": {
            "players": "player_id"
        }
    }, 
    {
        "schema_without_content": "battle : id , result , date , name , bulgarian_commander , latin_commander  | ship : location , id , disposition_of_ship , tonnage , ship_type , name , lost_in_battle  | ship_tonnage : id , tonnage  | death : note , caused_by_ship_id , injured , killed , id ", 
        "query2": "select t1.name, t2.tonnage from ship as t1 join ship_tonnage as t2 on t1.id = t2.id order by t1.name desc", 
        "db_id": "battle_death", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "tonnage", 
            "from", 
            "ship", 
            "order", 
            "by", 
            "name", 
            "desc"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "name", 
            "and", 
            "tonnage", 
            "ordered", 
            "by", 
            "in", 
            "descending", 
            "alphaetical", 
            "order", 
            "for", 
            "the", 
            "names", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "tonnage", 
            "FROM", 
            "ship", 
            "ORDER", 
            "BY", 
            "name", 
            "DESC"
        ], 
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", 
        "schema_with_content": "battle : id (7, 8, 7), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), date (\"31 January 1206\", \"4 September 1207\", \"4 September 1207\"), name (\"Battle of Rusion\", \"Siege of Constantinople\", \"Siege of Constantinople\"), bulgarian_commander (\"Unknown\", \"Boril\", \"Kaloyan\"), latin_commander (\"Baldwin I\", \"Thierry de Termond\", \"Henry I\") | ship : location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), id (6, 3, 3), disposition_of_ship (\"Captured\", \"Captured\", \"Wrecked\"), tonnage (\"t\", \"391\", \"225\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"Mary\", \"HMS Atalanta\", \"Bacchus\"), lost_in_battle (4, 6, 4) | ship_tonnage : id (6, 1, 4), tonnage (\"t\", \"391\", \"225\") | death : note (\"Bokaro, Jharkhand\", \"Erraboru, Chhattisgarh\", \"Bastar, Chattisgarh\"), caused_by_ship_id (4, 5, 6), injured (0, 9, 5), killed (4, 29, 2), id (3, 10, 5)", 
        "orig_query": "select name, tonnage from ship order by name desc", 
        "query1": "select name, tonnage from ship order by name desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "ship": "tonnage"
        }, 
        "primary_key": {
            "ship": "id"
        }
    }, 
    {
        "schema_without_content": "battle : result , id , name , date , bulgarian_commander , latin_commander  | ship : lost_in_battle , name , ship_type , id , tonnage , disposition_of_ship , location  | ship_name : name , id  | death : injured , id , note , caused_by_ship_id , killed ", 
        "query2": "select t2.name, t1.tonnage from ship as t1 join ship_name as t2 on t1.id = t2.id order by t2.name desc", 
        "db_id": "battle_death", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "tonnage", 
            "from", 
            "ship", 
            "order", 
            "by", 
            "name", 
            "desc"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "name", 
            "and", 
            "tonnage", 
            "ordered", 
            "by", 
            "in", 
            "descending", 
            "alphaetical", 
            "order", 
            "for", 
            "the", 
            "names", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "tonnage", 
            "FROM", 
            "ship", 
            "ORDER", 
            "BY", 
            "name", 
            "DESC"
        ], 
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", 
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), id (8, 6, 1), name (\"Siege of Constantinople\", \"Battle of Messinopolis\", \"Battle of Rodosto\"), date (\"June 1205\", \"1235\", \"June 1205\"), bulgarian_commander (\"Boril\", \"Ivan Asen II\", \"Unknown\"), latin_commander (\"Boniface of Montferrat\", \"Henry I\", \"John of Brienne\") | ship : lost_in_battle (7, 6, 7), name (\"Bon Accord\", \"Mary\", \"HMS Avon\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), id (4, 1, 1), tonnage (\"t\", \"391\", \"225\"), disposition_of_ship (\"Captured\", \"Wrecked\", \"Wrecked\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\") | ship_name : name (\"Bon Accord\", \"Mary\", \"HMS Avon\"), id (7, 5, 3) | death : injured (0, 9, 5), id (13, 9, 4), note (\"Sundargarh, Odisha\", \"Erraboru, Chhattisgarh\", \"WestMidnapore, West Bengal\"), caused_by_ship_id (6, 4, 4), killed (2, 14, 3)", 
        "orig_query": "select name, tonnage from ship order by name desc", 
        "query1": "select name, tonnage from ship order by name desc", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "ship": "name"
        }, 
        "primary_key": {
            "ship": "id"
        }
    }, 
    {
        "schema_without_content": "battle : result , name , date , id , latin_commander , bulgarian_commander  | battle_date : id , date  | ship : name , ship_type , location , id , lost_in_battle , disposition_of_ship , tonnage  | death : id , caused_by_ship_id , killed , note , injured ", 
        "query2": "select t1.name, t2.date from battle as t1 join battle_date as t2 on t1.id = t2.id", 
        "db_id": "battle_death", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "date", 
            "from", 
            "battle"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "name", 
            ",", 
            "date", 
            "and", 
            "result", 
            "of", 
            "each", 
            "battle", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "date", 
            "FROM", 
            "battle"
        ], 
        "question": "List the name, date and result of each battle.", 
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), name (\"Battle of Philippopolis\", \"Battle of Adrianople\", \"Battle of Philippopolis\"), date (\"1235\", \"31 June 1208\", \"31 June 1208\"), id (8, 2, 6), latin_commander (\"Thierry de Termond\", \"Thierry de Termond\", \"Henry I\"), bulgarian_commander (\"Boril\", \"Unknown\", \"Ivan Asen II\") | battle_date : id (7, 4, 1), date (\"1235\", \"31 June 1208\", \"31 June 1208\") | ship : name (\"Three Brothers\", \"HMS Atalanta\", \"HMS Avon\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), id (6, 3, 5), lost_in_battle (8, 6, 7), disposition_of_ship (\"Sank\", \"Captured\", \"Scuttled\"), tonnage (\"t\", \"391\", \"225\") | death : id (12, 12, 9), caused_by_ship_id (3, 5, 5), killed (4, 3, 29), note (\"WestMidnapore, West Bengal\", \"Gajapati, Odisha\", \"Gajapati, Odisha\"), injured (0, 9, 5)", 
        "orig_query": "select name, date from battle", 
        "query1": "select name, date from battle", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "battle": "date"
        }, 
        "primary_key": {
            "battle": "id"
        }
    }, 
    {
        "schema_without_content": "battle : latin_commander , name , date , result , bulgarian_commander , id  | battle_name : name , id  | ship : ship_type , tonnage , id , disposition_of_ship , location , lost_in_battle , name  | death : injured , id , note , caused_by_ship_id , killed ", 
        "query2": "select t2.name, t1.date from battle as t1 join battle_name as t2 on t1.id = t2.id", 
        "db_id": "battle_death", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "date", 
            "from", 
            "battle"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "name", 
            ",", 
            "date", 
            "and", 
            "result", 
            "of", 
            "each", 
            "battle", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "date", 
            "FROM", 
            "battle"
        ], 
        "question": "List the name, date and result of each battle.", 
        "schema_with_content": "battle : latin_commander (\"Thierry de Termond\", \"Boniface of Montferrat\", \"Thierry de Termond\"), name (\"Battle of Philippopolis\", \"Battle of Boruy\", \"Siege of Constantinople\"), date (\"June 1205\", \"4 September 1207\", \"14 April 1205\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), bulgarian_commander (\"Unknown\", \"Ivan Asen II\", \"Ivan Asen II\"), id (5, 1, 2) | battle_name : name (\"Battle of Philippopolis\", \"Battle of Boruy\", \"Siege of Constantinople\"), id (3, 6, 4) | ship : ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), tonnage (\"t\", \"391\", \"225\"), id (4, 6, 6), disposition_of_ship (\"Sank\", \"Wrecked\", \"Wrecked\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), lost_in_battle (7, 5, 4), name (\"HMS Avon\", \"Mary\", \"Mary\") | death : injured (0, 9, 5), id (9, 3, 11), note (\"Sundargarh, Odisha\", \"Dantewada, Chhattisgarh\", \"Gajapati, Odisha\"), caused_by_ship_id (1, 1, 2), killed (3, 4, 4)", 
        "orig_query": "select name, date from battle", 
        "query1": "select name, date from battle", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "battle": "name"
        }, 
        "primary_key": {
            "battle": "id"
        }
    }, 
    {
        "schema_without_content": "battle : result , name , date , id , latin_commander , bulgarian_commander  | battle_result : id , result  | ship : tonnage , disposition_of_ship , lost_in_battle , name , id , ship_type , location  | death : injured , killed , caused_by_ship_id , id , note ", 
        "query2": "select t1.name, t2.result from battle as t1 join battle_result as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'", 
        "db_id": "battle_death", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "result", 
            "from", 
            "battle", 
            "where", 
            "bulgarian_commander", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            "and", 
            "results", 
            "of", 
            "the", 
            "battles", 
            "when", 
            "the", 
            "bulgarian", 
            "commander", 
            "is", 
            "not", 
            "'Boril", 
            "'"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "RESULT", 
            "FROM", 
            "battle", 
            "WHERE", 
            "bulgarian_commander", 
            "!", 
            "=", 
            "'Boril", 
            "'"
        ], 
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", 
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), name (\"Battle of Rusion\", \"Battle of Boruy\", \"Battle of Adrianople\"), date (\"February 1206\", \"14 April 1205\", \"4 September 1207\"), id (6, 5, 8), latin_commander (\"Boniface of Montferrat\", \"Thierry de Termond\", \"Boniface of Montferrat\"), bulgarian_commander (\"Unknown\", \"Boril\", \"Boril\") | battle_result : id (3, 3, 2), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\") | ship : tonnage (\"t\", \"391\", \"225\"), disposition_of_ship (\"Wrecked\", \"Scuttled\", \"Scuttled\"), lost_in_battle (5, 6, 5), name (\"Mary\", \"HMS Avon\", \"Three Brothers\"), id (2, 1, 3), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\") | death : injured (0, 9, 5), killed (4, 0, 29), caused_by_ship_id (6, 1, 5), id (12, 6, 13), note (\"Sundargarh, Odisha\", \"WestMidnapore, West Bengal\", \"Gajapati, Odisha\")", 
        "orig_query": "select name, result from battle where bulgarian_commander != 'Boril'", 
        "query1": "select name, result from battle where bulgarian_commander != 'Boril'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"Boril\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "battle": "result"
        }, 
        "primary_key": {
            "battle": "id"
        }
    }, 
    {
        "schema_without_content": "battle : result , bulgarian_commander , name , latin_commander , date , id  | battle_name : name , id  | ship : location , ship_type , tonnage , name , id , disposition_of_ship , lost_in_battle  | death : killed , injured , note , id , caused_by_ship_id ", 
        "query2": "select t2.name, t1.result from battle as t1 join battle_name as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'", 
        "db_id": "battle_death", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "result", 
            "from", 
            "battle", 
            "where", 
            "bulgarian_commander", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            "and", 
            "results", 
            "of", 
            "the", 
            "battles", 
            "when", 
            "the", 
            "bulgarian", 
            "commander", 
            "is", 
            "not", 
            "'Boril", 
            "'"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "RESULT", 
            "FROM", 
            "battle", 
            "WHERE", 
            "bulgarian_commander", 
            "!", 
            "=", 
            "'Boril", 
            "'"
        ], 
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", 
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), bulgarian_commander (\"Kaloyan\", \"Kaloyan\", \"Boril\"), name (\"Battle of Boruy\", \"Battle of Philippopolis\", \"Battle of Serres\"), latin_commander (\"Boniface of Montferrat\", \"Unknown\", \"Thierry de Termond\"), date (\"31 January 1206\", \"14 April 1205\", \"February 1206\"), id (7, 5, 7) | battle_name : name (\"Battle of Boruy\", \"Battle of Philippopolis\", \"Battle of Serres\"), id (5, 7, 5) | ship : location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), tonnage (\"t\", \"391\", \"225\"), name (\"Lettice\", \"HMS Avon\", \"Lettice\"), id (1, 7, 2), disposition_of_ship (\"Scuttled\", \"Wrecked\", \"Scuttled\"), lost_in_battle (8, 7, 5) | death : killed (3, 0, 25), injured (0, 9, 5), note (\"Erraboru, Chhattisgarh\", \"WestMidnapore, West Bengal\", \"Gajapati, Odisha\"), id (9, 6, 11), caused_by_ship_id (1, 6, 5)", 
        "orig_query": "select name, result from battle where bulgarian_commander != 'Boril'", 
        "query1": "select name, result from battle where bulgarian_commander != 'Boril'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"Boril\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "battle": "name"
        }, 
        "primary_key": {
            "battle": "id"
        }
    }, 
    {
        "schema_without_content": "addresses : address_id , state_province_county , line_1 , line_3 , city , country , line_2 , other_address_details , zip_postcode  | addresses_line_1 : line_1 , address_id  | courses : course_description , course_name , other_details , course_id  | departments : other_details , department_id , department_description , department_name  | degree_programs : other_details , department_id , degree_summary_name , degree_summary_description , degree_program_id  | sections : course_id , other_details , section_description , section_name , section_id  | semesters : semester_name , semester_id , other_details , semester_description  | students : email_address , date_left , student_id , current_address_id , permanent_address_id , middle_name , first_name , date_first_registered , ssn , cell_mobile_number 919-3594x3661\", \"436.613.7683\", \"877.549.9067x8723\", other_student_details , last_name  | student_enrolment : degree_program_id , student_id , other_details , student_enrolment_id , semester_id  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t2.line_1, t1.line_2 from addresses as t1 join addresses_line_1 as t2 on t1.address_id = t2.address_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "line_1", 
            ",", 
            "line_2", 
            "from", 
            "addresses"
        ], 
        "question_toks": [
            "what", 
            "are", 
            "all", 
            "the", 
            "addresses", 
            "including", 
            "line", 
            "1", 
            "and", 
            "line", 
            "2", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "line_1", 
            ",", 
            "line_2", 
            "FROM", 
            "addresses"
        ], 
        "question": "what are all the addresses including line 1 and line 2?", 
        "schema_with_content": "addresses : address_id (11, 5, 2), state_province_county (\"Florida\", \"Arkansas\", \"NorthCarolina\"), line_1 (\"9283 Schulist Falls Apt. 037\", \"858 Peggie Bypass Suite 212\", \"202 Hessel Views Apt. 468\"), line_3 (None), city (\"Port Chelsea\", \"Mariliehaven\", \"Prohaskafort\"), country (\"Burundi\", \"Samoa\", \"Iceland\"), line_2 (\"Suite 674\", \"Suite 239\", \"Suite 383\"), other_address_details (None), zip_postcode (\"902\", \"669\", \"777\") | addresses_line_1 : line_1 (\"9283 Schulist Falls Apt. 037\", \"858 Peggie Bypass Suite 212\", \"202 Hessel Views Apt. 468\"), address_id (14, 9, 15) | courses : course_description (\"d\", \"d\", \"d\"), course_name (\"ds\", \"la\", \"oop\"), other_details (None), course_id (7, 4, 10) | departments : other_details (None), department_id (2, 9, 12), department_description (\"natus\", \"dolorem\", \"nisi\"), department_name (\"engineer\", \"history\", \"geography\") | degree_programs : other_details (None), department_id (15, 14, 15), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"placeat\", \"officiis\", \"voluptas\"), degree_program_id (14, 9, 11) | sections : course_id (14, 7, 6), other_details (None), section_description (\"nesciunt\", \"non\", \"quis\"), section_name (\"k\", \"b\", \"l\"), section_id (9, 2, 4) | semesters : semester_name (\"fall 2010\", \"summer 2010\", \"spring 2016\"), semester_id (10, 12, 4), other_details (None), semester_description (\"f\", \"t\", \"l\") | students : email_address (\"dell43@example.net\", \"qo'kon@example.com\", \"dell43@example.net\"), date_left (\"1990-09-01 05:03:27\", \"1982-06-11 00:25:39\", \"1982-06-11 00:25:39\"), student_id (1, 8, 4), current_address_id (15, 6, 9), permanent_address_id (3, 4, 14), middle_name (\"Violet\", \"Cleve\", \"Alberta\"), first_name (\"Timmothy\", \"Delaney\", \"Helga\"), date_first_registered (\"1982-02-14 08:46:35\", \"2005-12-15 08:42:10\", \"1989-05-24 23:31:29\"), ssn (\"39\", \"304246\", \"34458427\"), cell_mobile_number (\"(605)919-3594x3661\", \"436.613.7683\", \"877.549.9067x8723\"), other_student_details (\"et\", \"omnis\", \"voluptatem\"), last_name (\"Rempel\", \"Rogahn\", \"Osinski\") | student_enrolment : degree_program_id (8, 5, 11), student_id (4, 4, 12), other_details (None), student_enrolment_id (6, 6, 1), semester_id (1, 6, 12) | student_enrolment_courses : student_course_id (45105806, 76, 96), student_enrolment_id (6, 8, 2), course_id (8, 11, 6) | transcripts : other_details (None), transcript_date (\"1985-04-29 01:20:20\", \"2002-09-24 06:11:49\", \"2013-06-30 13:01:40\"), transcript_id (14, 7, 5) | transcript_contents : student_course_id (7, 0, 2), transcript_id (6, 8, 11)", 
        "orig_query": "select line_1, line_2 from addresses", 
        "query1": "select line_1, line_2 from addresses", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "addresses": "line_1"
        }, 
        "primary_key": {
            "addresses": "address_id"
        }
    }, 
    {
        "schema_without_content": "addresses : other_address_details , city , line_3 , zip_postcode , line_1 , address_id , state_province_county , country , line_2  | addresses_line_2 : address_id , line_2  | courses : course_id , course_description , other_details , course_name  | departments : department_id , department_description , department_name , other_details  | degree_programs : degree_program_id , other_details , degree_summary_description , degree_summary_name , department_id  | sections : section_id , section_description , section_name , course_id , other_details  | semesters : semester_id , semester_name , other_details , semester_description  | students : date_left , first_name , cell_mobile_number 889-8954x524\", \"365-8405\", \"889-8954x524\", middle_name , email_address , date_first_registered , last_name , student_id , other_student_details , ssn , current_address_id , permanent_address_id  | student_enrolment : semester_id , other_details , student_id , degree_program_id , student_enrolment_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.line_1, t2.line_2 from addresses as t1 join addresses_line_2 as t2 on t1.address_id = t2.address_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "line_1", 
            ",", 
            "line_2", 
            "from", 
            "addresses"
        ], 
        "question_toks": [
            "what", 
            "are", 
            "all", 
            "the", 
            "addresses", 
            "including", 
            "line", 
            "1", 
            "and", 
            "line", 
            "2", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "line_1", 
            ",", 
            "line_2", 
            "FROM", 
            "addresses"
        ], 
        "question": "what are all the addresses including line 1 and line 2?", 
        "schema_with_content": "addresses : other_address_details (None), city (\"Goodwinhaven\", \"Port Oceane\", \"Port Oceane\"), line_3 (None), zip_postcode (\"669\", \"446\", \"446\"), line_1 (\"0643 Muller Vista\", \"858 Peggie Bypass Suite 212\", \"0643 Muller Vista\"), address_id (8, 3, 3), state_province_county (\"Arkansas\", \"Arkansas\", \"Florida\"), country (\"Gibraltar\", \"Gibraltar\", \"Gibraltar\"), line_2 (\"Apt. 388\", \"Apt. 370\", \"Apt. 583\") | addresses_line_2 : address_id (13, 4, 15), line_2 (\"Apt. 388\", \"Apt. 370\", \"Apt. 583\") | courses : course_id (8, 1, 11), course_description (\"c\", \"b\", \"c\"), other_details (None), course_name (\"nlp\", \"en\", \"fr\") | departments : department_id (14, 11, 10), department_description (\"doloribus\", \"error\", \"dolorem\"), department_name (\"art\", \"art\", \"history\"), other_details (None) | degree_programs : degree_program_id (3, 15, 9), other_details (None), degree_summary_description (\"cumque\", \"quam\", \"qui\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (15, 4, 15) | sections : section_id (14, 3, 5), section_description (\"quis\", \"facilis\", \"voluptatem\"), section_name (\"a\", \"j\", \"e\"), course_id (12, 10, 14), other_details (None) | semesters : semester_id (4, 12, 10), semester_name (\"winter 2010\", \"winter 2018\", \"spring 2014\"), other_details (None), semester_description (\"w\", \"m\", \"y\") | students : date_left (\"1997-11-16 08:54:33\", \"2007-03-31 09:53:19\", \"1971-05-17 19:28:49\"), first_name (\"Stanford\", \"Warren\", \"Helga\"), cell_mobile_number (\"(096)889-8954x524\", \"(507)365-8405\", \"(096)889-8954x524\"), middle_name (\"Osborne\", \"Brooklyn\", \"Vaughn\"), email_address (\"mya88@example.org\", \"baumbach.lucious@example.org\", \"dell43@example.net\"), date_first_registered (\"1976-10-26 02:33:06\", \"1989-05-24 23:31:29\", \"1971-02-05 07:28:23\"), last_name (\"Christiansen\", \"Mohr\", \"Carroll\"), student_id (15, 15, 1), other_student_details (\"rerum\", \"et\", \"quia\"), ssn (\"141072406\", \"3\", \"668\"), current_address_id (14, 2, 14), permanent_address_id (8, 5, 8) | student_enrolment : semester_id (5, 13, 15), other_details (None), student_id (6, 14, 6), degree_program_id (4, 9, 2), student_enrolment_id (2, 8, 10) | student_enrolment_courses : course_id (4, 14, 11), student_enrolment_id (10, 13, 6), student_course_id (83814225, 8, 28982908) | transcripts : other_details (None), transcript_id (7, 13, 9), transcript_date (\"1986-07-12 07:27:29\", \"2010-12-13 10:55:15\", \"1984-12-19 00:37:21\") | transcript_contents : student_course_id (76, 28982908, 96), transcript_id (6, 15, 2)", 
        "orig_query": "select line_1, line_2 from addresses", 
        "query1": "select line_1, line_2 from addresses", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "addresses": "line_2"
        }, 
        "primary_key": {
            "addresses": "address_id"
        }
    }, 
    {
        "schema_without_content": "addresses : zip_postcode , line_1 , line_2 , city , address_id , state_province_county , other_address_details , country , line_3  | addresses_line_1 : address_id , line_1  | courses : course_id , other_details , course_name , course_description  | departments : other_details , department_name , department_id , department_description  | degree_programs : department_id , degree_program_id , degree_summary_name , other_details , degree_summary_description  | sections : section_id , other_details , course_id , section_description , section_name  | semesters : semester_id , other_details , semester_name , semester_description  | students : permanent_address_id , first_name , email_address , other_student_details , date_first_registered , cell_mobile_number 153-1469x1733\", \"153-1469x1733\", \"877.549.9067x8723\", middle_name , date_left , current_address_id , student_id , last_name , ssn  | student_enrolment : student_id , degree_program_id , student_enrolment_id , other_details , semester_id  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t2.line_1, t1.line_2 from addresses as t1 join addresses_line_1 as t2 on t1.address_id = t2.address_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "line_1", 
            ",", 
            "line_2", 
            "from", 
            "addresses"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            "and", 
            "second", 
            "line", 
            "for", 
            "all", 
            "addresses", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "line_1", 
            ",", 
            "line_2", 
            "FROM", 
            "addresses"
        ], 
        "question": "What is the first and second line for all addresses?", 
        "schema_with_content": "addresses : zip_postcode (\"847\", \"400\", \"902\"), line_1 (\"0144 Lamar Plaza Apt. 346\", \"74046 Metz Walk Apt. 113\", \"2294 Grant Square Apt. 235\"), line_2 (\"Suite 865\", \"Apt. 468\", \"Apt. 335\"), city (\"Prohaskafort\", \"Rutherfordtown\", \"Goodwinhaven\"), address_id (14, 9, 8), state_province_county (\"SouthDakota\", \"Hawaii\", \"Florida\"), other_address_details (None), country (\"New Caledonia\", \"Lesotho\", \"Burundi\"), line_3 (None) | addresses_line_1 : address_id (9, 5, 4), line_1 (\"0144 Lamar Plaza Apt. 346\", \"74046 Metz Walk Apt. 113\", \"2294 Grant Square Apt. 235\") | courses : course_id (6, 15, 4), other_details (None), course_name (\"db\", \"ds\", \"oop\"), course_description (\"b\", \"b\", \"d\") | departments : other_details (None), department_name (\"law\", \"history\", \"history\"), department_id (8, 7, 2), department_description (\"non\", \"nihil\", \"autem\") | degree_programs : department_id (8, 13, 14), degree_program_id (3, 10, 6), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_summary_description (\"unde\", \"earum\", \"assumenda\") | sections : section_id (7, 1, 12), other_details (None), course_id (4, 2, 1), section_description (\"quis\", \"ad\", \"ex\"), section_name (\"c\", \"b\", \"d\") | semesters : semester_id (2, 5, 15), other_details (None), semester_name (\"spring 2013\", \"spring 2016\", \"spring 2013\"), semester_description (\"y\", \"m\", \"o\") | students : permanent_address_id (9, 8, 9), first_name (\"Reva\", \"Milton\", \"Frida\"), email_address (\"nya.lesch@example.net\", \"qo'kon@example.com\", \"johns.unique@example.net\"), other_student_details (\"autem\", \"facilis\", \"autem\"), date_first_registered (\"1982-02-14 08:46:35\", \"1986-02-24 21:12:23\", \"1989-05-24 23:31:29\"), cell_mobile_number (\"(982)153-1469x1733\", \"(982)153-1469x1733\", \"877.549.9067x8723\"), middle_name (\"Alberta\", \"Anna\", \"Anna\"), date_left (\"2006-08-04 17:26:49\", \"2007-03-31 09:53:19\", \"1975-10-09 00:49:27\"), current_address_id (12, 14, 10), student_id (14, 6, 9), last_name (\"Gleichner\", \"Christiansen\", \"Rogahn\"), ssn (\"141072406\", \"965\", \"141072406\") | student_enrolment : student_id (9, 9, 6), degree_program_id (5, 4, 3), student_enrolment_id (11, 2, 10), other_details (None), semester_id (2, 1, 4) | student_enrolment_courses : student_course_id (96, 0, 2), course_id (4, 12, 14), student_enrolment_id (4, 14, 4) | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1986-07-12 07:27:29\", \"1975-10-28 15:16:51\"), other_details (None), transcript_id (6, 11, 7) | transcript_contents : transcript_id (2, 5, 6), student_course_id (0, 0, 45105806)", 
        "orig_query": "select line_1, line_2 from addresses", 
        "query1": "select line_1, line_2 from addresses", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "addresses": "line_1"
        }, 
        "primary_key": {
            "addresses": "address_id"
        }
    }, 
    {
        "schema_without_content": "addresses : state_province_county , other_address_details , line_3 , city , line_2 , country , zip_postcode , address_id , line_1  | addresses_line_2 : line_2 , address_id  | courses : other_details , course_description , course_id , course_name  | departments : department_description , other_details , department_name , department_id  | degree_programs : degree_program_id , degree_summary_name , department_id , other_details , degree_summary_description  | sections : section_description , section_name , section_id , course_id , other_details  | semesters : semester_name , semester_description , other_details , semester_id  | students : middle_name , first_name , email_address , last_name , permanent_address_id , current_address_id , cell_mobile_number , student_id , ssn , date_left , date_first_registered , other_student_details  | student_enrolment : degree_program_id , other_details , student_enrolment_id , student_id , semester_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.line_1, t2.line_2 from addresses as t1 join addresses_line_2 as t2 on t1.address_id = t2.address_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "line_1", 
            ",", 
            "line_2", 
            "from", 
            "addresses"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            "and", 
            "second", 
            "line", 
            "for", 
            "all", 
            "addresses", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "line_1", 
            ",", 
            "line_2", 
            "FROM", 
            "addresses"
        ], 
        "question": "What is the first and second line for all addresses?", 
        "schema_with_content": "addresses : state_province_county (\"WestVirginia\", \"NorthCarolina\", \"Hawaii\"), other_address_details (None), line_3 (None), city (\"Michelleburgh\", \"New Clemensburgh\", \"Mariliehaven\"), line_2 (\"Apt. 370\", \"Suite 079\", \"Apt. 406\"), country (\"Angola\", \"Samoa\", \"Norfolk Island\"), zip_postcode (\"541\", \"446\", \"400\"), address_id (4, 12, 6), line_1 (\"0643 Muller Vista\", \"202 Hessel Views Apt. 468\", \"202 Hessel Views Apt. 468\") | addresses_line_2 : line_2 (\"Apt. 370\", \"Suite 079\", \"Apt. 406\"), address_id (1, 11, 11) | courses : other_details (None), course_description (\"b\", \"d\", \"v\"), course_id (2, 10, 13), course_name (\"fr\", \"os\", \"os\") | departments : department_description (\"non\", \"in\", \"consequatur\"), other_details (None), department_name (\"engineer\", \"law\", \"biology\"), department_id (12, 14, 10) | degree_programs : degree_program_id (1, 5, 7), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (3, 11, 13), other_details (None), degree_summary_description (\"assumenda\", \"architecto\", \"unde\") | sections : section_description (\"ex\", \"voluptatem\", \"provident\"), section_name (\"y\", \"b\", \"o\"), section_id (5, 12, 15), course_id (2, 5, 6), other_details (None) | semesters : semester_name (\"spring 2016\", \"spring 2013\", \"spring 2012\"), semester_description (\"q\", \"g\", \"o\"), other_details (None), semester_id (14, 6, 5) | students : middle_name (\"Brooklyn\", \"Violet\", \"Alberta\"), first_name (\"Jordy\", \"Stanford\", \"Orrin\"), email_address (\"jhuel@example.com\", \"skassulke@example.net\", \"nya.lesch@example.net\"), last_name (\"Osinski\", \"Mohr\", \"Rempel\"), permanent_address_id (8, 8, 9), current_address_id (2, 6, 12), cell_mobile_number (\"877.549.9067x8723\", \"171-642-5684\", \"171-642-5684\"), student_id (2, 11, 15), ssn (\"248\", \"6274274\", \"494\"), date_left (\"2007-08-02 04:12:58\", \"2004-12-08 05:29:11\", \"2017-07-09 21:38:43\"), date_first_registered (\"1986-02-24 21:12:23\", \"2017-01-04 08:10:25\", \"2018-03-13 09:56:22\"), other_student_details (\"omnis\", \"nesciunt\", \"qui\") | student_enrolment : degree_program_id (3, 5, 5), other_details (None), student_enrolment_id (8, 8, 2), student_id (14, 5, 1), semester_id (13, 12, 4) | student_enrolment_courses : course_id (6, 2, 8), student_enrolment_id (9, 4, 4), student_course_id (45105806, 76, 0) | transcripts : transcript_date (\"1984-01-18 23:07:07\", \"1990-03-05 11:59:41\", \"1986-07-12 07:27:29\"), other_details (None), transcript_id (7, 15, 3) | transcript_contents : student_course_id (2, 76, 28982908), transcript_id (5, 5, 4)", 
        "orig_query": "select line_1, line_2 from addresses", 
        "query1": "select line_1, line_2 from addresses", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "addresses": "line_2"
        }, 
        "primary_key": {
            "addresses": "address_id"
        }
    }, 
    {
        "schema_without_content": "addresses : other_address_details , city , country , line_2 , line_1 , address_id , zip_postcode , line_3 , state_province_county  | courses : course_description , course_name , course_id , other_details  | departments : department_id , department_name , department_description , other_details  | degree_programs : degree_summary_name , department_id , degree_program_id , other_details , degree_summary_description  | sections : course_id , section_name , other_details , section_id , section_description  | sections_section_name : section_id , section_name  | semesters : other_details , semester_name , semester_description , semester_id  | students : first_name , email_address , permanent_address_id , other_student_details , cell_mobile_number , date_left , date_first_registered , current_address_id , last_name , middle_name , ssn , student_id  | student_enrolment : semester_id , student_id , student_enrolment_id , other_details , degree_program_id  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t2.section_name, t1.section_description from sections as t1 join sections_section_name as t2 on t1.section_id = t2.section_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "section_name", 
            ",", 
            "section_description", 
            "from", 
            "sections"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "descriptions", 
            "of", 
            "all", 
            "the", 
            "sections", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "section_name", 
            ",", 
            "section_description", 
            "FROM", 
            "Sections"
        ], 
        "question": "What are the names and descriptions of all the sections?", 
        "schema_with_content": "addresses : other_address_details (None), city (\"Michelleburgh\", \"Herzoghaven\", \"Port Evanston\"), country (\"New Caledonia\", \"Norfolk Island\", \"Bermuda\"), line_2 (\"Suite 865\", \"Apt. 583\", \"Suite 865\"), line_1 (\"67942 Carlotta Ferry Apt. 686\", \"2294 Grant Square Apt. 235\", \"858 Peggie Bypass Suite 212\"), address_id (12, 11, 9), zip_postcode (\"446\", \"902\", \"777\"), line_3 (None), state_province_county (\"Florida\", \"Delaware\", \"SouthDakota\") | courses : course_description (\"v\", \"w\", \"n\"), course_name (\"os\", \"en\", \"oop\"), course_id (9, 11, 2), other_details (None) | departments : department_id (7, 3, 8), department_name (\"medical\", \"computer science\", \"engineer\"), department_description (\"autem\", \"ea\", \"in\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (12, 4, 15), degree_program_id (10, 3, 9), other_details (None), degree_summary_description (\"quam\", \"earum\", \"quam\") | sections : course_id (5, 7, 6), section_name (\"o\", \"g\", \"y\"), other_details (None), section_id (3, 10, 12), section_description (\"voluptas\", \"nesciunt\", \"facilis\") | sections_section_name : section_id (7, 10, 12), section_name (\"o\", \"g\", \"y\") | semesters : other_details (None), semester_name (\"fall 2010\", \"spring 2015\", \"spring 2012\"), semester_description (\"g\", \"y\", \"q\"), semester_id (8, 14, 9) | students : first_name (\"Milton\", \"Deon\", \"Timmothy\"), email_address (\"nya.lesch@example.net\", \"swift.kolby@example.com\", \"jhuel@example.com\"), permanent_address_id (5, 4, 15), other_student_details (\"quia\", \"assumenda\", \"qui\"), cell_mobile_number (\"436.613.7683\", \"1-009-710-5151\", \"07661787471\"), date_left (\"1971-05-17 19:28:49\", \"2006-08-04 17:26:49\", \"1982-06-11 00:25:39\"), date_first_registered (\"2007-08-29 23:25:41\", \"2014-03-28 05:48:23\", \"1982-06-19 13:15:18\"), current_address_id (12, 12, 10), last_name (\"Kemmer\", \"Gleichner\", \"Jaskolski\"), middle_name (\"Cleve\", \"Brooklyn\", \"Violet\"), ssn (\"248\", \"156\", \"668\"), student_id (8, 4, 13) | student_enrolment : semester_id (13, 13, 2), student_id (12, 6, 9), student_enrolment_id (15, 10, 2), other_details (None), degree_program_id (2, 5, 9) | student_enrolment_courses : student_course_id (1, 2, 8), student_enrolment_id (5, 13, 8), course_id (14, 8, 3) | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1975-05-20 18:31:21\", \"1975-05-06 12:04:47\"), other_details (None), transcript_id (10, 11, 9) | transcript_contents : transcript_id (2, 6, 11), student_course_id (45105806, 70882679, 8)", 
        "orig_query": "select section_name, section_description from sections", 
        "query1": "select section_name, section_description from sections", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "sections": "section_name"
        }, 
        "primary_key": {
            "sections": "section_id"
        }
    }, 
    {
        "schema_without_content": "addresses : other_address_details , line_2 , country , city , zip_postcode , line_1 , state_province_county , address_id , line_3  | courses : course_name , course_id , course_description , other_details  | departments : department_description , department_id , other_details , department_name  | degree_programs : department_id , degree_summary_description , degree_summary_name , other_details , degree_program_id  | sections : section_id , section_name , section_description , course_id , other_details  | sections_section_description : section_description , section_id  | semesters : semester_id , semester_name , other_details , semester_description  | students : email_address , date_left , current_address_id , first_name , permanent_address_id , ssn , cell_mobile_number 153-1469x1733\", \"03174364122\", \"889-8954x524\", date_first_registered , other_student_details , middle_name , last_name , student_id  | student_enrolment : semester_id , other_details , student_id , degree_program_id , student_enrolment_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "section_name", 
            ",", 
            "section_description", 
            "from", 
            "sections"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "descriptions", 
            "of", 
            "all", 
            "the", 
            "sections", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "section_name", 
            ",", 
            "section_description", 
            "FROM", 
            "Sections"
        ], 
        "question": "What are the names and descriptions of all the sections?", 
        "schema_with_content": "addresses : other_address_details (None), line_2 (\"Suite 383\", \"Suite 703\", \"Suite 703\"), country (\"Cook Islands\", \"Cook Islands\", \"Cook Islands\"), city (\"Goodwinhaven\", \"North Omer\", \"Herzoghaven\"), zip_postcode (\"400\", \"895\", \"590\"), line_1 (\"492 Wilkinson Route\", \"858 Peggie Bypass Suite 212\", \"2294 Grant Square Apt. 235\"), state_province_county (\"NorthCarolina\", \"Delaware\", \"Idaho\"), address_id (14, 3, 8), line_3 (None) | courses : course_name (\"os\", \"fr\", \"oop\"), course_id (13, 1, 3), course_description (\"d\", \"b\", \"l\"), other_details (None) | departments : department_description (\"nisi\", \"dolorem\", \"aliquam\"), department_id (8, 4, 6), other_details (None), department_name (\"biology\", \"art\", \"history\") | degree_programs : department_id (4, 3, 11), degree_summary_description (\"cumque\", \"cumque\", \"esse\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_program_id (2, 9, 6) | sections : section_id (5, 1, 6), section_name (\"b\", \"g\", \"c\"), section_description (\"voluptatem\", \"voluptas\", \"quis\"), course_id (1, 9, 7), other_details (None) | sections_section_description : section_description (\"voluptatem\", \"voluptas\", \"quis\"), section_id (9, 1, 15) | semesters : semester_id (10, 3, 15), semester_name (\"summer 2010\", \"spring 2015\", \"spring 2016\"), other_details (None), semester_description (\"o\", \"l\", \"o\") | students : email_address (\"mya88@example.org\", \"skassulke@example.net\", \"jillian26@example.net\"), date_left (\"2004-12-08 05:29:11\", \"2007-11-28 12:50:21\", \"1997-11-16 08:54:33\"), current_address_id (12, 7, 12), first_name (\"Milton\", \"Stanford\", \"Reva\"), permanent_address_id (8, 9, 3), ssn (\"141072406\", \"494\", \"34458427\"), cell_mobile_number (\"(982)153-1469x1733\", \"03174364122\", \"(096)889-8954x524\"), date_first_registered (\"2007-08-29 23:25:41\", \"1982-02-14 08:46:35\", \"2014-03-28 05:48:23\"), other_student_details (\"laborum\", \"atque\", \"laborum\"), middle_name (\"Cleve\", \"Judd\", \"Aaliyah\"), last_name (\"Carroll\", \"Mohr\", \"Osinski\"), student_id (10, 12, 1) | student_enrolment : semester_id (5, 9, 9), other_details (None), student_id (14, 5, 14), degree_program_id (8, 8, 5), student_enrolment_id (8, 2, 3) | student_enrolment_courses : course_id (6, 12, 11), student_enrolment_id (9, 2, 9), student_course_id (83814225, 45105806, 0) | transcripts : transcript_date (\"1985-08-21 09:32:39\", \"1975-10-28 15:16:51\", \"1975-05-06 12:04:47\"), other_details (None), transcript_id (1, 6, 10) | transcript_contents : student_course_id (0, 45105806, 76), transcript_id (13, 11, 5)", 
        "orig_query": "select section_name, section_description from sections", 
        "query1": "select section_name, section_description from sections", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "sections": "section_description"
        }, 
        "primary_key": {
            "sections": "section_id"
        }
    }, 
    {
        "schema_without_content": "addresses : address_id , zip_postcode , line_2 , other_address_details , line_1 , line_3 , country , city , state_province_county  | courses : course_name , other_details , course_id , course_description  | departments : department_id , department_name , department_description , other_details  | degree_programs : degree_summary_name , other_details , degree_program_id , department_id , degree_summary_description  | sections : section_name , other_details , section_id , course_id , section_description  | sections_section_name : section_id , section_name  | semesters : other_details , semester_name , semester_id , semester_description  | students : current_address_id , cell_mobile_number , first_name , last_name , date_first_registered , student_id , permanent_address_id , email_address , ssn , date_left , middle_name , other_student_details  | student_enrolment : degree_program_id , student_id , student_enrolment_id , other_details , semester_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t2.section_name, t1.section_description from sections as t1 join sections_section_name as t2 on t1.section_id = t2.section_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "section_name", 
            ",", 
            "section_description", 
            "from", 
            "sections"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "descriptions", 
            "for", 
            "all", 
            "the", 
            "sections", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "section_name", 
            ",", 
            "section_description", 
            "FROM", 
            "Sections"
        ], 
        "question": "What are the names and descriptions for all the sections?", 
        "schema_with_content": "addresses : address_id (6, 13, 1), zip_postcode (\"777\", \"839\", \"847\"), line_2 (\"Suite 830\", \"Suite 079\", \"Suite 865\"), other_address_details (None), line_1 (\"16998 Mraz Lodge\", \"492 Wilkinson Route\", \"9283 Schulist Falls Apt. 037\"), line_3 (None), country (\"Iceland\", \"Gibraltar\", \"Croatia\"), city (\"Lake Careyberg\", \"Prohaskafort\", \"South Palma\"), state_province_county (\"NorthCarolina\", \"Hawaii\", \"Hawaii\") | courses : course_name (\"nlp\", \"cal\", \"pl\"), other_details (None), course_id (15, 8, 15), course_description (\"k\", \"p\", \"w\") | departments : department_id (4, 2, 9), department_name (\"art\", \"linguistic\", \"engineer\"), department_description (\"in\", \"consequatur\", \"error\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_program_id (10, 6, 4), department_id (15, 13, 7), degree_summary_description (\"architecto\", \"officiis\", \"earum\") | sections : section_name (\"a\", \"a\", \"g\"), other_details (None), section_id (6, 7, 10), course_id (1, 12, 6), section_description (\"nesciunt\", \"qui\", \"et\") | sections_section_name : section_id (13, 9, 10), section_name (\"a\", \"a\", \"g\") | semesters : other_details (None), semester_name (\"summer 2010\", \"winter 2010\", \"fall 2018\"), semester_id (9, 2, 3), semester_description (\"w\", \"l\", \"o\") | students : current_address_id (10, 10, 6), cell_mobile_number (\"436.613.7683\", \"171-642-5684\", \"07661787471\"), first_name (\"Jett\", \"Milton\", \"Timmothy\"), last_name (\"Carroll\", \"Weimann\", \"Jaskolski\"), date_first_registered (\"1973-05-19 19:12:46\", \"2018-03-13 09:56:22\", \"1989-05-24 23:31:29\"), student_id (1, 10, 10), permanent_address_id (15, 4, 11), email_address (\"johns.unique@example.net\", \"beth42@example.org\", \"qo'kon@example.com\"), ssn (\"156\", \"68095\", \"248\"), date_left (\"1975-10-09 00:49:27\", \"2006-08-04 17:26:49\", \"1990-09-01 05:03:27\"), middle_name (\"Mossie\", \"Mona\", \"Lorenz\"), other_student_details (\"omnis\", \"atque\", \"non\") | student_enrolment : degree_program_id (3, 3, 3), student_id (14, 14, 12), student_enrolment_id (15, 7, 10), other_details (None), semester_id (15, 13, 1) | student_enrolment_courses : course_id (13, 2, 10), student_course_id (7, 681404, 8), student_enrolment_id (9, 4, 5) | transcripts : other_details (None), transcript_date (\"1975-05-20 18:31:21\", \"1985-04-29 01:20:20\", \"2010-12-13 10:55:15\"), transcript_id (2, 8, 1) | transcript_contents : transcript_id (13, 13, 8), student_course_id (45105806, 2, 76)", 
        "orig_query": "select section_name, section_description from sections", 
        "query1": "select section_name, section_description from sections", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "sections": "section_name"
        }, 
        "primary_key": {
            "sections": "section_id"
        }
    }, 
    {
        "schema_without_content": "addresses : address_id , country , city , line_1 , line_2 , state_province_county , other_address_details , line_3 , zip_postcode  | courses : course_name , other_details , course_id , course_description  | departments : department_id , department_description , department_name , other_details  | degree_programs : degree_summary_name , department_id , degree_program_id , other_details , degree_summary_description  | sections : course_id , section_name , section_id , section_description , other_details  | sections_section_description : section_description , section_id  | semesters : semester_name , other_details , semester_description , semester_id  | students : student_id , date_first_registered , permanent_address_id , current_address_id , email_address , middle_name , other_student_details , date_left , first_name , cell_mobile_number 445-0399x85208\", \"877.549.9067x8723\", \"445-0399x85208\", last_name , ssn  | student_enrolment : student_id , semester_id , degree_program_id , other_details , student_enrolment_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_id , other_details , transcript_date  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "section_name", 
            ",", 
            "section_description", 
            "from", 
            "sections"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "descriptions", 
            "for", 
            "all", 
            "the", 
            "sections", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "section_name", 
            ",", 
            "section_description", 
            "FROM", 
            "Sections"
        ], 
        "question": "What are the names and descriptions for all the sections?", 
        "schema_with_content": "addresses : address_id (11, 8, 12), country (\"Angola\", \"Norfolk Island\", \"Kyrgyz Republic\"), city (\"North Omer\", \"Port Elvisfurt\", \"Lake Laishafurt\"), line_1 (\"193 Marlin Brook\", \"67942 Carlotta Ferry Apt. 686\", \"202 Hessel Views Apt. 468\"), line_2 (\"Apt. 689\", \"Suite 830\", \"Apt. 305\"), state_province_county (\"SouthDakota\", \"Delaware\", \"Delaware\"), other_address_details (None), line_3 (None), zip_postcode (\"068\", \"541\", \"590\") | courses : course_name (\"dl\", \"rs\", \"math\"), other_details (None), course_id (9, 11, 5), course_description (\"k\", \"b\", \"c\") | departments : department_id (5, 6, 13), department_description (\"error\", \"nostrum\", \"natus\"), department_name (\"management\", \"linguistic\", \"biology\"), other_details (None) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (11, 2, 2), degree_program_id (11, 4, 12), other_details (None), degree_summary_description (\"officiis\", \"voluptas\", \"esse\") | sections : course_id (12, 1, 9), section_name (\"p\", \"e\", \"c\"), section_id (12, 6, 3), section_description (\"quis\", \"qui\", \"qui\"), other_details (None) | sections_section_description : section_description (\"quis\", \"qui\", \"qui\"), section_id (7, 8, 14) | semesters : semester_name (\"spring 2016\", \"spring 2019\", \"spring 2019\"), other_details (None), semester_description (\"t\", \"o\", \"t\"), semester_id (10, 3, 14) | students : student_id (4, 2, 9), date_first_registered (\"2014-03-28 05:48:23\", \"2017-01-04 08:10:25\", \"2018-03-13 09:56:22\"), permanent_address_id (4, 11, 15), current_address_id (14, 2, 14), email_address (\"nbruen@example.org\", \"nya.lesch@example.net\", \"skassulke@example.net\"), middle_name (\"Mona\", \"Neal\", \"Golda\"), other_student_details (\"laborum\", \"laborum\", \"atque\"), date_left (\"2016-04-09 12:27:04\", \"1999-08-24 00:07:10\", \"1997-11-16 08:54:33\"), first_name (\"Gregg\", \"Stanford\", \"Deon\"), cell_mobile_number (\"(213)445-0399x85208\", \"877.549.9067x8723\", \"(213)445-0399x85208\"), last_name (\"Rogahn\", \"Schuppe\", \"Ankunding\"), ssn (\"141072406\", \"43\", \"\") | student_enrolment : student_id (12, 12, 5), semester_id (6, 6, 9), degree_program_id (9, 9, 2), other_details (None), student_enrolment_id (15, 7, 6) | student_enrolment_courses : course_id (12, 4, 12), student_enrolment_id (5, 9, 4), student_course_id (96, 96, 9860) | transcripts : transcript_id (15, 10, 3), other_details (None), transcript_date (\"1975-05-20 18:31:21\", \"1990-03-05 11:59:41\", \"1984-01-18 23:07:07\") | transcript_contents : transcript_id (8, 12, 12), student_course_id (70882679, 45105806, 76)", 
        "orig_query": "select section_name, section_description from sections", 
        "query1": "select section_name, section_description from sections", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "sections": "section_description"
        }, 
        "primary_key": {
            "sections": "section_id"
        }
    }, 
    {
        "schema_without_content": "addresses : state_province_county , line_1 , line_3 , country , zip_postcode , other_address_details , address_id , line_2 , city  | courses : course_description , course_id , other_details , course_name  | departments : department_name , other_details , department_description , department_id  | degree_programs : degree_summary_name , degree_summary_description , department_id , degree_program_id , other_details  | sections : section_description , section_name , other_details , section_id , course_id  | semesters : semester_description , semester_id , other_details , semester_name  | students : date_left , student_id , current_address_id , cell_mobile_number 889-8954x524\", \"677.401.9382\", \"1-009-710-5151\", permanent_address_id , email_address , first_name , date_first_registered , last_name , ssn , middle_name , other_student_details  | students_first_name : first_name , student_id  | student_enrolment : student_id , other_details , degree_program_id , semester_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_first_registered", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Who", 
            "is", 
            "the", 
            "first", 
            "student", 
            "to", 
            "register", 
            "?", 
            "List", 
            "the", 
            "first", 
            "name", 
            ",", 
            "middle", 
            "name", 
            "and", 
            "last", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_first_registered", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Who is the first student to register? List the first name, middle name and last name.", 
        "schema_with_content": "addresses : state_province_county (\"Hawaii\", \"Delaware\", \"Washington\"), line_1 (\"202 Hessel Views Apt. 468\", \"0643 Muller Vista\", \"186 Evan Motorway Apt. 409\"), line_3 (None), country (\"Gabon\", \"Lesotho\", \"Kyrgyz Republic\"), zip_postcode (\"148\", \"446\", \"669\"), other_address_details (None), address_id (3, 14, 12), line_2 (\"Suite 865\", \"Apt. 689\", \"Apt. 370\"), city (\"Rutherfordtown\", \"South Palma\", \"North Omer\") | courses : course_description (\"p\", \"c\", \"d\"), course_id (1, 10, 10), other_details (None), course_name (\"ai\", \"ml\", \"en\") | departments : department_name (\"history\", \"dance\", \"management\"), other_details (None), department_description (\"natus\", \"natus\", \"dolorem\"), department_id (2, 12, 9) | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"unde\", \"officiis\", \"esse\"), department_id (14, 4, 8), degree_program_id (7, 14, 6), other_details (None) | sections : section_description (\"ex\", \"qui\", \"quis\"), section_name (\"l\", \"o\", \"k\"), other_details (None), section_id (11, 6, 11), course_id (6, 1, 9) | semesters : semester_description (\"y\", \"g\", \"g\"), semester_id (13, 8, 15), other_details (None), semester_name (\"winter 2018\", \"spring 2015\", \"fall 2018\") | students : date_left (\"1999-08-24 00:07:10\", \"2007-03-31 09:53:19\", \"2007-11-28 12:50:21\"), student_id (9, 5, 5), current_address_id (6, 7, 9), cell_mobile_number (\"(096)889-8954x524\", \"677.401.9382\", \"1-009-710-5151\"), permanent_address_id (4, 8, 5), email_address (\"beth42@example.org\", \"swift.kolby@example.com\", \"nbruen@example.org\"), first_name (\"Jarvis\", \"Jordy\", \"Timmothy\"), date_first_registered (\"1982-02-14 08:46:35\", \"1989-05-24 23:31:29\", \"1982-02-14 08:46:35\"), last_name (\"Christiansen\", \"Ankunding\", \"Rempel\"), ssn (\"156\", \"6274274\", \"39\"), middle_name (\"Alberta\", \"Osborne\", \"Neal\"), other_student_details (\"atque\", \"rerum\", \"voluptatem\") | students_first_name : first_name (\"Jarvis\", \"Jordy\", \"Timmothy\"), student_id (4, 3, 11) | student_enrolment : student_id (1, 6, 14), other_details (None), degree_program_id (4, 11, 3), semester_id (2, 15, 13), student_enrolment_id (2, 1, 8) | student_enrolment_courses : student_enrolment_id (14, 2, 5), student_course_id (438800, 28982908, 0), course_id (11, 6, 8) | transcripts : other_details (None), transcript_id (1, 1, 9), transcript_date (\"2010-12-13 10:55:15\", \"1988-04-30 01:19:47\", \"1975-05-20 18:31:21\") | transcript_contents : student_course_id (0, 0, 2), transcript_id (2, 8, 5)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "first_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : state_province_county , zip_postcode , address_id , country , line_2 , line_3 , line_1 , other_address_details , city  | courses : course_name , other_details , course_description , course_id  | departments : department_id , department_description , department_name , other_details  | degree_programs : degree_summary_description , department_id , degree_program_id , other_details , degree_summary_name  | sections : other_details , section_description , section_id , section_name , course_id  | semesters : semester_id , semester_name , other_details , semester_description  | students : last_name , first_name , student_id , current_address_id , middle_name , cell_mobile_number 246-7921\", date_left , date_first_registered , other_student_details , email_address , permanent_address_id , ssn  | students_middle_name : middle_name , student_id  | student_enrolment : semester_id , degree_program_id , student_enrolment_id , other_details , student_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_first_registered", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Who", 
            "is", 
            "the", 
            "first", 
            "student", 
            "to", 
            "register", 
            "?", 
            "List", 
            "the", 
            "first", 
            "name", 
            ",", 
            "middle", 
            "name", 
            "and", 
            "last", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_first_registered", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Who is the first student to register? List the first name, middle name and last name.", 
        "schema_with_content": "addresses : state_province_county (\"Wyoming\", \"NorthCarolina\", \"Delaware\"), zip_postcode (\"902\", \"638\", \"847\"), address_id (1, 10, 8), country (\"Lesotho\", \"Gabon\", \"Samoa\"), line_2 (\"Suite 703\", \"Apt. 388\", \"Apt. 305\"), line_3 (None), line_1 (\"74046 Metz Walk Apt. 113\", \"7081 Eda Center\", \"3999 Aufderhar Ways Suite 593\"), other_address_details (None), city (\"Michelleburgh\", \"Lake Laishafurt\", \"Michelleburgh\") | courses : course_name (\"rs\", \"math\", \"oop\"), other_details (None), course_description (\"l\", \"v\", \"k\"), course_id (14, 6, 1) | departments : department_id (3, 15, 9), department_description (\"ea\", \"dolorem\", \"in\"), department_name (\"linguistic\", \"geography\", \"medical\"), other_details (None) | degree_programs : degree_summary_description (\"esse\", \"cumque\", \"aperiam\"), department_id (4, 14, 14), degree_program_id (15, 1, 9), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : other_details (None), section_description (\"facilis\", \"et\", \"ad\"), section_id (15, 5, 13), section_name (\"d\", \"a\", \"g\"), course_id (10, 2, 2) | semesters : semester_id (11, 14, 8), semester_name (\"spring 2014\", \"spring 2012\", \"spring 2019\"), other_details (None), semester_description (\"c\", \"c\", \"l\") | students : last_name (\"Huel\", \"Carroll\", \"Weimann\"), first_name (\"Deon\", \"Deon\", \"Deon\"), student_id (13, 12, 13), current_address_id (2, 6, 7), middle_name (\"Mossie\", \"Judd\", \"Mossie\"), cell_mobile_number (\"171-642-5684\", \"1-879-796-8987x164\", \"(462)246-7921\"), date_left (\"2014-05-30 23:32:02\", \"1999-08-24 00:07:10\", \"2014-05-30 23:32:02\"), date_first_registered (\"1982-02-14 08:46:35\", \"1997-03-20 16:47:25\", \"2005-12-15 08:42:10\"), other_student_details (\"nesciunt\", \"nesciunt\", \"assumenda\"), email_address (\"erwin.zboncak@example.com\", \"skassulke@example.net\", \"beth42@example.org\"), permanent_address_id (9, 14, 11), ssn (\"68095\", \"43\", \"6274274\") | students_middle_name : middle_name (\"Mossie\", \"Judd\", \"Mossie\"), student_id (11, 15, 5) | student_enrolment : semester_id (15, 5, 9), degree_program_id (2, 3, 10), student_enrolment_id (9, 5, 4), other_details (None), student_id (9, 1, 12) | student_enrolment_courses : course_id (10, 13, 6), student_course_id (28982908, 9860, 604750), student_enrolment_id (13, 6, 2) | transcripts : other_details (None), transcript_date (\"1986-07-12 07:27:29\", \"1990-03-05 11:59:41\", \"1990-03-05 11:59:41\"), transcript_id (15, 12, 6) | transcript_contents : transcript_id (5, 12, 11), student_course_id (7, 45105806, 2)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "middle_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : country , state_province_county , line_2 , zip_postcode , line_3 , address_id , line_1 , other_address_details , city  | courses : other_details , course_name , course_id , course_description  | departments : department_description , department_name , other_details , department_id  | degree_programs : other_details , degree_summary_description , department_id , degree_program_id , degree_summary_name  | sections : section_name , section_description , section_id , other_details , course_id  | semesters : semester_id , other_details , semester_name , semester_description  | students : current_address_id , student_id , first_name , date_first_registered , ssn , cell_mobile_number 365-8405\", \"03174364122\", \"1-009-710-5151\", middle_name , last_name , date_left , other_student_details , permanent_address_id , email_address  | students_last_name : last_name , student_id  | student_enrolment : degree_program_id , semester_id , student_id , student_enrolment_id , other_details  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_first_registered", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Who", 
            "is", 
            "the", 
            "first", 
            "student", 
            "to", 
            "register", 
            "?", 
            "List", 
            "the", 
            "first", 
            "name", 
            ",", 
            "middle", 
            "name", 
            "and", 
            "last", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_first_registered", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Who is the first student to register? List the first name, middle name and last name.", 
        "schema_with_content": "addresses : country (\"Iceland\", \"Burundi\", \"Angola\"), state_province_county (\"Idaho\", \"NorthCarolina\", \"Arkansas\"), line_2 (\"Suite 383\", \"Apt. 335\", \"Apt. 406\"), zip_postcode (\"839\", \"638\", \"839\"), line_3 (None), address_id (8, 9, 10), line_1 (\"202 Hessel Views Apt. 468\", \"67942 Carlotta Ferry Apt. 686\", \"202 Hessel Views Apt. 468\"), other_address_details (None), city (\"New Clemensburgh\", \"Herzoghaven\", \"Prohaskafort\") | courses : other_details (None), course_name (\"db\", \"cal\", \"os\"), course_id (8, 15, 8), course_description (\"d\", \"w\", \"w\") | departments : department_description (\"natus\", \"in\", \"aliquam\"), department_name (\"biology\", \"art\", \"engineer\"), other_details (None), department_id (2, 15, 1) | degree_programs : other_details (None), degree_summary_description (\"architecto\", \"qui\", \"quam\"), department_id (7, 4, 8), degree_program_id (13, 7, 11), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_name (\"a\", \"h\", \"l\"), section_description (\"ad\", \"facilis\", \"doloremque\"), section_id (15, 13, 12), other_details (None), course_id (7, 6, 2) | semesters : semester_id (15, 5, 7), other_details (None), semester_name (\"spring 2019\", \"spring 2010\", \"spring 2015\"), semester_description (\"w\", \"c\", \"t\") | students : current_address_id (2, 12, 10), student_id (14, 11, 7), first_name (\"Jarvis\", \"Gregg\", \"Timmothy\"), date_first_registered (\"2009-09-25 00:14:25\", \"2005-12-15 08:42:10\", \"2009-09-25 00:14:25\"), ssn (\"68095\", \"6274274\", \"6274274\"), cell_mobile_number (\"(507)365-8405\", \"03174364122\", \"1-009-710-5151\"), middle_name (\"Golda\", \"Vaughn\", \"Vaughn\"), last_name (\"Osinski\", \"Weimann\", \"Ward\"), date_left (\"2016-04-09 12:27:04\", \"2006-08-04 17:26:49\", \"2007-11-28 12:50:21\"), other_student_details (\"nesciunt\", \"quia\", \"laborum\"), permanent_address_id (8, 8, 14), email_address (\"beth42@example.org\", \"mya88@example.org\", \"jillian26@example.net\") | students_last_name : last_name (\"Osinski\", \"Weimann\", \"Ward\"), student_id (11, 2, 11) | student_enrolment : degree_program_id (10, 9, 2), semester_id (13, 9, 13), student_id (7, 6, 12), student_enrolment_id (8, 12, 15), other_details (None) | student_enrolment_courses : student_enrolment_id (8, 13, 5), student_course_id (0, 9860, 8), course_id (3, 13, 10) | transcripts : other_details (None), transcript_id (9, 12, 11), transcript_date (\"1999-01-06 20:06:46\", \"1985-08-21 09:32:39\", \"2002-09-24 06:11:49\") | transcript_contents : student_course_id (96, 2, 96), transcript_id (13, 8, 15)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "last_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : country , line_3 , state_province_county , line_1 , line_2 , city , zip_postcode , other_address_details , address_id  | courses : course_id , other_details , course_name , course_description  | departments : department_name , department_description , department_id , other_details  | degree_programs : department_id , degree_summary_description , other_details , degree_summary_name , degree_program_id  | sections : section_description , other_details , course_id , section_id , section_name  | semesters : semester_description , semester_id , semester_name , other_details  | students : email_address , last_name , first_name , middle_name , other_student_details , date_first_registered , ssn , date_left , current_address_id , permanent_address_id , student_id , cell_mobile_number  | students_first_name : student_id , first_name  | student_enrolment : semester_id , student_id , student_enrolment_id , degree_program_id , other_details  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_first_registered", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            ",", 
            "middle", 
            ",", 
            "and", 
            "last", 
            "name", 
            "of", 
            "the", 
            "first", 
            "student", 
            "to", 
            "register", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_first_registered", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first, middle, and last name of the first student to register?", 
        "schema_with_content": "addresses : country (\"Saudi Arabia\", \"Norfolk Island\", \"Gabon\"), line_3 (None), state_province_county (\"Delaware\", \"Kansas\", \"Washington\"), line_1 (\"74046 Metz Walk Apt. 113\", \"202 Hessel Views Apt. 468\", \"492 Wilkinson Route\"), line_2 (\"Apt. 468\", \"Suite 239\", \"Suite 079\"), city (\"Prohaskafort\", \"Port Oceane\", \"New Clemensburgh\"), zip_postcode (\"068\", \"400\", \"541\"), other_address_details (None), address_id (6, 4, 10) | courses : course_id (14, 1, 10), other_details (None), course_name (\"cal\", \"nlp\", \"dl\"), course_description (\"n\", \"k\", \"l\") | departments : department_name (\"dance\", \"art\", \"drama\"), department_description (\"autem\", \"nisi\", \"nisi\"), department_id (6, 1, 3), other_details (None) | degree_programs : department_id (7, 13, 7), degree_summary_description (\"voluptas\", \"architecto\", \"et\"), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (9, 4, 12) | sections : section_description (\"ex\", \"non\", \"voluptas\"), other_details (None), course_id (2, 6, 5), section_id (7, 12, 10), section_name (\"j\", \"o\", \"b\") | semesters : semester_description (\"y\", \"w\", \"c\"), semester_id (2, 4, 12), semester_name (\"spring 2018\", \"spring 2019\", \"summer 2010\"), other_details (None) | students : email_address (\"jhuel@example.com\", \"mya88@example.org\", \"gracie29@example.com\"), last_name (\"Jaskolski\", \"Huel\", \"Rogahn\"), first_name (\"Deon\", \"Delaney\", \"Timmothy\"), middle_name (\"Cleve\", \"Violet\", \"Brooklyn\"), other_student_details (\"nesciunt\", \"autem\", \"qui\"), date_first_registered (\"1971-02-05 07:28:23\", \"1986-02-24 21:12:23\", \"1982-02-14 08:46:35\"), ssn (\"39\", \"3\", \"6274274\"), date_left (\"2016-04-09 12:27:04\", \"2007-08-02 04:12:58\", \"2007-03-31 09:53:19\"), current_address_id (14, 15, 2), permanent_address_id (11, 14, 9), student_id (7, 4, 1), cell_mobile_number (\"07661787471\", \"1-009-710-5151\", \"1-009-710-5151\") | students_first_name : student_id (3, 15, 11), first_name (\"Deon\", \"Delaney\", \"Timmothy\") | student_enrolment : semester_id (13, 2, 15), student_id (7, 4, 9), student_enrolment_id (13, 4, 8), degree_program_id (2, 5, 5), other_details (None) | student_enrolment_courses : course_id (10, 10, 3), student_enrolment_id (13, 9, 4), student_course_id (45105806, 0, 7) | transcripts : other_details (None), transcript_id (4, 11, 14), transcript_date (\"1984-01-18 23:07:07\", \"1986-07-12 07:27:29\", \"1985-08-21 09:32:39\") | transcript_contents : transcript_id (15, 12, 4), student_course_id (28982908, 70882679, 8)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "first_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : city , line_3 , line_1 , address_id , other_address_details , country , zip_postcode , state_province_county , line_2  | courses : course_id , course_description , other_details , course_name  | departments : other_details , department_name , department_id , department_description  | degree_programs : degree_program_id , other_details , degree_summary_name , degree_summary_description , department_id  | sections : course_id , section_description , section_name , other_details , section_id  | semesters : semester_name , semester_description , other_details , semester_id  | students : student_id , first_name , other_student_details , cell_mobile_number , date_first_registered , last_name , email_address , date_left , middle_name , permanent_address_id , current_address_id , ssn  | students_middle_name : middle_name , student_id  | student_enrolment : student_enrolment_id , semester_id , other_details , degree_program_id , student_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : transcript_id , transcript_date , other_details  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_first_registered", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            ",", 
            "middle", 
            ",", 
            "and", 
            "last", 
            "name", 
            "of", 
            "the", 
            "first", 
            "student", 
            "to", 
            "register", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_first_registered", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first, middle, and last name of the first student to register?", 
        "schema_with_content": "addresses : city (\"North Omer\", \"Mariliehaven\", \"Prohaskafort\"), line_3 (None), line_1 (\"202 Hessel Views Apt. 468\", \"74046 Metz Walk Apt. 113\", \"186 Evan Motorway Apt. 409\"), address_id (15, 6, 9), other_address_details (None), country (\"Gabon\", \"Croatia\", \"Haiti\"), zip_postcode (\"777\", \"847\", \"590\"), state_province_county (\"NorthCarolina\", \"Arkansas\", \"Virginia\"), line_2 (\"Apt. 583\", \"Suite 703\", \"Suite 239\") | courses : course_id (15, 10, 7), course_description (\"l\", \"c\", \"v\"), other_details (None), course_name (\"cal\", \"rs\", \"pl\") | departments : other_details (None), department_name (\"dance\", \"linguistic\", \"drama\"), department_id (4, 6, 3), department_description (\"doloribus\", \"in\", \"in\") | degree_programs : degree_program_id (11, 4, 13), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"cumque\", \"quam\", \"officiis\"), department_id (7, 15, 4) | sections : course_id (6, 10, 12), section_description (\"ad\", \"qui\", \"et\"), section_name (\"f\", \"a\", \"d\"), other_details (None), section_id (8, 9, 6) | semesters : semester_name (\"spring 2013\", \"spring 2014\", \"winter 2010\"), semester_description (\"m\", \"w\", \"f\"), other_details (None), semester_id (9, 9, 9) | students : student_id (8, 9, 13), first_name (\"Frida\", \"Warren\", \"Jett\"), other_student_details (\"atque\", \"voluptatem\", \"facilis\"), cell_mobile_number (\"07661787471\", \"1-879-796-8987x164\", \"677.401.9382\"), date_first_registered (\"1976-10-26 02:33:06\", \"1973-05-19 19:12:46\", \"2014-03-28 05:48:23\"), last_name (\"Mohr\", \"Mohr\", \"Ward\"), email_address (\"mya88@example.org\", \"jhuel@example.com\", \"nbruen@example.org\"), date_left (\"1982-06-11 00:25:39\", \"1982-06-11 00:25:39\", \"1975-10-09 00:49:27\"), middle_name (\"Aaliyah\", \"Osborne\", \"Judd\"), permanent_address_id (4, 9, 9), current_address_id (7, 6, 2), ssn (\"39\", \"965\", \"141072406\") | students_middle_name : middle_name (\"Aaliyah\", \"Osborne\", \"Judd\"), student_id (2, 11, 5) | student_enrolment : student_enrolment_id (4, 12, 1), semester_id (6, 4, 5), other_details (None), degree_program_id (11, 8, 8), student_id (5, 6, 12) | student_enrolment_courses : course_id (2, 8, 14), student_course_id (28982908, 8, 681404), student_enrolment_id (9, 13, 6) | transcripts : transcript_id (10, 1, 11), transcript_date (\"1975-10-28 15:16:51\", \"1988-04-30 01:19:47\", \"1986-07-12 07:27:29\"), other_details (None) | transcript_contents : student_course_id (76, 2, 96), transcript_id (2, 13, 9)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "middle_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : line_2 , address_id , other_address_details , state_province_county , zip_postcode , line_1 , line_3 , country , city  | courses : course_id , course_description , course_name , other_details  | departments : department_description , department_id , department_name , other_details  | degree_programs : degree_program_id , degree_summary_description , other_details , department_id , degree_summary_name  | sections : section_id , course_id , section_name , section_description , other_details  | semesters : semester_name , other_details , semester_description , semester_id  | students : student_id , current_address_id , email_address , first_name , last_name , cell_mobile_number 445-0399x85208\", date_left , other_student_details , ssn , permanent_address_id , date_first_registered , middle_name  | students_last_name : last_name , student_id  | student_enrolment : semester_id , degree_program_id , other_details , student_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_first_registered", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            ",", 
            "middle", 
            ",", 
            "and", 
            "last", 
            "name", 
            "of", 
            "the", 
            "first", 
            "student", 
            "to", 
            "register", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_first_registered", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first, middle, and last name of the first student to register?", 
        "schema_with_content": "addresses : line_2 (\"Apt. 388\", \"Suite 079\", \"Suite 830\"), address_id (4, 3, 11), other_address_details (None), state_province_county (\"SouthDakota\", \"Hawaii\", \"WestVirginia\"), zip_postcode (\"895\", \"638\", \"400\"), line_1 (\"7081 Eda Center\", \"74046 Metz Walk Apt. 113\", \"7081 Eda Center\"), line_3 (None), country (\"Samoa\", \"Burundi\", \"Norfolk Island\"), city (\"New Clemensburgh\", \"Port Elvisfurt\", \"Lake Laishafurt\") | courses : course_id (12, 11, 3), course_description (\"c\", \"q\", \"c\"), course_name (\"rs\", \"cal\", \"la\"), other_details (None) | departments : department_description (\"autem\", \"dolorem\", \"non\"), department_id (10, 10, 1), department_name (\"statistics\", \"medical\", \"statistics\"), other_details (None) | degree_programs : degree_program_id (12, 15, 3), degree_summary_description (\"architecto\", \"voluptas\", \"cumque\"), other_details (None), department_id (12, 14, 13), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (5, 8, 3), course_id (9, 6, 7), section_name (\"d\", \"e\", \"c\"), section_description (\"provident\", \"provident\", \"ex\"), other_details (None) | semesters : semester_name (\"fall 2018\", \"spring 2010\", \"spring 2015\"), other_details (None), semester_description (\"f\", \"m\", \"o\"), semester_id (6, 10, 3) | students : student_id (10, 4, 15), current_address_id (6, 12, 1), email_address (\"nya.lesch@example.net\", \"dell43@example.net\", \"jhuel@example.com\"), first_name (\"Reva\", \"Timmothy\", \"Hobart\"), last_name (\"Christiansen\", \"Rempel\", \"Mohr\"), cell_mobile_number (\"171-642-5684\", \"877.549.9067x8723\", \"(213)445-0399x85208\"), date_left (\"1990-09-01 05:03:27\", \"2007-03-31 09:53:19\", \"2007-08-02 04:12:58\"), other_student_details (\"facilis\", \"facilis\", \"voluptatem\"), ssn (\"39\", \"248\", \"\"), permanent_address_id (11, 5, 11), date_first_registered (\"2018-03-13 09:56:22\", \"1986-02-24 21:12:23\", \"2014-03-28 05:48:23\"), middle_name (\"Anna\", \"Vaughn\", \"Aaliyah\") | students_last_name : last_name (\"Christiansen\", \"Rempel\", \"Mohr\"), student_id (15, 1, 2) | student_enrolment : semester_id (1, 13, 13), degree_program_id (12, 8, 5), other_details (None), student_id (12, 1, 9), student_enrolment_id (12, 8, 14) | student_enrolment_courses : student_enrolment_id (4, 13, 5), student_course_id (70882679, 70882679, 2), course_id (10, 3, 4) | transcripts : transcript_date (\"1975-10-28 15:16:51\", \"2010-12-13 10:55:15\", \"1975-05-06 12:04:47\"), transcript_id (1, 11, 5), other_details (None) | transcript_contents : transcript_id (8, 5, 2), student_course_id (2, 96, 7)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            41, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "last_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : city , other_address_details , line_3 , line_1 , country , address_id , state_province_county , line_2 , zip_postcode  | courses : course_id , course_name , course_description , other_details  | departments : department_description , other_details , department_id , department_name  | degree_programs : other_details , degree_summary_name , department_id , degree_program_id , degree_summary_description  | sections : other_details , section_name , section_id , course_id , section_description  | semesters : semester_description , other_details , semester_name , semester_id  | students : current_address_id , permanent_address_id , date_left , first_name , email_address , last_name , student_id , middle_name , other_student_details , cell_mobile_number 889-8954x524\", date_first_registered , ssn  | students_first_name : student_id , first_name  | student_enrolment : degree_program_id , semester_id , student_id , other_details , student_enrolment_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_left", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Who", 
            "is", 
            "the", 
            "earliest", 
            "graduate", 
            "of", 
            "the", 
            "school", 
            "?", 
            "List", 
            "the", 
            "first", 
            "name", 
            ",", 
            "middle", 
            "name", 
            "and", 
            "last", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_left", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", 
        "schema_with_content": "addresses : city (\"North Omer\", \"Port Elvisfurt\", \"Prohaskafort\"), other_address_details (None), line_3 (None), line_1 (\"0144 Lamar Plaza Apt. 346\", \"67942 Carlotta Ferry Apt. 686\", \"0643 Muller Vista\"), country (\"New Caledonia\", \"Haiti\", \"Samoa\"), address_id (5, 8, 7), state_province_county (\"Kansas\", \"Washington\", \"Arkansas\"), line_2 (\"Apt. 335\", \"Suite 703\", \"Apt. 335\"), zip_postcode (\"943\", \"847\", \"669\") | courses : course_id (6, 13, 12), course_name (\"ai\", \"oop\", \"dl\"), course_description (\"n\", \"w\", \"d\"), other_details (None) | departments : department_description (\"nisi\", \"dolorem\", \"dolorem\"), other_details (None), department_id (8, 8, 10), department_name (\"art\", \"art\", \"law\") | degree_programs : other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (13, 14, 7), degree_program_id (8, 13, 12), degree_summary_description (\"aut\", \"aut\", \"cumque\") | sections : other_details (None), section_name (\"p\", \"d\", \"a\"), section_id (7, 9, 1), course_id (12, 8, 10), section_description (\"quis\", \"voluptatem\", \"provident\") | semesters : semester_description (\"l\", \"x\", \"x\"), other_details (None), semester_name (\"fall 2010\", \"spring 2018\", \"spring 2015\"), semester_id (12, 4, 9) | students : current_address_id (6, 1, 2), permanent_address_id (4, 15, 3), date_left (\"1997-11-16 08:54:33\", \"2017-07-09 21:38:43\", \"2007-11-28 12:50:21\"), first_name (\"Deon\", \"Timmothy\", \"Orrin\"), email_address (\"beth42@example.org\", \"erwin.zboncak@example.com\", \"lhartmann@example.org\"), last_name (\"Huel\", \"Huel\", \"Rogahn\"), student_id (10, 10, 7), middle_name (\"Neal\", \"Osborne\", \"Brooklyn\"), other_student_details (\"omnis\", \"non\", \"omnis\"), cell_mobile_number (\"07661787471\", \"09700166582\", \"(096)889-8954x524\"), date_first_registered (\"1982-06-19 13:15:18\", \"1986-02-24 21:12:23\", \"2009-09-25 00:14:25\"), ssn (\"304246\", \"3\", \"\") | students_first_name : student_id (6, 13, 10), first_name (\"Deon\", \"Timmothy\", \"Orrin\") | student_enrolment : degree_program_id (10, 5, 11), semester_id (2, 12, 12), student_id (6, 6, 6), other_details (None), student_enrolment_id (6, 12, 15) | student_enrolment_courses : course_id (13, 14, 11), student_course_id (681404, 8, 9860), student_enrolment_id (10, 13, 8) | transcripts : other_details (None), transcript_id (1, 15, 14), transcript_date (\"2010-12-13 10:55:15\", \"1975-05-06 12:04:47\", \"1998-11-22 12:18:29\") | transcript_contents : student_course_id (8, 7, 45105806), transcript_id (4, 6, 13)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            42, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "first_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : line_3 , country , address_id , state_province_county , other_address_details , line_1 , zip_postcode , city , line_2  | courses : course_name , course_description , course_id , other_details  | departments : department_name , other_details , department_id , department_description  | degree_programs : degree_program_id , degree_summary_name , department_id , degree_summary_description , other_details  | sections : section_description , section_id , course_id , section_name , other_details  | semesters : other_details , semester_description , semester_name , semester_id  | students : middle_name , last_name , permanent_address_id , other_student_details , student_id , date_first_registered , cell_mobile_number 246-7921\", first_name , email_address , date_left , current_address_id , ssn  | students_middle_name : student_id , middle_name  | student_enrolment : degree_program_id , other_details , student_enrolment_id , semester_id , student_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_left", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Who", 
            "is", 
            "the", 
            "earliest", 
            "graduate", 
            "of", 
            "the", 
            "school", 
            "?", 
            "List", 
            "the", 
            "first", 
            "name", 
            ",", 
            "middle", 
            "name", 
            "and", 
            "last", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_left", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", 
        "schema_with_content": "addresses : line_3 (None), country (\"Cook Islands\", \"Haiti\", \"Cook Islands\"), address_id (11, 13, 15), state_province_county (\"Kansas\", \"Kansas\", \"Florida\"), other_address_details (None), line_1 (\"7081 Eda Center\", \"202 Hessel Views Apt. 468\", \"7081 Eda Center\"), zip_postcode (\"400\", \"400\", \"669\"), city (\"Port Chelsea\", \"Port Chelsea\", \"Port Oceane\"), line_2 (\"Suite 239\", \"Suite 239\", \"Apt. 370\") | courses : course_name (\"cal\", \"dl\", \"nlp\"), course_description (\"w\", \"v\", \"b\"), course_id (13, 13, 1), other_details (None) | departments : department_name (\"statistics\", \"dance\", \"management\"), other_details (None), department_id (1, 2, 11), department_description (\"error\", \"in\", \"natus\") | degree_programs : degree_program_id (13, 3, 4), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (4, 8, 3), degree_summary_description (\"unde\", \"architecto\", \"assumenda\"), other_details (None) | sections : section_description (\"reprehenderit\", \"non\", \"qui\"), section_id (1, 15, 6), course_id (5, 4, 2), section_name (\"a\", \"p\", \"f\"), other_details (None) | semesters : other_details (None), semester_description (\"w\", \"f\", \"t\"), semester_name (\"spring 2014\", \"spring 2013\", \"winter 2010\"), semester_id (3, 15, 3) | students : middle_name (\"Aaliyah\", \"Lorenz\", \"Violet\"), last_name (\"Balistreri\", \"Christiansen\", \"Christiansen\"), permanent_address_id (4, 8, 14), other_student_details (\"facilis\", \"non\", \"dolorum\"), student_id (4, 1, 1), date_first_registered (\"2005-12-15 08:42:10\", \"2017-01-04 08:10:25\", \"2007-08-29 23:25:41\"), cell_mobile_number (\"171-642-5684\", \"1-009-710-5151\", \"(462)246-7921\"), first_name (\"Jordy\", \"Delaney\", \"Timmothy\"), email_address (\"skassulke@example.net\", \"dell43@example.net\", \"erwin.zboncak@example.com\"), date_left (\"2007-08-02 04:12:58\", \"2013-10-05 17:41:28\", \"1997-11-16 08:54:33\"), current_address_id (1, 6, 2), ssn (\"248\", \"402\", \"248\") | students_middle_name : student_id (9, 6, 8), middle_name (\"Aaliyah\", \"Lorenz\", \"Violet\") | student_enrolment : degree_program_id (8, 9, 5), other_details (None), student_enrolment_id (1, 8, 3), semester_id (9, 6, 4), student_id (5, 5, 9) | student_enrolment_courses : course_id (2, 6, 8), student_enrolment_id (8, 8, 13), student_course_id (9860, 7, 28982908) | transcripts : other_details (None), transcript_date (\"2002-09-24 06:11:49\", \"1990-03-05 11:59:41\", \"1986-07-12 07:27:29\"), transcript_id (8, 1, 14) | transcript_contents : transcript_id (5, 6, 5), student_course_id (76, 45105806, 70882679)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            42, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "middle_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : line_2 , address_id , country , zip_postcode , other_address_details , line_3 , state_province_county , line_1 , city  | courses : course_id , course_name , course_description , other_details  | departments : department_name , department_id , other_details , department_description  | degree_programs : degree_summary_description , degree_program_id , department_id , degree_summary_name , other_details  | sections : section_id , section_name , course_id , other_details , section_description  | semesters : other_details , semester_id , semester_description , semester_name  | students : first_name , current_address_id , last_name , email_address , other_student_details , student_id , ssn , middle_name , permanent_address_id , cell_mobile_number , date_left , date_first_registered  | students_last_name : student_id , last_name  | student_enrolment : degree_program_id , student_id , semester_id , student_enrolment_id , other_details  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_left", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Who", 
            "is", 
            "the", 
            "earliest", 
            "graduate", 
            "of", 
            "the", 
            "school", 
            "?", 
            "List", 
            "the", 
            "first", 
            "name", 
            ",", 
            "middle", 
            "name", 
            "and", 
            "last", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_left", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", 
        "schema_with_content": "addresses : line_2 (\"Apt. 388\", \"Apt. 305\", \"Apt. 388\"), address_id (11, 7, 8), country (\"Iceland\", \"Angola\", \"Iceland\"), zip_postcode (\"839\", \"777\", \"148\"), other_address_details (None), line_3 (None), state_province_county (\"WestVirginia\", \"Delaware\", \"Virginia\"), line_1 (\"858 Peggie Bypass Suite 212\", \"0144 Lamar Plaza Apt. 346\", \"9283 Schulist Falls Apt. 037\"), city (\"Mariliehaven\", \"Port Oceane\", \"Lake Laishafurt\") | courses : course_id (15, 4, 14), course_name (\"ai\", \"ml\", \"en\"), course_description (\"b\", \"k\", \"l\"), other_details (None) | departments : department_name (\"drama\", \"biology\", \"geography\"), department_id (7, 6, 2), other_details (None), department_description (\"ea\", \"natus\", \"aliquam\") | degree_programs : degree_summary_description (\"quam\", \"placeat\", \"cumque\"), degree_program_id (13, 6, 9), department_id (13, 8, 15), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None) | sections : section_id (3, 12, 5), section_name (\"g\", \"j\", \"k\"), course_id (2, 5, 2), other_details (None), section_description (\"nesciunt\", \"ad\", \"facilis\") | semesters : other_details (None), semester_id (9, 10, 15), semester_description (\"c\", \"w\", \"c\"), semester_name (\"spring 2014\", \"spring 2012\", \"spring 2016\") | students : first_name (\"Stanford\", \"Helga\", \"Frida\"), current_address_id (7, 9, 14), last_name (\"Christiansen\", \"Weimann\", \"Mohr\"), email_address (\"lhartmann@example.org\", \"mya88@example.org\", \"jhuel@example.com\"), other_student_details (\"assumenda\", \"facilis\", \"facilis\"), student_id (14, 13, 1), ssn (\"402\", \"3\", \"156\"), middle_name (\"Brooklyn\", \"Mona\", \"Osborne\"), permanent_address_id (8, 14, 5), cell_mobile_number (\"1-009-710-5151\", \"877.549.9067x8723\", \"03174364122\"), date_left (\"1971-05-17 19:28:49\", \"1990-09-01 05:03:27\", \"2006-08-04 17:26:49\"), date_first_registered (\"1997-03-20 16:47:25\", \"1986-02-24 21:12:23\", \"1997-03-20 16:47:25\") | students_last_name : student_id (12, 7, 14), last_name (\"Christiansen\", \"Weimann\", \"Mohr\") | student_enrolment : degree_program_id (12, 5, 8), student_id (5, 7, 4), semester_id (13, 9, 6), student_enrolment_id (6, 1, 8), other_details (None) | student_enrolment_courses : student_course_id (83814225, 681404, 7), course_id (8, 10, 4), student_enrolment_id (2, 9, 6) | transcripts : other_details (None), transcript_id (3, 15, 5), transcript_date (\"1990-03-05 11:59:41\", \"1988-04-30 01:19:47\", \"1990-03-05 11:59:41\") | transcript_contents : transcript_id (5, 12, 6), student_course_id (0, 70882679, 2)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            42, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "last_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : other_address_details , city , line_2 , address_id , state_province_county , line_1 , country , zip_postcode , line_3  | courses : other_details , course_description , course_name , course_id  | departments : other_details , department_name , department_id , department_description  | degree_programs : other_details , degree_summary_name , degree_program_id , department_id , degree_summary_description  | sections : other_details , section_id , section_name , course_id , section_description  | semesters : semester_name , other_details , semester_id , semester_description  | students : email_address , other_student_details , ssn , cell_mobile_number 365-8405\", \"03174364122\", \"445-0399x85208\", permanent_address_id , current_address_id , middle_name , date_first_registered , last_name , student_id , first_name , date_left  | students_first_name : first_name , student_id  | student_enrolment : semester_id , other_details , student_enrolment_id , student_id , degree_program_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_left", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            ",", 
            "middle", 
            ",", 
            "and", 
            "last", 
            "name", 
            "of", 
            "the", 
            "earliest", 
            "school", 
            "graduate", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_left", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first, middle, and last name of the earliest school graduate?", 
        "schema_with_content": "addresses : other_address_details (None), city (\"Lake Careyberg\", \"Herzoghaven\", \"Port Oceane\"), line_2 (\"Suite 865\", \"Apt. 388\", \"Apt. 388\"), address_id (6, 11, 14), state_province_county (\"SouthDakota\", \"Kansas\", \"Kentucky\"), line_1 (\"67942 Carlotta Ferry Apt. 686\", \"7081 Eda Center\", \"492 Wilkinson Route\"), country (\"Gabon\", \"Bermuda\", \"Cook Islands\"), zip_postcode (\"669\", \"068\", \"446\"), line_3 (None) | courses : other_details (None), course_description (\"v\", \"w\", \"q\"), course_name (\"dl\", \"ds\", \"db\"), course_id (10, 7, 2) | departments : other_details (None), department_name (\"art\", \"law\", \"law\"), department_id (10, 5, 11), department_description (\"aliquam\", \"natus\", \"consequatur\") | degree_programs : other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (8, 13, 13), department_id (3, 3, 13), degree_summary_description (\"officiis\", \"aperiam\", \"officiis\") | sections : other_details (None), section_id (8, 3, 3), section_name (\"f\", \"f\", \"k\"), course_id (1, 7, 7), section_description (\"nesciunt\", \"nesciunt\", \"ex\") | semesters : semester_name (\"spring 2018\", \"fall 2010\", \"spring 2019\"), other_details (None), semester_id (8, 8, 13), semester_description (\"q\", \"t\", \"f\") | students : email_address (\"qo'kon@example.com\", \"qo'kon@example.com\", \"swift.kolby@example.com\"), other_student_details (\"quia\", \"qui\", \"et\"), ssn (\"141072406\", \"39\", \"3\"), cell_mobile_number (\"(507)365-8405\", \"03174364122\", \"(213)445-0399x85208\"), permanent_address_id (4, 3, 11), current_address_id (14, 14, 2), middle_name (\"Osborne\", \"Osborne\", \"Golda\"), date_first_registered (\"1986-02-24 21:12:23\", \"1986-02-24 21:12:23\", \"1989-05-24 23:31:29\"), last_name (\"Rogahn\", \"Rempel\", \"Ward\"), student_id (5, 14, 12), first_name (\"Reva\", \"Timmothy\", \"Hobart\"), date_left (\"2004-12-08 05:29:11\", \"1997-11-16 08:54:33\", \"1971-05-17 19:28:49\") | students_first_name : first_name (\"Reva\", \"Timmothy\", \"Hobart\"), student_id (10, 15, 6) | student_enrolment : semester_id (5, 5, 15), other_details (None), student_enrolment_id (4, 8, 7), student_id (5, 4, 6), degree_program_id (2, 8, 9) | student_enrolment_courses : course_id (10, 6, 11), student_course_id (7, 2, 7), student_enrolment_id (10, 14, 5) | transcripts : other_details (None), transcript_id (8, 11, 4), transcript_date (\"2010-12-13 10:55:15\", \"2010-12-13 10:55:15\", \"1975-05-06 12:04:47\") | transcript_contents : transcript_id (2, 5, 11), student_course_id (2, 0, 28982908)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            42, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "first_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : city , line_3 , line_2 , other_address_details , state_province_county , address_id , line_1 , country , zip_postcode  | courses : course_description , course_id , other_details , course_name  | departments : department_id , department_name , department_description , other_details  | degree_programs : department_id , degree_summary_description , degree_program_id , degree_summary_name , other_details  | sections : section_name , other_details , section_id , section_description , course_id  | semesters : other_details , semester_description , semester_id , semester_name  | students : first_name , ssn , last_name , student_id , email_address , date_left , other_student_details , date_first_registered , permanent_address_id , current_address_id , middle_name , cell_mobile_number 365-8405\", \"07661787471\" | students_middle_name : middle_name , student_id  | student_enrolment : student_enrolment_id , other_details , semester_id , degree_program_id , student_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_left", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            ",", 
            "middle", 
            ",", 
            "and", 
            "last", 
            "name", 
            "of", 
            "the", 
            "earliest", 
            "school", 
            "graduate", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_left", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first, middle, and last name of the earliest school graduate?", 
        "schema_with_content": "addresses : city (\"South Palma\", \"Port Elvisfurt\", \"Rutherfordtown\"), line_3 (None), line_2 (\"Suite 383\", \"Apt. 335\", \"Suite 239\"), other_address_details (None), state_province_county (\"Virginia\", \"WestVirginia\", \"WestVirginia\"), address_id (10, 6, 13), line_1 (\"9283 Schulist Falls Apt. 037\", \"9283 Schulist Falls Apt. 037\", \"3999 Aufderhar Ways Suite 593\"), country (\"Croatia\", \"Iceland\", \"Burundi\"), zip_postcode (\"839\", \"446\", \"386\") | courses : course_description (\"n\", \"w\", \"c\"), course_id (9, 1, 4), other_details (None), course_name (\"oop\", \"rs\", \"os\") | departments : department_id (11, 14, 15), department_name (\"dance\", \"biology\", \"geography\"), department_description (\"natus\", \"error\", \"ea\"), other_details (None) | degree_programs : department_id (4, 13, 12), degree_summary_description (\"architecto\", \"quam\", \"officiis\"), degree_program_id (4, 9, 6), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None) | sections : section_name (\"e\", \"f\", \"p\"), other_details (None), section_id (14, 9, 15), section_description (\"et\", \"doloremque\", \"voluptatem\"), course_id (5, 2, 4) | semesters : other_details (None), semester_description (\"c\", \"w\", \"g\"), semester_id (4, 15, 12), semester_name (\"spring 2019\", \"summer 2010\", \"summer 2010\") | students : first_name (\"Helga\", \"Timmothy\", \"Gregg\"), ssn (\"141072406\", \"156\", \"68095\"), last_name (\"Christiansen\", \"Weimann\", \"Carroll\"), student_id (7, 4, 10), email_address (\"swift.kolby@example.com\", \"jillian26@example.net\", \"baumbach.lucious@example.org\"), date_left (\"2007-08-02 04:12:58\", \"2007-08-02 04:12:58\", \"1990-09-01 05:03:27\"), other_student_details (\"non\", \"autem\", \"atque\"), date_first_registered (\"1971-02-05 07:28:23\", \"2004-12-24 12:36:46\", \"2009-09-25 00:14:25\"), permanent_address_id (5, 9, 11), current_address_id (12, 6, 7), middle_name (\"Alberta\", \"Judd\", \"Aaliyah\"), cell_mobile_number (\"07661787471\", \"(507)365-8405\", \"07661787471\") | students_middle_name : middle_name (\"Alberta\", \"Judd\", \"Aaliyah\"), student_id (13, 5, 15) | student_enrolment : student_enrolment_id (5, 10, 5), other_details (None), semester_id (4, 2, 1), degree_program_id (10, 4, 3), student_id (4, 4, 12) | student_enrolment_courses : student_enrolment_id (8, 4, 5), student_course_id (1, 9860, 1), course_id (14, 10, 8) | transcripts : other_details (None), transcript_id (3, 3, 7), transcript_date (\"1998-11-22 12:18:29\", \"1975-05-20 18:31:21\", \"1988-04-30 01:19:47\") | transcript_contents : student_course_id (70882679, 76, 45105806), transcript_id (12, 2, 15)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            42, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "middle_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : state_province_county , other_address_details , address_id , zip_postcode , city , line_2 , line_1 , country , line_3  | courses : course_name , course_id , other_details , course_description  | departments : other_details , department_id , department_name , department_description  | degree_programs : degree_summary_name , other_details , degree_summary_description , department_id , degree_program_id  | sections : section_id , section_description , other_details , course_id , section_name  | semesters : semester_id , semester_name , semester_description , other_details  | students : date_first_registered , cell_mobile_number 365-8405\", \"877.549.9067x8723\", current_address_id , middle_name , permanent_address_id , email_address , date_left , other_student_details , last_name , first_name , student_id , ssn  | students_last_name : last_name , student_id  | student_enrolment : semester_id , student_enrolment_id , student_id , other_details , degree_program_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "from", 
            "students", 
            "order", 
            "by", 
            "date_left", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "first", 
            ",", 
            "middle", 
            ",", 
            "and", 
            "last", 
            "name", 
            "of", 
            "the", 
            "earliest", 
            "school", 
            "graduate", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "middle_name", 
            ",", 
            "last_name", 
            "FROM", 
            "Students", 
            "ORDER", 
            "BY", 
            "date_left", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the first, middle, and last name of the earliest school graduate?", 
        "schema_with_content": "addresses : state_province_county (\"Hawaii\", \"Florida\", \"Idaho\"), other_address_details (None), address_id (6, 11, 9), zip_postcode (\"068\", \"446\", \"068\"), city (\"Mariliehaven\", \"Port Oceane\", \"Goodwinhaven\"), line_2 (\"Apt. 335\", \"Apt. 583\", \"Apt. 406\"), line_1 (\"0144 Lamar Plaza Apt. 346\", \"16998 Mraz Lodge\", \"67942 Carlotta Ferry Apt. 686\"), country (\"Lesotho\", \"Bermuda\", \"Norfolk Island\"), line_3 (None) | courses : course_name (\"db\", \"math\", \"en\"), course_id (4, 9, 11), other_details (None), course_description (\"v\", \"n\", \"d\") | departments : other_details (None), department_id (9, 14, 6), department_name (\"dance\", \"art\", \"law\"), department_description (\"in\", \"in\", \"error\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_summary_description (\"aut\", \"quam\", \"unde\"), department_id (11, 13, 15), degree_program_id (6, 14, 8) | sections : section_id (7, 11, 9), section_description (\"reprehenderit\", \"voluptatem\", \"voluptas\"), other_details (None), course_id (7, 4, 6), section_name (\"l\", \"e\", \"a\") | semesters : semester_id (5, 4, 13), semester_name (\"winter 2010\", \"spring 2017\", \"winter 2018\"), semester_description (\"w\", \"g\", \"g\"), other_details (None) | students : date_first_registered (\"1989-05-24 23:31:29\", \"2017-01-04 08:10:25\", \"1997-03-20 16:47:25\"), cell_mobile_number (\"03174364122\", \"(507)365-8405\", \"877.549.9067x8723\"), current_address_id (12, 10, 10), middle_name (\"Mossie\", \"Anna\", \"Brooklyn\"), permanent_address_id (4, 8, 14), email_address (\"swift.kolby@example.com\", \"johns.unique@example.net\", \"lhartmann@example.org\"), date_left (\"2007-11-28 12:50:21\", \"2007-08-02 04:12:58\", \"1990-09-01 05:03:27\"), other_student_details (\"dolorum\", \"atque\", \"quia\"), last_name (\"Mohr\", \"Ankunding\", \"Kemmer\"), first_name (\"Gregg\", \"Jett\", \"Orrin\"), student_id (1, 2, 1), ssn (\"68095\", \"668\", \"3\") | students_last_name : last_name (\"Mohr\", \"Ankunding\", \"Kemmer\"), student_id (3, 15, 2) | student_enrolment : semester_id (15, 13, 5), student_enrolment_id (9, 11, 14), student_id (4, 4, 4), other_details (None), degree_program_id (5, 4, 8) | student_enrolment_courses : student_enrolment_id (4, 14, 13), student_course_id (45105806, 8, 70882679), course_id (13, 11, 12) | transcripts : transcript_date (\"1984-01-18 23:07:07\", \"2010-12-13 10:55:15\", \"2002-09-24 06:11:49\"), transcript_id (12, 5, 13), other_details (None) | transcript_contents : student_course_id (28982908, 70882679, 96), transcript_id (11, 8, 11)", 
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            42, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                35, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "students": "last_name"
        }, 
        "primary_key": {
            "students": "student_id"
        }
    }, 
    {
        "schema_without_content": "addresses : state_province_county , line_1 , other_address_details , country , city , line_3 , line_2 , zip_postcode , address_id  | courses : other_details , course_description , course_id , course_name  | departments : department_id , other_details , department_name , department_description  | degree_programs : degree_summary_name , other_details , degree_summary_description , degree_program_id , department_id  | sections : course_id , section_id , section_description , other_details , section_name  | semesters : semester_description , semester_id , other_details , semester_name  | students : last_name , email_address , date_first_registered , first_name , current_address_id , date_left , cell_mobile_number 365-8405\", \"677.401.9382\", other_student_details , student_id , middle_name , permanent_address_id , ssn  | student_enrolment : other_details , semester_id , student_id , degree_program_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_other_details : other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t1.transcript_date, t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id order by t1.transcript_date asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "transcript_date", 
            ",", 
            "other_details", 
            "from", 
            "transcripts", 
            "order", 
            "by", 
            "transcript_date", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "When", 
            "is", 
            "the", 
            "first", 
            "transcript", 
            "released", 
            "?", 
            "List", 
            "the", 
            "date", 
            "and", 
            "details", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "transcript_date", 
            ",", 
            "other_details", 
            "FROM", 
            "Transcripts", 
            "ORDER", 
            "BY", 
            "transcript_date", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "When is the first transcript released? List the date and details.", 
        "schema_with_content": "addresses : state_province_county (\"WestVirginia\", \"Florida\", \"Kentucky\"), line_1 (\"2294 Grant Square Apt. 235\", \"9283 Schulist Falls Apt. 037\", \"7081 Eda Center\"), other_address_details (None), country (\"Burundi\", \"Croatia\", \"Kyrgyz Republic\"), city (\"North Omer\", \"Lake Laishafurt\", \"Rutherfordtown\"), line_3 (None), line_2 (\"Suite 383\", \"Suite 703\", \"Apt. 335\"), zip_postcode (\"669\", \"400\", \"669\"), address_id (1, 4, 3) | courses : other_details (None), course_description (\"l\", \"q\", \"q\"), course_id (14, 12, 11), course_name (\"en\", \"pl\", \"math\") | departments : department_id (14, 8, 12), other_details (None), department_name (\"law\", \"history\", \"linguistic\"), department_description (\"natus\", \"doloribus\", \"nihil\") | degree_programs : degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_summary_description (\"voluptas\", \"aut\", \"earum\"), degree_program_id (1, 10, 7), department_id (11, 8, 4) | sections : course_id (1, 1, 1), section_id (4, 14, 11), section_description (\"ad\", \"ad\", \"non\"), other_details (None), section_name (\"p\", \"e\", \"j\") | semesters : semester_description (\"y\", \"x\", \"w\"), semester_id (13, 6, 13), other_details (None), semester_name (\"spring 2014\", \"spring 2018\", \"spring 2010\") | students : last_name (\"Mohr\", \"Gleichner\", \"Osinski\"), email_address (\"johns.unique@example.net\", \"beth42@example.org\", \"beth42@example.org\"), date_first_registered (\"1989-05-24 23:31:29\", \"1997-03-20 16:47:25\", \"1976-10-26 02:33:06\"), first_name (\"Deon\", \"Delaney\", \"Jarvis\"), current_address_id (15, 14, 12), date_left (\"2006-08-04 17:26:49\", \"1982-06-11 00:25:39\", \"2014-05-30 23:32:02\"), cell_mobile_number (\"07661787471\", \"(507)365-8405\", \"677.401.9382\"), other_student_details (\"omnis\", \"laborum\", \"assumenda\"), student_id (1, 6, 13), middle_name (\"Lorenz\", \"Alberta\", \"Anna\"), permanent_address_id (11, 11, 8), ssn (\"68095\", \"141072406\", \"34458427\") | student_enrolment : other_details (None), semester_id (13, 2, 2), student_id (14, 4, 5), degree_program_id (9, 9, 3), student_enrolment_id (4, 5, 7) | student_enrolment_courses : student_enrolment_id (2, 14, 4), course_id (8, 11, 2), student_course_id (96, 1, 70882679) | transcripts : other_details (None), transcript_date (\"2002-09-24 06:11:49\", \"1975-05-20 18:31:21\", \"1986-07-12 07:27:29\"), transcript_id (2, 15, 4) | transcripts_other_details : other_details (None), transcript_id (5, 11, 8) | transcript_contents : transcript_id (9, 12, 2), student_course_id (0, 96, 0)", 
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            53, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        9
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                53, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                54, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "transcripts": "other_details"
        }, 
        "primary_key": {
            "transcripts": "transcript_id"
        }
    }, 
    {
        "schema_without_content": "addresses : address_id , country , city , zip_postcode , line_3 , line_2 , line_1 , other_address_details , state_province_county  | courses : course_name , course_id , course_description , other_details  | departments : other_details , department_id , department_description , department_name  | degree_programs : other_details , department_id , degree_summary_description , degree_program_id , degree_summary_name  | sections : section_id , section_description , other_details , section_name , course_id  | semesters : semester_name , semester_description , other_details , semester_id  | students : permanent_address_id , ssn , other_student_details , first_name , date_first_registered , last_name , current_address_id , middle_name , date_left , cell_mobile_number 889-8954x524\", \"03174364122\", \"677.401.9382\", email_address , student_id  | student_enrolment : student_id , degree_program_id , semester_id , student_enrolment_id , other_details  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_transcript_date : transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "transcript_date", 
            ",", 
            "other_details", 
            "from", 
            "transcripts", 
            "order", 
            "by", 
            "transcript_date", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "When", 
            "is", 
            "the", 
            "first", 
            "transcript", 
            "released", 
            "?", 
            "List", 
            "the", 
            "date", 
            "and", 
            "details", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "transcript_date", 
            ",", 
            "other_details", 
            "FROM", 
            "Transcripts", 
            "ORDER", 
            "BY", 
            "transcript_date", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "When is the first transcript released? List the date and details.", 
        "schema_with_content": "addresses : address_id (10, 14, 9), country (\"Samoa\", \"Gibraltar\", \"Croatia\"), city (\"Port Elvisfurt\", \"Port Chelsea\", \"Mariliehaven\"), zip_postcode (\"590\", \"400\", \"386\"), line_3 (None), line_2 (\"Apt. 305\", \"Suite 703\", \"Apt. 370\"), line_1 (\"7081 Eda Center\", \"7081 Eda Center\", \"202 Hessel Views Apt. 468\"), other_address_details (None), state_province_county (\"Delaware\", \"Virginia\", \"Idaho\") | courses : course_name (\"ml\", \"pl\", \"ai\"), course_id (13, 13, 9), course_description (\"c\", \"w\", \"n\"), other_details (None) | departments : other_details (None), department_id (4, 8, 15), department_description (\"autem\", \"in\", \"non\"), department_name (\"engineer\", \"history\", \"art\") | degree_programs : other_details (None), department_id (11, 13, 14), degree_summary_description (\"aperiam\", \"et\", \"officiis\"), degree_program_id (9, 5, 1), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (5, 5, 13), section_description (\"quis\", \"qui\", \"non\"), other_details (None), section_name (\"o\", \"f\", \"o\"), course_id (5, 4, 12) | semesters : semester_name (\"spring 2010\", \"fall 2018\", \"fall 2010\"), semester_description (\"y\", \"o\", \"m\"), other_details (None), semester_id (6, 9, 13) | students : permanent_address_id (4, 4, 11), ssn (\"402\", \"304246\", \"39\"), other_student_details (\"voluptatem\", \"et\", \"assumenda\"), first_name (\"Jett\", \"Orrin\", \"Helga\"), date_first_registered (\"1982-02-14 08:46:35\", \"2005-12-15 08:42:10\", \"2009-09-25 00:14:25\"), last_name (\"Carroll\", \"Kemmer\", \"Jaskolski\"), current_address_id (15, 12, 2), middle_name (\"Cleve\", \"Mona\", \"Mossie\"), date_left (\"1982-06-11 00:25:39\", \"2006-08-04 17:26:49\", \"2007-11-28 12:50:21\"), cell_mobile_number (\"(096)889-8954x524\", \"03174364122\", \"677.401.9382\"), email_address (\"lhartmann@example.org\", \"gracie29@example.com\", \"gracie29@example.com\"), student_id (5, 3, 14) | student_enrolment : student_id (14, 14, 14), degree_program_id (5, 5, 2), semester_id (2, 13, 2), student_enrolment_id (1, 1, 14), other_details (None) | student_enrolment_courses : student_enrolment_id (5, 13, 4), course_id (13, 11, 12), student_course_id (83814225, 681404, 70882679) | transcripts : other_details (None), transcript_date (\"2013-06-30 13:01:40\", \"1975-05-06 12:04:47\", \"1975-10-28 15:16:51\"), transcript_id (11, 7, 13) | transcripts_transcript_date : transcript_id (6, 12, 15), transcript_date (\"2013-06-30 13:01:40\", \"1975-05-06 12:04:47\", \"1975-10-28 15:16:51\") | transcript_contents : student_course_id (28982908, 45105806, 45105806), transcript_id (12, 6, 2)", 
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            53, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        9
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                53, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                54, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "transcripts": "transcript_date"
        }, 
        "primary_key": {
            "transcripts": "transcript_id"
        }
    }, 
    {
        "schema_without_content": "addresses : line_1 , city , state_province_county , zip_postcode , line_2 , country , address_id , line_3 , other_address_details  | courses : course_description , course_id , other_details , course_name  | departments : other_details , department_name , department_description , department_id  | degree_programs : degree_summary_description , other_details , degree_program_id , degree_summary_name , department_id  | sections : section_id , other_details , course_id , section_name , section_description  | semesters : semester_description , semester_id , other_details , semester_name  | students : permanent_address_id , other_student_details , date_first_registered , current_address_id , middle_name , date_left , cell_mobile_number 246-7921\", \"09700166582\", last_name , email_address , ssn , student_id , first_name  | student_enrolment : student_id , other_details , student_enrolment_id , semester_id , degree_program_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_other_details : transcript_id , other_details  | transcript_contents : student_course_id , transcript_id ", 
        "query2": "select t1.transcript_date, t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id order by t1.transcript_date asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "transcript_date", 
            ",", 
            "other_details", 
            "from", 
            "transcripts", 
            "order", 
            "by", 
            "transcript_date", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "earliest", 
            "date", 
            "of", 
            "a", 
            "transcript", 
            "release", 
            ",", 
            "and", 
            "what", 
            "details", 
            "can", 
            "you", 
            "tell", 
            "me", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "transcript_date", 
            ",", 
            "other_details", 
            "FROM", 
            "Transcripts", 
            "ORDER", 
            "BY", 
            "transcript_date", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the earliest date of a transcript release, and what details can you tell me?", 
        "schema_with_content": "addresses : line_1 (\"74046 Metz Walk Apt. 113\", \"2294 Grant Square Apt. 235\", \"193 Marlin Brook\"), city (\"Prohaskafort\", \"Lake Careyberg\", \"Port Evanston\"), state_province_county (\"Idaho\", \"Kentucky\", \"Kentucky\"), zip_postcode (\"446\", \"839\", \"777\"), line_2 (\"Apt. 689\", \"Apt. 388\", \"Suite 383\"), country (\"Saudi Arabia\", \"Burundi\", \"Norfolk Island\"), address_id (14, 10, 5), line_3 (None), other_address_details (None) | courses : course_description (\"w\", \"p\", \"c\"), course_id (7, 3, 12), other_details (None), course_name (\"cal\", \"os\", \"rs\") | departments : other_details (None), department_name (\"law\", \"engineer\", \"linguistic\"), department_description (\"error\", \"non\", \"doloribus\"), department_id (8, 10, 6) | degree_programs : degree_summary_description (\"architecto\", \"aperiam\", \"quam\"), other_details (None), degree_program_id (6, 5, 4), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (14, 12, 7) | sections : section_id (7, 12, 9), other_details (None), course_id (5, 9, 10), section_name (\"g\", \"l\", \"d\"), section_description (\"non\", \"reprehenderit\", \"qui\") | semesters : semester_description (\"c\", \"l\", \"y\"), semester_id (15, 10, 13), other_details (None), semester_name (\"spring 2016\", \"spring 2016\", \"spring 2015\") | students : permanent_address_id (9, 15, 9), other_student_details (\"voluptatem\", \"facilis\", \"facilis\"), date_first_registered (\"2017-01-04 08:10:25\", \"1982-06-19 13:15:18\", \"2004-12-24 12:36:46\"), current_address_id (1, 9, 14), middle_name (\"Aaliyah\", \"Neal\", \"Golda\"), date_left (\"1999-08-24 00:07:10\", \"2007-08-02 04:12:58\", \"1999-08-24 00:07:10\"), cell_mobile_number (\"171-642-5684\", \"(462)246-7921\", \"09700166582\"), last_name (\"Osinski\", \"Osinski\", \"Osinski\"), email_address (\"nya.lesch@example.net\", \"jillian26@example.net\", \"nya.lesch@example.net\"), ssn (\"965\", \"668\", \"248\"), student_id (6, 12, 10), first_name (\"Jordy\", \"Jarvis\", \"Jarvis\") | student_enrolment : student_id (5, 7, 14), other_details (None), student_enrolment_id (5, 1, 14), semester_id (2, 2, 2), degree_program_id (10, 4, 10) | student_enrolment_courses : course_id (10, 10, 4), student_enrolment_id (2, 10, 6), student_course_id (83814225, 8, 45105806) | transcripts : other_details (None), transcript_date (\"1975-05-06 12:04:47\", \"1986-07-12 07:27:29\", \"1988-04-30 01:19:47\"), transcript_id (10, 7, 11) | transcripts_other_details : transcript_id (7, 13, 14), other_details (None) | transcript_contents : student_course_id (28982908, 8, 28982908), transcript_id (13, 13, 15)", 
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            53, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        9
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                53, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                54, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "transcripts": "other_details"
        }, 
        "primary_key": {
            "transcripts": "transcript_id"
        }
    }, 
    {
        "schema_without_content": "addresses : country , address_id , line_1 , line_3 , city , state_province_county , other_address_details , line_2 , zip_postcode  | courses : other_details , course_name , course_description , course_id  | departments : department_id , department_name , other_details , department_description  | degree_programs : degree_program_id , other_details , degree_summary_name , department_id , degree_summary_description  | sections : course_id , section_id , section_description , other_details , section_name  | semesters : semester_name , other_details , semester_id , semester_description  | students : current_address_id , first_name , middle_name , last_name , date_left , permanent_address_id , cell_mobile_number , other_student_details , ssn , email_address , date_first_registered , student_id  | student_enrolment : student_enrolment_id , semester_id , degree_program_id , student_id , other_details  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : other_details , transcript_date , transcript_id  | transcripts_transcript_date : transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ", 
        "query2": "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date asc limit 1", 
        "db_id": "student_transcripts_tracking", 
        "query_toks_no_value": [
            "select", 
            "transcript_date", 
            ",", 
            "other_details", 
            "from", 
            "transcripts", 
            "order", 
            "by", 
            "transcript_date", 
            "asc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "earliest", 
            "date", 
            "of", 
            "a", 
            "transcript", 
            "release", 
            ",", 
            "and", 
            "what", 
            "details", 
            "can", 
            "you", 
            "tell", 
            "me", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "transcript_date", 
            ",", 
            "other_details", 
            "FROM", 
            "Transcripts", 
            "ORDER", 
            "BY", 
            "transcript_date", 
            "ASC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the earliest date of a transcript release, and what details can you tell me?", 
        "schema_with_content": "addresses : country (\"Cook Islands\", \"Norfolk Island\", \"Croatia\"), address_id (1, 11, 14), line_1 (\"858 Peggie Bypass Suite 212\", \"67942 Carlotta Ferry Apt. 686\", \"7081 Eda Center\"), line_3 (None), city (\"Port Elvisfurt\", \"Rutherfordtown\", \"Michelleburgh\"), state_province_county (\"Kansas\", \"Wyoming\", \"Florida\"), other_address_details (None), line_2 (\"Suite 383\", \"Apt. 305\", \"Apt. 468\"), zip_postcode (\"638\", \"541\", \"839\") | courses : other_details (None), course_name (\"pl\", \"cal\", \"ml\"), course_description (\"w\", \"l\", \"l\"), course_id (11, 14, 10) | departments : department_id (7, 9, 15), department_name (\"medical\", \"drama\", \"statistics\"), other_details (None), department_description (\"aliquam\", \"natus\", \"consequatur\") | degree_programs : degree_program_id (15, 3, 9), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (12, 7, 8), degree_summary_description (\"unde\", \"architecto\", \"et\") | sections : course_id (2, 1, 5), section_id (7, 3, 4), section_description (\"qui\", \"facilis\", \"reprehenderit\"), other_details (None), section_name (\"c\", \"h\", \"g\") | semesters : semester_name (\"summer 2010\", \"spring 2013\", \"winter 2010\"), other_details (None), semester_id (6, 2, 3), semester_description (\"q\", \"t\", \"y\") | students : current_address_id (10, 1, 10), first_name (\"Frida\", \"Helga\", \"Warren\"), middle_name (\"Mona\", \"Neal\", \"Judd\"), last_name (\"Huel\", \"Weimann\", \"Gleichner\"), date_left (\"2017-07-09 21:38:43\", \"1975-10-09 00:49:27\", \"1982-06-11 00:25:39\"), permanent_address_id (15, 8, 4), cell_mobile_number (\"677.401.9382\", \"07661787471\", \"677.401.9382\"), other_student_details (\"rerum\", \"autem\", \"et\"), ssn (\"248\", \"248\", \"402\"), email_address (\"nya.lesch@example.net\", \"nya.lesch@example.net\", \"nya.lesch@example.net\"), date_first_registered (\"2007-08-29 23:25:41\", \"2007-08-29 23:25:41\", \"1973-05-19 19:12:46\"), student_id (2, 7, 1) | student_enrolment : student_enrolment_id (13, 8, 12), semester_id (13, 6, 6), degree_program_id (2, 10, 5), student_id (6, 9, 12), other_details (None) | student_enrolment_courses : student_enrolment_id (8, 5, 8), course_id (10, 8, 10), student_course_id (8, 681404, 0) | transcripts : other_details (None), transcript_date (\"1975-10-28 15:16:51\", \"1998-11-22 12:18:29\", \"1985-08-21 09:32:39\"), transcript_id (9, 14, 2) | transcripts_transcript_date : transcript_date (\"1975-10-28 15:16:51\", \"1998-11-22 12:18:29\", \"1985-08-21 09:32:39\"), transcript_id (14, 5, 1) | transcript_contents : transcript_id (6, 8, 6), student_course_id (70882679, 96, 70882679)", 
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            53, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        9
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                53, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                54, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "transcripts": "transcript_date"
        }, 
        "primary_key": {
            "transcripts": "transcript_id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : series_name , pay_per_view_ppv , country , hight_definition_tv , pixel_aspect_ratio_par , content , id , language , package_option  | tv_series : viewers_m , share , air_date , 18_49_rating_share , id , channel , weekly_rank , episode , rating  | cartoon : written_by , title , id , original_air_date , directed_by , production_code , channel  | cartoon_directed_by : id , directed_by ", 
        "query2": "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "title", 
            ",", 
            "directed_by", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date"
        ], 
        "question_toks": [
            "list", 
            "all", 
            "cartoon", 
            "titles", 
            "and", 
            "their", 
            "directors", 
            "ordered", 
            "by", 
            "their", 
            "air", 
            "date"
        ], 
        "query_toks": [
            "SELECT", 
            "title", 
            ",", 
            "Directed_by", 
            "FROM", 
            "Cartoon", 
            "ORDER", 
            "BY", 
            "Original_air_date"
        ], 
        "question": "list all cartoon titles and their directors ordered by their air date", 
        "schema_with_content": "tv_channel : series_name (\"MTV Music\", \"Music Box Italia\", \"MTV Music\"), pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), id (\"706\", \"708\", \"713\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\") | tv_series : viewers_m (\"5.75\", \"8.23\", \"5.13\"), share (6.0, 5.0, 5.0), air_date (\"December 10, 2007\", \"October 29, 2007\", \"November 26, 2007\"), 18_49_rating_share (\"3.2/8\", \"2.9/7\", \"2.7/7\"), id (9.0, 7.0, 9.0), channel (\"717\", \"728\", \"707\"), weekly_rank (71.0, 67.0, 62.0), episode (\"A Love of a Lifetime\", \"Winterland\", \"Blowback\"), rating (\"5.3\", \"5.8\", \"4.4\") | cartoon : written_by (\"Todd Casey\", \"Todd Casey\", \"Adam Beechen\"), title (\"Fall of the Blue Beetle!\", \"Invasion of the Secret Santas!\", \"Dawn of the Dead Man!\"), id (2.0, 3.0, 11.0), original_air_date (\"February20,2009\", \"January9,2009\", \"February27,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (107.0, 110.0, 112.0), channel (\"707\", \"701\", \"708\") | cartoon_directed_by : id (11.0, 8.0, 1.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")", 
        "orig_query": "select title, directed_by from cartoon order by original_air_date", 
        "query1": "select title, directed_by from cartoon order by original_air_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "directed_by"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : package_option , series_name , id , country , pay_per_view_ppv , pixel_aspect_ratio_par , content , language , hight_definition_tv  | tv_series : rating , air_date , channel , share , weekly_rank , viewers_m , episode , id , 18_49_rating_share  | cartoon : production_code , channel , title , directed_by , written_by , original_air_date , id  | cartoon_title : title , id ", 
        "query2": "select t2.title, t1.directed_by from cartoon as t1 join cartoon_title as t2 on t1.id = t2.id order by t1.original_air_date", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "title", 
            ",", 
            "directed_by", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date"
        ], 
        "question_toks": [
            "list", 
            "all", 
            "cartoon", 
            "titles", 
            "and", 
            "their", 
            "directors", 
            "ordered", 
            "by", 
            "their", 
            "air", 
            "date"
        ], 
        "query_toks": [
            "SELECT", 
            "title", 
            ",", 
            "Directed_by", 
            "FROM", 
            "Cartoon", 
            "ORDER", 
            "BY", 
            "Original_air_date"
        ], 
        "question": "list all cartoon titles and their directors ordered by their air date", 
        "schema_with_content": "tv_channel : package_option (\"Sky Famiglia\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\"), series_name (\"Hip Hop TV\", \"MTV Rocks\", \"myDeejay\"), id (\"700\", \"701\", \"701\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\") | tv_series : rating (\"5.3\", \"5.3\", \"5.3\"), air_date (\"November 26, 2007\", \"October 8, 2007\", \"September 24, 2007\"), channel (\"717\", \"700\", \"719\"), share (5.0, 7.0, 9.0), weekly_rank (71.0, 50.0, 72.0), viewers_m (\"6.05\", \"5.28\", \"9.16\"), episode (\"The Year of the Rabbit\", \"Blowback\", \"Winterland\"), id (7.0, 3.0, 9.0), 18_49_rating_share (\"2.9/7\", \"2.1/5\", \"2.7/7\") | cartoon : production_code (109.0, 110.0, 108.0), channel (\"701\", \"704\", \"708\"), title (\"Evil Under the Sea!\", \"Return of the Fearsome Fangs!\", \"Day of the Dark Knight!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Todd Casey\", \"Joseph Kuhr\", \"Michael Jelenic\"), original_air_date (\"January23,2009\", \"January23,2009\", \"January23,2009\"), id (12.0, 9.0, 10.0) | cartoon_title : title (\"Evil Under the Sea!\", \"Return of the Fearsome Fangs!\", \"Day of the Dark Knight!\"), id (6.0, 6.0, 2.0)", 
        "orig_query": "select title, directed_by from cartoon order by original_air_date", 
        "query1": "select title, directed_by from cartoon order by original_air_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "title"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : content , id , language , package_option \", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\", pixel_aspect_ratio_par , series_name , country , hight_definition_tv , pay_per_view_ppv  | tv_series : air_date , rating , viewers_m , id , weekly_rank , episode , channel , share , 18_49_rating_share  | cartoon : written_by , production_code , channel , original_air_date , directed_by , title , id  | cartoon_directed_by : directed_by , id ", 
        "query2": "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "title", 
            ",", 
            "directed_by", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "directors", 
            "of", 
            "all", 
            "the", 
            "cartoons", 
            "that", 
            "are", 
            "ordered", 
            "by", 
            "air", 
            "date", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "title", 
            ",", 
            "Directed_by", 
            "FROM", 
            "Cartoon", 
            "ORDER", 
            "BY", 
            "Original_air_date"
        ], 
        "question": "What is the name and directors of all the cartoons that are ordered by air date?", 
        "schema_with_content": "tv_channel : content (\"music\"), id (\"719\", \"703\", \"719\"), language (\"Italian\", \"English\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Rocks\", \"Match Music\", \"Match Music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\") | tv_series : air_date (\"November 19, 2007\", \"September 24, 2007\", \"November 5, 2007\"), rating (\"3.7\", \"3.4\", \"3.4\"), viewers_m (\"4.24\", \"6.94\", \"5.13\"), id (4.0, 11.0, 5.0), weekly_rank (72.0, 71.0, 62.0), episode (\"Emily\", \"A Love of a Lifetime\", \"Winterland\"), channel (\"708\", \"707\", \"708\"), share (6.0, 7.0, 6.0), 18_49_rating_share (\"2.7/7\", \"3.2/8\", \"2.4/6\") | cartoon : written_by (\"J. M. DeMatteis\", \"Steven Melching\", \"Matt Wayne\"), production_code (102.0, 102.0, 106.0), channel (\"705\", \"706\", \"703\"), original_air_date (\"January30,2009\", \"February6,2009\", \"December12,2008\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"Deep Cover for Batman!\", \"Invasion of the Secret Santas!\", \"Invasion of the Secret Santas!\"), id (7.0, 4.0, 7.0) | cartoon_directed_by : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (12.0, 9.0, 5.0)", 
        "orig_query": "select title, directed_by from cartoon order by original_air_date", 
        "query1": "select title, directed_by from cartoon order by original_air_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "directed_by"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : package_option , hight_definition_tv , pay_per_view_ppv , pixel_aspect_ratio_par , series_name , id , language , country , content  | tv_series : episode , share , air_date , rating , weekly_rank , 18_49_rating_share , id , channel , viewers_m  | cartoon : directed_by , original_air_date , title , id , channel , written_by , production_code  | cartoon_title : id , title ", 
        "query2": "select t2.title, t1.directed_by from cartoon as t1 join cartoon_title as t2 on t1.id = t2.id order by t1.original_air_date", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "title", 
            ",", 
            "directed_by", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "name", 
            "and", 
            "directors", 
            "of", 
            "all", 
            "the", 
            "cartoons", 
            "that", 
            "are", 
            "ordered", 
            "by", 
            "air", 
            "date", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "title", 
            ",", 
            "Directed_by", 
            "FROM", 
            "Cartoon", 
            "ORDER", 
            "BY", 
            "Original_air_date"
        ], 
        "question": "What is the name and directors of all the cartoons that are ordered by air date?", 
        "schema_with_content": "tv_channel : package_option (\"Option\", \"Option\", \"Sky Famiglia\"), hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"Sky Radio\", \"Match Music\", \"MTV Live HD\"), id (\"719\", \"713\", \"713\"), language (\"Italian\", \"English\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\") | tv_series : episode (\"Friendly Skies\", \"Game Three\", \"Emily\"), share (9.0, 6.0, 6.0), air_date (\"December 17, 2007\", \"November 19, 2007\", \"November 5, 2007\"), rating (\"4.4\", \"5.8\", \"4.0\"), weekly_rank (68.0, 67.0, 80.0), 18_49_rating_share (\"3.5/9\", \"2.7/7\", \"2.9/7\"), id (5.0, 8.0, 12.0), channel (\"713\", \"707\", \"728\"), viewers_m (\"5.75\", \"6.94\", \"8.23\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"February27,2009\", \"January2,2009\", \"November21,2008\"), title (\"Dawn of the Dead Man!\", \"Terror on Dinosaur Island!\", \"Terror on Dinosaur Island!\"), id (11.0, 1.0, 8.0), channel (\"728\", \"700\", \"705\"), written_by (\"James Krieg\", \"Joseph Kuhr\", \"Steven Melching\"), production_code (111.0, 101.0, 105.0) | cartoon_title : id (9.0, 10.0, 4.0), title (\"Dawn of the Dead Man!\", \"Terror on Dinosaur Island!\", \"Terror on Dinosaur Island!\")", 
        "orig_query": "select title, directed_by from cartoon order by original_air_date", 
        "query1": "select title, directed_by from cartoon order by original_air_date", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                21, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "title"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : package_option , pixel_aspect_ratio_par , content , hight_definition_tv , id , series_name , country , pay_per_view_ppv , language  | tv_channel_series_name : id , series_name  | tv_series : episode , id , viewers_m , channel , 18_49_rating_share , air_date , share , weekly_rank , rating  | cartoon : written_by , directed_by , id , title , channel , production_code , original_air_date ", 
        "query2": "select count(distinct t2.series_name), count(distinct t1.content) from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "distinct", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "distinct", 
            "content", 
            ")", 
            "from", 
            "tv_channel"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "number", 
            "of", 
            "different", 
            "series", 
            "names", 
            "and", 
            "contents", 
            "in", 
            "the", 
            "TV", 
            "Channel", 
            "table", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "count", 
            "(", 
            "DISTINCT", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "DISTINCT", 
            "content", 
            ")", 
            "FROM", 
            "TV_Channel", 
            ";"
        ], 
        "question": "List the number of different series names and contents in the TV Channel table.", 
        "schema_with_content": "tv_channel : package_option (\"Option\", \"Sky Famiglia\", \"Sky Famiglia\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), hight_definition_tv (\"no\", \"yes\"), id (\"701\", \"705\", \"705\"), series_name (\"Music Box Italia\", \"Classica\", \"Rock TV\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\") | tv_channel_series_name : id (\"728\", \"708\", \"714\"), series_name (\"Music Box Italia\", \"Classica\", \"Rock TV\") | tv_series : episode (\"Blowback\", \"Keepers\", \"Home By Another Way\"), id (8.0, 1.0, 9.0), viewers_m (\"6.05\", \"6.75\", \"8.23\"), channel (\"701\", \"708\", \"708\"), 18_49_rating_share (\"3.2/8\", \"3.5/9\", \"1.5/4\"), air_date (\"October 29, 2007\", \"November 12, 2007\", \"October 8, 2007\"), share (6.0, 5.0, 7.0), weekly_rank (72.0, 66.0, 72.0), rating (\"3.0\", \"5.3\", \"4.0\") | cartoon : written_by (\"Todd Casey\", \"Joseph Kuhr\", \"Steven Melching\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (10.0, 4.0, 4.0), title (\"Dawn of the Dead Man!\", \"The Eyes of Despero!\", \"Invasion of the Secret Santas!\"), channel (\"706\", \"706\", \"728\"), production_code (110.0, 103.0, 103.0), original_air_date (\"January9,2009\", \"January23,2009\", \"February6,2009\")", 
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                true
                            ], 
                            null
                        ]
                    ], 
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                true
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "series_name"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , id , country , pay_per_view_ppv , language , content , hight_definition_tv , series_name , package_option \", \"Sky Famiglia\", \"no \" | tv_channel_content : content , id  | tv_series : weekly_rank , viewers_m , air_date , share , episode , rating , channel , id , 18_49_rating_share  | cartoon : directed_by , original_air_date , channel , production_code , written_by , id , title ", 
        "query2": "select count(distinct t1.series_name), count(distinct t2.content) from tv_channel as t1 join tv_channel_content as t2 on t1.id = t2.id", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "distinct", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "distinct", 
            "content", 
            ")", 
            "from", 
            "tv_channel"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "number", 
            "of", 
            "different", 
            "series", 
            "names", 
            "and", 
            "contents", 
            "in", 
            "the", 
            "TV", 
            "Channel", 
            "table", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "count", 
            "(", 
            "DISTINCT", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "DISTINCT", 
            "content", 
            ")", 
            "FROM", 
            "TV_Channel", 
            ";"
        ], 
        "question": "List the number of different series names and contents in the TV Channel table.", 
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"717\", \"715\", \"706\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), content (\"music\"), hight_definition_tv (\"no\", \"yes\"), series_name (\"Radio Capital TiV\u00c3\u00b9\", \"MTV Dance\", \"Classica\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"no ( FTV )\") | tv_channel_content : content (\"music\"), id (\"700\", \"713\", \"715\") | tv_series : weekly_rank (66.0, 71.0, 62.0), viewers_m (\"6.94\", \"9.16\", \"6.09\"), air_date (\"November 12, 2007\", \"December 17, 2007\", \"December 10, 2007\"), share (9.0, 9.0, 9.0), episode (\"Keepers\", \"Double Down\", \"Keepers\"), rating (\"3.0\", \"3.4\", \"5.8\"), channel (\"717\", \"719\", \"717\"), id (10.0, 1.0, 3.0), 18_49_rating_share (\"2.2/6\", \"1.7/5\", \"3.5/9\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"December5,2008\", \"February20,2009\", \"February20,2009\"), channel (\"706\", \"706\", \"728\"), production_code (111.0, 106.0, 109.0), written_by (\"Matt Wayne\", \"Matt Wayne\", \"J. M. DeMatteis\"), id (6.0, 1.0, 5.0), title (\"The Eyes of Despero!\", \"Return of the Fearsome Fangs!\", \"Invasion of the Secret Santas!\")", 
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                true
                            ], 
                            null
                        ]
                    ], 
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                true
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "content"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : hight_definition_tv , series_name , content , country , pixel_aspect_ratio_par , package_option , language , pay_per_view_ppv , id  | tv_channel_series_name : series_name , id  | tv_series : viewers_m , air_date , id , weekly_rank , 18_49_rating_share , episode , channel , share , rating  | cartoon : directed_by , production_code , channel , id , original_air_date , title , written_by ", 
        "query2": "select count(distinct t2.series_name), count(distinct t1.content) from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "distinct", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "distinct", 
            "content", 
            ")", 
            "from", 
            "tv_channel"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "different", 
            "series", 
            "and", 
            "contents", 
            "are", 
            "listed", 
            "in", 
            "the", 
            "TV", 
            "Channel", 
            "table", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "count", 
            "(", 
            "DISTINCT", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "DISTINCT", 
            "content", 
            ")", 
            "FROM", 
            "TV_Channel", 
            ";"
        ], 
        "question": "How many different series and contents are listed in the TV Channel table?", 
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), series_name (\"myDeejay\", \"MTV Hits\", \"Sky Radio\"), content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Sky Famiglia\", \"Sky Famiglia + Sky HD\", \"Option\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), id (\"708\", \"715\", \"728\") | tv_channel_series_name : series_name (\"myDeejay\", \"MTV Hits\", \"Sky Radio\"), id (\"707\", \"704\", \"717\") | tv_series : viewers_m (\"9.16\", \"5.28\", \"5.75\"), air_date (\"November 26, 2007\", \"November 19, 2007\", \"November 5, 2007\"), id (9.0, 12.0, 7.0), weekly_rank (71.0, 67.0, 72.0), 18_49_rating_share (\"2.4/6\", \"2.1/5\", \"3.2/8\"), episode (\"Friendly Skies\", \"The Year of the Rabbit\", \"Friendly Skies\"), channel (\"714\", \"713\", \"707\"), share (5.0, 9.0, 5.0), rating (\"3.4\", \"4.3\", \"3.8\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (109.0, 112.0, 103.0), channel (\"705\", \"700\", \"707\"), id (8.0, 2.0, 9.0), original_air_date (\"February6,2009\", \"November21,2008\", \"December12,2008\"), title (\"Fall of the Blue Beetle!\", \"Day of the Dark Knight!\", \"The Rise of the Blue Beetle!\"), written_by (\"Joseph Kuhr\", \"James Krieg\", \"J. M. DeMatteis\")", 
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                true
                            ], 
                            null
                        ]
                    ], 
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                true
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "series_name"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : hight_definition_tv , pay_per_view_ppv , id , pixel_aspect_ratio_par , content , language , package_option \", \"Sky Famiglia\", country , series_name  | tv_channel_content : id , content  | tv_series : air_date , channel , weekly_rank , share , 18_49_rating_share , viewers_m , episode , rating , id  | cartoon : id , production_code , directed_by , written_by , title , channel , original_air_date ", 
        "query2": "select count(distinct t1.series_name), count(distinct t2.content) from tv_channel as t1 join tv_channel_content as t2 on t1.id = t2.id", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "count", 
            "(", 
            "distinct", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "distinct", 
            "content", 
            ")", 
            "from", 
            "tv_channel"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "different", 
            "series", 
            "and", 
            "contents", 
            "are", 
            "listed", 
            "in", 
            "the", 
            "TV", 
            "Channel", 
            "table", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "count", 
            "(", 
            "DISTINCT", 
            "series_name", 
            ")", 
            ",", 
            "count", 
            "(", 
            "DISTINCT", 
            "content", 
            ")", 
            "FROM", 
            "TV_Channel", 
            ";"
        ], 
        "question": "How many different series and contents are listed in the TV Channel table?", 
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), id (\"704\", \"717\", \"703\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia + Sky HD\", \"no ( FTV )\", \"Sky Famiglia\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"MTV Live HD\", \"MTV Rocks\", \"MTV Live HD\") | tv_channel_content : id (\"713\", \"714\", \"704\"), content (\"music\") | tv_series : air_date (\"October 8, 2007\", \"October 8, 2007\", \"September 24, 2007\"), channel (\"714\", \"717\", \"707\"), weekly_rank (43.0, 66.0, 61.0), share (6.0, 6.0, 6.0), 18_49_rating_share (\"1.5/4\", \"3.2/8\", \"2.2/6\"), viewers_m (\"5.75\", \"6.06\", \"8.23\"), episode (\"Game Three\", \"Game Three\", \"Game Three\"), rating (\"3.8\", \"4.3\", \"3.0\"), id (6.0, 3.0, 6.0) | cartoon : id (3.0, 11.0, 1.0), production_code (109.0, 103.0, 107.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"James Krieg\", \"Steven Melching\", \"James Krieg\"), title (\"Invasion of the Secret Santas!\", \"Dawn of the Dead Man!\", \"The Eyes of Despero!\"), channel (\"703\", \"707\", \"700\"), original_air_date (\"February20,2009\", \"November21,2008\", \"February20,2009\")", 
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                true
                            ], 
                            null
                        ]
                    ], 
                    [
                        3, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                true
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "content"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : hight_definition_tv , country , content , id , language , package_option , series_name , pay_per_view_ppv , pixel_aspect_ratio_par  | tv_series : rating , weekly_rank , channel , id , episode , air_date , viewers_m , 18_49_rating_share , share  | tv_series_episode : episode , id  | cartoon : original_air_date , production_code , directed_by , channel , id , written_by , title ", 
        "query2": "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "episode", 
            ",", 
            "rating", 
            "from", 
            "tv_series", 
            "order", 
            "by", 
            "rating", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "top", 
            "3", 
            "highest", 
            "Rating", 
            "TV", 
            "series", 
            ".", 
            "List", 
            "the", 
            "TV", 
            "series", 
            "'s", 
            "Episode", 
            "and", 
            "Rating", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Episode", 
            ",", 
            "Rating", 
            "FROM", 
            "TV_series", 
            "ORDER", 
            "BY", 
            "Rating", 
            "DESC", 
            "LIMIT", 
            "3", 
            ";"
        ], 
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", 
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), id (\"728\", \"703\", \"714\"), language (\"Italian\", \"English\"), package_option (\"Option\", \"Sky Famiglia + Sky HD\", \"Option\"), series_name (\"MTV Rocks\", \"myDeejay\", \"MTV Live HD\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | tv_series : rating (\"3.7\", \"3.5\", \"4.3\"), weekly_rank (61.0, 43.0, 68.0), channel (\"708\", \"717\", \"713\"), id (11.0, 9.0, 10.0), episode (\"Winterland\", \"A Love of a Lifetime\", \"The Hanged Man\"), air_date (\"October 15, 2007\", \"October 8, 2007\", \"September 24, 2007\"), viewers_m (\"9.16\", \"4.24\", \"5.61\"), 18_49_rating_share (\"2.9/7\", \"2.9/7\", \"2.7/7\"), share (9.0, 6.0, 5.0) | tv_series_episode : episode (\"Winterland\", \"A Love of a Lifetime\", \"The Hanged Man\"), id (10.0, 3.0, 8.0) | cartoon : original_air_date (\"February20,2009\", \"January23,2009\", \"January30,2009\"), production_code (108.0, 107.0, 102.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"728\", \"704\", \"706\"), id (2.0, 1.0, 1.0), written_by (\"Matt Wayne\", \"Steven Melching\", \"J. M. DeMatteis\"), title (\"Terror on Dinosaur Island!\", \"Evil Under the Sea!\", \"Deep Cover for Batman!\")", 
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3", 
        "query1": "select episode, rating from tv_series order by rating desc limit 3", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 3, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_series": "episode"
        }, 
        "primary_key": {
            "tv_series": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : language , country , content , id , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , hight_definition_tv , package_option \" | tv_series : air_date , weekly_rank , episode , share , 18_49_rating_share , channel , id , rating , viewers_m  | tv_series_rating : id , rating  | cartoon : channel , directed_by , production_code , written_by , original_air_date , id , title ", 
        "query2": "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id order by t2.rating desc limit 3", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "episode", 
            ",", 
            "rating", 
            "from", 
            "tv_series", 
            "order", 
            "by", 
            "rating", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "top", 
            "3", 
            "highest", 
            "Rating", 
            "TV", 
            "series", 
            ".", 
            "List", 
            "the", 
            "TV", 
            "series", 
            "'s", 
            "Episode", 
            "and", 
            "Rating", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Episode", 
            ",", 
            "Rating", 
            "FROM", 
            "TV_series", 
            "ORDER", 
            "BY", 
            "Rating", 
            "DESC", 
            "LIMIT", 
            "3", 
            ";"
        ], 
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", 
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), id (\"719\", \"709\", \"706\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"MTV Dance\", \"Hip Hop TV\", \"Sky Radio\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia\", \"Option\", \"no ( FTV )\") | tv_series : air_date (\"October 8, 2007\", \"December 17, 2007\", \"October 22, 2007\"), weekly_rank (50.0, 65.0, 50.0), episode (\"Home By Another Way\", \"Game Three\", \"The Hanged Man\"), share (9.0, 6.0, 6.0), 18_49_rating_share (\"2.1/5\", \"2.2/6\", \"3.2/8\"), channel (\"714\", \"717\", \"707\"), id (4.0, 10.0, 7.0), rating (\"3.7\", \"3.5\", \"4.3\"), viewers_m (\"6.75\", \"5.13\", \"6.06\") | tv_series_rating : id (4.0, 3.0, 7.0), rating (\"3.7\", \"3.5\", \"4.3\") | cartoon : channel (\"705\", \"708\", \"707\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (108.0, 112.0, 105.0), written_by (\"Matt Wayne\", \"Steven Melching\", \"Matt Wayne\"), original_air_date (\"February27,2009\", \"November14,2008\", \"February27,2009\"), id (9.0, 5.0, 9.0), title (\"The Rise of the Blue Beetle!\", \"Journey to the Center of the Bat!\", \"Dawn of the Dead Man!\")", 
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3", 
        "query1": "select episode, rating from tv_series order by rating desc limit 3", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 3, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_series": "rating"
        }, 
        "primary_key": {
            "tv_series": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : content , pixel_aspect_ratio_par , package_option \", \"Option\", country , pay_per_view_ppv , hight_definition_tv , id , language , series_name  | tv_series : 18_49_rating_share , air_date , weekly_rank , share , id , viewers_m , channel , episode , rating  | tv_series_episode : id , episode  | cartoon : production_code , channel , title , directed_by , written_by , original_air_date , id ", 
        "query2": "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "episode", 
            ",", 
            "rating", 
            "from", 
            "tv_series", 
            "order", 
            "by", 
            "rating", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "3", 
            "most", 
            "highly", 
            "rated", 
            "episodes", 
            "in", 
            "the", 
            "TV", 
            "series", 
            "table", 
            "and", 
            "what", 
            "were", 
            "those", 
            "ratings", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Episode", 
            ",", 
            "Rating", 
            "FROM", 
            "TV_series", 
            "ORDER", 
            "BY", 
            "Rating", 
            "DESC", 
            "LIMIT", 
            "3", 
            ";"
        ], 
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", 
        "schema_with_content": "tv_channel : content (\"music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Option\", \"no ( FTV )\", \"Option\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), id (\"705\", \"728\", \"708\"), language (\"Italian\", \"English\"), series_name (\"myDeejay\", \"MTV Hits\", \"Classica\") | tv_series : 18_49_rating_share (\"1.5/4\", \"1.5/4\", \"2.2/6\"), air_date (\"October 8, 2007\", \"November 5, 2007\", \"October 15, 2007\"), weekly_rank (66.0, 70.0, 66.0), share (6.0, 6.0, 6.0), id (10.0, 5.0, 8.0), viewers_m (\"5.75\", \"6.75\", \"8.23\"), channel (\"713\", \"719\", \"728\"), episode (\"Winterland\", \"Blowback\", \"The Legend of Dylan McCleen\"), rating (\"3.4\", \"5.3\", \"4.4\") | tv_series_episode : id (8.0, 3.0, 2.0), episode (\"Winterland\", \"Blowback\", \"The Legend of Dylan McCleen\") | cartoon : production_code (106.0, 110.0, 108.0), channel (\"700\", \"701\", \"705\"), title (\"Journey to the Center of the Bat!\", \"Fall of the Blue Beetle!\", \"Deep Cover for Batman!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Joseph Kuhr\", \"J. M. DeMatteis\", \"J. M. DeMatteis\"), original_air_date (\"January2,2009\", \"February27,2009\", \"February20,2009\"), id (8.0, 2.0, 9.0)", 
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3", 
        "query1": "select episode, rating from tv_series order by rating desc limit 3", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 3, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_series": "episode"
        }, 
        "primary_key": {
            "tv_series": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : id , language , hight_definition_tv , package_option , pay_per_view_ppv , series_name , content , country , pixel_aspect_ratio_par  | tv_series : air_date , channel , rating , viewers_m , weekly_rank , share , 18_49_rating_share , episode , id  | tv_series_rating : id , rating  | cartoon : written_by , title , channel , original_air_date , production_code , id , directed_by ", 
        "query2": "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id order by t2.rating desc limit 3", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "episode", 
            ",", 
            "rating", 
            "from", 
            "tv_series", 
            "order", 
            "by", 
            "rating", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "3", 
            "most", 
            "highly", 
            "rated", 
            "episodes", 
            "in", 
            "the", 
            "TV", 
            "series", 
            "table", 
            "and", 
            "what", 
            "were", 
            "those", 
            "ratings", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Episode", 
            ",", 
            "Rating", 
            "FROM", 
            "TV_series", 
            "ORDER", 
            "BY", 
            "Rating", 
            "DESC", 
            "LIMIT", 
            "3", 
            ";"
        ], 
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", 
        "schema_with_content": "tv_channel : id (\"706\", \"700\", \"705\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia + Sky HD\", \"Option\", \"Sky Famiglia + Sky HD\"), pay_per_view_ppv (\"no\"), series_name (\"MTV Dance\", \"MTV Classic\", \"MTV Hits\"), content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | tv_series : air_date (\"November 19, 2007\", \"September 24, 2007\", \"October 8, 2007\"), channel (\"719\", \"717\", \"713\"), rating (\"3.5\", \"3.7\", \"3.8\"), viewers_m (\"5.28\", \"5.75\", \"5.28\"), weekly_rank (61.0, 71.0, 68.0), share (9.0, 7.0, 5.0), 18_49_rating_share (\"3.5/9\", \"3.2/8\", \"2.9/7\"), episode (\"Keepers\", \"The Legend of Dylan McCleen\", \"The Legend of Dylan McCleen\"), id (2.0, 1.0, 1.0) | tv_series_rating : id (3.0, 12.0, 1.0), rating (\"3.5\", \"3.7\", \"3.8\") | cartoon : written_by (\"James Krieg\", \"Todd Casey\", \"James Krieg\"), title (\"Dawn of the Dead Man!\", \"Evil Under the Sea!\", \"Dawn of the Dead Man!\"), channel (\"700\", \"706\", \"706\"), original_air_date (\"December5,2008\", \"January16,2009\", \"January2,2009\"), production_code (107.0, 105.0, 107.0), id (11.0, 6.0, 4.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")", 
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3", 
        "query1": "select episode, rating from tv_series order by rating desc limit 3", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            13, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 3, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_series": "rating"
        }, 
        "primary_key": {
            "tv_series": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : country , content , pixel_aspect_ratio_par , id , series_name , pay_per_view_ppv , language , hight_definition_tv , package_option \", \"no \", \"Sky Famiglia + Sky HD\" | tv_series : id , rating , share , air_date , episode , 18_49_rating_share , viewers_m , channel , weekly_rank  | cartoon : channel , original_air_date , title , production_code , directed_by , id , written_by  | cartoon_production_code : production_code , id ", 
        "query2": "select t2.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date limit 1", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "production_code", 
            ",", 
            "channel", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "production", 
            "code", 
            "and", 
            "channel", 
            "of", 
            "the", 
            "most", 
            "recently", 
            "aired", 
            "cartoon", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "production_code", 
            ",", 
            "channel", 
            "FROM", 
            "cartoon", 
            "ORDER", 
            "BY", 
            "original_air_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the production code and channel of the most recently aired cartoon.", 
        "schema_with_content": "tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"713\", \"700\", \"701\"), series_name (\"MTV Classic\", \"Hip Hop TV\", \"MTV Classic\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"no ( FTV )\", \"no ( FTV )\", \"Sky Famiglia + Sky HD\") | tv_series : id (3.0, 3.0, 7.0), rating (\"3.5\", \"4.0\", \"3.4\"), share (7.0, 7.0, 5.0), air_date (\"October 29, 2007\", \"October 8, 2007\", \"October 22, 2007\"), episode (\"Game Three\", \"The Year of the Rabbit\", \"Home By Another Way\"), 18_49_rating_share (\"2.2/6\", \"2.7/7\", \"2.2/6\"), viewers_m (\"6.94\", \"6.09\", \"5.61\"), channel (\"728\", \"708\", \"707\"), weekly_rank (62.0, 65.0, 72.0) | cartoon : channel (\"700\", \"701\", \"706\"), original_air_date (\"January16,2009\", \"January23,2009\", \"February20,2009\"), title (\"Terror on Dinosaur Island!\", \"Day of the Dark Knight!\", \"Return of the Fearsome Fangs!\"), production_code (102.0, 108.0, 103.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (8.0, 7.0, 6.0), written_by (\"J. M. DeMatteis\", \"Steven Melching\", \"Todd Casey\") | cartoon_production_code : production_code (102.0, 108.0, 103.0), id (3.0, 2.0, 2.0)", 
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "production_code"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : id , country , series_name , pixel_aspect_ratio_par , package_option \", pay_per_view_ppv , language , hight_definition_tv , content  | tv_series : episode , viewers_m , rating , channel , air_date , id , 18_49_rating_share , share , weekly_rank  | cartoon : id , channel , title , production_code , written_by , original_air_date , directed_by  | cartoon_channel : id , channel ", 
        "query2": "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id order by t1.original_air_date limit 1", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "production_code", 
            ",", 
            "channel", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "production", 
            "code", 
            "and", 
            "channel", 
            "of", 
            "the", 
            "most", 
            "recently", 
            "aired", 
            "cartoon", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "production_code", 
            ",", 
            "channel", 
            "FROM", 
            "cartoon", 
            "ORDER", 
            "BY", 
            "original_air_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the production code and channel of the most recently aired cartoon.", 
        "schema_with_content": "tv_channel : id (\"714\", \"708\", \"728\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"MTV Dance\", \"Classica\", \"MTV Live HD\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Sky Famiglia\", \"Sky Famiglia\", \"no ( FTV )\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\") | tv_series : episode (\"Blowback\", \"Double Down\", \"Home By Another Way\"), viewers_m (\"6.05\", \"5.61\", \"9.16\"), rating (\"5.3\", \"5.3\", \"3.5\"), channel (\"717\", \"707\", \"728\"), air_date (\"October 22, 2007\", \"December 17, 2007\", \"November 5, 2007\"), id (8.0, 4.0, 4.0), 18_49_rating_share (\"2.9/7\", \"1.7/5\", \"3.2/8\"), share (9.0, 6.0, 5.0), weekly_rank (72.0, 68.0, 68.0) | cartoon : id (4.0, 2.0, 1.0), channel (\"705\", \"701\", \"706\"), title (\"Evil Under the Sea!\", \"Dawn of the Dead Man!\", \"The Eyes of Despero!\"), production_code (107.0, 101.0, 111.0), written_by (\"Joseph Kuhr\", \"J. M. DeMatteis\", \"J. M. DeMatteis\"), original_air_date (\"January23,2009\", \"December12,2008\", \"January9,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\") | cartoon_channel : id (8.0, 1.0, 9.0), channel (\"705\", \"701\", \"706\")", 
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "channel"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : pay_per_view_ppv , pixel_aspect_ratio_par , series_name , id , language , hight_definition_tv , content , package_option \", \"no \", country  | tv_series : channel , rating , air_date , viewers_m , share , episode , 18_49_rating_share , weekly_rank , id  | cartoon : directed_by , id , written_by , channel , original_air_date , title , production_code  | cartoon_production_code : id , production_code ", 
        "query2": "select t2.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date limit 1", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "production_code", 
            ",", 
            "channel", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "produdction", 
            "code", 
            "and", 
            "channel", 
            "of", 
            "the", 
            "most", 
            "recent", 
            "cartoon", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "production_code", 
            ",", 
            "channel", 
            "FROM", 
            "cartoon", 
            "ORDER", 
            "BY", 
            "original_air_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the produdction code and channel of the most recent cartoon?", 
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"myDeejay\", \"MTV Live HD\", \"Rock TV\"), id (\"706\", \"719\", \"707\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), package_option (\"Option\", \"no ( FTV )\", \"no ( FTV )\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : channel (\"708\", \"719\", \"708\"), rating (\"5.3\", \"4.4\", \"5.8\"), air_date (\"October 29, 2007\", \"December 17, 2007\", \"October 8, 2007\"), viewers_m (\"5.61\", \"5.13\", \"5.61\"), share (9.0, 6.0, 6.0), episode (\"The Legend of Dylan McCleen\", \"Friendly Skies\", \"The Year of the Rabbit\"), 18_49_rating_share (\"2.7/7\", \"2.7/7\", \"1.5/4\"), weekly_rank (50.0, 43.0, 71.0), id (3.0, 12.0, 1.0) | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (8.0, 3.0, 4.0), written_by (\"Matt Wayne\", \"Adam Beechen\", \"Todd Casey\"), channel (\"728\", \"701\", \"708\"), original_air_date (\"November14,2008\", \"November14,2008\", \"January30,2009\"), title (\"Journey to the Center of the Bat!\", \"Dawn of the Dead Man!\", \"Evil Under the Sea!\"), production_code (108.0, 105.0, 109.0) | cartoon_production_code : id (10.0, 8.0, 5.0), production_code (108.0, 105.0, 109.0)", 
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "production_code"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : series_name , package_option , hight_definition_tv , content , id , pay_per_view_ppv , pixel_aspect_ratio_par , language , country  | tv_series : weekly_rank , rating , viewers_m , episode , air_date , channel , id , 18_49_rating_share , share  | cartoon : original_air_date , channel , title , written_by , id , directed_by , production_code  | cartoon_channel : channel , id ", 
        "query2": "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id order by t1.original_air_date limit 1", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "production_code", 
            ",", 
            "channel", 
            "from", 
            "cartoon", 
            "order", 
            "by", 
            "original_air_date", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "produdction", 
            "code", 
            "and", 
            "channel", 
            "of", 
            "the", 
            "most", 
            "recent", 
            "cartoon", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "production_code", 
            ",", 
            "channel", 
            "FROM", 
            "cartoon", 
            "ORDER", 
            "BY", 
            "original_air_date", 
            "LIMIT", 
            "1"
        ], 
        "question": "What is the produdction code and channel of the most recent cartoon?", 
        "schema_with_content": "tv_channel : series_name (\"MTV Dance\", \"MTV Hits\", \"Sky Radio\"), package_option (\"Sky Famiglia + Sky HD\", \"Option\", \"Sky Famiglia + Sky HD\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), id (\"707\", \"707\", \"701\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : weekly_rank (67.0, 61.0, 66.0), rating (\"4.4\", \"5.8\", \"5.8\"), viewers_m (\"9.16\", \"6.94\", \"6.75\"), episode (\"Emily\", \"Game Three\", \"Friendly Skies\"), air_date (\"November 26, 2007\", \"October 22, 2007\", \"December 10, 2007\"), channel (\"701\", \"708\", \"728\"), id (12.0, 9.0, 1.0), 18_49_rating_share (\"2.9/7\", \"2.9/7\", \"2.1/5\"), share (7.0, 7.0, 5.0) | cartoon : original_air_date (\"February20,2009\", \"January2,2009\", \"January30,2009\"), channel (\"701\", \"708\", \"705\"), title (\"Deep Cover for Batman!\", \"Return of the Fearsome Fangs!\", \"Fall of the Blue Beetle!\"), written_by (\"Adam Beechen\", \"Matt Wayne\", \"Joseph Kuhr\"), id (12.0, 3.0, 11.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (101.0, 106.0, 105.0) | cartoon_channel : channel (\"701\", \"708\", \"705\"), id (6.0, 3.0, 7.0)", 
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            23, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "cartoon": "channel"
        }, 
        "primary_key": {
            "cartoon": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : hight_definition_tv , country , pay_per_view_ppv , id , series_name , pixel_aspect_ratio_par , language , package_option \", content  | tv_channel_series_name : series_name , id  | tv_series : share , viewers_m , channel , rating , air_date , id , weekly_rank , 18_49_rating_share , episode  | cartoon : title , written_by , channel , id , original_air_date , directed_by , production_code ", 
        "query2": "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\"", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "package_option", 
            ",", 
            "series_name", 
            "from", 
            "tv_channel", 
            "where", 
            "hight_definition_tv", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "package", 
            "choice", 
            "and", 
            "series", 
            "name", 
            "of", 
            "the", 
            "TV", 
            "channel", 
            "that", 
            "has", 
            "high", 
            "definition", 
            "TV", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "package_option", 
            ",", 
            "series_name", 
            "FROM", 
            "TV_Channel", 
            "WHERE", 
            "hight_definition_TV", 
            "=", 
            "``", 
            "yes", 
            "''"
        ], 
        "question": "Find the package choice and series name of the TV channel that has high definition TV.", 
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), id (\"700\", \"717\", \"709\"), series_name (\"Music Box Italia\", \"Radio Capital TiV\u00c3\u00b9\", \"MTV Classic\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia\", \"Sky Famiglia\", \"no ( FTV )\"), content (\"music\") | tv_channel_series_name : series_name (\"Music Box Italia\", \"Radio Capital TiV\u00c3\u00b9\", \"MTV Classic\"), id (\"719\", \"704\", \"705\") | tv_series : share (9.0, 5.0, 5.0), viewers_m (\"6.06\", \"4.24\", \"5.28\"), channel (\"708\", \"708\", \"714\"), rating (\"5.3\", \"4.3\", \"3.0\"), air_date (\"October 22, 2007\", \"November 26, 2007\", \"December 17, 2007\"), id (8.0, 6.0, 7.0), weekly_rank (61.0, 80.0, 43.0), 18_49_rating_share (\"2.4/6\", \"2.9/7\", \"2.2/6\"), episode (\"Keepers\", \"Game Three\", \"The Hanged Man\") | cartoon : title (\"Deep Cover for Batman!\", \"The Eyes of Despero!\", \"Enter the Outsiders!\"), written_by (\"Matt Wayne\", \"James Krieg\", \"Joseph Kuhr\"), channel (\"708\", \"706\", \"700\"), id (5.0, 6.0, 2.0), original_air_date (\"January16,2009\", \"November14,2008\", \"January23,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (102.0, 107.0, 104.0)", 
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"yes\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "series_name"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : hight_definition_tv , pixel_aspect_ratio_par , package_option \", \"Option\", \"Sky Famiglia + Sky HD\", country , content , language , series_name , id , pay_per_view_ppv  | tv_channel_package_option : package_option \", \"Option\", \"Sky Famiglia + Sky HD\", id  | tv_series : channel , rating , episode , 18_49_rating_share , id , air_date , viewers_m , weekly_rank , share  | cartoon : production_code , original_air_date , id , title , channel , directed_by , written_by ", 
        "query2": "select t2.package_option, t1.series_name from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\"", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "package_option", 
            ",", 
            "series_name", 
            "from", 
            "tv_channel", 
            "where", 
            "hight_definition_tv", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "package", 
            "choice", 
            "and", 
            "series", 
            "name", 
            "of", 
            "the", 
            "TV", 
            "channel", 
            "that", 
            "has", 
            "high", 
            "definition", 
            "TV", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "package_option", 
            ",", 
            "series_name", 
            "FROM", 
            "TV_Channel", 
            "WHERE", 
            "hight_definition_TV", 
            "=", 
            "``", 
            "yes", 
            "''"
        ], 
        "question": "Find the package choice and series name of the TV channel that has high definition TV.", 
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"no ( FTV )\", \"Option\", \"Sky Famiglia + Sky HD\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), content (\"music\"), language (\"Italian\", \"English\"), series_name (\"myDeejay\", \"MTV Hits\", \"Sky Radio\"), id (\"713\", \"713\", \"708\"), pay_per_view_ppv (\"no\") | tv_channel_package_option : package_option (\"no ( FTV )\", \"Option\", \"Sky Famiglia + Sky HD\"), id (\"704\", \"719\", \"704\") | tv_series : channel (\"713\", \"701\", \"707\"), rating (\"3.8\", \"4.3\", \"5.8\"), episode (\"The Year of the Rabbit\", \"Double Down\", \"Double Down\"), 18_49_rating_share (\"1.7/5\", \"2.4/6\", \"2.1/5\"), id (3.0, 10.0, 12.0), air_date (\"October 1, 2007\", \"September 24, 2007\", \"October 1, 2007\"), viewers_m (\"8.23\", \"6.05\", \"6.09\"), weekly_rank (61.0, 70.0, 72.0), share (7.0, 6.0, 5.0) | cartoon : production_code (111.0, 107.0, 104.0), original_air_date (\"January2,2009\", \"February20,2009\", \"February20,2009\"), id (5.0, 11.0, 8.0), title (\"Day of the Dark Knight!\", \"Dawn of the Dead Man!\", \"Fall of the Blue Beetle!\"), channel (\"728\", \"705\", \"708\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"James Krieg\", \"Steven Melching\", \"Steven Melching\")", 
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"yes\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "package_option"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : id , pixel_aspect_ratio_par , content , country , pay_per_view_ppv , language , hight_definition_tv , package_option \", series_name  | tv_channel_series_name : series_name , id  | tv_series : air_date , id , channel , weekly_rank , viewers_m , share , rating , episode , 18_49_rating_share  | cartoon : title , written_by , id , production_code , channel , original_air_date , directed_by ", 
        "query2": "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\"", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "package_option", 
            ",", 
            "series_name", 
            "from", 
            "tv_channel", 
            "where", 
            "hight_definition_tv", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "package", 
            "options", 
            "and", 
            "the", 
            "name", 
            "of", 
            "the", 
            "series", 
            "for", 
            "the", 
            "TV", 
            "Channel", 
            "that", 
            "supports", 
            "high", 
            "definition", 
            "TV", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "package_option", 
            ",", 
            "series_name", 
            "FROM", 
            "TV_Channel", 
            "WHERE", 
            "hight_definition_TV", 
            "=", 
            "``", 
            "yes", 
            "''"
        ], 
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", 
        "schema_with_content": "tv_channel : id (\"714\", \"715\", \"704\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia + Sky HD\", \"Option\", \"no ( FTV )\"), series_name (\"Rock TV\", \"MTV Music\", \"Hip Hop TV\") | tv_channel_series_name : series_name (\"Rock TV\", \"MTV Music\", \"Hip Hop TV\"), id (\"707\", \"713\", \"728\") | tv_series : air_date (\"October 15, 2007\", \"October 22, 2007\", \"December 10, 2007\"), id (9.0, 7.0, 2.0), channel (\"707\", \"700\", \"719\"), weekly_rank (65.0, 70.0, 65.0), viewers_m (\"6.06\", \"6.05\", \"8.23\"), share (5.0, 6.0, 5.0), rating (\"3.8\", \"3.7\", \"3.5\"), episode (\"Emily\", \"Home By Another Way\", \"A Love of a Lifetime\"), 18_49_rating_share (\"2.7/7\", \"2.2/6\", \"2.4/6\") | cartoon : title (\"Deep Cover for Batman!\", \"Terror on Dinosaur Island!\", \"Dawn of the Dead Man!\"), written_by (\"Michael Jelenic\", \"Todd Casey\", \"Steven Melching\"), id (12.0, 5.0, 9.0), production_code (101.0, 105.0, 101.0), channel (\"704\", \"706\", \"700\"), original_air_date (\"January16,2009\", \"February27,2009\", \"January2,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")", 
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"yes\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "series_name"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : series_name , pixel_aspect_ratio_par , package_option \", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\", hight_definition_tv , content , pay_per_view_ppv , country , id , language  | tv_channel_package_option : id , package_option \", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\" | tv_series : channel , viewers_m , id , 18_49_rating_share , share , episode , rating , weekly_rank , air_date  | cartoon : title , directed_by , written_by , channel , production_code , id , original_air_date ", 
        "query2": "select t2.package_option, t1.series_name from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\"", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "package_option", 
            ",", 
            "series_name", 
            "from", 
            "tv_channel", 
            "where", 
            "hight_definition_tv", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "package", 
            "options", 
            "and", 
            "the", 
            "name", 
            "of", 
            "the", 
            "series", 
            "for", 
            "the", 
            "TV", 
            "Channel", 
            "that", 
            "supports", 
            "high", 
            "definition", 
            "TV", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "package_option", 
            ",", 
            "series_name", 
            "FROM", 
            "TV_Channel", 
            "WHERE", 
            "hight_definition_TV", 
            "=", 
            "``", 
            "yes", 
            "''"
        ], 
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", 
        "schema_with_content": "tv_channel : series_name (\"MTV Live HD\", \"Match Music\", \"Classica\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"728\", \"709\", \"703\"), language (\"Italian\", \"English\") | tv_channel_package_option : id (\"705\", \"709\", \"719\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\") | tv_series : channel (\"708\", \"713\", \"708\"), viewers_m (\"5.75\", \"5.28\", \"5.61\"), id (4.0, 1.0, 10.0), 18_49_rating_share (\"2.2/6\", \"2.9/7\", \"2.1/5\"), share (9.0, 7.0, 6.0), episode (\"Blowback\", \"Game Three\", \"Game Three\"), rating (\"4.3\", \"5.3\", \"3.8\"), weekly_rank (67.0, 71.0, 43.0), air_date (\"October 22, 2007\", \"November 12, 2007\", \"October 29, 2007\") | cartoon : title (\"Enter the Outsiders!\", \"Journey to the Center of the Bat!\", \"Enter the Outsiders!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Joseph Kuhr\", \"James Krieg\", \"J. M. DeMatteis\"), channel (\"705\", \"707\", \"703\"), production_code (112.0, 107.0, 112.0), id (10.0, 6.0, 12.0), original_air_date (\"January23,2009\", \"January9,2009\", \"February6,2009\")", 
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            7, 
                            false
                        ], 
                        null
                    ], 
                    "\"yes\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "package_option"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : content , language , pay_per_view_ppv , hight_definition_tv , package_option \", country , series_name , pixel_aspect_ratio_par , id  | tv_channel_pixel_aspect_ratio_par : id , pixel_aspect_ratio_par  | tv_series : rating , id , channel , episode , 18_49_rating_share , weekly_rank , share , viewers_m , air_date  | cartoon : channel , directed_by , original_air_date , production_code , id , title , written_by ", 
        "query2": "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id = t2.id where t1.language != 'English'", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "pixel_aspect_ratio_par", 
            ",", 
            "country", 
            "from", 
            "tv_channel", 
            "where", 
            "language", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "find", 
            "the", 
            "pixel", 
            "aspect", 
            "ratio", 
            "and", 
            "nation", 
            "of", 
            "the", 
            "tv", 
            "channels", 
            "that", 
            "do", 
            "not", 
            "use", 
            "English", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Pixel_aspect_ratio_PAR", 
            ",", 
            "country", 
            "FROM", 
            "tv_channel", 
            "WHERE", 
            "LANGUAGE", 
            "!", 
            "=", 
            "'English", 
            "'"
        ], 
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", 
        "schema_with_content": "tv_channel : content (\"music\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\", \"no ( FTV )\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"Rock TV\", \"Rock TV\", \"Classica\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"713\", \"701\", \"701\") | tv_channel_pixel_aspect_ratio_par : id (\"700\", \"719\", \"709\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | tv_series : rating (\"5.3\", \"4.0\", \"3.4\"), id (12.0, 4.0, 6.0), channel (\"708\", \"708\", \"700\"), episode (\"The Year of the Rabbit\", \"Emily\", \"Keepers\"), 18_49_rating_share (\"2.2/6\", \"2.9/7\", \"1.5/4\"), weekly_rank (71.0, 67.0, 68.0), share (6.0, 7.0, 5.0), viewers_m (\"6.09\", \"6.05\", \"5.13\"), air_date (\"October 22, 2007\", \"October 8, 2007\", \"December 17, 2007\") | cartoon : channel (\"704\", \"704\", \"706\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"January2,2009\", \"January30,2009\", \"January9,2009\"), production_code (107.0, 111.0, 105.0), id (8.0, 6.0, 10.0), title (\"Invasion of the Secret Santas!\", \"Day of the Dark Knight!\", \"Return of the Fearsome Fangs!\"), written_by (\"Matt Wayne\", \"Joseph Kuhr\", \"Todd Casey\")", 
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"English\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "pixel_aspect_ratio_par"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : pay_per_view_ppv , country , id , series_name , pixel_aspect_ratio_par , package_option \", hight_definition_tv , language , content  | tv_channel_country : country , id  | tv_series : share , air_date , viewers_m , weekly_rank , rating , channel , id , 18_49_rating_share , episode  | cartoon : channel , id , title , written_by , directed_by , original_air_date , production_code ", 
        "query2": "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "pixel_aspect_ratio_par", 
            ",", 
            "country", 
            "from", 
            "tv_channel", 
            "where", 
            "language", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "find", 
            "the", 
            "pixel", 
            "aspect", 
            "ratio", 
            "and", 
            "nation", 
            "of", 
            "the", 
            "tv", 
            "channels", 
            "that", 
            "do", 
            "not", 
            "use", 
            "English", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Pixel_aspect_ratio_PAR", 
            ",", 
            "country", 
            "FROM", 
            "tv_channel", 
            "WHERE", 
            "LANGUAGE", 
            "!", 
            "=", 
            "'English", 
            "'"
        ], 
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", 
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"703\", \"717\", \"709\"), series_name (\"MTV Music\", \"MTV Dance\", \"MTV Classic\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia\", \"no ( FTV )\"), hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), content (\"music\") | tv_channel_country : country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"714\", \"709\", \"719\") | tv_series : share (9.0, 5.0, 6.0), air_date (\"November 12, 2007\", \"November 26, 2007\", \"December 10, 2007\"), viewers_m (\"9.16\", \"8.23\", \"6.06\"), weekly_rank (67.0, 67.0, 61.0), rating (\"3.7\", \"5.3\", \"5.3\"), channel (\"714\", \"701\", \"717\"), id (3.0, 3.0, 10.0), 18_49_rating_share (\"3.2/8\", \"2.4/6\", \"1.5/4\"), episode (\"Blowback\", \"The Legend of Dylan McCleen\", \"Home By Another Way\") | cartoon : channel (\"700\", \"728\", \"707\"), id (4.0, 6.0, 11.0), title (\"Evil Under the Sea!\", \"Day of the Dark Knight!\", \"The Eyes of Despero!\"), written_by (\"James Krieg\", \"Matt Wayne\", \"J. M. DeMatteis\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"January2,2009\", \"January9,2009\", \"February6,2009\"), production_code (111.0, 109.0, 110.0)", 
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"English\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "country"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : language , pixel_aspect_ratio_par , content , id , pay_per_view_ppv , hight_definition_tv , country , package_option , series_name  | tv_channel_pixel_aspect_ratio_par : pixel_aspect_ratio_par , id  | tv_series : channel , rating , 18_49_rating_share , weekly_rank , viewers_m , episode , air_date , share , id  | cartoon : title , original_air_date , directed_by , channel , id , production_code , written_by ", 
        "query2": "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id = t2.id where t1.language != 'English'", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "pixel_aspect_ratio_par", 
            ",", 
            "country", 
            "from", 
            "tv_channel", 
            "where", 
            "language", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "pixel", 
            "aspect", 
            "ratio", 
            "and", 
            "country", 
            "of", 
            "origin", 
            "for", 
            "all", 
            "TV", 
            "channels", 
            "that", 
            "do", 
            "not", 
            "use", 
            "English", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Pixel_aspect_ratio_PAR", 
            ",", 
            "country", 
            "FROM", 
            "tv_channel", 
            "WHERE", 
            "LANGUAGE", 
            "!", 
            "=", 
            "'English", 
            "'"
        ], 
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", 
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), id (\"728\", \"705\", \"703\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), package_option (\"Option\", \"Option\", \"Sky Famiglia + Sky HD\"), series_name (\"Radio Capital TiV\u00c3\u00b9\", \"MTV Music\", \"MTV Dance\") | tv_channel_pixel_aspect_ratio_par : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"705\", \"706\", \"705\") | tv_series : channel (\"717\", \"700\", \"714\"), rating (\"3.7\", \"5.8\", \"4.4\"), 18_49_rating_share (\"2.4/6\", \"2.4/6\", \"2.1/5\"), weekly_rank (62.0, 72.0, 61.0), viewers_m (\"5.28\", \"6.94\", \"6.94\"), episode (\"The Hanged Man\", \"Friendly Skies\", \"Game Three\"), air_date (\"November 26, 2007\", \"October 15, 2007\", \"December 17, 2007\"), share (7.0, 9.0, 9.0), id (2.0, 8.0, 4.0) | cartoon : title (\"Return of the Fearsome Fangs!\", \"The Eyes of Despero!\", \"Dawn of the Dead Man!\"), original_air_date (\"January9,2009\", \"February27,2009\", \"January16,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"708\", \"703\", \"701\"), id (6.0, 3.0, 10.0), production_code (104.0, 103.0, 101.0), written_by (\"Adam Beechen\", \"J. M. DeMatteis\", \"J. M. DeMatteis\")", 
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"English\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "pixel_aspect_ratio_par"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "tv_channel : package_option \", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\", pixel_aspect_ratio_par , country , series_name , hight_definition_tv , pay_per_view_ppv , content , id , language  | tv_channel_country : id , country  | tv_series : 18_49_rating_share , air_date , id , channel , rating , episode , share , weekly_rank , viewers_m  | cartoon : written_by , directed_by , channel , title , original_air_date , id , production_code ", 
        "query2": "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'", 
        "db_id": "tvshow", 
        "query_toks_no_value": [
            "select", 
            "pixel_aspect_ratio_par", 
            ",", 
            "country", 
            "from", 
            "tv_channel", 
            "where", 
            "language", 
            "!", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "pixel", 
            "aspect", 
            "ratio", 
            "and", 
            "country", 
            "of", 
            "origin", 
            "for", 
            "all", 
            "TV", 
            "channels", 
            "that", 
            "do", 
            "not", 
            "use", 
            "English", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Pixel_aspect_ratio_PAR", 
            ",", 
            "country", 
            "FROM", 
            "tv_channel", 
            "WHERE", 
            "LANGUAGE", 
            "!", 
            "=", 
            "'English", 
            "'"
        ], 
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", 
        "schema_with_content": "tv_channel : package_option (\"no ( FTV )\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"myDeejay\", \"MTV Dance\", \"MTV Music\"), hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), content (\"music\"), id (\"704\", \"715\", \"713\"), language (\"Italian\", \"English\") | tv_channel_country : id (\"714\", \"719\", \"708\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : 18_49_rating_share (\"2.9/7\", \"1.7/5\", \"3.2/8\"), air_date (\"December 10, 2007\", \"December 17, 2007\", \"November 19, 2007\"), id (11.0, 9.0, 6.0), channel (\"713\", \"717\", \"714\"), rating (\"5.8\", \"3.8\", \"4.4\"), episode (\"Double Down\", \"Emily\", \"Emily\"), share (6.0, 6.0, 7.0), weekly_rank (68.0, 80.0, 70.0), viewers_m (\"5.28\", \"6.75\", \"6.94\") | cartoon : written_by (\"Matt Wayne\", \"Michael Jelenic\", \"Matt Wayne\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"705\", \"707\", \"707\"), title (\"Journey to the Center of the Bat!\", \"Journey to the Center of the Bat!\", \"Invasion of the Secret Santas!\"), original_air_date (\"February27,2009\", \"January16,2009\", \"February20,2009\"), id (6.0, 5.0, 5.0), production_code (103.0, 112.0, 111.0)", 
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    7, 
                    [
                        0, 
                        [
                            0, 
                            4, 
                            false
                        ], 
                        null
                    ], 
                    "\"English\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "tv_channel": "country"
        }, 
        "primary_key": {
            "tv_channel": "id"
        }
    }, 
    {
        "schema_without_content": "poker_player : best_finish , people_id , earnings , poker_player_id , money_rank , final_table_made  | poker_player_final_table_made : final_table_made , poker_player_id  | people : name , birth_date , height , nationality , people_id ", 
        "query2": "select t2.final_table_made, t1.best_finish from poker_player as t1 join poker_player_final_table_made as t2 on t1.poker_player_id = t2.poker_player_id", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "final_table_made", 
            ",", 
            "best_finish", 
            "from", 
            "poker_player"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "final", 
            "tables", 
            "made", 
            "and", 
            "the", 
            "best", 
            "finishes", 
            "of", 
            "poker", 
            "players", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Final_Table_Made", 
            ",", 
            "Best_Finish", 
            "FROM", 
            "poker_player"
        ], 
        "question": "List the final tables made and the best finishes of poker players.", 
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), people_id (7, 2, 6), earnings (142800.0, 189233.0, 142800.0), poker_player_id (4, 5, 5), money_rank (58.0, 68.0, 141.0), final_table_made (42.0, 21.0, 42.0) | poker_player_final_table_made : final_table_made (42.0, 21.0, 42.0), poker_player_id (2, 1, 1) | people : name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Roman Bragin\"), birth_date (\"August 8, 1986\", \"July 14, 1983\", \"July 14, 1983\"), height (182.0, 196.0, 207.0), nationality (\"Russia\", \"Bulgaria\"), people_id (7, 5, 1)", 
        "orig_query": "select final_table_made, best_finish from poker_player", 
        "query1": "select final_table_made, best_finish from poker_player", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "poker_player": "final_table_made"
        }, 
        "primary_key": {
            "poker_player": "poker_player_id"
        }
    }, 
    {
        "schema_without_content": "poker_player : earnings , people_id , poker_player_id , money_rank , final_table_made , best_finish  | poker_player_best_finish : best_finish , poker_player_id  | people : nationality , height , people_id , name , birth_date ", 
        "query2": "select t1.final_table_made, t2.best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "final_table_made", 
            ",", 
            "best_finish", 
            "from", 
            "poker_player"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "final", 
            "tables", 
            "made", 
            "and", 
            "the", 
            "best", 
            "finishes", 
            "of", 
            "poker", 
            "players", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Final_Table_Made", 
            ",", 
            "Best_Finish", 
            "FROM", 
            "poker_player"
        ], 
        "question": "List the final tables made and the best finishes of poker players.", 
        "schema_with_content": "poker_player : earnings (476090.0, 596462.0, 104871.0), people_id (5, 2, 2), poker_player_id (4, 5, 2), money_rank (166.0, 166.0, 166.0), final_table_made (21.0, 42.0, 26.0), best_finish (1.0, 2.0, 3.0) | poker_player_best_finish : best_finish (1.0, 2.0, 3.0), poker_player_id (5, 1, 1) | people : nationality (\"Russia\", \"Bulgaria\"), height (182.0, 187.0, 194.0), people_id (2, 5, 6), name (\"Sergey Grankin\", \"Semen Poltavskiy\", \"Aleksey Ostapenko\"), birth_date (\"April 17, 1987\", \"July 14, 1983\", \"January 22, 1987\")", 
        "orig_query": "select final_table_made, best_finish from poker_player", 
        "query1": "select final_table_made, best_finish from poker_player", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "poker_player": "best_finish"
        }, 
        "primary_key": {
            "poker_player": "poker_player_id"
        }
    }, 
    {
        "schema_without_content": "poker_player : money_rank , poker_player_id , final_table_made , best_finish , people_id , earnings  | poker_player_final_table_made : poker_player_id , final_table_made  | people : nationality , name , people_id , birth_date , height ", 
        "query2": "select t2.final_table_made, t1.best_finish from poker_player as t1 join poker_player_final_table_made as t2 on t1.poker_player_id = t2.poker_player_id", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "final_table_made", 
            ",", 
            "best_finish", 
            "from", 
            "poker_player"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "final", 
            "tables", 
            "made", 
            "and", 
            "best", 
            "finishes", 
            "for", 
            "all", 
            "poker", 
            "players", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Final_Table_Made", 
            ",", 
            "Best_Finish", 
            "FROM", 
            "poker_player"
        ], 
        "question": "What are the final tables made and best finishes for all poker players?", 
        "schema_with_content": "poker_player : money_rank (141.0, 141.0, 166.0), poker_player_id (4, 5, 3), final_table_made (10.0, 26.0, 19.0), best_finish (1.0, 2.0, 3.0), people_id (5, 7, 1), earnings (104871.0, 104871.0, 189233.0) | poker_player_final_table_made : poker_player_id (5, 4, 5), final_table_made (10.0, 26.0, 19.0) | people : nationality (\"Russia\", \"Bulgaria\"), name (\"Roman Bragin\", \"Aleksey Ostapenko\", \"Roman Bragin\"), people_id (6, 6, 5), birth_date (\"August 8, 1986\", \"August 16, 1982\", \"May 26, 1986\"), height (207.0, 193.0, 194.0)", 
        "orig_query": "select final_table_made, best_finish from poker_player", 
        "query1": "select final_table_made, best_finish from poker_player", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "poker_player": "final_table_made"
        }, 
        "primary_key": {
            "poker_player": "poker_player_id"
        }
    }, 
    {
        "schema_without_content": "poker_player : people_id , money_rank , earnings , final_table_made , poker_player_id , best_finish  | poker_player_best_finish : poker_player_id , best_finish  | people : name , birth_date , people_id , nationality , height ", 
        "query2": "select t1.final_table_made, t2.best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "final_table_made", 
            ",", 
            "best_finish", 
            "from", 
            "poker_player"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "final", 
            "tables", 
            "made", 
            "and", 
            "best", 
            "finishes", 
            "for", 
            "all", 
            "poker", 
            "players", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Final_Table_Made", 
            ",", 
            "Best_Finish", 
            "FROM", 
            "poker_player"
        ], 
        "question": "What are the final tables made and best finishes for all poker players?", 
        "schema_with_content": "poker_player : people_id (5, 1, 1), money_rank (141.0, 141.0, 154.0), earnings (596462.0, 476090.0, 596462.0), final_table_made (19.0, 19.0, 26.0), poker_player_id (1, 1, 5), best_finish (1.0, 2.0, 3.0) | poker_player_best_finish : poker_player_id (5, 5, 3), best_finish (1.0, 2.0, 3.0) | people : name (\"Aleksey Ostapenko\", \"Yevgeni Sivozhelez\", \"Semen Poltavskiy\"), birth_date (\"July 14, 1983\", \"February 8, 1981\", \"January 22, 1987\"), people_id (5, 1, 3), nationality (\"Russia\", \"Bulgaria\"), height (193.0, 182.0, 196.0)", 
        "orig_query": "select final_table_made, best_finish from poker_player", 
        "query1": "select final_table_made, best_finish from poker_player", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "poker_player": "best_finish"
        }, 
        "primary_key": {
            "poker_player": "poker_player_id"
        }
    }, 
    {
        "schema_without_content": "poker_player : final_table_made , people_id , poker_player_id , money_rank , best_finish , earnings  | people : name , birth_date , nationality , people_id , height  | people_birth_date : birth_date , people_id ", 
        "query2": "select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "birth_date", 
            "from", 
            "people", 
            "order", 
            "by", 
            "name", 
            "asc"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "names", 
            "and", 
            "birth", 
            "dates", 
            "of", 
            "people", 
            "in", 
            "ascending", 
            "alphabetical", 
            "order", 
            "of", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Birth_Date", 
            "FROM", 
            "people", 
            "ORDER", 
            "BY", 
            "Name", 
            "ASC"
        ], 
        "question": "List the names and birth dates of people in ascending alphabetical order of name.", 
        "schema_with_content": "poker_player : final_table_made (10.0, 19.0, 10.0), people_id (1, 7, 5), poker_player_id (1, 5, 1), money_rank (68.0, 141.0, 166.0), best_finish (1.0, 2.0, 3.0), earnings (142800.0, 189233.0, 189233.0) | people : name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Semen Poltavskiy\"), birth_date (\"May 26, 1986\", \"August 16, 1982\", \"August 8, 1986\"), nationality (\"Russia\", \"Bulgaria\"), people_id (6, 3, 4), height (205.0, 187.0, 207.0) | people_birth_date : birth_date (\"May 26, 1986\", \"August 16, 1982\", \"August 8, 1986\"), people_id (7, 2, 1)", 
        "orig_query": "select name, birth_date from people order by name asc", 
        "query1": "select name, birth_date from people order by name asc", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "people": "birth_date"
        }, 
        "primary_key": {
            "people": "people_id"
        }
    }, 
    {
        "schema_without_content": "poker_player : best_finish , people_id , final_table_made , money_rank , poker_player_id , earnings  | people : nationality , name , birth_date , people_id , height  | people_name : name , people_id ", 
        "query2": "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "birth_date", 
            "from", 
            "people", 
            "order", 
            "by", 
            "name", 
            "asc"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "names", 
            "and", 
            "birth", 
            "dates", 
            "of", 
            "people", 
            "in", 
            "ascending", 
            "alphabetical", 
            "order", 
            "of", 
            "name", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Birth_Date", 
            "FROM", 
            "people", 
            "ORDER", 
            "BY", 
            "Name", 
            "ASC"
        ], 
        "question": "List the names and birth dates of people in ascending alphabetical order of name.", 
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), people_id (2, 6, 7), final_table_made (42.0, 21.0, 26.0), money_rank (58.0, 141.0, 166.0), poker_player_id (1, 4, 1), earnings (476090.0, 104871.0, 476090.0) | people : nationality (\"Russia\", \"Bulgaria\"), name (\"Maksim Botin\", \"Sergey Grankin\", \"Teodor Salparov\"), birth_date (\"February 8, 1981\", \"April 17, 1987\", \"August 8, 1986\"), people_id (4, 6, 7), height (196.0, 193.0, 194.0) | people_name : name (\"Maksim Botin\", \"Sergey Grankin\", \"Teodor Salparov\"), people_id (5, 4, 5)", 
        "orig_query": "select name, birth_date from people order by name asc", 
        "query1": "select name, birth_date from people order by name asc", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "people": "name"
        }, 
        "primary_key": {
            "people": "people_id"
        }
    }, 
    {
        "schema_without_content": "poker_player : earnings , money_rank , poker_player_id , people_id , final_table_made , best_finish  | people : birth_date , people_id , name , nationality , height  | people_birth_date : birth_date , people_id ", 
        "query2": "select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "birth_date", 
            "from", 
            "people", 
            "order", 
            "by", 
            "name", 
            "asc"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "birth", 
            "dates", 
            "of", 
            "people", 
            ",", 
            "ordered", 
            "by", 
            "their", 
            "names", 
            "in", 
            "alphabetical", 
            "order", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Birth_Date", 
            "FROM", 
            "people", 
            "ORDER", 
            "BY", 
            "Name", 
            "ASC"
        ], 
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", 
        "schema_with_content": "poker_player : earnings (142800.0, 476090.0, 476090.0), money_rank (154.0, 166.0, 154.0), poker_player_id (5, 1, 4), people_id (2, 7, 1), final_table_made (21.0, 26.0, 26.0), best_finish (1.0, 2.0, 3.0) | people : birth_date (\"August 8, 1986\", \"May 26, 1986\", \"February 8, 1981\"), people_id (6, 3, 4), name (\"Aleksey Ostapenko\", \"Sergey Grankin\", \"Aleksey Ostapenko\"), nationality (\"Russia\", \"Bulgaria\"), height (182.0, 193.0, 193.0) | people_birth_date : birth_date (\"August 8, 1986\", \"May 26, 1986\", \"February 8, 1981\"), people_id (1, 1, 3)", 
        "orig_query": "select name, birth_date from people order by name asc", 
        "query1": "select name, birth_date from people order by name asc", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "people": "birth_date"
        }, 
        "primary_key": {
            "people": "people_id"
        }
    }, 
    {
        "schema_without_content": "poker_player : best_finish , people_id , final_table_made , money_rank , earnings , poker_player_id  | people : height , birth_date , people_id , nationality , name  | people_name : name , people_id ", 
        "query2": "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc", 
        "db_id": "poker_player", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "birth_date", 
            "from", 
            "people", 
            "order", 
            "by", 
            "name", 
            "asc"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "birth", 
            "dates", 
            "of", 
            "people", 
            ",", 
            "ordered", 
            "by", 
            "their", 
            "names", 
            "in", 
            "alphabetical", 
            "order", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Birth_Date", 
            "FROM", 
            "people", 
            "ORDER", 
            "BY", 
            "Name", 
            "ASC"
        ], 
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", 
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), people_id (5, 7, 2), final_table_made (26.0, 19.0, 26.0), money_rank (141.0, 58.0, 58.0), earnings (104871.0, 104871.0, 596462.0), poker_player_id (5, 2, 5) | people : height (207.0, 193.0, 196.0), birth_date (\"July 14, 1983\", \"January 22, 1987\", \"July 14, 1983\"), people_id (1, 2, 4), nationality (\"Russia\", \"Bulgaria\"), name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Semen Poltavskiy\") | people_name : name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Semen Poltavskiy\"), people_id (3, 4, 3)", 
        "orig_query": "select name, birth_date from people order by name asc", 
        "query1": "select name, birth_date from people order by name asc", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "people": "name"
        }, 
        "primary_key": {
            "people": "people_id"
        }
    }, 
    {
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_name , contestant_number  | votes : state , created , vote_id , contestant_number , phone_number  | votes_phone_number : vote_id , phone_number ", 
        "query2": "select t1.vote_id, t2.phone_number, t1.state from votes as t1 join votes_phone_number as t2 on t1.vote_id = t2.vote_id", 
        "db_id": "voter_1", 
        "query_toks_no_value": [
            "select", 
            "vote_id", 
            ",", 
            "phone_number", 
            ",", 
            "state", 
            "from", 
            "votes"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "vote", 
            "ids", 
            ",", 
            "phone", 
            "numbers", 
            "and", 
            "states", 
            "of", 
            "all", 
            "votes", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "vote_id", 
            ",", 
            "phone_number", 
            ",", 
            "state", 
            "FROM", 
            "votes"
        ], 
        "question": "List the vote ids, phone numbers and states of all votes.", 
        "schema_with_content": "area_code_state : area_code (872, 925, 909), state (\"TN\", \"PA\", \"MD\") | contestants : contestant_name (\"Edwina Burnam\", \"Ericka Dieter\", \"Kelly Clauss\"), contestant_number (4, 8, 9) | votes : state (\"NY\", \"CA\", \"NJ\n\"), created (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:39\", \"2018-03-09 19:03:39\"), vote_id (5, 3, 5), contestant_number (2, 3, 5), phone_number (5112677315, 7148407040, 7148407040) | votes_phone_number : vote_id (5, 2, 3), phone_number (5112677315, 7148407040, 7148407040)", 
        "orig_query": "select vote_id, phone_number, state from votes", 
        "query1": "select vote_id, phone_number, state from votes", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "votes": "phone_number"
        }, 
        "primary_key": {
            "votes": "vote_id"
        }
    }, 
    {
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_name , contestant_number  | votes : created , phone_number , contestant_number , vote_id , state  | votes_state : state , vote_id ", 
        "query2": "select t1.vote_id, t1.phone_number, t2.state from votes as t1 join votes_state as t2 on t1.vote_id = t2.vote_id", 
        "db_id": "voter_1", 
        "query_toks_no_value": [
            "select", 
            "vote_id", 
            ",", 
            "phone_number", 
            ",", 
            "state", 
            "from", 
            "votes"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "vote", 
            "ids", 
            ",", 
            "phone", 
            "numbers", 
            "and", 
            "states", 
            "of", 
            "all", 
            "votes", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "vote_id", 
            ",", 
            "phone_number", 
            ",", 
            "state", 
            "FROM", 
            "votes"
        ], 
        "question": "List the vote ids, phone numbers and states of all votes.", 
        "schema_with_content": "area_code_state : area_code (651, 415, 714), state (\"PA\", \"CO\", \"KS\") | contestants : contestant_name (\"Jessie Alloway\", \"Alana Bregman\", \"Allie Rogalski\"), contestant_number (3, 3, 3) | votes : created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:39\", \"2018-03-09 19:03:21\"), phone_number (5112677315, 7182887233, 6209222712), contestant_number (2, 3, 5), vote_id (2, 5, 1), state (\"NY\", \"CA\", \"NJ\n\") | votes_state : state (\"NY\", \"CA\", \"NJ\n\"), vote_id (2, 1, 2)", 
        "orig_query": "select vote_id, phone_number, state from votes", 
        "query1": "select vote_id, phone_number, state from votes", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                6, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "votes": "state"
        }, 
        "primary_key": {
            "votes": "vote_id"
        }
    }, 
    {
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_number , contestant_name  | votes : created , vote_id , state , contestant_number , phone_number  | votes_state : vote_id , state ", 
        "query2": "select distinct t2.state, t1.created from votes as t1 join votes_state as t2 on t1.vote_id = t2.vote_id", 
        "db_id": "voter_1", 
        "query_toks_no_value": [
            "select", 
            "distinct", 
            "state", 
            ",", 
            "created", 
            "from", 
            "votes"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "distinct", 
            "states", 
            "and", 
            "create", 
            "time", 
            "of", 
            "all", 
            "votes", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "DISTINCT", 
            "state", 
            ",", 
            "created", 
            "FROM", 
            "votes"
        ], 
        "question": "What are the distinct states and create time of all votes?", 
        "schema_with_content": "area_code_state : area_code (424, 404, 857), state (\"CO\", \"LA\", \"IL\") | contestants : contestant_number (5, 7, 5), contestant_name (\"Alana Bregman\", \"Kelly Clauss\", \"Allie Rogalski\") | votes : created (\"2018-03-09 19:03:40\", \"2018-03-09 19:03:40\", \"2018-03-09 19:03:40\"), vote_id (2, 1, 2), state (\"NY\", \"CA\", \"NJ\n\"), contestant_number (2, 3, 5), phone_number (7182887233, 7182887233, 7148407040) | votes_state : vote_id (5, 3, 3), state (\"NY\", \"CA\", \"NJ\n\")", 
        "orig_query": "select distinct state, created from votes", 
        "query1": "select distinct state, created from votes", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                true, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "votes": "state"
        }, 
        "primary_key": {
            "votes": "vote_id"
        }
    }, 
    {
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_number , contestant_name  | votes : state , contestant_number , phone_number , vote_id , created  | votes_created : created , vote_id ", 
        "query2": "select distinct t1.state, t2.created from votes as t1 join votes_created as t2 on t1.vote_id = t2.vote_id", 
        "db_id": "voter_1", 
        "query_toks_no_value": [
            "select", 
            "distinct", 
            "state", 
            ",", 
            "created", 
            "from", 
            "votes"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "distinct", 
            "states", 
            "and", 
            "create", 
            "time", 
            "of", 
            "all", 
            "votes", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "DISTINCT", 
            "state", 
            ",", 
            "created", 
            "FROM", 
            "votes"
        ], 
        "question": "What are the distinct states and create time of all votes?", 
        "schema_with_content": "area_code_state : area_code (901, 865, 859), state (\"MS\", \"NY\", \"NM\") | contestants : contestant_number (1, 6, 6), contestant_name (\"Allie Rogalski\", \"Loraine NygrenTania Mattioli\", \"Nita Coster\") | votes : state (\"NY\", \"CA\", \"NJ\n\"), contestant_number (2, 3, 5), phone_number (5112677315, 7148407040, 7148407040), vote_id (1, 2, 2), created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:39\") | votes_created : created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:39\"), vote_id (3, 1, 5)", 
        "orig_query": "select distinct state, created from votes", 
        "query1": "select distinct state, created from votes", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                true, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                7, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "votes": "created"
        }, 
        "primary_key": {
            "votes": "vote_id"
        }
    }, 
    {
        "schema_without_content": "city : population , id , name \", countrycode , district  | sqlite_sequence : seq , name  | country : governmentform , lifeexpectancy , gnpold , gnp , continent , capital , surfacearea , code2 , population , localname , code , region , name , headofstate , indepyear  | country_population : code , population  | countrylanguage : countrycode , percentage , language , isofficial ", 
        "query2": "select t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Brazil\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "population", 
            "and", 
            "life", 
            "expectancies", 
            "in", 
            "Brazil", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Brazil", 
            "''"
        ], 
        "question": "What are the population and life expectancies in Brazil?", 
        "schema_with_content": "city : population (277752, 117019, 180400), id (3300, 2686, 836), name (\"Taegu\", \"Berezniki\", \"Henzada (Hinthada)\"), countrycode (\"ITA\", \"NRU\", \"DZA\"), district (\"al-Minya\", \"Toa Baja\", \"Georgetown\") | sqlite_sequence : seq (4079), name (\"city\") | country : governmentform (\"Territory of Australia\", \"Independent Church State\", \"Autonomous Area\"), lifeexpectancy (70.3, 73.0, 68.7), gnpold (7474.0, 4542.0, 34843.0), gnp (65707.0, 435.0, 612.0), continent (\"South America\", \"Europe\", \"Asia\"), capital (2689, 191, 2928), surfacearea (163610.0, 323250.0, 88946.0), code2 (\"SJ\", \"MR\", \"PT\"), population (2441000, 6485000, 3567000), localname (\"T\u00e2\u0080\u0099ai-wan\", \"Iran\", \"Ertra\"), code (\"ESP\", \"TJK\", \"LCA\"), region (\"Melanesia\", \"Central America\", \"Baltic Countries\"), name (\"United Kingdom\", \"French Guiana\", \"San Marino\"), headofstate (\"Fernando Henrique Cardoso\", \"\", \"John Bani\"), indepyear (836, 1958, 1932) | country_population : code (\"FSM\", \"TKM\", \"ZMB\"), population (2441000, 6485000, 3567000) | countrylanguage : countrycode (\"PRY\", \"ETH\", \"VIR\"), percentage (6.0, 76.7, 4.9), language (\"Chuabo\", \"Otom\u00c3\u00ad\", \"Eskimo Languages\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Brazil\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , population , id , countrycode , name  | sqlite_sequence : seq , name  | country : name , region , code2 , headofstate , surfacearea , localname , governmentform , continent , population , indepyear , capital , gnpold , gnp , code , lifeexpectancy  | country_lifeexpectancy : lifeexpectancy , code  | countrylanguage : language , countrycode , isofficial , percentage ", 
        "query2": "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.name = \"Brazil\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "population", 
            "and", 
            "life", 
            "expectancies", 
            "in", 
            "Brazil", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Brazil", 
            "''"
        ], 
        "question": "What are the population and life expectancies in Brazil?", 
        "schema_with_content": "city : district (\"Siirt\", \"Kyoto\", \"Ayacucho\"), population (182671, 488868, 113285), id (1317, 3925, 1870), countrycode (\"MLI\", \"MMR\", \"IRQ\"), name (\"Mocuba\", \"Weno\", \"Linyi\") | sqlite_sequence : seq (4079), name (\"city\") | country : name (\"Iceland\", \"Angola\", \"Aruba\"), region (\"British Islands\", \"Northern Africa\", \"Western Africa\"), code2 (\"PG\", \"SA\", \"MD\"), headofstate (\"Khamtay Siphandone\", \"Kuniwo Nakamura\", \"Zayid bin Sultan al-Nahayan\"), surfacearea (323877.0, 329758.0, 0.4), localname (\"Santa Sede/Citt\u00c3\u00a0 del Vaticano\", \"Micronesia\", \"The Turks and Caicos Islands\"), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Independent Church State\", \"Nonmetropolitan Territory of France\"), continent (\"North America\", \"Oceania\", \"South America\"), population (62565000, 6695000, 2943000), indepyear (843, 1947, 1957), capital (3492, 2972, 2441), gnpold (157.0, 105116.0, 97884.0), gnp (197.0, 8255.0, 3787042.0), code (\"FJI\", \"CHL\", \"OMN\"), lifeexpectancy (71.0, 71.5, 73.1) | country_lifeexpectancy : lifeexpectancy (71.0, 71.5, 73.1), code (\"YEM\", \"SLV\", \"VIR\") | countrylanguage : language (\"Chuvash\", \"Pohnpei\", \"Portuguese\"), countrycode (\"ETH\", \"BRB\", \"PNG\"), isofficial (\"T\", \"F\"), percentage (12.4, 94.3, 4.4)", 
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Brazil\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "lifeexpectancy"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , id , countrycode , population , district  | sqlite_sequence : name , seq  | country : gnp , name , headofstate , localname , code , code2 , lifeexpectancy , population , indepyear , governmentform , region , gnpold , surfacearea , capital , continent  | country_population : code , population  | countrylanguage : language , percentage , isofficial , countrycode ", 
        "query2": "select t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Brazil\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "me", 
            "Brazil\u2019s", 
            "population", 
            "and", 
            "life", 
            "expectancies", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Brazil", 
            "''"
        ], 
        "question": "Give me Brazil\u2019s population and life expectancies.", 
        "schema_with_content": "city : name (\"San Bernardino\", \"Candelaria\", \"Koyang\"), id (2157, 3161, 1199), countrycode (\"RWA\", \"FSM\", \"PHL\"), population (393664, 177000, 172710), district (\"Shamal Sina\", \"Tel Aviv\", \"Daloa\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnp (11705.0, 16321.0, 8287.0), name (\"Equatorial Guinea\", \"Malaysia\", \"Mayotte\"), headofstate (\"Maaouiya Ould Sid\u00c2\u00b4Ahmad Taya\", \"Miguel Trovoada\", \"Milan Kucan\"), localname (\"Papua New Guinea/Papua Niugini\", \"United States\", \"Solomon Islands\"), code (\"UZB\", \"CXR\", \"ESH\"), code2 (\"AZ\", \"SG\", \"SC\"), lifeexpectancy (78.0, 55.0, 51.1), population (190000, 18886000, 65000), indepyear (1822, 1932, 1910), governmentform (\"Territory of Australia\", \"Overseas Department of France\", \"Federation\"), region (\"Southern Africa\", \"Melanesia\", \"Central America\"), gnpold (173610.0, 10285.0, 323310.0), surfacearea (193.0, 357022.0, 322463.0), capital (2401, 2806, 539), continent (\"Antarctica\", \"Asia\", \"Antarctica\") | country_population : code (\"LKA\", \"EGY\", \"WLF\"), population (190000, 18886000, 65000) | countrylanguage : language (\"Lao-Soung\", \"Kosrean\", \"Maka\"), percentage (9.0, 2.5, 8.5), isofficial (\"T\", \"F\"), countrycode (\"RWA\", \"JPN\", \"AUT\")", 
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Brazil\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , name , district , countrycode , population  | sqlite_sequence : seq , name  | country : localname , name , lifeexpectancy , indepyear , code , capital , governmentform , code2 , headofstate , gnp , continent , region , population , surfacearea , gnpold  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : percentage , countrycode , isofficial , language ", 
        "query2": "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.name = \"Brazil\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "me", 
            "Brazil\u2019s", 
            "population", 
            "and", 
            "life", 
            "expectancies", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Brazil", 
            "''"
        ], 
        "question": "Give me Brazil\u2019s population and life expectancies.", 
        "schema_with_content": "city : id (728, 1045, 927), name (\"Pinsk\", \"Pinetown\", \"Gandhinagar\"), district (\"New Jersey\", \"Utrecht\", \"Bursa\"), countrycode (\"DMA\", \"HND\", \"SGP\"), population (207557, 214727, 101391) | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"Panam\u00c3\u00a1\", \"Uganda\", \"Suomi\"), name (\"Tuvalu\", \"Palestine\", \"Ethiopia\"), lifeexpectancy (48.8, 45.6, 77.8), indepyear (1957, 1946, 1912), code (\"NER\", \"MDV\", \"DMA\"), capital (2754, 3333, 2919), governmentform (\"Socialistic State\", \"Republic\", \"Independent Church State\"), code2 (\"VA\", \"TN\", \"IQ\"), headofstate (\"Miguel \u00c3\u0081ngel Rodr\u00c3\u00adguez Echeverr\u00c3\u00ada\", \"Valdas Adamkus\", \"Shahabuddin Ahmad\"), gnp (1424285.0, 1161755.0, 3563.0), continent (\"Africa\", \"Oceania\", \"Oceania\"), region (\"Micronesia/Caribbean\", \"North America\", \"British Islands\"), population (10097000, 22720000, 5605000), surfacearea (468.0, 88946.0, 49012.0), gnpold (153370.0, 10241.0, 1746.0) | country_lifeexpectancy : code (\"TTO\", \"YUG\", \"KGZ\"), lifeexpectancy (48.8, 45.6, 77.8) | countrylanguage : percentage (52.6, 84.8, 17.9), countrycode (\"NAM\", \"ARM\", \"TCD\"), isofficial (\"T\", \"F\"), language (\"Sidamo\", \"Sena\", \"Venda\")", 
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Brazil\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "lifeexpectancy"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , district , id , population , countrycode  | sqlite_sequence : seq , name  | country : indepyear , gnp , headofstate , localname , lifeexpectancy , governmentform , capital , code2 , surfacearea , name , region , population , continent , gnpold , code  | country_population : population , code  | countrylanguage : percentage , countrycode , language , isofficial ", 
        "query2": "select t2.population, t1.region from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Angola\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "region", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "region", 
            "and", 
            "population", 
            "of", 
            "Angola", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "Region", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Angola", 
            "''"
        ], 
        "question": "What are the region and population of Angola?", 
        "schema_with_content": "city : name (\"Tallahassee\", \"Cairns\", \"Panabo\"), district (\"Qyzylorda\", \"Pultava\", \"Rarotonga\"), id (3157, 122, 789), population (1357000, 110034, 167183), countrycode (\"HND\", \"ALB\", \"CZE\") | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1867, 1965, 1955), gnp (870.0, 174099.0, 4251.0), headofstate (\"Mohammed VI\", \"Hosni Mubarak\", \"Andr\u00c3\u00a9s Pastrana Arango\"), localname (\"YeItyop\u00c2\u00b4iya\", \"T\u00c3\u00bcrkiye\", \"Bouvet\u00c3\u00b8ya\"), lifeexpectancy (40.4, 73.8, 73.1), governmentform (\"Socialistic State\", \"Autonomous Area\", \"Co-administrated\"), capital (645, 2447, 201), code2 (\"CM\", \"JM\", \"BM\"), surfacearea (824292.0, 27750.0, 61.0), name (\"Panama\", \"Japan\", \"Antigua and Barbuda\"), region (\"Southern and Central Asia\", \"British Islands\", \"Southern Europe\"), population (50, 180000, 7734000), continent (\"Asia\", \"Asia\", \"North America\"), gnpold (22834.0, 34843.0, 206025.0), code (\"PRT\", \"YUG\", \"ABW\") | country_population : population (50, 180000, 7734000), code (\"LBR\", \"CZE\", \"CYP\") | countrylanguage : percentage (4.4, 50.0, 7.9), countrycode (\"NLD\", \"BGR\", \"DZA\"), language (\"Malay\", \"Bajan\", \"Lezgian\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select population, region from country where name = \"Angola\"", 
        "query1": "select population, region from country where name = \"Angola\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Angola\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , countrycode , name , population , id  | sqlite_sequence : seq , name  | country : code2 , gnpold , continent , localname , headofstate , lifeexpectancy , name , gnp , governmentform , region , code , indepyear , surfacearea , capital , population  | country_region : region , code  | countrylanguage : percentage , countrycode , language , isofficial ", 
        "query2": "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = \"Angola\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "region", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "region", 
            "and", 
            "population", 
            "of", 
            "Angola", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "Region", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Angola", 
            "''"
        ], 
        "question": "What are the region and population of Angola?", 
        "schema_with_content": "city : district (\"East Java\", \"Chinandega\", \"Attika\"), countrycode (\"BRA\", \"TMP\", \"PAN\"), name (\"Foggia\", \"Macon\", \"Gaya\"), population (170034, 2190500, 145542), id (2824, 3130, 1292) | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"ZW\", \"CL\", \"SM\"), gnpold (1767.0, 96318.0, 2000.0), continent (\"North America\", \"North America\", \"Oceania\"), localname (\"Guyane fran\u00c3\u00a7aise\", \"The Turks and Caicos Islands\", \"Christmas Island\"), headofstate (\"Daniel arap Moi\", \"Thabo Mbeki\", \"Bhumibol Adulyadej\"), lifeexpectancy (79.6, 40.4, 72.4), name (\"Afghanistan\", \"Guinea-Bissau\", \"Slovakia\"), gnp (318.0, 4768.0, 121914.0), governmentform (\"Islamic Republic\", \"Constitutional Monarchy, Federation\", \"Independent Church State\"), region (\"British Islands\", \"Polynesia\", \"Polynesia\"), code (\"MOZ\", \"VEN\", \"IRN\"), indepyear (1944, 1143, 1992), surfacearea (2344858.0, 438317.0, 331689.0), capital (2697, 594, 594), population (93000, 286000, 5074000) | country_region : region (\"British Islands\", \"Polynesia\", \"Polynesia\"), code (\"SYR\", \"JAM\", \"NFK\") | countrylanguage : percentage (2.3, 17.1, 17.9), countrycode (\"KHM\", \"UGA\", \"GAB\"), language (\"Mboshi\", \"Luo\", \"Persian\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select population, region from country where name = \"Angola\"", 
        "query1": "select population, region from country where name = \"Angola\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Angola\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "region"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : population , district , id , name , countrycode  | sqlite_sequence : seq , name  | country : code2 , gnp , localname , region , governmentform \", lifeexpectancy , headofstate , gnpold , population , name , code , continent , surfacearea , indepyear , capital  | country_population : population , code  | countrylanguage : countrycode , percentage , language , isofficial ", 
        "query2": "select t2.population, t1.region from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Angola\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "region", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "region", 
            "does", 
            "Angola", 
            "belong", 
            "to", 
            "and", 
            "what", 
            "is", 
            "its", 
            "population", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "Region", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Angola", 
            "''"
        ], 
        "question": "What region does Angola belong to and what is its population?", 
        "schema_with_content": "city : population (391170, 115571, 89089), district (\"Puno\", \"Baijeri\", \"Taizz\"), id (782, 457, 327), name (\"Napoli\", \"Kaolack\", \"Burgos\"), countrycode (\"ARG\", \"BMU\", \"SVN\") | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"SO\", \"SK\", \"ZW\"), gnp (722.0, 151697.0, 5493.0), localname (\"Tokelau\", \"Lubnan\", \"Anguilla\"), region (\"Melanesia\", \"Eastern Asia\", \"Western Africa\"), governmentform (\"Co-administrated\", \"Independent Church State\", \"Monarchy (Emirate)\"), lifeexpectancy (70.8, 78.7, 69.3), headofstate (\"Yoweri Museveni\", \"Blaise Compaor\u00c3\u00a9\", \"Kocheril Raman Narayanan\"), gnpold (323310.0, 1081.0, 9585.0), population (19680000, 68000, 18827000), name (\"Guyana\", \"Guinea-Bissau\", \"China\"), code (\"CZE\", \"ITA\", \"COK\"), continent (\"Europe\", \"Africa\", \"Asia\"), surfacearea (200.0, 14.0, 796095.0), indepyear (1947, 1946, -660), capital (2331, 586, 1449) | country_population : population (19680000, 68000, 18827000), code (\"ATG\", \"PRI\", \"GNB\") | countrylanguage : countrycode (\"ZWE\", \"SUR\", \"COL\"), percentage (55.1, 89.7, 19.0), language (\"Lithuanian\", \"Bajan\", \"Mam\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select population, region from country where name = \"Angola\"", 
        "query1": "select population, region from country where name = \"Angola\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Angola\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , district , name , population , countrycode  | sqlite_sequence : name , seq  | country : surfacearea , gnpold , name , capital , gnp , localname , indepyear , code , region , continent , lifeexpectancy , code2 , population , headofstate , governmentform  | country_region : code , region  | countrylanguage : language , countrycode , percentage , isofficial ", 
        "query2": "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = \"Angola\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "population", 
            ",", 
            "region", 
            "from", 
            "country", 
            "where", 
            "name", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "region", 
            "does", 
            "Angola", 
            "belong", 
            "to", 
            "and", 
            "what", 
            "is", 
            "its", 
            "population", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Population", 
            ",", 
            "Region", 
            "FROM", 
            "country", 
            "WHERE", 
            "Name", 
            "=", 
            "``", 
            "Angola", 
            "''"
        ], 
        "question": "What region does Angola belong to and what is its population?", 
        "schema_with_content": "city : id (4014, 54, 714), district (\"Hubei\", \"Harkova\", \"Qina\"), name (\"San Juan\", \"Guant\u00c3\u00a1namo\", \"Chimbote\"), population (161912, 521000, 254360), countrycode (\"WLF\", \"PHL\", \"SLV\") | sqlite_sequence : name (\"city\"), seq (4079) | country : surfacearea (359.0, 242900.0, 41526.0), gnpold (5729.0, 10285.0, 755.0), name (\"Nigeria\", \"Costa Rica\", \"Greece\"), capital (3499, 766, 2318), gnp (86503.0, 60.0, 903.0), localname (\"Zhongquo\", \"The Turks and Caicos Islands\", \"Nicaragua\"), indepyear (1912, 1499, 1821), code (\"TKM\", \"VAT\", \"COD\"), region (\"Northern Africa\", \"Southern Africa\", \"Australia and New Zealand\"), continent (\"North America\", \"South America\", \"South America\"), lifeexpectancy (55.0, 42.9, 48.0), code2 (\"TO\", \"BY\", \"CM\"), population (11385000, 9586000, 270000), headofstate (\"Juan Carlos I\", \"Francisco Guillermo Flores P\u00c3\u00a9rez\", \"Vladimir Voronin\"), governmentform (\"Islamic Republic\", \"Constitutional Monarchy, Federation\", \"Federation\") | country_region : code (\"CPV\", \"PAK\", \"FLK\"), region (\"Northern Africa\", \"Southern Africa\", \"Australia and New Zealand\") | countrylanguage : language (\"German\", \"Korean\", \"Iban\"), countrycode (\"CHN\", \"BLR\", \"DJI\"), percentage (34.8, 100.0, 8.5), isofficial (\"T\", \"F\")", 
        "orig_query": "select population, region from country where name = \"Angola\"", 
        "query1": "select population, region from country where name = \"Angola\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            9, 
                            false
                        ], 
                        null
                    ], 
                    "\"Angola\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "region"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , name , district , population , countrycode  | sqlite_sequence : seq , name  | country : lifeexpectancy , capital , localname , gnpold , governmentform , region , name , code , gnp , surfacearea , code2 , indepyear , continent , population , headofstate  | country_gnp : gnp , code  | countrylanguage : isofficial , countrycode , language , percentage ", 
        "query2": "select sum(t1.population), max(t2.gnp) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.continent = \"Asia\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "gnp", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "population", 
            "and", 
            "maximum", 
            "GNP", 
            "in", 
            "Asia", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "GNP", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''"
        ], 
        "question": "What is the total population and maximum GNP in Asia?", 
        "schema_with_content": "city : id (2991, 3476, 3865), name (\"Rajahmundry\", \"Suqian\", \"Kolpino\"), district (\"Fujian\", \"Pinar del R\u00c3\u00ado\", \"Jharkhand\"), population (172300, 108300, 510000), countrycode (\"VEN\", \"TGO\", \"NFK\") | sqlite_sequence : seq (4079), name (\"city\") | country : lifeexpectancy (45.6, 72.8, 69.9), capital (2729, 2814, 3493), localname (\"Xianggang/Hong Kong\", \"\u00c3\u0096sterreich\", \"Magyarorsz\u00c3\u00a1g\"), gnpold (2527.0, 96318.0, 373.0), governmentform (\"Administrated by the UN\", \"Republic\", \"Independent Church State\"), region (\"Southern Europe\", \"South America\", \"Western Europe\"), name (\"Ethiopia\", \"Grenada\", \"Antarctica\"), code (\"GUF\", \"POL\", \"ZMB\"), gnp (84982.0, 82710.0, 19008.0), surfacearea (30355.0, 236800.0, 1958201.0), code2 (\"BV\", \"KP\", \"KR\"), indepyear (1811, 1941, 800), continent (\"North America\", \"Antarctica\", \"Africa\"), population (1013662000, 180000, 119000), headofstate (\"Mswati III\", \"Beatrix\", \"Yahya Jammeh\") | country_gnp : gnp (84982.0, 82710.0, 19008.0), code (\"CYM\", \"VAT\", \"VNM\") | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"HUN\", \"AFG\", \"YEM\"), language (\"Dhivehi\", \"Comorian-Swahili\", \"Indian Languages\"), percentage (32.5, 1.1, 99.0)", 
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "gnp"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , district , countrycode , population , id  | sqlite_sequence : seq , name  | country : localname , gnpold , capital , code2 , region , lifeexpectancy , code , population , surfacearea , indepyear , name , governmentform , headofstate , continent , gnp  | country_population : code , population  | countrylanguage : language , isofficial , percentage , countrycode ", 
        "query2": "select sum(t2.population), max(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "gnp", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "population", 
            "and", 
            "maximum", 
            "GNP", 
            "in", 
            "Asia", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "GNP", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''"
        ], 
        "question": "What is the total population and maximum GNP in Asia?", 
        "schema_with_content": "city : name (\"Santander\", \"Myingyan\", \"Guigang\"), district (\"Minsk\", \"Paran\u00c3\u00a1\", \"Aleppo\"), countrycode (\"OMN\", \"SLB\", \"YEM\"), population (304952, 281979, 529121), id (2970, 3330, 794) | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"Afganistan/Afqanestan\", \"New Zealand/Aotearoa\", \"As-Sudan\"), gnpold (917719.0, 15519.0, 373.0), capital (939, 766, 915), code2 (\"TK\", \"LI\", \"SM\"), region (\"Eastern Asia\", \"Southern Africa\", \"Eastern Asia\"), lifeexpectancy (80.7, 71.6, 69.3), code (\"MRT\", \"BVT\", \"VEN\"), population (1305000, 45611000, 2024000), surfacearea (267668.0, 449964.0, 102173.0), indepyear (1929, 1945, 1917), name (\"United States Minor Outlying Islands\", \"Tanzania\", \"Yugoslavia\"), governmentform (\"Parlementary Monarchy\", \"Territory of Australia\", \"Nonmetropolitan Territory of France\"), headofstate (\"Francisco Guillermo Flores P\u00c3\u00a9rez\", \"Elisabeth II\", \"Yoweri Museveni\"), continent (\"Oceania\", \"Asia\", \"North America\"), gnp (256.0, 1687.0, 435.0) | country_population : code (\"IND\", \"ATA\", \"GLP\"), population (1305000, 45611000, 2024000) | countrylanguage : language (\"Luchazi\", \"Bemba\", \"Turkana\"), isofficial (\"T\", \"F\"), percentage (47.5, 23.2, 50.2), countrycode (\"ALB\", \"ETH\", \"DJI\")", 
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , id , population , name , countrycode  | sqlite_sequence : seq , name  | country : population , governmentform \", \"Monarchy \", \"Territorial Collectivity of France\", lifeexpectancy , code , surfacearea , code2 , headofstate , continent , capital , indepyear , localname , name , gnp , region , gnpold  | country_gnp : code , gnp  | countrylanguage : countrycode , language , percentage , isofficial ", 
        "query2": "select sum(t1.population), max(t2.gnp) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.continent = \"Asia\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "gnp", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "people", 
            "live", 
            "in", 
            "Asia", 
            ",", 
            "and", 
            "what", 
            "is", 
            "the", 
            "largest", 
            "GNP", 
            "among", 
            "them", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "GNP", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''"
        ], 
        "question": "How many people live in Asia, and what is the largest GNP among them?", 
        "schema_with_content": "city : district (\"Grad Zagreb\", \"West Azerbaidzan\", \"Kostroma\"), id (4056, 2586, 1190), population (935361, 950043, 365463), name (\"Leeds\", \"Matola\", \"Warren\"), countrycode (\"AUT\", \"ARE\", \"MDG\") | sqlite_sequence : seq (4079), name (\"city\") | country : population (24039000, 50, 4478500), governmentform (\"Constitutional Monarchy (Emirate)\", \"Monarchy (Sultanate)\", \"Territorial Collectivity of France\"), lifeexpectancy (69.1, 46.7, 64.1), code (\"GTM\", \"LCA\", \"ALB\"), surfacearea (199900.0, 912050.0, 12173.0), code2 (\"BO\", \"TN\", \"DM\"), headofstate (\"Salahuddin Abdul Aziz Shah Alhaj\", \"Bhumibol Adulyadej\", \"Kuniwo Nakamura\"), continent (\"South America\", \"Asia\", \"Africa\"), capital (2890, 2434, 2438), indepyear (1769, 1946, -660), localname (\"Argentina\", \"Brasil\", \"\u00c2\u00b4Uman\"), name (\"Denmark\", \"Hong Kong\", \"Austria\"), gnp (264478.0, 121914.0, 1119.0), region (\"South America\", \"Southern and Central Asia\", \"Central Africa\"), gnpold (1296830.0, 1400.0, 1084.0) | country_gnp : code (\"MEX\", \"KIR\", \"GEO\"), gnp (264478.0, 121914.0, 1119.0) | countrylanguage : countrycode (\"BIH\", \"GHA\", \"CYM\"), language (\"Ga-adangme\", \"Gisu\", \"Gurage\"), percentage (45.5, 8.5, 64.7), isofficial (\"T\", \"F\")", 
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "gnp"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : population , id , district , name , countrycode  | sqlite_sequence : seq , name  | country : capital , indepyear , governmentform , code , lifeexpectancy , gnpold , headofstate , continent , surfacearea , population , code2 , name , region , localname , gnp  | country_population : code , population  | countrylanguage : isofficial , countrycode , language , percentage ", 
        "query2": "select sum(t2.population), max(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "gnp", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "How", 
            "many", 
            "people", 
            "live", 
            "in", 
            "Asia", 
            ",", 
            "and", 
            "what", 
            "is", 
            "the", 
            "largest", 
            "GNP", 
            "among", 
            "them", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "max", 
            "(", 
            "GNP", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''"
        ], 
        "question": "How many people live in Asia, and what is the largest GNP among them?", 
        "schema_with_content": "city : population (5346, 370190, 237510), id (3261, 3546, 1218), district (\"Baskimaa\", \"Colima\", \"B\u00c3\u00a9char\"), name (\"Hailar\", \"Bansberia\", \"Magelang\"), countrycode (\"UZB\", \"PRK\", \"GLP\") | sqlite_sequence : seq (4079), name (\"city\") | country : capital (1109, 3169, 2447), indepyear (1905, 1912, 1956), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Islamic Republic\", \"Dependent Territory of the US\"), code (\"TCD\", \"KIR\", \"CHE\"), lifeexpectancy (76.8, 67.5, 67.5), gnpold (7984.0, 2287.0, 2383.0), headofstate (\"Nursultan Nazarbajev\", \"\u00c5\u00a0tipe Mesic\", \"Aleksander Kwasniewski\"), continent (\"Oceania\", \"Europe\", \"Europe\"), surfacearea (373.0, 36.0, 18274.0), population (61399000, 21607000, 2662000), code2 (\"SH\", \"VG\", \"PG\"), name (\"Malta\", \"Rwanda\", \"Falkland Islands\"), region (\"Baltic Countries\", \"Baltic Countries\", \"Western Africa\"), localname (\"Brasil\", \"Martinique\", \"Zambia\"), gnp (6398.0, 414972.0, 120724.0) | country_population : code (\"ABW\", \"AUT\", \"PSE\"), population (61399000, 21607000, 2662000) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"GUM\", \"LBY\", \"SHN\"), language (\"Malagasy\", \"Ukrainian\", \"Azerbaijani\"), percentage (95.7, 40.7, 11.8)", 
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : countrycode , id , district , population , name  | sqlite_sequence : name , seq  | country : indepyear , gnpold , localname , population , region , capital , code2 , headofstate , name , lifeexpectancy , gnp , code , governmentform \", surfacearea , continent  | country_gnp : code , gnp  | countrylanguage : percentage , countrycode , isofficial , language ", 
        "query2": "select avg(t2.gnp), sum(t1.population) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "gnp", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "country", 
            "where", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "GNP", 
            "and", 
            "total", 
            "population", 
            "in", 
            "all", 
            "nations", 
            "whose", 
            "government", 
            "is", 
            "US", 
            "territory", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "GNP", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "GovernmentForm", 
            "=", 
            "``", 
            "US", 
            "Territory", 
            "''"
        ], 
        "question": "What is the average GNP and total population in all nations whose government is US territory?", 
        "schema_with_content": "city : countrycode (\"SUR\", \"VAT\", \"MWI\"), id (3889, 273, 3616), district (\"Tirana\", \"Kocaeli\", \"Mangghystau\"), population (228985, 325000, 9981619), name (\"\u00c3\u009crgenc\", \"Christchurch\", \"Hartlepool\") | sqlite_sequence : name (\"city\"), seq (4079) | country : indepyear (1980, 1974, 1492), gnpold (10285.0, 97884.0, 105116.0), localname (\"United States Minor Outlying Islands\", \"Myanma Pye\", \"Panam\u00c3\u00a1\"), population (578000, 149000, 15000), region (\"British Islands\", \"Polynesia\", \"Western Africa\"), capital (587, 2914, 1786), code2 (\"PN\", \"KY\", \"TC\"), headofstate (\"Hans-Adam II\", \"Ange-F\u00c3\u00a9lix Patass\u00c3\u00a9\", \"George W. Bush\"), name (\"Eritrea\", \"Virgin Islands, U.S.\", \"Saint Pierre and Miquelon\"), lifeexpectancy (78.0, 68.6, 55.0), gnp (21929.0, 2425.0, 256254.0), code (\"TCA\", \"VCT\", \"MNG\"), governmentform (\"Republic\", \"Autonomous Area\", \"Monarchy (Emirate)\"), surfacearea (8547403.0, 131626.0, 28748.0), continent (\"Oceania\", \"Europe\", \"Africa\") | country_gnp : code (\"NZL\", \"LBN\", \"SUR\"), gnp (21929.0, 2425.0, 256254.0) | countrylanguage : percentage (8.9, 11.4, 14.1), countrycode (\"COL\", \"DZA\", \"MMR\"), isofficial (\"T\", \"F\"), language (\"Chibcha\", \"Creole French\", \"Luri\")", 
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"US Territory\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "gnp"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , population , district , name , countrycode  | sqlite_sequence : seq , name  | country : localname , surfacearea , region , lifeexpectancy , population , code2 , headofstate , gnp , governmentform , continent , capital , gnpold , code , name , indepyear  | country_population : population , code  | countrylanguage : countrycode , percentage , language , isofficial ", 
        "query2": "select avg(t1.gnp), sum(t2.population) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "gnp", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "country", 
            "where", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "average", 
            "GNP", 
            "and", 
            "total", 
            "population", 
            "in", 
            "all", 
            "nations", 
            "whose", 
            "government", 
            "is", 
            "US", 
            "territory", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "GNP", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "GovernmentForm", 
            "=", 
            "``", 
            "US", 
            "Territory", 
            "''"
        ], 
        "question": "What is the average GNP and total population in all nations whose government is US territory?", 
        "schema_with_content": "city : id (1167, 657, 3461), population (106409, 221400, 107004), district (\"Casablanca\", \"Gomel\", \"Xinxiang\"), name (\"Temuco\", \"Abakan\", \"Olmalik\"), countrycode (\"NPL\", \"YUG\", \"ARM\") | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"Chile\", \"Brasil\", \"Amerika Samoa\"), surfacearea (323877.0, 298.0, 438317.0), region (\"Melanesia\", \"Southern and Central Asia\", \"Eastern Asia\"), lifeexpectancy (76.4, 68.1, 71.6), population (22720000, 1726000, 4473000), code2 (\"NF\", \"KN\", \"SJ\"), headofstate (\"Carlo Azeglio Ciampi\", \"Hans-Adam II\", \"Mary McAleese\"), gnp (8287.0, 903.0, 37966.0), governmentform (\"Constitutional Monarchy\", \"US Territory\", \"Dependent Territory of the UK\"), continent (\"Africa\", \"Europe\", \"Asia\"), capital (179, 3483, 901), gnpold (227757.0, 3384.0, 4192638.0), code (\"HKG\", \"PRT\", \"COG\"), name (\"Spain\", \"Uruguay\", \"Croatia\"), indepyear (1143, 1992, 1981) | country_population : population (22720000, 1726000, 4473000), code (\"PRI\", \"HND\", \"JAM\") | countrylanguage : countrycode (\"GRL\", \"GLP\", \"MTQ\"), percentage (77.1, 13.8, 43.9), language (\"Luhya\", \"Haiti Creole\", \"Nsenga\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"US Territory\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , population , name , countrycode , district  | sqlite_sequence : name , seq  | country : indepyear , surfacearea , localname , headofstate , region , code , name , code2 , gnp , population , capital , continent , lifeexpectancy , gnpold , governmentform  | country_gnp : code , gnp  | countrylanguage : percentage , isofficial , countrycode , language ", 
        "query2": "select avg(t2.gnp), sum(t1.population) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "gnp", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "country", 
            "where", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "mean", 
            "GNP", 
            "and", 
            "total", 
            "population", 
            "of", 
            "nations", 
            "which", 
            "are", 
            "considered", 
            "US", 
            "territory", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "GNP", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "GovernmentForm", 
            "=", 
            "``", 
            "US", 
            "Territory", 
            "''"
        ], 
        "question": "Give the mean GNP and total population of nations which are considered US territory.", 
        "schema_with_content": "city : id (755, 535, 664), population (356993, 200824, 146439), name (\"Chimalhuac\u00c3\u00a1n\", \"Roxas\", \"Iida\"), countrycode (\"BIH\", \"MLT\", \"SYC\"), district (\"Lam Dong\", \"Nairobi\", \"Arad\") | sqlite_sequence : name (\"city\"), seq (4079) | country : indepyear (1776, 1957, 1992), surfacearea (18274.0, 505992.0, 120538.0), localname (\"Lietuva\", \"Aruba\", \"Tonga\"), headofstate (\"Francisco Guillermo Flores P\u00c3\u00a9rez\", \"Mohammad Omar\", \"Petar Stojanov\"), region (\"Nordic Countries\", \"Middle East\", \"Central America\"), code (\"BLZ\", \"GTM\", \"HMD\"), name (\"Central African Republic\", \"Netherlands Antilles\", \"Marshall Islands\"), code2 (\"AL\", \"PT\", \"ML\"), gnp (182.0, 13714.0, 20026.0), population (56000, 599000, 2583000), capital (2438, 3492, 1792), continent (\"Oceania\", \"Asia\", \"South America\"), lifeexpectancy (70.5, 75.2, 69.7), gnpold (573.0, 2000.0, 64926.0), governmentform (\"Dependent Territory of Norway\", \"Socialistic State\", \"Part of Denmark\") | country_gnp : code (\"BRA\", \"HMD\", \"TUR\"), gnp (182.0, 13714.0, 20026.0) | countrylanguage : percentage (43.7, 87.9, 88.7), isofficial (\"T\", \"F\"), countrycode (\"SEN\", \"SMR\", \"ALB\"), language (\"Kuy\", \"Chilluk\", \"Lomwe\")", 
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"US Territory\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "gnp"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , population , countrycode , id , name  | sqlite_sequence : seq , name  | country : name , capital , headofstate , localname , region , lifeexpectancy , indepyear , code2 , governmentform , continent , code , gnpold , population , surfacearea , gnp  | country_population : code , population  | countrylanguage : isofficial , countrycode , language , percentage ", 
        "query2": "select avg(t1.gnp), sum(t2.population) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\"", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "avg", 
            "(", 
            "gnp", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "from", 
            "country", 
            "where", 
            "governmentform", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "mean", 
            "GNP", 
            "and", 
            "total", 
            "population", 
            "of", 
            "nations", 
            "which", 
            "are", 
            "considered", 
            "US", 
            "territory", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "avg", 
            "(", 
            "GNP", 
            ")", 
            ",", 
            "sum", 
            "(", 
            "population", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "GovernmentForm", 
            "=", 
            "``", 
            "US", 
            "Territory", 
            "''"
        ], 
        "question": "Give the mean GNP and total population of nations which are considered US territory.", 
        "schema_with_content": "city : district (\"Kars\", \"Plovdiv\", \"Jiangsu\"), population (1157507, 658630, 113336), countrycode (\"TZA\", \"LSO\", \"HUN\"), id (3323, 1066, 2938), name (\"Coacalco de Berrioz\u00c3\u00a1bal\", \"Huainan\", \"Piedras Negras\") | sqlite_sequence : seq (4079), name (\"city\") | country : name (\"South Korea\", \"Tonga\", \"New Caledonia\"), capital (3161, 1449, 915), headofstate (\"Qabus ibn Sa\u00c2\u00b4id\", \"Islam Karimov\", \"Haji Hassan al-Bolkiah\"), localname (\"Rom\u00c3\u00a2nia\", \"Angola\", \"Mo\u00c3\u00a7ambique\"), region (\"Central America\", \"Southern and Central Asia\", \"Australia and New Zealand\"), lifeexpectancy (78.8, 42.9, 77.1), indepyear (-660, 1963, 1947), code2 (\"YU\", \"TH\", \"PT\"), governmentform (\"Emirate Federation\", \"Commonwealth of the US\", \"Socialistic State\"), continent (\"Europe\", \"South America\", \"Asia\"), code (\"SYR\", \"HKG\", \"AFG\"), gnpold (6180.0, 3338.0, 8920.0), population (5074000, 235000, 9586000), surfacearea (1759540.0, 388.0, 824292.0), gnp (372.0, 16904.0, 334.0) | country_population : code (\"BGR\", \"NFK\", \"TZA\"), population (5074000, 235000, 9586000) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"QAT\", \"ISR\", \"BTN\"), language (\"Paiwan\", \"Somba\", \"Papuan Languages\"), percentage (14.6, 13.5, 3.8)", 
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            19, 
                            false
                        ], 
                        null
                    ], 
                    "\"US Territory\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                16, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : countrycode , district , name , id , population  | sqlite_sequence : seq , name  | country : gnpold , indepyear , code2 , capital , gnp , localname , headofstate , continent , surfacearea , region , name , lifeexpectancy , population , governmentform , code  | country_population : population , code  | countrylanguage : language , percentage , countrycode , isofficial ", 
        "query2": "select t1.name, t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "name", 
            ",", 
            "population", 
            "and", 
            "expected", 
            "life", 
            "length", 
            "of", 
            "asian", 
            "country", 
            "with", 
            "the", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the name, population and expected life length of asian country with the largest area?", 
        "schema_with_content": "city : countrycode (\"VNM\", \"SYC\", \"CZE\"), district (\"Calabria\", \"Bac Thai\", \"Kadiogo\"), name (\"Bataisk\", \"Halle/Saale\", \"Hidalgo del Parral\"), id (3989, 2144, 4002), population (105287, 241107, 245497) | sqlite_sequence : seq (4079), name (\"city\") | country : gnpold (153907.0, 7988.0, 6884.0), indepyear (1977, 1828, 1905), code2 (\"AM\", \"TM\", \"KY\"), capital (3067, 901, 4074), gnp (5328.0, 553233.0, 982268.0), localname (\"Pakistan\", \"Pilipinas\", \"Timor Timur\"), headofstate (\"Islam Karimov\", \"Jos\u00c3\u00a9 Alexandre Gusm\u00c3\u00a3o\", \"Blaise Compaor\u00c3\u00a9\"), continent (\"North America\", \"Oceania\", \"Asia\"), surfacearea (12173.0, 110861.0, 22696.0), region (\"Antarctica\", \"Central Africa\", \"Eastern Asia\"), name (\"Kiribati\", \"Burkina Faso\", \"Vanuatu\"), lifeexpectancy (78.7, 66.4, 60.6), population (6695000, 147000, 43000), governmentform (\"Dependent Territory of Norway\", \"US Territory\", \"Republic\"), code (\"CXR\", \"MNG\", \"TUV\") | country_population : population (6695000, 147000, 43000), code (\"SWZ\", \"SOM\", \"ZWE\") | countrylanguage : language (\"Bubi\", \"Meru\", \"Marshallese\"), percentage (45.7, 96.6, 89.0), countrycode (\"MAR\", \"COM\", \"KEN\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , district , countrycode , population , name  | sqlite_sequence : name , seq  | country : capital , gnpold , region , name , continent , population , localname , indepyear , headofstate , code2 , lifeexpectancy , surfacearea , governmentform , code , gnp  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : countrycode , isofficial , language , percentage ", 
        "query2": "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "name", 
            ",", 
            "population", 
            "and", 
            "expected", 
            "life", 
            "length", 
            "of", 
            "asian", 
            "country", 
            "with", 
            "the", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the name, population and expected life length of asian country with the largest area?", 
        "schema_with_content": "city : id (1282, 226, 1178), district (\"Santiago de Cuba\", \"Bretagne\", \"La Guajira\"), countrycode (\"MDV\", \"BRB\", \"TTO\"), population (326011, 105853, 584342), name (\"Bijapur\", \"Tampere\", \"Southend-on-Sea\") | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2460, 3499, 3066), gnpold (243948.0, 542.0, 18862.0), region (\"Central Africa\", \"Southern Africa\", \"Northern Africa\"), name (\"India\", \"Yemen\", \"Bosnia and Herzegovina\"), continent (\"Antarctica\", \"Asia\", \"Asia\"), population (67702000, 3337000, 170115000), localname (\"Bermuda\", \"Niger\", \"Pakistan\"), indepyear (1066, 1983, 1143), headofstate (\"Mohammad Omar\", \"Arnoldo Alem\u00c3\u00a1n Lacayo\", \"Jiang Zemin\"), code2 (\"UA\", \"BS\", \"SH\"), lifeexpectancy (73.1, 64.0, 72.4), surfacearea (199900.0, 527968.0, 21056.0), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Monarchy\", \"Constitutional Monarchy, Federation\"), code (\"FLK\", \"DEU\", \"MAC\"), gnp (1941.0, 10162.0, 828.0) | country_lifeexpectancy : code (\"LKA\", \"FRA\", \"ZWE\"), lifeexpectancy (73.1, 64.0, 72.4) | countrylanguage : countrycode (\"SVN\", \"SMR\", \"AUT\"), isofficial (\"T\", \"F\"), language (\"Osseetti\", \"Venda\", \"Afrikaans\"), percentage (50.8, 16.5, 50.8)", 
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "lifeexpectancy"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , name , population , district , countrycode  | sqlite_sequence : name , seq  | country : gnpold , headofstate , code , lifeexpectancy , surfacearea , governmentform \", \"Monarchy\", localname , capital , region , indepyear , population , gnp , continent , name , code2  | country_name : code , name  | countrylanguage : countrycode , language , isofficial , percentage ", 
        "query2": "select t2.name, t1.population, t1.lifeexpectancy from country as t1 join country_name as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "name", 
            ",", 
            "population", 
            "and", 
            "expected", 
            "life", 
            "length", 
            "of", 
            "asian", 
            "country", 
            "with", 
            "the", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Find the name, population and expected life length of asian country with the largest area?", 
        "schema_with_content": "city : id (330, 1716, 1780), name (\"Panihati\", \"Ciudad de Guatemala\", \"Ituzaing\u00c3\u00b3\"), population (305025, 8389200, 758141), district (\"Kostroma\", \"Tjumen\", \"Lovec\"), countrycode (\"IRL\", \"CPV\", \"ITA\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnpold (45914.0, 3338.0, 323310.0), headofstate (\"Hans-Adam II\", \"Emomali Rahmonov\", \"Qabus ibn Sa\u00c2\u00b4id\"), code (\"GUF\", \"YUG\", \"TUV\"), lifeexpectancy (64.1, 50.1, 49.8), surfacearea (449964.0, 442.0, 118484.0), governmentform (\"Dependent Territory of the US\", \"Constitutional Monarchy (Emirate)\", \"Monarchy\"), localname (\"Uganda\", \"Slovenija\", \"Guyane fran\u00c3\u00a7aise\"), capital (584, 901, 3047), region (\"Eastern Asia\", \"Central America\", \"Middle East\"), indepyear (1955, 1994, 1844), population (3615000, 99000, 4807000), gnp (212.0, 285.0, 1687.0), continent (\"Asia\", \"Africa\", \"Asia\"), name (\"Anguilla\", \"New Caledonia\", \"Belgium\"), code2 (\"TJ\", \"PH\", \"ES\") | country_name : code (\"ISR\", \"VIR\", \"SDN\"), name (\"Anguilla\", \"New Caledonia\", \"Belgium\") | countrylanguage : countrycode (\"ITA\", \"ERI\", \"SVK\"), language (\"Malinke\", \"Maka\", \"Amhara\"), isofficial (\"T\", \"F\"), percentage (91.3, 6.9, 16.5)", 
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , countrycode , district , population , name  | sqlite_sequence : name , seq  | country : capital , gnp , region , surfacearea , name , governmentform , population , code , gnpold , code2 , continent , headofstate , lifeexpectancy , localname , indepyear  | country_population : population , code  | countrylanguage : isofficial , countrycode , percentage , language ", 
        "query2": "select t1.name, t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            ",", 
            "population", 
            ",", 
            "and", 
            "life", 
            "expectancy", 
            "of", 
            "the", 
            "largest", 
            "Asian", 
            "country", 
            "by", 
            "land", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?", 
        "schema_with_content": "city : id (3640, 1754, 2408), countrycode (\"BOL\", \"MSR\", \"IDN\"), district (\"Qu\u00c3\u00a9bec\", \"Inner Harbour\", \"Sulawesi Utara\"), population (1070000, 1095874, 101295), name (\"Vishakhapatnam\", \"Arequipa\", \"Kumi\") | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (3320, 2885, 1889), gnp (1043.0, 598862.0, 34100.0), region (\"Western Africa\", \"Western Europe\", \"Central America\"), surfacearea (1399.0, 464.0, 49.0), name (\"Christmas Island\", \"Belgium\", \"Maldives\"), governmentform (\"Special Administrative Region of China\", \"Dependent Territory of Norway\", \"Independent Church State\"), population (25000, 14786000, 37032000), code (\"TZA\", \"TCD\", \"BVT\"), gnpold (171028.0, 2527.0, 3384.0), code2 (\"AE\", \"LK\", \"UG\"), continent (\"Europe\", \"Africa\", \"Asia\"), headofstate (\"Carlo Azeglio Ciampi\", \"Carlos Roberto Flores Facuss\u00c3\u00a9\", \"Omar Hassan Ahmad al-Bashir\"), lifeexpectancy (70.5, 76.2, 62.2), localname (\"Mo\u00c3\u00a7ambique\", \"Niue\", \"As-Sahrawiya\"), indepyear (1971, 1962, 1960) | country_population : population (25000, 14786000, 37032000), code (\"NIC\", \"PLW\", \"CXR\") | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"MTQ\", \"CHL\", \"TJK\"), percentage (77.1, 72.1, 7.7), language (\"Irish\", \"Papiamento\", \"Comorian-French\")", 
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , countrycode , population , name , id  | sqlite_sequence : seq , name  | country : gnpold , headofstate , continent , code , lifeexpectancy , surfacearea , capital , governmentform , code2 , region , localname , name , gnp , population , indepyear  | country_lifeexpectancy : lifeexpectancy , code  | countrylanguage : isofficial , percentage , language , countrycode ", 
        "query2": "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            ",", 
            "population", 
            ",", 
            "and", 
            "life", 
            "expectancy", 
            "of", 
            "the", 
            "largest", 
            "Asian", 
            "country", 
            "by", 
            "land", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?", 
        "schema_with_content": "city : district (\"Quintana Roo\", \"Saint Helena\", \"Dhaka\"), countrycode (\"ESP\", \"FIN\", \"SUR\"), population (136216, 105910, 264081), name (\"Akron\", \"Bat Yam\", \"Nizni Tagil\"), id (1, 915, 1263) | sqlite_sequence : seq (4079), name (\"city\") | country : gnpold (1186.0, 1161.0, 58549.0), headofstate (\"Fernando de la R\u00c3\u00baa\", \"\u00c5\u00a0tipe Mesic\", \"Norodom Sihanouk\"), continent (\"Europe\", \"Antarctica\", \"North America\"), code (\"GNB\", \"IRQ\", \"BRB\"), lifeexpectancy (71.5, 64.5, 56.5), surfacearea (264.0, 43094.0, 260.0), capital (2805, 2928, 3263), governmentform (\"Islamic Republic\", \"Federation\", \"US Territory\"), code2 (\"GH\", \"AM\", \"TC\"), region (\"Western Africa\", \"Micronesia/Caribbean\", \"Australia and New Zealand\"), localname (\"Martinique\", \"Sakartvelo\", \"The Cook Islands\"), name (\"Tonga\", \"Estonia\", \"Syria\"), gnp (141.0, 1206.0, 16321.0), population (10236000, 278357000, 43000), indepyear (1978, 1066, 1816) | country_lifeexpectancy : lifeexpectancy (71.5, 64.5, 56.5), code (\"BWA\", \"MRT\", \"PYF\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (74.1, 21.4, 77.2), language (\"Boa\", \"Samoan\", \"Slovak\"), countrycode (\"COM\", \"FSM\", \"LUX\")", 
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "lifeexpectancy"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , district , population , id , countrycode  | sqlite_sequence : name , seq  | country : code , code2 , name , population , region , capital , surfacearea , indepyear , localname , governmentform , gnpold , headofstate , continent , lifeexpectancy , gnp  | country_name : code , name  | countrylanguage : percentage , countrycode , language , isofficial ", 
        "query2": "select t2.name, t1.population, t1.lifeexpectancy from country as t1 join country_name as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "lifeexpectancy", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            ",", 
            "population", 
            ",", 
            "and", 
            "life", 
            "expectancy", 
            "of", 
            "the", 
            "largest", 
            "Asian", 
            "country", 
            "by", 
            "land", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "Population", 
            ",", 
            "LifeExpectancy", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "Asia", 
            "''", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?", 
        "schema_with_content": "city : name (\"Garut\", \"Isparta\", \"Rostov-na-Donu\"), district (\"Aceh\", \"Udon Thani\", \"Huambo\"), population (202455, 111009, 709730), id (1502, 3441, 2927), countrycode (\"AGO\", \"NOR\", \"MTQ\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"ARM\", \"GRD\", \"RUS\"), code2 (\"PN\", \"YU\", \"BE\"), name (\"Yemen\", \"Japan\", \"Syria\"), population (17000, 8190900, 68470000), region (\"Central Africa\", \"Southern Africa\", \"Eastern Europe\"), capital (3212, 2413, 919), surfacearea (163610.0, 347.0, 702.0), indepyear (-1000, 1901, 1976), localname (\"Congo\", \"Tunis/Tunisie\", \"Argentina\"), governmentform (\"Dependent Territory of Norway\", \"Overseas Department of France\", \"Co-administrated\"), gnpold (58549.0, 2453.0, 171028.0), headofstate (\"Ange-F\u00c3\u00a9lix Patass\u00c3\u00a9\", \"\u00c3\u0093lafur Ragnar Gr\u00c3\u00admsson\", \"Jorge Batlle Ib\u00c3\u00a1\u00c3\u00b1ez\"), continent (\"Antarctica\", \"North America\", \"Africa\"), lifeexpectancy (62.9, 78.7, 69.2), gnp (1119.0, 4401.0, 3459.0) | country_name : code (\"DMA\", \"DEU\", \"GRC\"), name (\"Yemen\", \"Japan\", \"Syria\") | countrylanguage : percentage (1.5, 69.9, 21.7), countrycode (\"BLZ\", \"ERI\", \"CZE\"), language (\"Dagara\", \"Balochi\", \"Yap\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"Asia\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , countrycode , name , population , district  | sqlite_sequence : seq , name  | country : surfacearea , code2 , capital , headofstate , lifeexpectancy , gnp , indepyear , continent , code , governmentform , region , population , gnpold , name , localname  | country_surfacearea : surfacearea , code  | countrylanguage : language , percentage , countrycode , isofficial ", 
        "query2": "select t1.name, t2.surfacearea, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t1.population limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            ",", 
            "indepyear", 
            "from", 
            "country", 
            "order", 
            "by", 
            "population", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            ",", 
            "independence", 
            "year", 
            ",", 
            "and", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "country", 
            "with", 
            "the", 
            "smallest", 
            "population", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            ",", 
            "IndepYear", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "Population", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the name, independence year, and surface area of the country with the smallest population?", 
        "schema_with_content": "city : id (1989, 192, 1637), countrycode (\"RWA\", \"SEN\", \"AIA\"), name (\"Liu\u00c2\u00b4an\", \"Moratuwa\", \"Numazu\"), population (264081, 101309, 127350), district (\"Jharkhand\", \"Grad Sofija\", \"Tokat\") | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (260.0, 102173.0, 242900.0), code2 (\"PL\", \"BV\", \"QA\"), capital (456, 2738, 3248), headofstate (\"Carlos Roberto Flores Facuss\u00c3\u00a9\", \"Josefa Iloilo\", \"Kim Dae-jung\"), lifeexpectancy (75.4, 78.8, 54.7), gnp (10226.0, 818.0, 97.0), indepyear (1901, 1066, 1838), continent (\"Africa\", \"Antarctica\", \"South America\"), code (\"DOM\", \"BVT\", \"CYM\"), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Co-administrated\", \"Emirate Federation\"), region (\"South America\", \"Western Africa\", \"Southern Africa\"), population (428000, 6276000, 11385000), gnpold (105116.0, 993.0, 206025.0), name (\"Heard Island and McDonald Islands\", \"China\", \"Norway\"), localname (\"Italia\", \"Tunis/Tunisie\", \"Santa Sede/Citt\u00c3\u00a0 del Vaticano\") | country_surfacearea : surfacearea (260.0, 102173.0, 242900.0), code (\"BIH\", \"AUS\", \"NZL\") | countrylanguage : language (\"Ewe\", \"Pitcairnese\", \"Tuvalu\"), percentage (8.2, 0.9, 93.5), countrycode (\"GUM\", \"MOZ\", \"ZWE\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1", 
        "query1": "select name, surfacearea, indepyear from country order by population limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "surfacearea"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , countrycode , population , district , id  | sqlite_sequence : seq , name  | country : indepyear , headofstate , capital , localname , continent , name , code2 , population , gnp , region , lifeexpectancy , code , governmentform , surfacearea , gnpold  | country_indepyear : code , indepyear  | countrylanguage : countrycode , percentage , language , isofficial ", 
        "query2": "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            ",", 
            "indepyear", 
            "from", 
            "country", 
            "order", 
            "by", 
            "population", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            ",", 
            "independence", 
            "year", 
            ",", 
            "and", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "country", 
            "with", 
            "the", 
            "smallest", 
            "population", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            ",", 
            "IndepYear", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "Population", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the name, independence year, and surface area of the country with the smallest population?", 
        "schema_with_content": "city : name (\"Divin\u00c3\u00b3polis\", \"Mandaluyong\", \"Brest\"), countrycode (\"PCN\", \"GTM\", \"DNK\"), population (514008, 124014, 1217818), district (\"Herson\", \"Valpara\u00c3\u00adso\", \"Atyrau\"), id (2705, 771, 2317) | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1861, 1947, 1983), headofstate (\"Denis Sassou-Nguesso\", \"Jorge Samp\u00c3\u00a3io\", \"Fidel Castro Ruz\"), capital (3539, 594, 2460), localname (\"S\u00c3\u00a3o Tom\u00c3\u00a9 e Pr\u00c3\u00adncipe\", \"Polyn\u00c3\u00a9sie fran\u00c3\u00a7aise\", \"Burundi/Uburundi\"), continent (\"North America\", \"Asia\", \"North America\"), name (\"Zimbabwe\", \"East Timor\", \"Martinique\"), code2 (\"PY\", \"VA\", \"SE\"), population (45611000, 3401200, 4629000), gnp (166448.0, 75921.0, 116729.0), region (\"Polynesia\", \"Middle East\", \"Central America\"), lifeexpectancy (76.9, 76.2, 77.1), code (\"TJK\", \"MLI\", \"TMP\"), governmentform (\"Nonmetropolitan Territory of France\", \"Republic\", \"Socialistic State\"), surfacearea (61.0, 283561.0, 1104300.0), gnpold (2201.0, 173610.0, 2141.0) | country_indepyear : code (\"FLK\", \"BMU\", \"CIV\"), indepyear (1861, 1947, 1983) | countrylanguage : countrycode (\"AIA\", \"MYT\", \"SGP\"), percentage (16.1, 78.8, 3.4), language (\"Busansi\", \"Rwanda\", \"Batakki\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1", 
        "query1": "select name, surfacearea, indepyear from country order by population limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "indepyear"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , countrycode , population , id , district  | sqlite_sequence : seq , name  | country : code2 , gnpold , headofstate , governmentform , lifeexpectancy , population , name , localname , capital , region , surfacearea , continent , gnp , indepyear , code  | country_name : name , code  | countrylanguage : language , countrycode , percentage , isofficial ", 
        "query2": "select t2.name, t1.surfacearea, t1.indepyear from country as t1 join country_name as t2 on t1.code = t2.code order by t1.population limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            ",", 
            "indepyear", 
            "from", 
            "country", 
            "order", 
            "by", 
            "population", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "name", 
            ",", 
            "independence", 
            "year", 
            ",", 
            "and", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "country", 
            "with", 
            "the", 
            "smallest", 
            "population", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            ",", 
            "IndepYear", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "Population", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the name, independence year, and surface area of the country with the smallest population?", 
        "schema_with_content": "city : name (\"Nantou\", \"Nadiad\", \"Linyi\"), countrycode (\"BTN\", \"ISL\", \"FJI\"), population (137600, 103969, 90674), id (2964, 2207, 2324), district (\"Doukkala-Abda\", \"Kafr al-Shaykh\", \"Extremadura\") | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"CO\", \"ST\", \"RO\"), gnpold (206025.0, 2023.0, 23383.0), headofstate (\"Omar Bongo\", \"Beatrix\", \"Carl XVI Gustaf\"), governmentform (\"Socialistic State\", \"Constitutional Monarchy\", \"Republic\"), lifeexpectancy (68.1, 77.7, 45.9), population (885000, 6276000, 428000), name (\"Turkmenistan\", \"Lithuania\", \"Switzerland\"), localname (\"Brunei Darussalam\", \"K\u00c3\u00bdpros/Kibris\", \"El Salvador\"), capital (1864, 919, 929), region (\"Southeast Asia\", \"Antarctica\", \"Micronesia/Caribbean\"), surfacearea (49012.0, 1246700.0, 43094.0), continent (\"South America\", \"Asia\", \"Asia\"), gnp (8255.0, 1378330.0, 9333.0), indepyear (1976, 1825, -1000), code (\"BGR\", \"ISL\", \"GLP\") | country_name : name (\"Turkmenistan\", \"Lithuania\", \"Switzerland\"), code (\"LIE\", \"GUM\", \"IRL\") | countrylanguage : language (\"Teso\", \"Nahua\", \"Carolinian\"), countrycode (\"PSE\", \"CIV\", \"PRI\"), percentage (17.1, 38.6, 39.4), isofficial (\"T\", \"F\")", 
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1", 
        "query1": "select name, surfacearea, indepyear from country order by population limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , countrycode , district , population , id  | sqlite_sequence : seq , name  | country : lifeexpectancy , region , gnpold , indepyear , headofstate , population , capital , surfacearea , code2 , name , governmentform , continent , gnp , localname , code  | country_surfacearea : code , surfacearea  | countrylanguage : isofficial , countrycode , language , percentage ", 
        "query2": "select t1.name, t2.surfacearea, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t1.population limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            ",", 
            "indepyear", 
            "from", 
            "country", 
            "order", 
            "by", 
            "population", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "name", 
            ",", 
            "year", 
            "of", 
            "independence", 
            ",", 
            "and", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "country", 
            "that", 
            "has", 
            "the", 
            "lowest", 
            "population", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            ",", 
            "IndepYear", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "Population", 
            "LIMIT", 
            "1"
        ], 
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", 
        "schema_with_content": "city : name (\"Birkirkara\", \"Macon\", \"Ara\u00c2\u00b4ar\"), countrycode (\"KAZ\", \"NIC\", \"COL\"), district (\"Kerala\", \"KwaZulu-Natal\", \"Paran\u00c3\u00a1\"), population (2812000, 80700, 102716), id (1501, 1644, 226) | sqlite_sequence : seq (4079), name (\"city\") | country : lifeexpectancy (63.1, 66.0, 74.4), region (\"Central Africa\", \"Micronesia/Caribbean\", \"Central Africa\"), gnpold (19769.0, 2559.0, 97884.0), indepyear (1970, 1966, 1066), headofstate (\"Bashar al-Assad\", \"Ismail Omar Guelleh\", \"Maaouiya Ould Sid\u00c2\u00b4Ahmad Taya\"), population (20212000, 600, 1439200), capital (129, 3336, 2728), surfacearea (112088.0, 1399.0, 446550.0), code2 (\"GR\", \"GM\", \"MY\"), name (\"Namibia\", \"Grenada\", \"Samoa\"), governmentform (\"Federation\", \"Autonomous Area\", \"Federal Republic\"), continent (\"Asia\", \"Antarctica\", \"South America\"), gnp (6.0, 44806.0, 6398.0), localname (\"Qatar\", \"R\u00c3\u00a9publique D\u00c3\u00a9mocratique du Congo\", \"Puerto Rico\"), code (\"YEM\", \"HTI\", \"THA\") | country_surfacearea : code (\"HRV\", \"ATF\", \"BWA\"), surfacearea (112088.0, 1399.0, 446550.0) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"LSO\", \"HND\", \"GUY\"), language (\"Cakchiquel\", \"Marshallese\", \"Rakhine\"), percentage (52.6, 19.0, 17.7)", 
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1", 
        "query1": "select name, surfacearea, indepyear from country order by population limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "surfacearea"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , district , population , countrycode , id  | sqlite_sequence : seq , name  | country : gnp , continent , governmentform , localname , code , gnpold , region , indepyear , population , capital , lifeexpectancy , surfacearea , name , headofstate , code2  | country_indepyear : code , indepyear  | countrylanguage : language , isofficial , percentage , countrycode ", 
        "query2": "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            ",", 
            "indepyear", 
            "from", 
            "country", 
            "order", 
            "by", 
            "population", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "name", 
            ",", 
            "year", 
            "of", 
            "independence", 
            ",", 
            "and", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "country", 
            "that", 
            "has", 
            "the", 
            "lowest", 
            "population", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            ",", 
            "IndepYear", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "Population", 
            "LIMIT", 
            "1"
        ], 
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", 
        "schema_with_content": "city : name (\"Tangshan\", \"Salvador\", \"Netanya\"), district (\"Valpara\u00c3\u00adso\", \"Zytomyr\", \"Zufar\"), population (104200, 440052, 517083), countrycode (\"GIB\", \"ABW\", \"SMR\"), id (3836, 3892, 2641) | sqlite_sequence : seq (4079), name (\"city\") | country : gnp (818.0, 64140.0, 264478.0), continent (\"Oceania\", \"Antarctica\", \"Europe\"), governmentform (\"Socialistic Republic\", \"Part of Denmark\", \"Socialistic State\"), localname (\"United Kingdom\", \"Portugal\", \"Saint Lucia\"), code (\"GUF\", \"TTO\", \"CUB\"), gnpold (542.0, 173610.0, 96318.0), region (\"South America\", \"Eastern Europe\", \"Caribbean\"), indepyear (1992, 1923, 1905), population (11669000, 32300, 24039000), capital (2318, 1109, 3503), lifeexpectancy (65.5, 64.5, 40.4), surfacearea (1075.0, 41526.0, 118484.0), name (\"Cameroon\", \"Japan\", \"Gibraltar\"), headofstate (\"Gyanendra Bir Bikram\", \"Aljaksandr Luka\u00c5\u00a1enka\", \"Daniel arap Moi\"), code2 (\"SC\", \"WS\", \"EH\") | country_indepyear : code (\"REU\", \"SGS\", \"MSR\"), indepyear (1992, 1923, 1905) | countrylanguage : language (\"Khmer\", \"Fur\", \"Bilin\"), isofficial (\"T\", \"F\"), percentage (95.9, 32.0, 2.6), countrycode (\"TTO\", \"RUS\", \"PAN\")", 
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1", 
        "query1": "select name, surfacearea, indepyear from country order by population limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "indepyear"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , district , countrycode , population , id  | sqlite_sequence : name , seq  | country : gnp , code , localname , population , continent , headofstate , governmentform , name , gnpold , lifeexpectancy , surfacearea , region , indepyear , capital , code2  | country_name : name , code  | countrylanguage : isofficial , percentage , language , countrycode ", 
        "query2": "select t2.name, t1.surfacearea, t1.indepyear from country as t1 join country_name as t2 on t1.code = t2.code order by t1.population limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            ",", 
            "indepyear", 
            "from", 
            "country", 
            "order", 
            "by", 
            "population", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "name", 
            ",", 
            "year", 
            "of", 
            "independence", 
            ",", 
            "and", 
            "surface", 
            "area", 
            "of", 
            "the", 
            "country", 
            "that", 
            "has", 
            "the", 
            "lowest", 
            "population", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            ",", 
            "IndepYear", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "Population", 
            "LIMIT", 
            "1"
        ], 
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", 
        "schema_with_content": "city : name (\"Chifeng\", \"Ciputat\", \"Novomoskovsk\"), district (\"South Kivu\", \"Pingtung\", \"La Habana\"), countrycode (\"ISR\", \"REU\", \"GAB\"), population (187035, 577969, 199184), id (169, 1678, 1238) | sqlite_sequence : name (\"city\"), seq (4079) | country : gnp (195746.0, 6871.0, 1579.0), code (\"SLB\", \"HND\", \"FIN\"), localname (\"Svalbard og Jan Mayen\", \"Angola\", \"Ghana\"), population (3520000, 21607000, 5496000), continent (\"North America\", \"South America\", \"Asia\"), headofstate (\"Abdelaziz Bouteflika\", \"Abdullah II\", \"Milan Kucan\"), governmentform (\"Monarchy\", \"Constitutional Monarchy\", \"Emirate Federation\"), name (\"R\u00c3\u00a9union\", \"Mayotte\", \"Colombia\"), gnpold (325.0, 169264.0, 15519.0), lifeexpectancy (42.9, 64.5, 68.7), surfacearea (446550.0, 676578.0, 103000.0), region (\"Melanesia\", \"Australia and New Zealand\", \"Northern Africa\"), indepyear (1932, 1350, 1816), capital (2696, 129, 3483), code2 (\"BH\", \"GB\", \"IQ\") | country_name : name (\"R\u00c3\u00a9union\", \"Mayotte\", \"Colombia\"), code (\"BHR\", \"BWA\", \"SMR\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (97.9, 16.2, 99.6), language (\"Nama\", \"Futuna\", \"Danish\"), countrycode (\"EGY\", \"ABW\", \"HKG\")", 
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1", 
        "query1": "select name, surfacearea, indepyear from country order by population limit 1", 
        "sql": {
            "orderBy": [
                "asc", 
                [
                    [
                        0, 
                        [
                            0, 
                            14, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                13, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : population , name , countrycode , district , id  | sqlite_sequence : name , seq  | country : continent , localname , name , indepyear , gnpold , code2 , capital , lifeexpectancy , governmentform , surfacearea , region , gnp , headofstate , population , code  | country_headofstate : code , headofstate  | countrylanguage : isofficial , language , countrycode , percentage ", 
        "query2": "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "headofstate", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "population", 
            ",", 
            "name", 
            "and", 
            "leader", 
            "of", 
            "the", 
            "country", 
            "with", 
            "the", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "population", 
            ",", 
            "HeadOfState", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the population, name and leader of the country with the largest area?", 
        "schema_with_content": "city : population (390058, 303346, 326011), name (\"Zhuzhou\", \"Shulin\", \"Gingoog\"), countrycode (\"SOM\", \"BGD\", \"SJM\"), district (\"Guant\u00c3\u00a1namo\", \"Frederiksberg\", \"Alger\"), id (3892, 3862, 977) | sqlite_sequence : name (\"city\"), seq (4079) | country : continent (\"Europe\", \"Africa\", \"Asia\"), localname (\"Myanma Pye\", \"Aruba\", \"M\u00c3\u00a9xico\"), name (\"Suriname\", \"Uruguay\", \"Virgin Islands, U.S.\"), indepyear (1980, 1499, 1941), gnpold (4697.0, 263451.0, 781.0), code2 (\"GY\", \"BG\", \"CN\"), capital (3172, 3017, 2890), lifeexpectancy (78.3, 57.8, 75.1), governmentform (\"Dependent Territory of the US\", \"Emirate Federation\", \"Islamic Republic\"), surfacearea (181035.0, 694.0, 7741220.0), region (\"Southern Africa\", \"Eastern Asia\", \"Western Africa\"), gnp (2223.0, 6041.0, 4768.0), headofstate (\"Natsagiin Bagabandi\", \"Vaira Vike-Freiberga\", \"Malietoa Tanumafili II\"), population (79832000, 50456000, 19680000), code (\"MLI\", \"AIA\", \"KAZ\") | country_headofstate : code (\"IRQ\", \"AUT\", \"GUF\"), headofstate (\"Natsagiin Bagabandi\", \"Vaira Vike-Freiberga\", \"Malietoa Tanumafili II\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Bhojpuri\", \"Kalenjin\", \"Teso\"), countrycode (\"OMN\", \"GNB\", \"FLK\"), percentage (7.0, 5.6, 63.6)", 
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "headofstate"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , name \", id , countrycode , population  | sqlite_sequence : name , seq  | country : region , continent , gnp , headofstate , localname , gnpold , surfacearea , name , capital , code , lifeexpectancy , code2 , governmentform \", \"Nonmetropolitan Territory of New Zealand\", population , indepyear  | country_population : code , population  | countrylanguage : isofficial , countrycode , language , percentage ", 
        "query2": "select t1.name, t2.population, t1.headofstate from country as t1 join country_population as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "headofstate", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "population", 
            ",", 
            "name", 
            "and", 
            "leader", 
            "of", 
            "the", 
            "country", 
            "with", 
            "the", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "population", 
            ",", 
            "HeadOfState", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the population, name and leader of the country with the largest area?", 
        "schema_with_content": "city : district (\"Gaziantep\", \"Podravska\", \"V\u00c3\u00bdchodn\u00c3\u00ad Cechy\"), name (\"Uzgorod\", \"Nellore\", \"Sittwe (Akyab)\"), id (2471, 3174, 3861), countrycode (\"AUS\", \"BRA\", \"GMB\"), population (138020, 512880, 362773) | sqlite_sequence : name (\"city\"), seq (4079) | country : region (\"Micronesia\", \"Micronesia/Caribbean\", \"Eastern Africa\"), continent (\"Oceania\", \"Africa\", \"North America\"), gnp (1061.0, 24375.0, 17000.0), headofstate (\"Kessai Note\", \"kenraali Than Shwe\", \"Jiang Zemin\"), localname (\"Polska\", \"Ecuador\", \"Singapore/Singapura/Xinjiapo/Singapur\"), gnpold (2500.0, 7388.0, 15129.0), surfacearea (1267000.0, 110994.0, 1104300.0), name (\"Palestine\", \"Jordan\", \"Kiribati\"), capital (135, 1780, 916), code (\"GRD\", \"SDN\", \"POL\"), lifeexpectancy (37.2, 48.8, 60.2), code2 (\"IR\", \"PH\", \"TT\"), governmentform (\"Dependent Territory of the US\", \"Monarchy (Sultanate)\", \"Nonmetropolitan Territory of New Zealand\"), population (79832000, 293000, 6485000), indepyear (1955, 1906, 1066) | country_population : code (\"MAC\", \"AFG\", \"NFK\"), population (79832000, 293000, 6485000) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"COD\", \"VUT\", \"KGZ\"), language (\"Hehet\", \"Venda\", \"Uighur\"), percentage (50.8, 17.9, 2.6)", 
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , countrycode , name , population , id  | sqlite_sequence : name , seq  | country : continent , localname , code2 , indepyear , headofstate , region , population , surfacearea , lifeexpectancy , code , governmentform , capital , name , gnp , gnpold  | country_name : name , code  | countrylanguage : countrycode , percentage , language , isofficial ", 
        "query2": "select t2.name, t1.population, t1.headofstate from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "headofstate", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "population", 
            ",", 
            "name", 
            "and", 
            "leader", 
            "of", 
            "the", 
            "country", 
            "with", 
            "the", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "population", 
            ",", 
            "HeadOfState", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "What are the population, name and leader of the country with the largest area?", 
        "schema_with_content": "city : district (\"Ordu\", \"Tarapac\u00c3\u00a1\", \"Zapadn\u00c3\u00ad Cechy\"), countrycode (\"CXR\", \"SOM\", \"PNG\"), name (\"Hitachinaka\", \"Bergamo\", \"Bangalore\"), population (1787800, 234622, 187122), id (528, 1504, 876) | sqlite_sequence : name (\"city\"), seq (4079) | country : continent (\"South America\", \"Antarctica\", \"Antarctica\"), localname (\"Danmark\", \"Per\u00c3\u00ba/Piruw\", \"Slovenija\"), code2 (\"PA\", \"IN\", \"GL\"), indepyear (1932, 1350, 1953), headofstate (\"Shahabuddin Ahmad\", \"Beatrix\", \"Kostis Stefanopoulos\"), region (\"Micronesia\", \"Central America\", \"Southeast Asia\"), population (168000, 5330000, 2153000), surfacearea (2510.0, 26338.0, 21.0), lifeexpectancy (69.5, 39.3, 60.0), code (\"NPL\", \"GRC\", \"EST\"), governmentform (\"Parlementary Monarchy\", \"Constitutional Monarchy, Federation\", \"Administrated by the UN\"), capital (539, 645, 3065), name (\"Brazil\", \"Macedonia\", \"Slovakia\"), gnp (2425.0, 210721.0, 320.0), gnpold (3545.0, 4697.0, 73132.0) | country_name : name (\"Brazil\", \"Macedonia\", \"Slovakia\"), code (\"ITA\", \"SGP\", \"GHA\") | countrylanguage : countrycode (\"CAN\", \"MNP\", \"IRQ\"), percentage (9.7, 95.9, 82.2), language (\"[South]Mande\", \"Sotho\", \"Lomwe\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , countrycode , population , district , id  | sqlite_sequence : seq , name  | country : capital , region , headofstate , gnpold , indepyear , code , governmentform , gnp , lifeexpectancy , population , surfacearea , continent , name , localname , code2  | country_headofstate : code , headofstate  | countrylanguage : language , isofficial , percentage , countrycode ", 
        "query2": "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "headofstate", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "name", 
            ",", 
            "population", 
            ",", 
            "and", 
            "head", 
            "of", 
            "state", 
            "for", 
            "the", 
            "country", 
            "that", 
            "has", 
            "the", 
            "largest", 
            "area", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "population", 
            ",", 
            "HeadOfState", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Give the name, population, and head of state for the country that has the largest area.", 
        "schema_with_content": "city : name (\"Daloa\", \"Liaoyuan\", \"Blumenau\"), countrycode (\"GMB\", \"NIC\", \"MUS\"), population (108574, 122106, 115000), district (\"Kaolack\", \"Miyazaki\", \"Kemerovo\"), id (1783, 277, 1903) | sqlite_sequence : seq (4079), name (\"city\") | country : capital (3426, 2331, 3173), region (\"Northern Africa\", \"Eastern Asia\", \"Micronesia\"), headofstate (\"Abdelaziz Bouteflika\", \"Letsie III\", \"Hip\u00c3\u00b3lito Mej\u00c3\u00ada Dom\u00c3\u00adnguez\"), gnpold (1136.0, 1863.0, 30373.0), indepyear (1978, 1993, -1523), code (\"TUN\", \"HUN\", \"ABW\"), governmentform (\"Republic\", \"Nonmetropolitan Territory of France\", \"People'sRepublic\"), gnp (96.0, 5749.0, 6232.0), lifeexpectancy (71.3, 74.4, 70.7), population (10043200, 861000, 3615000), surfacearea (2166090.0, 236800.0, 5130.0), continent (\"Europe\", \"South America\", \"Asia\"), name (\"Djibouti\", \"Yemen\", \"Pakistan\"), localname (\"South Africa\", \"Rep\u00c3\u00bablica Dominicana\", \"Tuvalu\"), code2 (\"HR\", \"TV\", \"CH\") | country_headofstate : code (\"DNK\", \"GEO\", \"IRQ\"), headofstate (\"Abdelaziz Bouteflika\", \"Letsie III\", \"Hip\u00c3\u00b3lito Mej\u00c3\u00ada Dom\u00c3\u00adnguez\") | countrylanguage : language (\"Gorane\", \"Herero\", \"Marathi\"), isofficial (\"T\", \"F\"), percentage (5.0, 9.7, 16.9), countrycode (\"DEU\", \"AZE\", \"PRI\")", 
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "headofstate"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , population , district , name , countrycode  | sqlite_sequence : name , seq  | country : code , continent , localname , gnpold , surfacearea , region , governmentform , code2 , name , capital , headofstate , lifeexpectancy , indepyear , population , gnp  | country_population : population , code  | countrylanguage : language , isofficial , percentage , countrycode ", 
        "query2": "select t1.name, t2.population, t1.headofstate from country as t1 join country_population as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "headofstate", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "name", 
            ",", 
            "population", 
            ",", 
            "and", 
            "head", 
            "of", 
            "state", 
            "for", 
            "the", 
            "country", 
            "that", 
            "has", 
            "the", 
            "largest", 
            "area", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "population", 
            ",", 
            "HeadOfState", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Give the name, population, and head of state for the country that has the largest area.", 
        "schema_with_content": "city : id (444, 3275, 2642), population (107065, 94526, 144346), district (\"Niamey\", \"Kirovograd\", \"St George Basseterre\"), name (\"Dili\", \"Tilburg\", \"Long Xuyen\"), countrycode (\"BTN\", \"AIA\", \"BMU\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"AGO\", \"UKR\", \"TWN\"), continent (\"North America\", \"Asia\", \"Africa\"), localname (\"As-Sahrawiya\", \"British Indian Ocean Territory\", \"Lietuva\"), gnpold (2186.0, 169264.0, 2102826.0), surfacearea (270534.0, 29800.0, 143998.0), region (\"Eastern Europe\", \"Baltic Countries\", \"South America\"), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Co-administrated\", \"Constitutional Monarchy, Federation\"), code2 (\"KG\", \"DZ\", \"AM\"), name (\"Monaco\", \"India\", \"Cuba\"), capital (3770, 3171, 69), headofstate (\"Elisabeth II\", \"Ahmet Necdet Sezer\", \"Khamtay Siphandone\"), lifeexpectancy (37.8, 64.1, 73.2), indepyear (1919, -660, 1946), population (51654000, 3282000, 94000), gnp (903.0, 1206.0, 11345.0) | country_population : population (51654000, 3282000, 94000), code (\"TUN\", \"SAU\", \"BRA\") | countrylanguage : language (\"Shambala\", \"Santhali\", \"Maya Languages\"), isofficial (\"T\", \"F\"), percentage (14.6, 96.9, 53.1), countrycode (\"LKA\", \"CHE\", \"UKR\")", 
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name \", \"Borujerd\", \"Ivano-Frankivsk\", district , population , countrycode , id  | sqlite_sequence : name , seq  | country : continent , code2 , code , surfacearea , capital , name , population , region , gnpold , governmentform , gnp , headofstate , lifeexpectancy , localname , indepyear  | country_name : name , code  | countrylanguage : countrycode , isofficial , percentage , language ", 
        "query2": "select t2.name, t1.population, t1.headofstate from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "population", 
            ",", 
            "headofstate", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "name", 
            ",", 
            "population", 
            ",", 
            "and", 
            "head", 
            "of", 
            "state", 
            "for", 
            "the", 
            "country", 
            "that", 
            "has", 
            "the", 
            "largest", 
            "area", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "population", 
            ",", 
            "HeadOfState", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "1"
        ], 
        "question": "Give the name, population, and head of state for the country that has the largest area.", 
        "schema_with_content": "city : name (\"Cochin (Kochi)\", \"Borujerd\", \"Ivano-Frankivsk\"), district (\"Jiangsu\", \"Pondicherry\", \"Kilis\"), population (177000, 593700, 91069), countrycode (\"NER\", \"LKA\", \"SPM\"), id (3278, 3807, 1707) | sqlite_sequence : name (\"city\"), seq (4079) | country : continent (\"Antarctica\", \"Europe\", \"Africa\"), code2 (\"CV\", \"TC\", \"VN\"), code (\"COG\", \"TTO\", \"BRB\"), surfacearea (185180.0, 373.0, 181.0), capital (652, 2884, 144), name (\"Martinique\", \"Laos\", \"Egypt\"), population (10043200, 50, 2583000), region (\"Western Africa\", \"Central Africa\", \"Micronesia\"), gnpold (119946.0, 153370.0, 30373.0), governmentform (\"Socialistic Republic\", \"Socialistic Republic\", \"Autonomous Area\"), gnp (4787.0, 96.0, 105.0), headofstate (\"Alpha Oumar Konar\u00c3\u00a9\", \"Heyd\u00c3\u00a4r \u00c3\u0084liyev\", \"Sam Nujoma\"), lifeexpectancy (74.1, 38.3, 69.3), localname (\"Honduras\", \"Andorra\", \"Lietuva\"), indepyear (1923, 1948, 1970) | country_name : name (\"Martinique\", \"Laos\", \"Egypt\"), code (\"MWI\", \"PAK\", \"ESP\") | countrylanguage : countrycode (\"VCT\", \"VCT\", \"CUB\"), isofficial (\"T\", \"F\"), percentage (2.4, 7.7, 10.4), language (\"Iban\", \"Turkmenian\", \"Carolinian\")", 
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 1, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                20, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : population , name , id , district , countrycode  | sqlite_sequence : seq , name  | country : region , population , code2 , governmentform \", surfacearea , capital , name , gnpold , continent , lifeexpectancy , code , headofstate , gnp , indepyear , localname  | country_governmentform : governmentform \", code  | countrylanguage : percentage , isofficial , language , countrycode ", 
        "query2": "select sum(t1.population), t2.governmentform from country as t1 join country_governmentform as t2 on t1.code = t2.code group by t2.governmentform having avg(t1.lifeexpectancy) > 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "governmentform", 
            "from", 
            "country", 
            "group", 
            "by", 
            "governmentform", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "government", 
            "form", 
            "name", 
            "and", 
            "total", 
            "population", 
            "for", 
            "each", 
            "government", 
            "form", 
            "whose", 
            "average", 
            "life", 
            "expectancy", 
            "is", 
            "longer", 
            "than", 
            "72", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "GovernmentForm", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "GovernmentForm", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ">", 
            "72"
        ], 
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", 
        "schema_with_content": "city : population (659604, 93735, 302108), name (\"Roanoke\", \"Siem Reap\", \"Katsina\"), id (3434, 1786, 2670), district (\"al-Tamim\", \"Nari\u00c3\u00b1o\", \"Trabzon\"), countrycode (\"AZE\", \"NZL\", \"GHA\") | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Central Africa\", \"Southeast Asia\", \"Middle East\"), population (12878000, 5083000, 29490000), code2 (\"ID\", \"BW\", \"AS\"), governmentform (\"Socialistic Republic\", \"Republic\", \"Monarchy (Emirate)\"), surfacearea (242.0, 6257.0, 801590.0), capital (3209, 2253, 3171), name (\"Tuvalu\", \"New Caledonia\", \"Turkey\"), gnpold (19452.0, 206025.0, 6884.0), continent (\"Oceania\", \"Europe\", \"Europe\"), lifeexpectancy (50.5, 52.4, 78.0), code (\"NIC\", \"BTN\", \"PER\"), headofstate (\"Charles Taylor\", \"Johannes Rau\", \"Lansana Cont\u00c3\u00a9\"), gnp (95023.0, 351182.0, 293.0), indepyear (1951, 1929, 1980), localname (\"To\u00c3\u00a7ikiston\", \"Cameroun/Cameroon\", \"Togo\") | country_governmentform : governmentform (\"Socialistic Republic\", \"Republic\", \"Monarchy (Emirate)\"), code (\"MLT\", \"GNQ\", \"BIH\") | countrylanguage : percentage (52.0, 12.4, 88.7), isofficial (\"T\", \"F\"), language (\"Hadjarai\", \"Malagasy\", \"Kanuri\"), countrycode (\"GUY\", \"CZE\", \"SJM\")", 
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    19, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "governmentform"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : population , countrycode , id , district , name  | sqlite_sequence : seq , name  | country : indepyear , name , region , gnpold , code , gnp , governmentform , localname , code2 , population , lifeexpectancy , capital , headofstate , surfacearea , continent  | country_population : population , code  | countrylanguage : isofficial , percentage , language , countrycode ", 
        "query2": "select sum(t2.population), t1.governmentform from country as t1 join country_population as t2 on t1.code = t2.code group by t1.governmentform having avg(t1.lifeexpectancy) > 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "governmentform", 
            "from", 
            "country", 
            "group", 
            "by", 
            "governmentform", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "government", 
            "form", 
            "name", 
            "and", 
            "total", 
            "population", 
            "for", 
            "each", 
            "government", 
            "form", 
            "whose", 
            "average", 
            "life", 
            "expectancy", 
            "is", 
            "longer", 
            "than", 
            "72", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "GovernmentForm", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "GovernmentForm", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ">", 
            "72"
        ], 
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", 
        "schema_with_content": "city : population (118968, 103653, 1619115), countrycode (\"THA\", \"NZL\", \"ANT\"), id (2081, 364, 3957), district (\"Liguria\", \"West Java\", \"al-Bahr al-Ahmar\"), name (\"San Nicol\u00c3\u00a1s de los Garza\", \"Basirhat\", \"Muntinlupa\") | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1816, 1901, 1066), name (\"Malta\", \"Saudi Arabia\", \"Brunei\"), region (\"Baltic Countries\", \"Middle East\", \"Central America\"), gnpold (206025.0, 31966.0, 10241.0), code (\"CYM\", \"UKR\", \"LBN\"), gnp (9.0, 64140.0, 372.0), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Special Administrative Region of China\", \"Administrated by the UN\"), localname (\"Mayotte\", \"Belarus\", \"Norfolk Island\"), code2 (\"BE\", \"SL\", \"TM\"), population (2500, 18827000, 6217000), lifeexpectancy (67.3, 52.4, 52.4), capital (3207, 902, 192), headofstate (\"Jos\u00c3\u00a9 Alexandre Gusm\u00c3\u00a3o\", \"Mireya Elisa Moscoso Rodr\u00c3\u00adguez\", \"Festus G. Mogae\"), surfacearea (163265.0, 23200.0, 264.0), continent (\"North America\", \"Oceania\", \"South America\") | country_population : population (2500, 18827000, 6217000), code (\"BLZ\", \"MLI\", \"CCK\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (12.6, 32.1, 67.7), language (\"Papuan Languages\", \"Busansi\", \"Khmer\"), countrycode (\"GLP\", \"BGD\", \"GLP\")", 
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    19, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , countrycode , population , name , district  | sqlite_sequence : name , seq  | country : code , population , governmentform \", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\", capital , indepyear , gnpold , gnp , localname , region , lifeexpectancy , surfacearea , continent , name , headofstate , code2  | country_governmentform : governmentform \", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\", code  | countrylanguage : countrycode , language , isofficial , percentage ", 
        "query2": "select sum(t1.population), t2.governmentform from country as t1 join country_governmentform as t2 on t1.code = t2.code group by t2.governmentform having avg(t1.lifeexpectancy) > 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "governmentform", 
            "from", 
            "country", 
            "group", 
            "by", 
            "governmentform", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "different", 
            "government", 
            "forms", 
            "and", 
            "what", 
            "is", 
            "the", 
            "total", 
            "population", 
            "of", 
            "each", 
            "for", 
            "government", 
            "forms", 
            "that", 
            "have", 
            "an", 
            "average", 
            "life", 
            "expectancy", 
            "greater", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "GovernmentForm", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "GovernmentForm", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ">", 
            "72"
        ], 
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", 
        "schema_with_content": "city : id (143, 3882, 979), countrycode (\"BGD\", \"IRL\", \"CXR\"), population (332969, 163431, 95592), name (\"Khartum\", \"Jingdezhen\", \"Napoli\"), district (\"Antalya\", \"Tirana\", \"West Australia\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"LVA\", \"AZE\", \"KOR\"), population (4478500, 2424200, 4380000), governmentform (\"Monarchy (Emirate)\", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\"), capital (3483, 539, 2914), indepyear (1963, 1941, 1932), gnpold (8246.0, 5867.0, 5670.0), gnp (935.0, 382.0, 97.0), localname (\"Uruguay\", \"Svalbard og Jan Mayen\", \"Ha\u00c3\u00afti/Dayti\"), region (\"Northern Africa\", \"South America\", \"North America\"), lifeexpectancy (74.4, 79.5, 66.0), surfacearea (1221037.0, 65301.0, 12173.0), continent (\"Antarctica\", \"South America\", \"South America\"), name (\"Italy\", \"United States\", \"Comoros\"), headofstate (\"Bernard Dowiyogo\", \"Margrethe II\", \"Salahuddin Abdul Aziz Shah Alhaj\"), code2 (\"TF\", \"ET\", \"PK\") | country_governmentform : governmentform (\"Monarchy (Emirate)\", \"Emirate Federation\", \"Nonmetropolitan Territory of New Zealand\"), code (\"TON\", \"MTQ\", \"HRV\") | countrylanguage : countrycode (\"CPV\", \"CXR\", \"GRC\"), language (\"Khmer\", \"Sumo\", \"Maranao\"), isofficial (\"T\", \"F\"), percentage (97.2, 40.8, 34.8)", 
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    19, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "governmentform"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : countrycode , population , name , id , district  | sqlite_sequence : name , seq  | country : name , indepyear , code2 , capital , surfacearea , gnp , population , lifeexpectancy , continent , region , localname , gnpold , governmentform , code , headofstate  | country_population : population , code  | countrylanguage : percentage , isofficial , countrycode , language ", 
        "query2": "select sum(t2.population), t1.governmentform from country as t1 join country_population as t2 on t1.code = t2.code group by t1.governmentform having avg(t1.lifeexpectancy) > 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "governmentform", 
            "from", 
            "country", 
            "group", 
            "by", 
            "governmentform", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "different", 
            "government", 
            "forms", 
            "and", 
            "what", 
            "is", 
            "the", 
            "total", 
            "population", 
            "of", 
            "each", 
            "for", 
            "government", 
            "forms", 
            "that", 
            "have", 
            "an", 
            "average", 
            "life", 
            "expectancy", 
            "greater", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "GovernmentForm", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "GovernmentForm", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ">", 
            "72"
        ], 
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", 
        "schema_with_content": "city : countrycode (\"ERI\", \"MHL\", \"MSR\"), population (962507, 4802, 114912), name (\"Suez\", \"Tshikapa\", \"Regina\"), id (2953, 965, 2614), district (\"Belize City\", \"Sofala\", \"Shiga\") | sqlite_sequence : name (\"city\"), seq (4079) | country : name (\"Ethiopia\", \"Bahrain\", \"Belgium\"), indepyear (1960, 843, 1906), code2 (\"ET\", \"PW\", \"CU\"), capital (3320, 2298, 916), surfacearea (83859.0, 637657.0, 1102.0), gnp (612.0, 11345.0, 746.0), population (21778000, 5171300, 34000), lifeexpectancy (63.7, 56.5, 37.8), continent (\"South America\", \"Africa\", \"South America\"), region (\"Southern and Central Asia\", \"Western Europe\", \"Caribbean\"), localname (\"Brunei Darussalam\", \"\u00e2\u0080\u0093\", \"New Zealand/Aotearoa\"), gnpold (442544.0, 19452.0, 9757.0), governmentform (\"Part of Denmark\", \"Occupied by Marocco\", \"Parlementary Monarchy\"), code (\"GNQ\", \"LAO\", \"SEN\"), headofstate (\"Haji Hassan al-Bolkiah\", \"Maumoon Abdul Gayoom\", \"Arthur N. R. Robinson\") | country_population : population (21778000, 5171300, 34000), code (\"NIU\", \"ETH\", \"GIN\") | countrylanguage : percentage (18.4, 31.8, 75.2), isofficial (\"T\", \"F\"), countrycode (\"ATG\", \"SMR\", \"ISL\"), language (\"Lao-Soung\", \"Nahua\", \"Senufo and Minianka\")", 
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    19, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                19, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , name , countrycode , district , population  | sqlite_sequence : name , seq  | country : code2 , population , gnpold , region , governmentform \", \"Nonmetropolitan Territory of France\", continent , localname , capital , name , code , lifeexpectancy , indepyear , surfacearea , headofstate , gnp  | country_population : code , population  | countrylanguage : percentage , isofficial , language , countrycode ", 
        "query2": "select sum(t2.population), avg(t1.lifeexpectancy), t1.continent from country as t1 join country_population as t2 on t1.code = t2.code group by t1.continent having avg(t1.lifeexpectancy) < 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "and", 
            "total", 
            "population", 
            "for", 
            "each", 
            "continent", 
            "where", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "is", 
            "shorter", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ], 
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", 
        "schema_with_content": "city : id (962, 3844, 1645), name (\"Gejiu\", \"Mandaue\", \"Kalemie\"), countrycode (\"ALB\", \"LKA\", \"PER\"), district (\"Budapest\", \"St George Basseterre\", \"Nordrhein-Westfalen\"), population (107937, 683885, 470781) | sqlite_sequence : name (\"city\"), seq (4079) | country : code2 (\"FI\", \"PM\", \"VE\"), population (15864000, 2124000, 6217000), gnpold (4697.0, 1767.0, 7388.0), region (\"Melanesia\", \"Eastern Europe\", \"Central America\"), governmentform (\"Republic\", \"Monarchy (Sultanate)\", \"Nonmetropolitan Territory of France\"), continent (\"South America\", \"Antarctica\", \"Africa\"), localname (\"Saint Helena\", \"Chile\", \"Ell\u00c3\u00a1da\"), capital (3198, 2413, 1523), name (\"Cook Islands\", \"Qatar\", \"Afghanistan\"), code (\"LUX\", \"FRA\", \"CIV\"), lifeexpectancy (76.5, 77.0, 59.8), indepyear (1581, 1980, 1878), surfacearea (5765.0, 964.0, 1648195.0), headofstate (\"Chen Shui-bian\", \"Kocheril Raman Narayanan\", \"France-Albert Ren\u00c3\u00a9\"), gnp (0.0, 1206.0, 64140.0) | country_population : code (\"SEN\", \"TZA\", \"GRC\"), population (15864000, 2124000, 6217000) | countrylanguage : percentage (58.4, 92.1, 20.3), isofficial (\"T\", \"F\"), language (\"Fur\", \"Masana\", \"Man\"), countrycode (\"KHM\", \"JOR\", \"POL\")", 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , population , countrycode , name , id  | sqlite_sequence : seq , name  | country : region , name , continent , population , indepyear , localname , governmentform , code , gnpold , gnp , code2 , headofstate , surfacearea , lifeexpectancy , capital  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : percentage , isofficial , language , countrycode ", 
        "query2": "select sum(t1.population), avg(t2.lifeexpectancy), t1.continent from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code group by t1.continent having avg(t2.lifeexpectancy) < 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "and", 
            "total", 
            "population", 
            "for", 
            "each", 
            "continent", 
            "where", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "is", 
            "shorter", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ], 
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", 
        "schema_with_content": "city : district (\"Arecibo\", \"Tirana\", \"Shiga\"), population (121000, 96500, 149665), countrycode (\"NIC\", \"MRT\", \"JAM\"), name (\"El Alto\", \"Kediri\", \"Okara\"), id (1330, 673, 1638) | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Western Europe\", \"Australia and New Zealand\", \"Micronesia/Caribbean\"), name (\"East Timor\", \"Turks and Caicos Islands\", \"Tonga\"), continent (\"Europe\", \"North America\", \"Antarctica\"), population (6695000, 111506000, 6188000), indepyear (1993, 1825, 1878), localname (\"\u00c2\u00b4Uman\", \"Malta\", \"Canada\"), governmentform (\"Commonwealth of the US\", \"Administrated by the UN\", \"Federation\"), code (\"MDA\", \"CHE\", \"TMP\"), gnpold (5940.0, 6180.0, 19769.0), gnp (818.0, 14194.0, 11345.0), code2 (\"GP\", \"CU\", \"TJ\"), headofstate (\"Paul Kagame\", \"Bhumibol Adulyadej\", \"Laurent Gbagbo\"), surfacearea (316.0, 5130.0, 551500.0), lifeexpectancy (68.5, 60.8, 77.9), capital (3014, 2882, 2710) | country_lifeexpectancy : code (\"IRN\", \"FSM\", \"PSE\"), lifeexpectancy (68.5, 60.8, 77.9) | countrylanguage : percentage (7.5, 11.1, 27.8), isofficial (\"T\", \"F\"), language (\"Ganda\", \"Gaeli\", \"Urdu\"), countrycode (\"ITA\", \"IRL\", \"COM\")", 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "lifeexpectancy"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district \", \"Hainaut\", name , population , id , countrycode  | sqlite_sequence : seq , name  | country : population , headofstate , code2 , indepyear , region , capital , gnpold , surfacearea , code , localname , lifeexpectancy , gnp , name , continent , governmentform  | country_continent : continent , code  | countrylanguage : language , countrycode , isofficial , percentage ", 
        "query2": "select sum(t1.population), avg(t1.lifeexpectancy), t2.continent from country as t1 join country_continent as t2 on t1.code = t2.code group by t2.continent having avg(t1.lifeexpectancy) < 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "and", 
            "total", 
            "population", 
            "for", 
            "each", 
            "continent", 
            "where", 
            "the", 
            "average", 
            "life", 
            "expectancy", 
            "is", 
            "shorter", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ], 
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", 
        "schema_with_content": "city : district (\"K\u00c3\u00bctahya\", \"Saha (Jakutia)\", \"Hainaut\"), name (\"Hefei\", \"Saint John\u00c2\u00b4s\", \"Pemalang\"), population (177892, 95761, 89881), id (2286, 3619, 1945), countrycode (\"SUR\", \"BWA\", \"YUG\") | sqlite_sequence : seq (4079), name (\"city\") | country : population (83000, 2542000, 28351000), headofstate (\"Akihito\", \"Kim Dae-jung\", \"Jiang Zemin\"), code2 (\"NP\", \"TJ\", \"UZ\"), indepyear (1878, 1861, 1932), region (\"Micronesia/Caribbean\", \"Australia and New Zealand\", \"South America\"), capital (2331, 1780, 3236), gnpold (7388.0, 430572.0, 2711.0), surfacearea (36188.0, 65301.0, 30355.0), code (\"SPM\", \"SLV\", \"GRL\"), localname (\"Burundi/Uburundi\", \"The Gambia\", \"Tanzania\"), lifeexpectancy (70.0, 78.0, 71.1), gnp (1208.0, 612.0, 8255.0), name (\"Brunei\", \"Dominica\", \"Hong Kong\"), continent (\"Africa\", \"South America\", \"Africa\"), governmentform (\"Overseas Department of France\", \"Special Administrative Region of China\", \"Socialistic State\") | country_continent : continent (\"Africa\", \"South America\", \"Africa\"), code (\"MEX\", \"FSM\", \"KAZ\") | countrylanguage : language (\"Kikuyu\", \"Mossi\", \"Chichewa\"), countrycode (\"BIH\", \"COD\", \"PER\"), isofficial (\"T\", \"F\"), percentage (4.9, 18.1, 6.3)", 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "continent"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : countrycode , id , population , name , district  | sqlite_sequence : name , seq  | country : surfacearea , lifeexpectancy , name , code , gnpold , code2 , continent , governmentform , indepyear , capital , region , headofstate , gnp , localname , population  | country_population : population , code  | countrylanguage : countrycode , language , isofficial , percentage ", 
        "query2": "select sum(t2.population), avg(t1.lifeexpectancy), t1.continent from country as t1 join country_population as t2 on t1.code = t2.code group by t1.continent having avg(t1.lifeexpectancy) < 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "different", 
            "continents", 
            "and", 
            "the", 
            "total", 
            "popuation", 
            "and", 
            "average", 
            "life", 
            "expectancy", 
            "corresponding", 
            "to", 
            "each", 
            ",", 
            "for", 
            "continents", 
            "that", 
            "have", 
            "an", 
            "average", 
            "life", 
            "expectancy", 
            "less", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ], 
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", 
        "schema_with_content": "city : countrycode (\"NFK\", \"NGA\", \"KHM\"), id (672, 1247, 2078), population (665617, 155000, 165243), name (\"Bareilly\", \"Adamstown\", \"San Francisco de Macor\u00c3\u00ads\"), district (\"Rabat-Sal\u00c3\u00a9-Zammour-Z\", \"Mwanza\", \"Penza\") | sqlite_sequence : name (\"city\"), seq (4079) | country : surfacearea (1138914.0, 111369.0, 200.0), lifeexpectancy (78.9, 73.4, 69.2), name (\"Cameroon\", \"Andorra\", \"Turks and Caicos Islands\"), code (\"PNG\", \"UGA\", \"KGZ\"), gnpold (1084.0, 8670.0, 16153.0), code2 (\"SB\", \"BF\", \"VC\"), continent (\"Asia\", \"North America\", \"North America\"), governmentform (\"Parlementary Monarchy\", \"Co-administrated\", \"Federal Republic\"), indepyear (1769, 1878, 1906), capital (2698, 3225, 3333), region (\"Western Africa\", \"Caribbean\", \"Polynesia\"), headofstate (\"Gustavo Noboa Bejarano\", \"Yoweri Museveni\", \"Bakili Muluzi\"), gnp (8444.0, 681.0, 42168.0), localname (\"R\u00c3\u00a9publique D\u00c3\u00a9mocratique du Congo\", \"Espa\u00c3\u00b1a\", \"Tokelau\"), population (9997600, 15000, 3850000) | country_population : population (9997600, 15000, 3850000), code (\"SWE\", \"MYT\", \"CCK\") | countrylanguage : countrycode (\"KGZ\", \"COL\", \"BMU\"), language (\"Maguindanao\", \"Quich\u00c3\u00a9\", \"Mahor\u00c3\u00a9\"), isofficial (\"T\", \"F\"), percentage (1.0, 4.7, 42.0)", 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , district , name , countrycode , population  | sqlite_sequence : name , seq  | country : indepyear , gnpold , region , localname , code , headofstate , surfacearea , lifeexpectancy , capital , population , gnp , governmentform \", name , continent , code2  | country_lifeexpectancy : lifeexpectancy , code  | countrylanguage : isofficial , percentage , countrycode , language ", 
        "query2": "select sum(t1.population), avg(t2.lifeexpectancy), t1.continent from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code group by t1.continent having avg(t2.lifeexpectancy) < 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "different", 
            "continents", 
            "and", 
            "the", 
            "total", 
            "popuation", 
            "and", 
            "average", 
            "life", 
            "expectancy", 
            "corresponding", 
            "to", 
            "each", 
            ",", 
            "for", 
            "continents", 
            "that", 
            "have", 
            "an", 
            "average", 
            "life", 
            "expectancy", 
            "less", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ], 
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", 
        "schema_with_content": "city : id (2999, 2638, 795), district (\"B\u00c3\u00a9char\", \"Diyarbakir\", \"Semnan\"), name (\"Gillingham\", \"Baiyin\", \"Orizaba\"), countrycode (\"ASM\", \"BIH\", \"JAM\"), population (129688, 123175, 364813) | sqlite_sequence : name (\"city\"), seq (4079) | country : indepyear (-1523, 1966, 1944), gnpold (15129.0, 323310.0, 4192638.0), region (\"Caribbean\", \"Central America\", \"Micronesia/Caribbean\"), localname (\"Congo\", \"United States\", \"Guadeloupe\"), code (\"SLE\", \"TGO\", \"TJK\"), headofstate (\"Bhumibol Adulyadej\", \"Francisco Guillermo Flores P\u00c3\u00a9rez\", \"Ali Abdallah Salih\"), surfacearea (309500.0, 622.0, 2510.0), lifeexpectancy (73.8, 60.8, 79.4), capital (2434, 3214, 938), population (10239000, 75967000, 71000), gnp (166448.0, 6398.0, 19770.0), governmentform (\"Special Administrative Region of China\", \"Part of Denmark\", \"Monarchy (Emirate)\"), name (\"Botswana\", \"Netherlands\", \"Guyana\"), continent (\"North America\", \"Antarctica\", \"Africa\"), code2 (\"BT\", \"BZ\", \"AM\") | country_lifeexpectancy : lifeexpectancy (73.8, 60.8, 79.4), code (\"GEO\", \"MMR\", \"TZA\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (4.5, 33.0, 29.6), countrycode (\"JPN\", \"BGR\", \"YEM\"), language (\"Bhojpuri\", \"Luimbe-nganguela\", \"Tokelau\")", 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "lifeexpectancy"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , id , district , countrycode , population  | sqlite_sequence : seq , name  | country : code2 , gnp , capital , population , region , governmentform \", \"Parlementary Monarchy\", \"Dependent Territory of the US\", headofstate , name , code , gnpold , localname , indepyear , lifeexpectancy , surfacearea , continent  | country_continent : code , continent  | countrylanguage : language , countrycode , isofficial , percentage ", 
        "query2": "select sum(t1.population), avg(t1.lifeexpectancy), t2.continent from country as t1 join country_continent as t2 on t1.code = t2.code group by t2.continent having avg(t1.lifeexpectancy) < 72", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            ",", 
            "continent", 
            "from", 
            "country", 
            "group", 
            "by", 
            "continent", 
            "having", 
            "avg", 
            "(", 
            "lifeexpectancy", 
            ")", 
            "<", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "different", 
            "continents", 
            "and", 
            "the", 
            "total", 
            "popuation", 
            "and", 
            "average", 
            "life", 
            "expectancy", 
            "corresponding", 
            "to", 
            "each", 
            ",", 
            "for", 
            "continents", 
            "that", 
            "have", 
            "an", 
            "average", 
            "life", 
            "expectancy", 
            "less", 
            "than", 
            "72", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            ",", 
            "Continent", 
            "FROM", 
            "country", 
            "GROUP", 
            "BY", 
            "Continent", 
            "HAVING", 
            "avg", 
            "(", 
            "LifeExpectancy", 
            ")", 
            "<", 
            "72"
        ], 
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", 
        "schema_with_content": "city : name (\"Gaya\", \"Angren\", \"Ise\"), id (43, 2980, 1463), district (\"Moskova\", \"Bangui\", \"Pahang\"), countrycode (\"TKM\", \"NAM\", \"BHS\"), population (98667, 90289, 273140) | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"BO\", \"BB\", \"EE\"), gnp (1626.0, 1990.0, 42168.0), capital (2509, 919, 3332), population (6276000, 293000, 25000), region (\"North America\", \"Western Africa\", \"British Islands\"), governmentform (\"Constitutional Monarchy (Emirate)\", \"Parlementary Monarchy\", \"Dependent Territory of the US\"), headofstate (\"Abdelaziz Bouteflika\", \"Kim Dae-jung\", \"Thomas Klestil\"), name (\"Romania\", \"Colombia\", \"Taiwan\"), code (\"CIV\", \"ZAF\", \"VNM\"), gnpold (1872.0, 170.0, 1186.0), localname (\"Liechtenstein\", \"Sakartvelo\", \"Burundi/Uburundi\"), indepyear (1992, 885, 843), lifeexpectancy (74.9, 77.6, 54.9), surfacearea (1246700.0, 6257.0, 446550.0), continent (\"Oceania\", \"North America\", \"Asia\") | country_continent : code (\"ALB\", \"KAZ\", \"MTQ\"), continent (\"Oceania\", \"North America\", \"Asia\") | countrylanguage : language (\"Gujarati\", \"Susu\", \"Oromo\"), countrycode (\"BLR\", \"DZA\", \"PAK\"), isofficial (\"T\", \"F\"), percentage (17.3, 14.0, 17.1)", 
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    10, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [
                [
                    false, 
                    4, 
                    [
                        0, 
                        [
                            5, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    72.0, 
                    null
                ]
            ], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                15, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                10, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "continent"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , district , countrycode , population , name  | sqlite_sequence : seq , name  | country : population , gnpold , code2 , capital , continent , governmentform , localname , region , gnp , name , surfacearea , headofstate , code , lifeexpectancy , indepyear  | country_surfacearea : code , surfacearea  | countrylanguage : countrycode , isofficial , percentage , language ", 
        "query2": "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t2.surfacearea desc limit 5", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "areas", 
            "of", 
            "countries", 
            "with", 
            "the", 
            "top", 
            "5", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "5"
        ], 
        "question": "What are the names and areas of countries with the top 5 largest area?", 
        "schema_with_content": "city : id (3752, 46, 1659), district (\"Rjazan\", \"Z\u00c3\u00bcrich\", \"Sisilia\"), countrycode (\"MAC\", \"SDN\", \"REU\"), population (929270, 119283, 194784), name (\"Chicago\", \"Oceanside\", \"T\u00c3\u00a2rgu Mures\") | sqlite_sequence : seq (4079), name (\"city\") | country : population (32300, 2583000, 2424200), gnpold (2474.0, 2186.0, 4361.0), code2 (\"KG\", \"TF\", \"YT\"), capital (185, 1786, 2690), continent (\"Europe\", \"Asia\", \"Asia\"), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Emirate Federation\", \"Nonmetropolitan Territory of France\"), localname (\"Nederland\", \"Qazaqstan\", \"Uzbekiston\"), region (\"North America\", \"Micronesia/Caribbean\", \"Northern Africa\"), gnp (21929.0, 17000.0, 10226.0), name (\"Uganda\", \"Palau\", \"Saint Pierre and Miquelon\"), surfacearea (260.0, 505992.0, 112088.0), headofstate (\"Alpha Oumar Konar\u00c3\u00a9\", \"Bernard Dowiyogo\", \"Islam Karimov\"), code (\"CIV\", \"PRY\", \"SOM\"), lifeexpectancy (42.9, 69.1, 59.8), indepyear (1830, 1810, 1984) | country_surfacearea : code (\"BEN\", \"JAM\", \"NOR\"), surfacearea (260.0, 505992.0, 112088.0) | countrylanguage : countrycode (\"CYM\", \"MEX\", \"CAF\"), isofficial (\"T\", \"F\"), percentage (97.9, 27.7, 93.5), language (\"Bariba\", \"Nsenga\", \"Hiligaynon\")", 
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 5, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "surfacearea"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : id , name , district , countrycode , population  | sqlite_sequence : seq , name  | country : lifeexpectancy , continent , name , region , gnpold , population , surfacearea , capital , governmentform , gnp , code , localname , code2 , indepyear , headofstate  | country_name : name , code  | countrylanguage : language , percentage , countrycode , isofficial ", 
        "query2": "select t2.name, t1.surfacearea from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 5", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "areas", 
            "of", 
            "countries", 
            "with", 
            "the", 
            "top", 
            "5", 
            "largest", 
            "area", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "5"
        ], 
        "question": "What are the names and areas of countries with the top 5 largest area?", 
        "schema_with_content": "city : id (644, 822, 1664), name (\"Guaymas\", \"Port-Louis\", \"Lviv\"), district (\"Nord-Pas-de-Calais\", \"Riad\", \"Paramaribo\"), countrycode (\"PRY\", \"LVA\", \"MUS\"), population (328535, 848000, 164716) | sqlite_sequence : seq (4079), name (\"city\") | country : lifeexpectancy (71.4, 69.1, 78.1), continent (\"Antarctica\", \"Asia\", \"Africa\"), name (\"India\", \"Christmas Island\", \"Bosnia and Herzegovina\"), region (\"Central Africa\", \"Eastern Asia\", \"Micronesia/Caribbean\"), gnpold (153370.0, 542.0, 19452.0), population (68000, 817000, 599000), surfacearea (6257.0, 41526.0, 199900.0), capital (1450, 766, 179), governmentform (\"Monarchy\", \"Commonwealth of the US\", \"People'sRepublic\"), gnp (256254.0, 6964.0, 69213.0), code (\"NRU\", \"IDN\", \"LIE\"), localname (\"Kyrgyzstan\", \"Bermuda\", \"Nouvelle-Cal\u00c3\u00a9donie\"), code2 (\"HU\", \"LT\", \"NP\"), indepyear (1922, 1806, 1955), headofstate (\"Kostis Stefanopoulos\", \"Emomali Rahmonov\", \"Saparmurad Nijazov\") | country_name : name (\"India\", \"Christmas Island\", \"Bosnia and Herzegovina\"), code (\"OMN\", \"MLI\", \"MTQ\") | countrylanguage : language (\"Carolinian\", \"Nyakusa\", \"Finnish\"), percentage (69.9, 3.5, 23.2), countrycode (\"GLP\", \"NOR\", \"DOM\"), isofficial (\"T\", \"F\")", 
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 5, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , population , name , id , countrycode  | sqlite_sequence : seq , name  | country : gnpold , headofstate , localname , indepyear , code , lifeexpectancy , continent , governmentform , population , surfacearea , region , gnp , code2 , name , capital  | country_surfacearea : code , surfacearea  | countrylanguage : percentage , isofficial , language , countrycode ", 
        "query2": "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t2.surfacearea desc limit 5", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "names", 
            "and", 
            "surface", 
            "areas", 
            "of", 
            "the", 
            "5", 
            "largest", 
            "countries", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "5"
        ], 
        "question": "Return the names and surface areas of the 5 largest countries.", 
        "schema_with_content": "city : district (\"Orjol\", \"Latium\", \"Jiangxi\"), population (205993, 342595, 524000), name (\"Nogales\", \"Samarinda\", \"Oakland\"), id (203, 3279, 3925), countrycode (\"CRI\", \"WSM\", \"MCO\") | sqlite_sequence : seq (4079), name (\"city\") | country : gnpold (146171.0, 170.0, 6884.0), headofstate (\"Khamtay Siphandone\", \"Hosni Mubarak\", \"kenraali Than Shwe\"), localname (\"Timor Timur\", \"Lubnan\", \"Hrvatska\"), indepyear (1811, 1958, 885), code (\"MEX\", \"KGZ\", \"GIB\"), lifeexpectancy (37.2, 52.3, 66.3), continent (\"North America\", \"North America\", \"Oceania\"), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Territorial Collectivity of France\", \"Dependent Territory of Norway\"), population (6782000, 15864000, 278357000), surfacearea (796095.0, 41284.0, 801590.0), region (\"Melanesia\", \"Southern Europe\", \"South America\"), gnp (137635.0, 6871.0, 11705.0), code2 (\"TG\", \"VE\", \"KN\"), name (\"Dominica\", \"Costa Rica\", \"Pakistan\"), capital (764, 2331, 2257) | country_surfacearea : code (\"SUR\", \"CAF\", \"AUT\"), surfacearea (796095.0, 41284.0, 801590.0) | countrylanguage : percentage (4.3, 22.7, 20.3), isofficial (\"T\", \"F\"), language (\"Punjabi\", \"Tamang\", \"Telugu\"), countrycode (\"UMI\", \"ERI\", \"SLE\")", 
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 5, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "surfacearea"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : population , id , district , countrycode , name  | sqlite_sequence : seq , name  | country : surfacearea , name , population , headofstate , governmentform , code , capital , lifeexpectancy , code2 , localname , continent , gnp , gnpold , indepyear , region  | country_name : name , code  | countrylanguage : countrycode , percentage , isofficial , language ", 
        "query2": "select t2.name, t1.surfacearea from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 5", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "surfacearea", 
            "from", 
            "country", 
            "order", 
            "by", 
            "surfacearea", 
            "desc", 
            "limit", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "names", 
            "and", 
            "surface", 
            "areas", 
            "of", 
            "the", 
            "5", 
            "largest", 
            "countries", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Name", 
            ",", 
            "SurfaceArea", 
            "FROM", 
            "country", 
            "ORDER", 
            "BY", 
            "SurfaceArea", 
            "DESC", 
            "LIMIT", 
            "5"
        ], 
        "question": "Return the names and surface areas of the 5 largest countries.", 
        "schema_with_content": "city : population (282348, 237713, 109576), id (795, 559, 2172), district (\"Belgorod\", \"Khuzestan\", \"S\u00c3\u00a3o Paulo\"), countrycode (\"ARE\", \"LVA\", \"LUX\"), name (\"Camag\u00c3\u00bcey\", \"Rawalpindi\", \"Bhilai\") | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (527968.0, 238391.0, 65610.0), name (\"North Korea\", \"Uzbekistan\", \"Latvia\"), population (66591000, 18112000, 8091800), headofstate (\"Sellapan Rama Nathan\", \"Emomali Rahmonov\", \"Maaouiya Ould Sid\u00c2\u00b4Ahmad Taya\"), governmentform (\"Administrated by the UN\", \"Republic\", \"US Territory\"), code (\"KWT\", \"BRB\", \"MRT\"), capital (3048, 2447, 3018), lifeexpectancy (69.3, 78.1, 54.7), code2 (\"BM\", \"AR\", \"MS\"), localname (\"Muritaniya/Mauritanie\", \"Tokelau\", \"Argentina\"), continent (\"North America\", \"Africa\", \"Europe\"), gnp (20831.0, 11345.0, 1988.0), gnpold (532031.0, 22834.0, 584.0), indepyear (1941, 1917, 1581), region (\"Southern Europe\", \"South America\", \"Caribbean\") | country_name : name (\"North Korea\", \"Uzbekistan\", \"Latvia\"), code (\"CPV\", \"SLE\", \"IDN\") | countrylanguage : countrycode (\"VAT\", \"VUT\", \"TCA\"), percentage (98.1, 92.0, 5.4), isofficial (\"T\", \"F\"), language (\"Luba\", \"Sindhi\", \"Luba\")", 
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5", 
        "sql": {
            "orderBy": [
                "desc", 
                [
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ]
                ]
            ], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": 5, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                9, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "name"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , population , name , countrycode , id  | sqlite_sequence : seq , name  | country : surfacearea , gnpold , headofstate , population , region , code2 , governmentform , code , gnp , localname , capital , name , lifeexpectancy , indepyear , continent  | country_surfacearea : surfacearea , code  | countrylanguage : percentage , isofficial , countrycode , language ", 
        "query2": "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = \"North America\" and t2.surfacearea > 3000", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "surfacearea", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "population", 
            "and", 
            "average", 
            "area", 
            "of", 
            "countries", 
            "in", 
            "the", 
            "continent", 
            "of", 
            "North", 
            "America", 
            "whose", 
            "area", 
            "is", 
            "bigger", 
            "than", 
            "3000\uff1f"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "North", 
            "America", 
            "''", 
            "AND", 
            "SurfaceArea", 
            ">", 
            "3000"
        ], 
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f", 
        "schema_with_content": "city : district (\"Istanbul\", \"Distrito Federal\", \"Astana\"), population (135968, 894943, 123273), name (\"Guant\u00c3\u00a1namo\", \"Ambala\", \"Ulan-Ude\"), countrycode (\"LTU\", \"GNQ\", \"AUT\"), id (495, 867, 398) | sqlite_sequence : seq (4079), name (\"city\") | country : surfacearea (513115.0, 406752.0, 56785.0), gnpold (743.0, 5279.0, 105116.0), headofstate (\"Josefa Iloilo\", \"Gustavo Noboa Bejarano\", \"Beatrix\"), population (6782000, 10236000, 17000), region (\"Nordic Countries\", \"Nordic Countries\", \"Australia and New Zealand\"), code2 (\"TN\", \"TK\", \"AD\"), governmentform (\"Territory of Australia\", \"Nonmetropolitan Territory of France\", \"Territorial Collectivity of France\"), code (\"ISL\", \"BTN\", \"PRY\"), gnp (447114.0, 63.2, 3512.0), localname (\"Malta\", \"Tonga\", \"Guin\u00c3\u00a9e\"), capital (2484, 2973, 1859), name (\"Antigua and Barbuda\", \"Niger\", \"Brunei\"), lifeexpectancy (72.7, 63.2, 50.5), indepyear (843, 1929, 1973), continent (\"South America\", \"Africa\", \"North America\") | country_surfacearea : surfacearea (513115.0, 406752.0, 56785.0), code (\"SUR\", \"MLI\", \"AUS\") | countrylanguage : percentage (23.2, 42.0, 78.1), isofficial (\"T\", \"F\"), countrycode (\"NCL\", \"FSM\", \"KEN\"), language (\"Waray-waray\", \"Berberi\", \"Herero\")", 
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"North America\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    3000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "surfacearea"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : population , id , name , countrycode , district  | sqlite_sequence : seq , name  | country : localname , capital , population , governmentform , region , name , gnpold , code , continent , indepyear , gnp , lifeexpectancy , headofstate , code2 , surfacearea  | country_population : population , code  | countrylanguage : isofficial , countrycode , percentage , language ", 
        "query2": "select sum(t2.population), avg(t1.surfacearea) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"North America\" and t1.surfacearea > 3000", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "surfacearea", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "total", 
            "population", 
            "and", 
            "average", 
            "area", 
            "of", 
            "countries", 
            "in", 
            "the", 
            "continent", 
            "of", 
            "North", 
            "America", 
            "whose", 
            "area", 
            "is", 
            "bigger", 
            "than", 
            "3000\uff1f"
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "North", 
            "America", 
            "''", 
            "AND", 
            "SurfaceArea", 
            ">", 
            "3000"
        ], 
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f", 
        "schema_with_content": "city : population (397618, 863930, 123782), id (810, 1980, 2916), name (\"Co\u00c3\u00admbra\", \"L\u00c3\u00bcbeck\", \"Qina\"), countrycode (\"TON\", \"GAB\", \"BHR\"), district (\"Irkutsk\", \"Karat\u00c5\u00a1ai-T\u00c5\u00a1erkessia\", \"Andhra Pradesh\") | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"K\u00c3\u00bdpros/Kibris\", \"Az\u00c3\u00a4rbaycan\", \"United Kingdom\"), capital (1791, 587, 2432), population (12000, 578000, 2670000), governmentform (\"Constitutional Monarchy\", \"Part of Denmark\", \"Republic\"), region (\"North America\", \"Central America\", \"Caribbean\"), name (\"Cambodia\", \"Saint Helena\", \"Zambia\"), gnpold (573.0, 45914.0, 15076.0), code (\"SGS\", \"IRQ\", \"KNA\"), continent (\"Africa\", \"Antarctica\", \"Antarctica\"), indepyear (1992, 1581, 1769), gnp (97.0, 4401.0, 612.0), lifeexpectancy (76.4, 66.4, 75.1), headofstate (\"Tr\u00c3\u00a2n Duc Luong\", \"Teburoro Tito\", \"Vernon Shaw\"), code2 (\"JM\", \"KP\", \"SA\"), surfacearea (1759540.0, 41284.0, 430.0) | country_population : population (12000, 578000, 2670000), code (\"DMA\", \"GNB\", \"BTN\") | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"SVN\", \"CYP\", \"SJM\"), percentage (65.3, 58.4, 15.2), language (\"Marendje\", \"Serbo-Croatian\", \"Ga-adangme\")", 
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"North America\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    3000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , name , id , countrycode , population  | sqlite_sequence : name , seq  | country : capital , headofstate , code , code2 , localname , lifeexpectancy , gnp , surfacearea , continent , name , indepyear , region , population , gnpold , governmentform \" | country_surfacearea : surfacearea , code  | countrylanguage : isofficial , language , countrycode , percentage ", 
        "query2": "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = \"North America\" and t2.surfacearea > 3000", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "surfacearea", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "total", 
            "population", 
            "and", 
            "average", 
            "surface", 
            "area", 
            "corresponding", 
            "to", 
            "countries", 
            "in", 
            "Noth", 
            "America", 
            "that", 
            "have", 
            "a", 
            "surface", 
            "area", 
            "greater", 
            "than", 
            "3000", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "North", 
            "America", 
            "''", 
            "AND", 
            "SurfaceArea", 
            ">", 
            "3000"
        ], 
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.", 
        "schema_with_content": "city : district (\"Ho Chi Minh City\", \"Cross River\", \"Taza-Al Hoceima-Taou\"), name (\"Jhansi\", \"Reggio nell\u00c2\u00b4 Emilia\", \"Daska\"), id (1334, 3848, 2594), countrycode (\"GIB\", \"SJM\", \"MEX\"), population (112455, 140459, 212977) | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2696, 3171, 1791), headofstate (\"Muammar al-Qadhafi\", \"Muammar al-Qadhafi\", \"Carl XVI Gustaf\"), code (\"SLV\", \"DNK\", \"TUV\"), code2 (\"KM\", \"CY\", \"IE\"), localname (\"Belgi\u00c3\u00ab/Belgique\", \"Hrvatska\", \"T\u00c3\u00bcrkiye\"), lifeexpectancy (63.2, 70.3, 71.4), gnp (13714.0, 903.0, 4127.0), surfacearea (13878.0, 13878.0, 2831.0), continent (\"Africa\", \"Europe\", \"North America\"), name (\"India\", \"R\u00c3\u00a9union\", \"Colombia\"), indepyear (1977, 1923, 1991), region (\"Middle East\", \"Eastern Asia\", \"Caribbean\"), population (380200, 38653600, 417000), gnpold (4542.0, 1102.0, 45914.0), governmentform (\"Socialistic Republic\", \"Nonmetropolitan Territory of New Zealand\", \"Constitutional Monarchy (Emirate)\") | country_surfacearea : surfacearea (13878.0, 13878.0, 2831.0), code (\"MHL\", \"GRC\", \"CYM\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Chiu chau\", \"Gisu\", \"Kachin\"), countrycode (\"KGZ\", \"SPM\", \"KEN\"), percentage (4.1, 2.5, 70.6)", 
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"North America\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    3000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "surfacearea"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : district , population , countrycode , id , name  | sqlite_sequence : name , seq  | country : code , population , headofstate , code2 , indepyear , capital , region , lifeexpectancy , continent , governmentform , surfacearea , gnp , localname , gnpold , name  | country_population : code , population  | countrylanguage : isofficial , language , countrycode , percentage ", 
        "query2": "select sum(t2.population), avg(t1.surfacearea) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"North America\" and t1.surfacearea > 3000", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "sum", 
            "(", 
            "population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "surfacearea", 
            ")", 
            "from", 
            "country", 
            "where", 
            "continent", 
            "=", 
            "value", 
            "and", 
            "surfacearea", 
            ">", 
            "value"
        ], 
        "question_toks": [
            "Give", 
            "the", 
            "total", 
            "population", 
            "and", 
            "average", 
            "surface", 
            "area", 
            "corresponding", 
            "to", 
            "countries", 
            "in", 
            "Noth", 
            "America", 
            "that", 
            "have", 
            "a", 
            "surface", 
            "area", 
            "greater", 
            "than", 
            "3000", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "sum", 
            "(", 
            "Population", 
            ")", 
            ",", 
            "avg", 
            "(", 
            "SurfaceArea", 
            ")", 
            "FROM", 
            "country", 
            "WHERE", 
            "Continent", 
            "=", 
            "``", 
            "North", 
            "America", 
            "''", 
            "AND", 
            "SurfaceArea", 
            ">", 
            "3000"
        ], 
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.", 
        "schema_with_content": "city : district (\"Asyut\", \"Santa Ana\", \"Adygea\"), population (104585, 94443, 91100), countrycode (\"BEN\", \"PAN\", \"NRU\"), id (960, 2395, 1782), name (\"Na\u00c3\u00a7ala-Porto\", \"Sabadell\", \"Tianmen\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"SVK\", \"ESH\", \"CXR\"), population (6485000, 9586000, 170115000), headofstate (\"Hans-Adam II\", \"Vicente Fox Quesada\", \"Robert Kot\u00c5\u00a1arjan\"), code2 (\"AQ\", \"BB\", \"CX\"), indepyear (1956, 1981, 1975), capital (2511, 3171, 4074), region (\"Australia and New Zealand\", \"South America\", \"Australia and New Zealand\"), lifeexpectancy (41.3, 79.5, 66.2), continent (\"Africa\", \"Antarctica\", \"North America\"), governmentform (\"Islamic Republic\", \"Socialistic State\", \"Occupied by Marocco\"), surfacearea (1904569.0, 323877.0, 549.0), gnp (510.0, 2841.0, 612.0), localname (\"Sierra Leone\", \"Angola\", \"United States\"), gnpold (3338.0, 215002.0, 2190.0), name (\"Wallis and Futuna\", \"Uruguay\", \"Liechtenstein\") | country_population : code (\"IRQ\", \"AUS\", \"MKD\"), population (6485000, 9586000, 170115000) | countrylanguage : isofficial (\"T\", \"F\"), language (\"Uzbek\", \"Northsotho\", \"Kiga\"), countrycode (\"JOR\", \"PRK\", \"IRL\"), percentage (32.5, 6.9, 81.2)", 
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        2
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            10, 
                            false
                        ], 
                        null
                    ], 
                    "\"North America\"", 
                    null
                ], 
                "and", 
                [
                    false, 
                    3, 
                    [
                        0, 
                        [
                            0, 
                            12, 
                            false
                        ], 
                        null
                    ], 
                    3000.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        4, 
                        [
                            0, 
                            [
                                0, 
                                14, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        5, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "country": "population"
        }, 
        "primary_key": {
            "country": "code"
        }
    }, 
    {
        "schema_without_content": "city : name , population , countrycode , district , id  | sqlite_sequence : name , seq  | country : code2 , capital , governmentform \", region , gnpold , gnp , continent , lifeexpectancy , code , localname , name , surfacearea , population , headofstate , indepyear  | countrylanguage : countrycode , isofficial , language , percentage  | countrylanguage_language : language , countrycode ", 
        "query2": "select t2.language, t1.countrycode, max(t1.percentage) from countrylanguage as t1 join countrylanguage_language as t2 on t1.countrycode = t2.countrycode group by t1.countrycode", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "language", 
            ",", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "language", 
            "spoken", 
            "by", 
            "the", 
            "largest", 
            "percentage", 
            "of", 
            "people", 
            "in", 
            "each", 
            "country", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "LANGUAGE", 
            ",", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ], 
        "question": "What is the language spoken by the largest percentage of people in each country?", 
        "schema_with_content": "city : name (\"Espoo\", \"Anshan\", \"Ji\u00c2\u00b4an\"), population (683794, 9696300, 97400), countrycode (\"GHA\", \"LCA\", \"WSM\"), district (\"al-Minya\", \"Irrawaddy [Ayeyarwad\", \"Cap-Vert\"), id (1291, 3748, 3425) | sqlite_sequence : name (\"city\"), seq (4079) | country : code2 (\"VU\", \"NF\", \"NG\"), capital (2295, 1464, 2453), governmentform (\"Islamic Emirate\", \"Federal Republic\", \"Monarchy (Emirate)\"), region (\"Central America\", \"Eastern Europe\", \"Northern Africa\"), gnpold (5867.0, 706.0, 119946.0), gnp (4401.0, 199.0, 318.0), continent (\"Africa\", \"South America\", \"Africa\"), lifeexpectancy (81.6, 76.2, 74.7), code (\"TZA\", \"NOR\", \"BGD\"), localname (\"Rossija\", \"To\u00c3\u00a7ikiston\", \"Sri Lanka/Ilankai\"), name (\"Dominica\", \"Turkey\", \"Slovakia\"), surfacearea (151.0, 549.0, 18.0), population (278357000, 79832000, 43000), headofstate (\"Carlo Azeglio Ciampi\", \"Kim Jong-il\", \"Salahuddin Abdul Aziz Shah Alhaj\"), indepyear (1978, 1867, 1906) | countrylanguage : countrycode (\"GTM\", \"ABW\", \"VUT\"), isofficial (\"T\", \"F\"), language (\"Quich\u00c3\u00a9\", \"Malagasy\", \"Waray-waray\"), percentage (53.1, 60.3, 75.2) | countrylanguage_language : language (\"Quich\u00c3\u00a9\", \"Malagasy\", \"Waray-waray\"), countrycode (\"OMN\", \"ISL\", \"FRO\")", 
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "countrylanguage": "language"
        }, 
        "primary_key": {
            "countrylanguage": "countrycode"
        }
    }, 
    {
        "schema_without_content": "city : countrycode , name , id , population , district  | sqlite_sequence : name , seq  | country : capital , gnp , code , indepyear , governmentform , surfacearea , localname , lifeexpectancy , code2 , headofstate , population , continent , gnpold , region , name  | countrylanguage : language , percentage , countrycode , isofficial  | countrylanguage_percentage : countrycode , percentage ", 
        "query2": "select t1.language, t1.countrycode, max(t2.percentage) from countrylanguage as t1 join countrylanguage_percentage as t2 on t1.countrycode = t2.countrycode group by t1.countrycode", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "language", 
            ",", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "is", 
            "the", 
            "language", 
            "spoken", 
            "by", 
            "the", 
            "largest", 
            "percentage", 
            "of", 
            "people", 
            "in", 
            "each", 
            "country", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "LANGUAGE", 
            ",", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ], 
        "question": "What is the language spoken by the largest percentage of people in each country?", 
        "schema_with_content": "city : countrycode (\"LIE\", \"MRT\", \"BEN\"), name (\"Prato\", \"Khanpur\", \"C\u00c3\u00a1diz\"), id (1351, 3146, 1882), population (786288, 1647720, 147738), district (\"Skikda\", \"Daloa\", \"al-Hasaka\") | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2257, 3250, 3320), gnp (6353.0, 870.0, 32852.0), code (\"KHM\", \"CRI\", \"NER\"), indepyear (1143, 1932, 1811), governmentform (\"Special Administrative Region of China\", \"Administrated by the UN\", \"Socialistic State\"), surfacearea (120538.0, 2149690.0, 1958201.0), localname (\"Guin\u00c3\u00a9e\", \"Cabo Verde\", \"Singapore/Singapura/Xinjiapo/Singapur\"), lifeexpectancy (74.8, 37.6, 79.4), code2 (\"OM\", \"MQ\", \"JM\"), headofstate (\"Abdelaziz Bouteflika\", \"Pierre Buyoya\", \"Heyd\u00c3\u00a4r \u00c3\u0084liyev\"), population (82164700, 2542000, 21000), continent (\"Antarctica\", \"South America\", \"Antarctica\"), gnpold (227757.0, 8110900.0, 2186.0), region (\"Baltic Countries\", \"Central America\", \"Polynesia\"), name (\"Antigua and Barbuda\", \"Chile\", \"Brazil\") | countrylanguage : language (\"Portuguese\", \"Adja\", \"Atayal\"), percentage (44.6, 0.2, 98.4), countrycode (\"MNP\", \"BGD\", \"BOL\"), isofficial (\"T\", \"F\") | countrylanguage_percentage : countrycode (\"ALB\", \"NLD\", \"BOL\"), percentage (44.6, 0.2, 98.4)", 
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "countrylanguage": "percentage"
        }, 
        "primary_key": {
            "countrylanguage": "countrycode"
        }
    }, 
    {
        "schema_without_content": "city : countrycode , id , district , population , name  | sqlite_sequence : seq , name  | country : name , headofstate , localname , gnp , surfacearea , gnpold , code , governmentform , population , capital , code2 , lifeexpectancy , region , continent , indepyear  | countrylanguage : percentage , isofficial , language , countrycode  | countrylanguage_language : language , countrycode ", 
        "query2": "select t2.language, t1.countrycode, max(t1.percentage) from countrylanguage as t1 join countrylanguage_language as t2 on t1.countrycode = t2.countrycode group by t1.countrycode", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "language", 
            ",", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "country", 
            "codes", 
            "of", 
            "the", 
            "different", 
            "countries", 
            ",", 
            "and", 
            "what", 
            "are", 
            "the", 
            "languages", 
            "spoken", 
            "by", 
            "the", 
            "greatest", 
            "percentage", 
            "of", 
            "people", 
            "for", 
            "each", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "LANGUAGE", 
            ",", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ], 
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", 
        "schema_with_content": "city : countrycode (\"LKA\", \"GIB\", \"ATG\"), id (3299, 3877, 2181), district (\"Capital Region\", \"Batna\", \"St George\"), population (120803, 301048, 152488), name (\"Betim\", \"Bucuresti\", \"Santiago de Chile\") | sqlite_sequence : seq (4079), name (\"city\") | country : name (\"Bhutan\", \"Qatar\", \"Liechtenstein\"), headofstate (\"Guido de Marco\", \"Letsie III\", \"Teodoro Obiang Nguema Mbasogo\"), localname (\"Canada\", \"Sri Lanka/Ilankai\", \"Suriname\"), gnp (82710.0, 630.0, 3527.0), surfacearea (236.0, 298.0, 1759540.0), gnpold (4361.0, 19300.0, 6884.0), code (\"GAB\", \"AFG\", \"FRO\"), governmentform (\"Nonmetropolitan Territory of France\", \"Nonmetropolitan Territory of New Zealand\", \"Autonomous Area\"), population (11201000, 7000, 3520000), capital (3048, 1522, 3171), code2 (\"CM\", \"ES\", \"EE\"), lifeexpectancy (68.4, 70.7, 45.3), region (\"Melanesia\", \"Australia and New Zealand\", \"Polynesia\"), continent (\"Asia\", \"Asia\", \"South America\"), indepyear (1958, 1960, 1980) | countrylanguage : percentage (7.0, 70.6, 44.6), isofficial (\"T\", \"F\"), language (\"Saraiki\", \"Mazandarani\", \"Yi\"), countrycode (\"GUM\", \"FIN\", \"VCT\") | countrylanguage_language : language (\"Saraiki\", \"Mazandarani\", \"Yi\"), countrycode (\"MYT\", \"CAN\", \"VAT\")", 
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "countrylanguage": "language"
        }, 
        "primary_key": {
            "countrylanguage": "countrycode"
        }
    }, 
    {
        "schema_without_content": "city : district , name , id , population , countrycode  | sqlite_sequence : seq , name  | country : population , code , gnp , governmentform , indepyear , name , continent , headofstate , region , localname , gnpold , code2 , surfacearea , lifeexpectancy , capital  | countrylanguage : isofficial , language , percentage , countrycode  | countrylanguage_percentage : percentage , countrycode ", 
        "query2": "select t1.language, t1.countrycode, max(t2.percentage) from countrylanguage as t1 join countrylanguage_percentage as t2 on t1.countrycode = t2.countrycode group by t1.countrycode", 
        "db_id": "world_1", 
        "query_toks_no_value": [
            "select", 
            "language", 
            ",", 
            "countrycode", 
            ",", 
            "max", 
            "(", 
            "percentage", 
            ")", 
            "from", 
            "countrylanguage", 
            "group", 
            "by", 
            "countrycode"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "country", 
            "codes", 
            "of", 
            "the", 
            "different", 
            "countries", 
            ",", 
            "and", 
            "what", 
            "are", 
            "the", 
            "languages", 
            "spoken", 
            "by", 
            "the", 
            "greatest", 
            "percentage", 
            "of", 
            "people", 
            "for", 
            "each", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "LANGUAGE", 
            ",", 
            "CountryCode", 
            ",", 
            "max", 
            "(", 
            "Percentage", 
            ")", 
            "FROM", 
            "countrylanguage", 
            "GROUP", 
            "BY", 
            "CountryCode"
        ], 
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", 
        "schema_with_content": "city : district (\"Alagoas\", \"Haskovo\", \"Riika\"), name (\"Habarovsk\", \"Cienfuegos\", \"Korhogo\"), id (208, 965, 1616), population (123366, 100194, 406296), countrycode (\"TUR\", \"TUN\", \"ARM\") | sqlite_sequence : seq (4079), name (\"city\") | country : population (638000, 10640000, 8190900), code (\"HUN\", \"NAM\", \"ESP\"), gnp (116729.0, 63.2, 5121.0), governmentform (\"US Territory\", \"Dependent Territory of the US\", \"People'sRepublic\"), indepyear (None, 843, -660), name (\"Chad\", \"Ecuador\", \"Spain\"), continent (\"Africa\", \"Africa\", \"Asia\"), headofstate (\"Abdullah II\", \"Azali Assoumani\", \"Hamad ibn Khalifa al-Thani\"), region (\"Micronesia/Caribbean\", \"Central America\", \"Central America\"), localname (\"Lubnan\", \"Uruguay\", \"Suriname\"), gnpold (5670.0, 12460.0, 917719.0), code2 (\"NL\", \"TP\", \"TF\"), surfacearea (622.0, 33851.0, 11295.0), lifeexpectancy (77.8, 78.4, 81.1), capital (2464, 553, 2509) | countrylanguage : isofficial (\"T\", \"F\"), language (\"Bemba\", \"Mpongwe\", \"Tripuri\"), percentage (19.5, 69.0, 43.9), countrycode (\"KGZ\", \"FSM\", \"ATG\") | countrylanguage_percentage : percentage (19.5, 69.0, 43.9), countrycode (\"PAN\", \"UGA\", \"PAK\")", 
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        3
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    23, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "countrylanguage": "percentage"
        }, 
        "primary_key": {
            "countrylanguage": "countrycode"
        }
    }, 
    {
        "schema_without_content": "highschooler : id , grade , name  | highschooler_grade : grade , id  | friend : friend_id , student_id  | likes : student_id , liked_id ", 
        "query2": "select t1.name, t2.grade from highschooler as t1 join highschooler_grade as t2 on t1.id = t2.id", 
        "db_id": "network_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "grade", 
            "from", 
            "highschooler"
        ], 
        "question_toks": [
            "Show", 
            "the", 
            "names", 
            "and", 
            "grades", 
            "of", 
            "each", 
            "high", 
            "schooler", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "grade", 
            "FROM", 
            "Highschooler"
        ], 
        "question": "Show the names and grades of each high schooler.", 
        "schema_with_content": "highschooler : id (1025, 1709, 1641), grade (12, 11, 9), name (\"Alexis\", \"Austin\", \"Tiffany\") | highschooler_grade : grade (12, 11, 9), id (1689, 1101, 1101) | friend : friend_id (1025, 1101, 1316), student_id (1689, 1782, 1101) | likes : student_id (1316, 1934, 1641), liked_id (1501, 1689, 1468)", 
        "orig_query": "select name, grade from highschooler", 
        "query1": "select name, grade from highschooler", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "highschooler": "grade"
        }, 
        "primary_key": {
            "highschooler": "id"
        }
    }, 
    {
        "schema_without_content": "highschooler : name , id , grade  | highschooler_name : name , id  | friend : friend_id , student_id  | likes : student_id , liked_id ", 
        "query2": "select t2.name, t1.grade from highschooler as t1 join highschooler_name as t2 on t1.id = t2.id", 
        "db_id": "network_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "grade", 
            "from", 
            "highschooler"
        ], 
        "question_toks": [
            "Show", 
            "the", 
            "names", 
            "and", 
            "grades", 
            "of", 
            "each", 
            "high", 
            "schooler", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "grade", 
            "FROM", 
            "Highschooler"
        ], 
        "question": "Show the names and grades of each high schooler.", 
        "schema_with_content": "highschooler : name (\"Kyle\", \"Jessica\", \"Brittany\"), id (1304, 1468, 1661), grade (9, 11, 10) | highschooler_name : name (\"Kyle\", \"Jessica\", \"Brittany\"), id (1468, 1316, 1661) | friend : friend_id (1709, 1381, 1782), student_id (1381, 1510, 1689) | likes : student_id (1911, 1709, 1782), liked_id (1689, 1304, 1934)", 
        "orig_query": "select name, grade from highschooler", 
        "query1": "select name, grade from highschooler", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "highschooler": "name"
        }, 
        "primary_key": {
            "highschooler": "id"
        }
    }, 
    {
        "schema_without_content": "highschooler : grade , name , id  | highschooler_grade : id , grade  | friend : friend_id , student_id  | likes : student_id , liked_id ", 
        "query2": "select t1.name, t2.grade from highschooler as t1 join highschooler_grade as t2 on t1.id = t2.id", 
        "db_id": "network_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "grade", 
            "from", 
            "highschooler"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "grades", 
            "for", 
            "each", 
            "high", 
            "schooler", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "grade", 
            "FROM", 
            "Highschooler"
        ], 
        "question": "What are the names and grades for each high schooler?", 
        "schema_with_content": "highschooler : grade (10, 11, 12), name (\"Logan\", \"Andrew\", \"Logan\"), id (1501, 1101, 1934) | highschooler_grade : id (1247, 1911, 1247), grade (10, 11, 12) | friend : friend_id (1641, 1934, 1304), student_id (1911, 1689, 1782) | likes : student_id (1934, 1641, 1247), liked_id (1247, 1304, 1501)", 
        "orig_query": "select name, grade from highschooler", 
        "query1": "select name, grade from highschooler", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "highschooler": "grade"
        }, 
        "primary_key": {
            "highschooler": "id"
        }
    }, 
    {
        "schema_without_content": "highschooler : name , id , grade  | highschooler_name : id , name  | friend : friend_id , student_id  | likes : student_id , liked_id ", 
        "query2": "select t2.name, t1.grade from highschooler as t1 join highschooler_name as t2 on t1.id = t2.id", 
        "db_id": "network_1", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "grade", 
            "from", 
            "highschooler"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "names", 
            "and", 
            "grades", 
            "for", 
            "each", 
            "high", 
            "schooler", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "grade", 
            "FROM", 
            "Highschooler"
        ], 
        "question": "What are the names and grades for each high schooler?", 
        "schema_with_content": "highschooler : name (\"Haley\", \"Andrew\", \"Haley\"), id (1641, 1510, 1911), grade (11, 11, 11) | highschooler_name : id (1468, 1025, 1661), name (\"Haley\", \"Andrew\", \"Haley\") | friend : friend_id (1934, 1709, 1101), student_id (1468, 1934, 1689) | likes : student_id (1501, 1782, 1025), liked_id (1468, 1468, 1468)", 
        "orig_query": "select name, grade from highschooler", 
        "query1": "select name, grade from highschooler", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                2, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "highschooler": "name"
        }, 
        "primary_key": {
            "highschooler": "id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : home_phone 997-7627\", \"997-7627\", city , last_name , zip_code , email_address , cell_number 271-6744x4507\", \"341.667.8085\", \"+004323592985\", street , first_name , owner_id , state  | dogs : date_arrived , date_adopted , gender , owner_id , weight , date_departed , date_of_birth , name , size_code , abandoned_yn , age , dog_id , breed_code  | dogs_date_departed : date_departed , dog_id  | professionals : zip_code , email_address , state , home_phone 2898266914\", first_name , cell_number 939-2435x80863\", street , city , last_name , role_code , professional_id  | treatments : dog_id , cost_of_treatment , date_of_treatment , treatment_id , professional_id , treatment_type_code ", 
        "query2": "select t1.date_arrived, t2.date_departed from dogs as t1 join dogs_date_departed as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "arriving", 
            "date", 
            "and", 
            "the", 
            "departing", 
            "date", 
            "of", 
            "all", 
            "the", 
            "dogs", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "FROM", 
            "Dogs"
        ], 
        "question": "What are the arriving date and the departing date of all the dogs?", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : home_phone (\"085.557.0379x84348\", \"(058)997-7627\", \"(058)997-7627\"), city (\"East Maribelbury\", \"Brakusfurt\", \"East Maribelbury\"), last_name (\"Nicolas\", \"Hauck\", \"Fisher\"), zip_code (\"36871\", \"02647\", \"86010\"), email_address (\"hudson.favian@example.com\", \"christy49@example.org\", \"wpfeffer@example.net\"), cell_number (\"(783)271-6744x4507\", \"341.667.8085\", \"+00(2)4323592985\"), street (\"15828 Spencer Extensions\", \"0647 Hintz Village Apt. 024\", \"60352 Kayleigh Crossing Suite 700\"), first_name (\"Lorenz\", \"Orlando\", \"Rachelle\"), owner_id (12, 1, 1), state (\"Indiana\", \"Indiana\", \"Arkansas\") | dogs : date_arrived (\"2017-12-29 06:08:26\", \"2017-05-06 08:03:52\", \"2017-10-24 04:45:13\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-25 08:12:51\", \"2018-03-07 21:45:43\"), gender (\"1\", \"0\"), owner_id (8, 12, 2), weight (\"9.8\", \"3.52\", \"7.57\"), date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 04:50:22\", \"2018-03-25 05:07:47\"), date_of_birth (\"2013-02-13 05:15:21\", \"2012-01-27 05:11:53\", \"2015-02-26 21:31:22\"), name (\"Troy\", \"Kacey\", \"Merritt\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), age (\"5\", \"1\", \"2\"), dog_id (10, 7, 4), breed_code (\"ESK\", \"BUL\", \"HUS\") | dogs_date_departed : date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 04:50:22\", \"2018-03-25 05:07:47\"), dog_id (9, 5, 3) | professionals : zip_code (\"02281\", \"77129\", \"77129\"), email_address (\"cole.margarita@example.org\", \"jeichmann@example.com\", \"jacynthe.mclaughlin@example.net\"), state (\"Alabama\", \"NewMexico\", \"Connecticut\"), home_phone (\"320-508-6023\", \"971.048.3763x9404\", \"+71(6)2898266914\"), first_name (\"Taryn\", \"Jayson\", \"Ruben\"), cell_number (\"461-801-2600\", \"1-258-285-4707x8020\", \"(275)939-2435x80863\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), city (\"North Odellfurt\", \"North Adelberttown\", \"North Odellfurt\"), last_name (\"Hyatt\", \"Ullrich\", \"Pouros\"), role_code (\"Employee\", \"Veterenarian\"), professional_id (10, 8, 13) | treatments : dog_id (13, 12, 2), cost_of_treatment (852, 266, 429), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-02-28 17:09:43\", \"2018-03-15 20:25:34\"), treatment_id (9, 10, 12), professional_id (5, 5, 5), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")", 
        "orig_query": "select date_arrived, date_departed from dogs", 
        "query1": "select date_arrived, date_departed from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                30, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                32, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "date_departed"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , street , last_name , home_phone , city , first_name , zip_code , cell_number , owner_id , state  | dogs : date_adopted , size_code , dog_id , abandoned_yn , breed_code , owner_id , date_of_birth , gender , date_arrived , age , date_departed , name , weight  | dogs_date_arrived : date_arrived , dog_id  | professionals : email_address , state , role_code , last_name , city , home_phone 0259033559\", \"+020259033559\", \"1-609-566-2752x25197\", zip_code , street , first_name , cell_number , professional_id  | treatments : treatment_id , cost_of_treatment , date_of_treatment , dog_id , professional_id , treatment_type_code ", 
        "query2": "select t2.date_arrived, t1.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "arriving", 
            "date", 
            "and", 
            "the", 
            "departing", 
            "date", 
            "of", 
            "all", 
            "the", 
            "dogs", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "FROM", 
            "Dogs"
        ], 
        "question": "What are the arriving date and the departing date of all the dogs?", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"ymaggio@example.com\", \"ymaggio@example.com\", \"ymaggio@example.com\"), street (\"1204 Mae Highway Apt. 107\", \"59509 Mellie Mountain\", \"57382 Yost Ridges\"), last_name (\"Funk\", \"Haley\", \"Haley\"), home_phone (\"363.948.1090\", \"1-682-845-0116x63235\", \"01802479758\"), city (\"South Daisyfurt\", \"South Afton\", \"New Margaretteborough\"), first_name (\"Rolando\", \"Cindy\", \"Emelie\"), zip_code (\"61019\", \"00589\", \"22693\"), cell_number (\"478.978.0729\", \"633.455.3045x85484\", \"559.874.3011x989\"), owner_id (12, 5, 15), state (\"Washington\", \"Wisconsin\", \"NorthDakota\") | dogs : date_adopted (\"2018-03-07 21:45:43\", \"2018-03-23 16:02:04\", \"2018-03-25 08:12:51\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (2, 8, 4), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (14, 13, 1), date_of_birth (\"2015-02-26 21:31:22\", \"2009-04-12 06:02:48\", \"2017-09-19 05:39:09\"), gender (\"1\", \"0\"), date_arrived (\"2017-12-22 05:02:02\", \"2017-04-15 09:25:31\", \"2018-01-17 11:44:16\"), age (\"2\", \"6\", \"9\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 06:46:07\", \"2018-03-24 19:36:59\"), name (\"Troy\", \"Merritt\", \"Kacey\"), weight (\"6.92\", \"1.39\", \"5.16\") | dogs_date_arrived : date_arrived (\"2017-12-22 05:02:02\", \"2017-04-15 09:25:31\", \"2018-01-17 11:44:16\"), dog_id (13, 5, 8) | professionals : email_address (\"marquardt.furman@example.org\", \"jacynthe.mclaughlin@example.net\", \"uboehm@example.org\"), state (\"NewMexico\", \"NewMexico\", \"Utah\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Hayes\", \"Braun\", \"Hayes\"), city (\"North Odellfurt\", \"New Laurytown\", \"Kirastad\"), home_phone (\"+02(1)0259033559\", \"+02(1)0259033559\", \"1-609-566-2752x25197\"), zip_code (\"77129\", \"67980\", \"02281\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), first_name (\"Karley\", \"Taryn\", \"Brady\"), cell_number (\"962-983-8109x3509\", \"00230569697\", \"011.193.9081x3186\"), professional_id (8, 15, 13) | treatments : treatment_id (7, 4, 12), cost_of_treatment (681, 147, 147), date_of_treatment (\"2018-03-11 04:23:15\", \"2018-03-15 20:25:34\", \"2018-02-28 17:09:43\"), dog_id (4, 14, 4), professional_id (14, 8, 8), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")", 
        "orig_query": "select date_arrived, date_departed from dogs", 
        "query1": "select date_arrived, date_departed from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                30, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                32, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "date_arrived"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : first_name , zip_code , last_name , street , state , email_address , owner_id , home_phone 747-5094x8134\", city , cell_number 9217952551\", \"121.381.3316x6535\" | dogs : date_arrived , date_adopted , weight , age , size_code , date_departed , abandoned_yn , owner_id , date_of_birth , gender , name , dog_id , breed_code  | dogs_date_departed : dog_id , date_departed  | professionals : street , last_name , home_phone , cell_number , email_address , professional_id , zip_code , city , first_name , role_code , state  | treatments : treatment_id , dog_id , date_of_treatment , treatment_type_code , professional_id , cost_of_treatment ", 
        "query2": "select t1.date_arrived, t2.date_departed from dogs as t1 join dogs_date_departed as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "arrival", 
            "date", 
            "and", 
            "the", 
            "departure", 
            "date", 
            "for", 
            "all", 
            "the", 
            "dogs", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "FROM", 
            "Dogs"
        ], 
        "question": "List the arrival date and the departure date for all the dogs.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : first_name (\"Emelie\", \"Adelle\", \"Heather\"), zip_code (\"86010\", \"92406\", \"35747\"), last_name (\"Fisher\", \"Funk\", \"Ondricka\"), street (\"68118 Daniel Row\", \"1858 Jan Park\", \"1858 Jan Park\"), state (\"Indiana\", \"Washington\", \"Washington\"), email_address (\"ybergstrom@example.com\", \"pearlie18@example.com\", \"margaretta.runte@example.net\"), owner_id (10, 5, 11), home_phone (\"916.976.9480x13851\", \"318-052-6573\", \"(094)747-5094x8134\"), city (\"West Leonard\", \"Lake Carleyborough\", \"Brakusfurt\"), cell_number (\"762.589.6117x1328\", \"+70(4)9217952551\", \"121.381.3316x6535\") | dogs : date_arrived (\"2018-01-17 11:44:16\", \"2017-10-25 00:55:34\", \"2017-10-16 20:06:21\"), date_adopted (\"2018-03-23 16:02:04\", \"2018-03-10 15:06:43\", \"2018-03-08 15:03:00\"), weight (\"1.72\", \"3.52\", \"6.92\"), age (\"9\", \"4\", \"1\"), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 19:12:22\", \"2018-03-25 15:05:16\"), abandoned_yn (\"1\", \"0\"), owner_id (2, 8, 10), date_of_birth (\"2015-02-26 21:31:22\", \"2013-02-20 14:50:56\", \"2008-05-30 12:51:34\"), gender (\"1\", \"0\"), name (\"Narciso\", \"Troy\", \"George\"), dog_id (2, 14, 15), breed_code (\"ESK\", \"BUL\", \"HUS\") | dogs_date_departed : dog_id (14, 2, 14), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 19:12:22\", \"2018-03-25 15:05:16\") | professionals : street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), last_name (\"Watsica\", \"Kshlerin\", \"Watsica\"), home_phone (\"346.594.3739\", \"022.529.0550x1319\", \"1-138-287-3775\"), cell_number (\"011.193.9081x3186\", \"880-659-7577x736\", \"328.842.3792\"), email_address (\"uboehm@example.org\", \"schneider.kathryne@example.org\", \"mekhi.little@example.org\"), professional_id (13, 11, 1), zip_code (\"43129\", \"84515\", \"02281\"), city (\"North Adelberttown\", \"McLaughlinfort\", \"New Maryjane\"), first_name (\"Karley\", \"Ruben\", \"Olaf\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Hawaii\", \"Utah\", \"Montana\") | treatments : treatment_id (15, 15, 4), dog_id (12, 10, 7), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (14, 10, 6), cost_of_treatment (668, 514, 668)", 
        "orig_query": "select date_arrived, date_departed from dogs", 
        "query1": "select date_arrived, date_departed from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                30, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                32, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "date_departed"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number 271-6744x4507\", \"559.874.3011x989\", first_name , street , city , last_name , state , zip_code , home_phone 747-5094x8134\", \"034-1670\", email_address , owner_id  | dogs : dog_id , age , size_code , owner_id , date_departed , abandoned_yn , date_of_birth , date_adopted , breed_code , name , weight , date_arrived , gender  | dogs_date_arrived : date_arrived , dog_id  | professionals : home_phone , city , state , cell_number 939-2435x80863\", \"1-181-670-9466\", \"011.193.9081x3186\", role_code , email_address , street , last_name , zip_code , professional_id , first_name  | treatments : professional_id , dog_id , treatment_type_code , cost_of_treatment , treatment_id , date_of_treatment ", 
        "query2": "select t2.date_arrived, t1.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "arrival", 
            "date", 
            "and", 
            "the", 
            "departure", 
            "date", 
            "for", 
            "all", 
            "the", 
            "dogs", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "date_arrived", 
            ",", 
            "date_departed", 
            "FROM", 
            "Dogs"
        ], 
        "question": "List the arrival date and the departure date for all the dogs.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"478.978.0729\", \"(783)271-6744x4507\", \"559.874.3011x989\"), first_name (\"Rolando\", \"Cindy\", \"Orlando\"), street (\"2635 Caitlyn Plains\", \"57382 Yost Ridges\", \"2417 Keara Stravenue Apt. 146\"), city (\"South Afton\", \"West Leonard\", \"Brakusfurt\"), last_name (\"Hamill\", \"Hamill\", \"DuBuque\"), state (\"SouthDakota\", \"Vermont\", \"Vermont\"), zip_code (\"45244\", \"11990\", \"35747\"), home_phone (\"363.948.1090\", \"(094)747-5094x8134\", \"(544)034-1670\"), email_address (\"pearlie18@example.com\", \"ybergstrom@example.com\", \"ymaggio@example.com\"), owner_id (10, 6, 10) | dogs : dog_id (10, 9, 1), age (\"9\", \"3\", \"5\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (1, 6, 13), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 04:50:22\", \"2018-03-25 13:07:04\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\", \"2018-03-17 04:05:12\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-13 12:47:15\", \"2018-02-27 00:27:57\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"George\", \"Kacey\", \"Evangeline\"), weight (\"8.95\", \"9.48\", \"2.18\"), date_arrived (\"2017-12-29 06:08:26\", \"2018-01-02 03:15:29\", \"2017-12-22 05:02:02\"), gender (\"1\", \"0\") | dogs_date_arrived : date_arrived (\"2017-12-29 06:08:26\", \"2018-01-02 03:15:29\", \"2017-12-22 05:02:02\"), dog_id (3, 11, 3) | professionals : home_phone (\"971.048.3763x9404\", \"971.048.3763x9404\", \"312.216.3352\"), city (\"West Heidi\", \"South Rockyport\", \"Raynorfort\"), state (\"Wisconsin\", \"NewMexico\", \"Wisconsin\"), cell_number (\"(275)939-2435x80863\", \"1-181-670-9466\", \"011.193.9081x3186\"), role_code (\"Employee\", \"Veterenarian\"), email_address (\"lambert62@example.org\", \"lourdes.lowe@example.net\", \"uboehm@example.org\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), last_name (\"Tillman\", \"Christiansen\", \"Pouros\"), zip_code (\"80775\", \"02281\", \"98844\"), professional_id (3, 3, 7), first_name (\"Sigurd\", \"Sigurd\", \"Karley\") | treatments : professional_id (7, 8, 7), dog_id (4, 10, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (668, 313, 349), treatment_id (4, 2, 10), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-10 11:45:58\", \"2018-02-26 09:08:53\")", 
        "orig_query": "select date_arrived, date_departed from dogs", 
        "query1": "select date_arrived, date_departed from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                30, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                32, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "date_arrived"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , cell_number 271-6744x4507\", \"271-6744x4507\", home_phone 563-0260x454\", \"318-052-6573\", last_name , zip_code , first_name , email_address , owner_id , city , street  | dogs : name , gender , weight , dog_id , date_of_birth , owner_id , age , size_code , breed_code , date_arrived , date_adopted , date_departed , abandoned_yn  | professionals : last_name , professional_id , role_code , state , home_phone , email_address , zip_code , street , cell_number , city , first_name  | professionals_role_code : professional_id , role_code  | treatments : date_of_treatment , cost_of_treatment , treatment_type_code , treatment_id , dog_id , professional_id ", 
        "query2": "select t2.role_code, t1.street, t1.city, t1.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "professionals", 
            "live", 
            "in", 
            "a", 
            "city", 
            "containing", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "?", 
            "List", 
            "his", 
            "or", 
            "her", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Arkansas\", \"NorthDakota\", \"Pennsylvania\"), cell_number (\"1-626-264-7659x1697\", \"(783)271-6744x4507\", \"(783)271-6744x4507\"), home_phone (\"1-682-845-0116x63235\", \"(799)563-0260x454\", \"318-052-6573\"), last_name (\"Feil\", \"Rippin\", \"Stoltenberg\"), zip_code (\"93165\", \"86010\", \"22731\"), first_name (\"Johann\", \"Kade\", \"Cindy\"), email_address (\"edythe62@example.org\", \"angeline99@example.com\", \"edythe62@example.org\"), owner_id (6, 7, 8), city (\"Lake Jennyferfort\", \"South Daisyfurt\", \"Barrettburgh\"), street (\"15828 Spencer Extensions\", \"0647 Hintz Village Apt. 024\", \"692 Jaskolski Forges\") | dogs : name (\"George\", \"Houston\", \"Betty\"), gender (\"1\", \"0\"), weight (\"4.01\", \"2.18\", \"6.92\"), dog_id (1, 10, 2), date_of_birth (\"2018-03-17 04:05:12\", \"2013-02-20 14:50:56\", \"2012-07-11 17:15:10\"), owner_id (7, 2, 7), age (\"1\", \"2\", \"9\"), size_code (\"LGE\", \"MED\", \"SML\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-04-15 09:25:31\", \"2017-07-25 15:19:07\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-25 08:12:51\", \"2018-03-10 15:06:43\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-24 19:12:22\", \"2018-03-25 02:11:32\"), abandoned_yn (\"1\", \"0\") | professionals : last_name (\"Hyatt\", \"Walter\", \"Jacobs\"), professional_id (1, 5, 15), role_code (\"Employee\", \"Veterenarian\"), state (\"Utah\", \"NorthCarolina\", \"Utah\"), home_phone (\"1-609-566-2752x25197\", \"1-609-566-2752x25197\", \"320-508-6023\"), email_address (\"goyette.roosevelt@example.net\", \"deanna.schuster@example.com\", \"mekhi.little@example.org\"), zip_code (\"67980\", \"67980\", \"34041\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), cell_number (\"609-405-2990\", \"889-940-2676\", \"609-405-2990\"), city (\"Raynorfort\", \"McLaughlinfort\", \"North Adelberttown\"), first_name (\"Karley\", \"Winfield\", \"Winfield\") | professionals_role_code : professional_id (14, 5, 1), role_code (\"Employee\", \"Veterenarian\") | treatments : date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-04 20:33:43\", \"2018-03-11 04:23:15\"), cost_of_treatment (139, 656, 407), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (5, 15, 2), dog_id (4, 2, 2), professional_id (4, 8, 5)", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "role_code"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , zip_code , city , first_name , email_address , last_name , owner_id , home_phone 034-1670\", \"318-052-6573\", street , cell_number 768-5439x484\", \"+004323592985\", \"121.381.3316x6535\" | dogs : owner_id , age , name , date_arrived , date_departed , abandoned_yn , weight , date_adopted , gender , breed_code , dog_id , date_of_birth , size_code  | professionals : street , professional_id , last_name , zip_code , role_code , state , cell_number 908-7311x065\", \"011.193.9081x3186\", home_phone 0259033559\", \"+431132733868\", \"312.216.3352\", email_address , city , first_name  | professionals_state : professional_id , state  | treatments : treatment_id , date_of_treatment , treatment_type_code , dog_id , cost_of_treatment , professional_id ", 
        "query2": "select t1.role_code, t1.street, t1.city, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "professionals", 
            "live", 
            "in", 
            "a", 
            "city", 
            "containing", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "?", 
            "List", 
            "his", 
            "or", 
            "her", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Arkansas\", \"Florida\", \"Washington\"), zip_code (\"78297\", \"92406\", \"93165\"), city (\"East Hillardberg\", \"Lake Tia\", \"Lake Tia\"), first_name (\"Kade\", \"Nora\", \"Cindy\"), email_address (\"pearlie18@example.com\", \"edythe62@example.org\", \"marks.gail@example.org\"), last_name (\"Nicolas\", \"Ondricka\", \"Stoltenberg\"), owner_id (12, 3, 12), home_phone (\"1-682-845-0116x63235\", \"(544)034-1670\", \"318-052-6573\"), street (\"60352 Kayleigh Crossing Suite 700\", \"2417 Keara Stravenue Apt. 146\", \"68118 Daniel Row\"), cell_number (\"(722)768-5439x484\", \"+00(2)4323592985\", \"121.381.3316x6535\") | dogs : owner_id (11, 12, 3), age (\"9\", \"3\", \"4\"), name (\"Evangeline\", \"Merritt\", \"George\"), date_arrived (\"2017-06-25 10:14:05\", \"2017-10-25 00:55:34\", \"2018-01-17 11:44:16\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 13:07:04\", \"2018-03-24 19:36:59\"), abandoned_yn (\"1\", \"0\"), weight (\"5.16\", \"4.01\", \"6.92\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-23 16:02:04\", \"2018-03-25 08:12:51\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (3, 1, 9), date_of_birth (\"2012-07-11 17:15:10\", \"2017-09-19 05:39:09\", \"2008-05-19 15:54:49\"), size_code (\"LGE\", \"MED\", \"SML\") | professionals : street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), professional_id (14, 6, 1), last_name (\"Kshlerin\", \"Jacobs\", \"Walter\"), zip_code (\"98844\", \"02281\", \"02281\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Alabama\", \"Hawaii\", \"Alabama\"), cell_number (\"1-181-670-9466\", \"(369)908-7311x065\", \"011.193.9081x3186\"), home_phone (\"+02(1)0259033559\", \"+43(5)1132733868\", \"312.216.3352\"), email_address (\"jeichmann@example.com\", \"lucile.shanahan@example.org\", \"jacynthe.mclaughlin@example.net\"), city (\"Borisside\", \"McLaughlinfort\", \"West Heidi\"), first_name (\"Brady\", \"Sigurd\", \"Monte\") | professionals_state : professional_id (8, 8, 6), state (\"Alabama\", \"Hawaii\", \"Alabama\") | treatments : treatment_id (3, 15, 15), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-16 10:27:36\", \"2018-03-04 20:33:43\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (10, 4, 12), cost_of_treatment (428, 514, 668), professional_id (5, 5, 10)", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "state"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , email_address , first_name , cell_number , zip_code , state , last_name , owner_id , street , home_phone 747-5094x8134\", \"893-862-5295x61709\", \"1-332-849-1908\" | dogs : date_adopted , gender , date_departed , age , owner_id , date_of_birth , abandoned_yn , breed_code , date_arrived , size_code , dog_id , weight , name  | professionals : zip_code , email_address , role_code , street , state , professional_id , home_phone 0259033559\", \"+020259033559\", first_name , cell_number , city , last_name  | professionals_city : city , professional_id  | treatments : treatment_type_code , dog_id , date_of_treatment , professional_id , cost_of_treatment , treatment_id ", 
        "query2": "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "professionals", 
            "live", 
            "in", 
            "a", 
            "city", 
            "containing", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "?", 
            "List", 
            "his", 
            "or", 
            "her", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"South Daisyfurt\", \"Beerton\", \"Lake Carleyborough\"), email_address (\"lynn81@example.org\", \"christy49@example.org\", \"edythe62@example.org\"), first_name (\"Lorenz\", \"Gay\", \"Tre\"), cell_number (\"121.381.3316x6535\", \"1-626-264-7659x1697\", \"341.667.8085\"), zip_code (\"45244\", \"35747\", \"93165\"), state (\"Arkansas\", \"Wisconsin\", \"Vermont\"), last_name (\"DuBuque\", \"Feil\", \"Mertz\"), owner_id (4, 2, 5), street (\"15828 Spencer Extensions\", \"692 Jaskolski Forges\", \"57382 Yost Ridges\"), home_phone (\"(094)747-5094x8134\", \"893-862-5295x61709\", \"1-332-849-1908\") | dogs : date_adopted (\"2018-02-27 00:27:57\", \"2018-03-14 08:05:18\", \"2018-03-21 10:41:18\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 15:05:16\", \"2018-03-25 10:25:46\"), age (\"2\", \"1\", \"2\"), owner_id (10, 8, 8), date_of_birth (\"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\", \"2012-07-11 17:15:10\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-12-22 05:02:02\", \"2018-01-02 03:15:29\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (8, 5, 12), weight (\"6.92\", \"1.72\", \"5.16\"), name (\"Kacey\", \"Narciso\", \"Bessie\") | professionals : zip_code (\"54312\", \"54312\", \"54312\"), email_address (\"deanna.schuster@example.com\", \"goyette.roosevelt@example.net\", \"goyette.roosevelt@example.net\"), role_code (\"Employee\", \"Veterenarian\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), state (\"NorthCarolina\", \"Connecticut\", \"NewMexico\"), professional_id (7, 12, 11), home_phone (\"312.216.3352\", \"+02(1)0259033559\", \"+02(1)0259033559\"), first_name (\"Sigurd\", \"Karley\", \"Taryn\"), cell_number (\"00230569697\", \"011.193.9081x3186\", \"499-434-0215x1628\"), city (\"Jaceton\", \"McLaughlinfort\", \"North Adelberttown\"), last_name (\"O'Reilly\", \"O'Reilly\", \"O'Reilly\") | professionals_city : city (\"Jaceton\", \"McLaughlinfort\", \"North Adelberttown\"), professional_id (9, 14, 4) | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (4, 1, 13), date_of_treatment (\"2018-03-01 04:14:46\", \"2018-02-26 09:08:53\", \"2018-03-15 20:25:34\"), professional_id (9, 7, 4), cost_of_treatment (349, 567, 852), treatment_id (14, 4, 11)", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "city"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : email_address , owner_id , city , zip_code , first_name , state , last_name , street , home_phone 034-1670\", cell_number 271-6744x4507\", \"768-5439x484\", \"478.978.0729\" | dogs : age , date_adopted , weight , size_code , dog_id , gender , date_of_birth , breed_code , abandoned_yn , date_departed , name , date_arrived , owner_id  | professionals : state , zip_code , professional_id , home_phone , city , street , first_name , email_address , role_code , last_name , cell_number  | professionals_street : street , professional_id  | treatments : professional_id , treatment_id , date_of_treatment , cost_of_treatment , dog_id , treatment_type_code ", 
        "query2": "select t1.role_code, t2.street, t1.city, t1.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "professionals", 
            "live", 
            "in", 
            "a", 
            "city", 
            "containing", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "?", 
            "List", 
            "his", 
            "or", 
            "her", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : email_address (\"kturner@example.net\", \"zboncak.madonna@example.net\", \"zboncak.madonna@example.net\"), owner_id (5, 11, 14), city (\"Barrettburgh\", \"East Maribelbury\", \"Lake Jennyferfort\"), zip_code (\"11990\", \"87304\", \"45244\"), first_name (\"Orlando\", \"Johann\", \"Gay\"), state (\"NorthDakota\", \"NewYork\", \"Indiana\"), last_name (\"DuBuque\", \"Fisher\", \"Stoltenberg\"), street (\"692 Jaskolski Forges\", \"692 Jaskolski Forges\", \"6950 Katherine Forges Apt. 630\"), home_phone (\"066.264.7885\", \"1-346-655-5842x768\", \"(544)034-1670\"), cell_number (\"(783)271-6744x4507\", \"(722)768-5439x484\", \"478.978.0729\") | dogs : age (\"9\", \"4\", \"8\"), date_adopted (\"2018-03-08 15:03:00\", \"2018-03-08 15:03:00\", \"2018-03-06 16:32:11\"), weight (\"8.96\", \"9.48\", \"2.18\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (3, 9, 11), gender (\"1\", \"0\"), date_of_birth (\"2008-05-30 12:51:34\", \"2008-05-19 15:54:49\", \"2008-05-30 12:51:34\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 02:47:40\", \"2018-03-25 06:46:07\", \"2018-03-25 06:58:44\"), name (\"Narciso\", \"Lyric\", \"Jeffrey\"), date_arrived (\"2017-10-16 20:06:21\", \"2018-01-17 11:44:16\", \"2017-09-08 20:10:13\"), owner_id (5, 2, 11) | professionals : state (\"Mississippi\", \"NewMexico\", \"California\"), zip_code (\"84515\", \"17902\", \"41215\"), professional_id (9, 7, 12), home_phone (\"971.048.3763x9404\", \"1-138-287-3775\", \"325-155-0801x7005\"), city (\"Raynorfort\", \"New Maryjane\", \"Baileymouth\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), first_name (\"Velva\", \"Vernice\", \"Sigurd\"), email_address (\"lambert62@example.org\", \"marquardt.furman@example.org\", \"lucile.shanahan@example.org\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"O'Reilly\", \"Watsica\", \"Kshlerin\"), cell_number (\"139-321-7313\", \"139-321-7313\", \"1-258-285-4707x8020\") | professionals_street : street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), professional_id (7, 2, 5) | treatments : professional_id (8, 9, 8), treatment_id (12, 8, 8), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-23 13:52:10\", \"2018-03-11 04:23:15\"), cost_of_treatment (428, 147, 428), dog_id (13, 1, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "street"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : state , zip_code , last_name , cell_number , street , email_address , home_phone 997-7627\", \"130-796-4589x05454\", \"01802479758\", first_name , city , owner_id  | dogs : date_arrived , date_adopted , name , date_departed , gender , date_of_birth , owner_id , abandoned_yn , size_code , breed_code , dog_id , age , weight  | professionals : zip_code , role_code , street , city , last_name , home_phone 1132733868\", state , cell_number , email_address , first_name , professional_id  | professionals_role_code : professional_id , role_code  | treatments : treatment_type_code , dog_id , date_of_treatment , professional_id , treatment_id , cost_of_treatment ", 
        "query2": "select t2.role_code, t1.street, t1.city, t1.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "of", 
            "the", 
            "professionals", 
            "living", 
            "in", 
            "a", 
            "city", 
            "that", 
            "contains", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : state (\"NorthDakota\", \"Arkansas\", \"Indiana\"), zip_code (\"36871\", \"25609\", \"22731\"), last_name (\"Rippin\", \"Mertz\", \"DuBuque\"), cell_number (\"478.978.0729\", \"481-483-9083x37986\", \"1-626-264-7659x1697\"), street (\"692 Jaskolski Forges\", \"692 Jaskolski Forges\", \"68118 Daniel Row\"), email_address (\"margaretta.runte@example.net\", \"marks.gail@example.org\", \"ykris@example.com\"), home_phone (\"(058)997-7627\", \"130-796-4589x05454\", \"01802479758\"), first_name (\"Gay\", \"Heather\", \"Cindy\"), city (\"Barrettburgh\", \"Beerton\", \"Lake Jennyferfort\"), owner_id (1, 12, 6) | dogs : date_arrived (\"2017-06-25 10:14:05\", \"2017-12-29 06:08:26\", \"2017-10-16 20:06:21\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-21 10:41:18\", \"2018-02-27 00:27:57\"), name (\"Troy\", \"Troy\", \"Mavis\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-24 19:12:22\", \"2018-03-24 23:48:59\"), gender (\"1\", \"0\"), date_of_birth (\"2012-10-14 14:44:37\", \"2008-05-30 12:51:34\", \"2008-05-19 15:54:49\"), owner_id (7, 5, 7), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (13, 13, 12), age (\"4\", \"3\", \"4\"), weight (\"1.39\", \"4.01\", \"2.18\") | professionals : zip_code (\"43129\", \"84515\", \"43129\"), role_code (\"Employee\", \"Veterenarian\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), city (\"Jaceton\", \"Jaceton\", \"Jaceton\"), last_name (\"Braun\", \"Christiansen\", \"Hyatt\"), home_phone (\"246-951-0080x76716\", \"1-138-287-3775\", \"+43(5)1132733868\"), state (\"Hawaii\", \"Wyoming\", \"Utah\"), cell_number (\"499-434-0215x1628\", \"499-434-0215x1628\", \"328.842.3792\"), email_address (\"jeichmann@example.com\", \"jerrod.bahringer@example.org\", \"jacynthe.mclaughlin@example.net\"), first_name (\"Velva\", \"Winfield\", \"Lesly\"), professional_id (11, 3, 5) | professionals_role_code : professional_id (2, 12, 3), role_code (\"Employee\", \"Veterenarian\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (13, 10, 15), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-23 13:52:10\", \"2018-03-13 12:22:58\"), professional_id (7, 8, 6), treatment_id (10, 3, 8), cost_of_treatment (681, 852, 139)", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "role_code"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , owner_id , last_name , state , first_name , street , cell_number 4323592985\", zip_code , home_phone 034-1670\", \"066.264.7885\", \"363.948.1090\", city  | dogs : size_code , gender , breed_code , owner_id , abandoned_yn , weight , date_adopted , age , date_of_birth , name , dog_id , date_departed , date_arrived  | professionals : city , zip_code , role_code , professional_id , street , cell_number , home_phone , last_name , email_address , state , first_name  | professionals_state : state , professional_id  | treatments : date_of_treatment , cost_of_treatment , treatment_id , treatment_type_code , professional_id , dog_id ", 
        "query2": "select t1.role_code, t1.street, t1.city, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "of", 
            "the", 
            "professionals", 
            "living", 
            "in", 
            "a", 
            "city", 
            "that", 
            "contains", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"christy49@example.org\", \"edythe62@example.org\", \"christy49@example.org\"), owner_id (12, 1, 5), last_name (\"Rippin\", \"Nicolas\", \"Haley\"), state (\"Virginia\", \"Wisconsin\", \"Mississippi\"), first_name (\"Cindy\", \"Johann\", \"Melisa\"), street (\"60352 Kayleigh Crossing Suite 700\", \"692 Jaskolski Forges\", \"59509 Mellie Mountain\"), cell_number (\"739-136-7202\", \"1-626-264-7659x1697\", \"+00(2)4323592985\"), zip_code (\"11990\", \"86010\", \"11990\"), home_phone (\"(544)034-1670\", \"066.264.7885\", \"363.948.1090\"), city (\"Port Reannamouth\", \"South Daisyfurt\", \"Lake Valentin\") | dogs : size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (1, 10, 8), abandoned_yn (\"1\", \"0\"), weight (\"7.57\", \"8.96\", \"4.36\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-21 10:41:18\", \"2018-03-21 10:41:18\"), age (\"2\", \"4\", \"9\"), date_of_birth (\"2008-05-30 12:51:34\", \"2012-10-14 14:44:37\", \"2018-03-17 04:05:12\"), name (\"Merritt\", \"Lyric\", \"Holden\"), dog_id (5, 9, 8), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 02:47:40\", \"2018-03-25 02:11:32\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-04-15 09:25:31\", \"2017-12-22 05:02:02\") | professionals : city (\"West Heidi\", \"West Heidi\", \"New Laurytown\"), zip_code (\"98844\", \"34041\", \"02281\"), role_code (\"Employee\", \"Veterenarian\"), professional_id (2, 15, 1), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"72532 Hane Course\nLake Berylland, ND 95283\"), cell_number (\"499-434-0215x1628\", \"1-181-670-9466\", \"1-258-285-4707x8020\"), home_phone (\"971.048.3763x9404\", \"312.216.3352\", \"1-609-566-2752x25197\"), last_name (\"Murazik\", \"Pouros\", \"Walter\"), email_address (\"mekhi.little@example.org\", \"schneider.kathryne@example.org\", \"mekhi.little@example.org\"), state (\"SouthCarolina\", \"California\", \"Mississippi\"), first_name (\"Winfield\", \"Winfield\", \"Domenica\") | professionals_state : state (\"SouthCarolina\", \"California\", \"Mississippi\"), professional_id (15, 8, 15) | treatments : date_of_treatment (\"2018-03-19 04:39:54\", \"2018-02-28 17:09:43\", \"2018-03-08 05:26:23\"), cost_of_treatment (852, 313, 514), treatment_id (12, 7, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (14, 9, 10), dog_id (12, 2, 15)", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "state"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : street , last_name , owner_id , zip_code , city , home_phone , first_name , cell_number 4323592985\", \"+004323592985\", \"341.667.8085\", email_address , state  | dogs : age , abandoned_yn , breed_code , gender , weight , size_code , name , date_departed , date_adopted , owner_id , date_arrived , date_of_birth , dog_id  | professionals : city , street , first_name , role_code , state , zip_code , home_phone 338-3342x585\", \"+431132733868\", last_name , professional_id , cell_number , email_address  | professionals_city : city , professional_id  | treatments : date_of_treatment , cost_of_treatment , treatment_type_code , treatment_id , professional_id , dog_id ", 
        "query2": "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "of", 
            "the", 
            "professionals", 
            "living", 
            "in", 
            "a", 
            "city", 
            "that", 
            "contains", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : street (\"51934 Treutel Harbor\", \"57382 Yost Ridges\", \"6950 Katherine Forges Apt. 630\"), last_name (\"Hamill\", \"Funk\", \"DuBuque\"), owner_id (15, 14, 6), zip_code (\"25609\", \"92406\", \"61019\"), city (\"Port Reannamouth\", \"Lake Valentin\", \"Lake Jennyferfort\"), home_phone (\"1-682-845-0116x63235\", \"318-052-6573\", \"01802479758\"), first_name (\"Johann\", \"Orlando\", \"Kade\"), cell_number (\"+00(2)4323592985\", \"+00(2)4323592985\", \"341.667.8085\"), email_address (\"christy49@example.org\", \"lynn81@example.org\", \"ykris@example.com\"), state (\"Indiana\", \"NorthDakota\", \"Maryland\") | dogs : age (\"9\", \"6\", \"8\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), weight (\"9.8\", \"3.52\", \"8.04\"), size_code (\"LGE\", \"MED\", \"SML\"), name (\"Merritt\", \"Narciso\", \"Narciso\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 10:25:46\", \"2018-03-25 05:07:47\"), date_adopted (\"2018-03-21 10:41:18\", \"2018-03-07 21:45:43\", \"2018-03-18 15:12:50\"), owner_id (11, 8, 8), date_arrived (\"2017-04-15 09:25:31\", \"2017-12-22 05:02:02\", \"2018-01-02 03:15:29\"), date_of_birth (\"2013-02-13 05:15:21\", \"2018-03-17 04:05:12\", \"2018-03-17 04:05:12\"), dog_id (12, 2, 14) | professionals : city (\"New Maryjane\", \"McLaughlinfort\", \"North Odellfurt\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), first_name (\"Monte\", \"Ericka\", \"Ruben\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Indiana\", \"Utah\", \"Alabama\"), zip_code (\"67980\", \"17902\", \"41215\"), home_phone (\"891.475.2256\", \"(230)338-3342x585\", \"+43(5)1132733868\"), last_name (\"Christiansen\", \"O'Reilly\", \"Watsica\"), professional_id (12, 11, 6), cell_number (\"1-258-285-4707x8020\", \"962-983-8109x3509\", \"1-258-285-4707x8020\"), email_address (\"mekhi.little@example.org\", \"jerrod.bahringer@example.org\", \"uboehm@example.org\") | professionals_city : city (\"New Maryjane\", \"McLaughlinfort\", \"North Odellfurt\"), professional_id (4, 15, 13) | treatments : date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-10 11:45:58\", \"2018-03-01 04:14:46\"), cost_of_treatment (945, 681, 681), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (4, 10, 1), professional_id (10, 14, 9), dog_id (14, 2, 2)", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "city"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , zip_code , email_address , city , first_name , home_phone 747-5094x8134\", \"747-5094x8134\", street , last_name , cell_number 271-6744x4507\", owner_id  | dogs : weight , date_adopted , breed_code , date_departed , size_code , age , name , owner_id , abandoned_yn , date_of_birth , date_arrived , gender , dog_id  | professionals : state , professional_id , cell_number , street , first_name , last_name , home_phone , city , email_address , zip_code , role_code  | professionals_street : street , professional_id  | treatments : treatment_id , treatment_type_code , dog_id , cost_of_treatment , date_of_treatment , professional_id ", 
        "query2": "select t1.role_code, t2.street, t1.city, t1.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "from", 
            "professionals", 
            "where", 
            "city", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "role", 
            ",", 
            "street", 
            ",", 
            "city", 
            "and", 
            "state", 
            "of", 
            "the", 
            "professionals", 
            "living", 
            "in", 
            "a", 
            "city", 
            "that", 
            "contains", 
            "the", 
            "substring", 
            "'West", 
            "'", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "role_code", 
            ",", 
            "street", 
            ",", 
            "city", 
            ",", 
            "state", 
            "FROM", 
            "professionals", 
            "WHERE", 
            "city", 
            "LIKE", 
            "'", 
            "%", 
            "West", 
            "%", 
            "'"
        ], 
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Arkansas\", \"Maryland\", \"Vermont\"), zip_code (\"93165\", \"02647\", \"36871\"), email_address (\"fschoen@example.net\", \"christy49@example.org\", \"ybergstrom@example.com\"), city (\"West Leonard\", \"Barrettburgh\", \"New Margaretteborough\"), first_name (\"Rolando\", \"Cindy\", \"Gay\"), home_phone (\"085.557.0379x84348\", \"(094)747-5094x8134\", \"(094)747-5094x8134\"), street (\"15828 Spencer Extensions\", \"0647 Hintz Village Apt. 024\", \"0647 Hintz Village Apt. 024\"), last_name (\"Mertz\", \"DuBuque\", \"Hamill\"), cell_number (\"633.455.3045x85484\", \"633.455.3045x85484\", \"(783)271-6744x4507\"), owner_id (6, 15, 8) | dogs : weight (\"4.36\", \"4.36\", \"9.48\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-10 15:06:43\", \"2018-03-13 12:47:15\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 06:29:10\", \"2018-03-25 04:50:22\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"6\", \"5\", \"3\"), name (\"George\", \"Houston\", \"George\"), owner_id (8, 5, 5), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2013-02-20 14:50:56\", \"2012-01-27 05:11:53\", \"2012-10-14 14:44:37\"), date_arrived (\"2017-04-20 00:58:55\", \"2017-07-25 15:19:07\", \"2017-10-16 20:06:21\"), gender (\"1\", \"0\"), dog_id (8, 6, 4) | professionals : state (\"Montana\", \"Alabama\", \"Connecticut\"), professional_id (12, 4, 15), cell_number (\"889-940-2676\", \"1-181-670-9466\", \"889-940-2676\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\"), first_name (\"Vernice\", \"Sigurd\", \"Jayson\"), last_name (\"Frami\", \"Hyatt\", \"Murazik\"), home_phone (\"325-155-0801x7005\", \"325-155-0801x7005\", \"891.475.2256\"), city (\"Baileymouth\", \"McLaughlinfort\", \"Jaceton\"), email_address (\"west.eula@example.net\", \"mekhi.little@example.org\", \"jerrod.bahringer@example.org\"), zip_code (\"41215\", \"06646\", \"41215\"), role_code (\"Employee\", \"Veterenarian\") | professionals_street : street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\"), professional_id (6, 8, 4) | treatments : treatment_id (13, 2, 9), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (2, 15, 7), cost_of_treatment (567, 147, 567), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-23 13:52:10\", \"2018-03-15 19:10:02\"), professional_id (6, 10, 10)", 
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'", 
        "query1": "select role_code, street, city, state from professionals where city like '%West%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            37, 
                            false
                        ], 
                        null
                    ], 
                    "\"%West%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                34, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                36, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                37, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                38, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "street"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , state , owner_id , cell_number 4323592985\", \"739-136-7202\", \"341.667.8085\", email_address , last_name , first_name , zip_code , home_phone , city  | owners_first_name : owner_id , first_name  | dogs : date_departed , dog_id , date_arrived , owner_id , size_code , gender , date_of_birth , weight , abandoned_yn , breed_code , age , name , date_adopted  | professionals : email_address , role_code , street , state , last_name , cell_number 908-7311x065\", home_phone 304-4499x59146\", \"312.216.3352\", professional_id , city , zip_code , first_name  | treatments : treatment_type_code , cost_of_treatment , dog_id , professional_id , treatment_id , date_of_treatment ", 
        "query2": "select t2.first_name, t1.last_name, t1.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "from", 
            "owners", 
            "where", 
            "state", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "owners", 
            "live", 
            "in", 
            "the", 
            "state", 
            "whose", 
            "name", 
            "contains", 
            "the", 
            "substring", 
            "'North", 
            "'", 
            "?", 
            "List", 
            "his", 
            "first", 
            "name", 
            ",", 
            "last", 
            "name", 
            "and", 
            "email", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "FROM", 
            "Owners", 
            "WHERE", 
            "state", 
            "LIKE", 
            "'", 
            "%", 
            "North", 
            "%", 
            "'"
        ], 
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"0647 Hintz Village Apt. 024\", \"51934 Treutel Harbor\", \"0647 Hintz Village Apt. 024\"), state (\"Maryland\", \"Washington\", \"Pennsylvania\"), owner_id (6, 4, 6), cell_number (\"+00(2)4323592985\", \"739-136-7202\", \"341.667.8085\"), email_address (\"fschoen@example.net\", \"zboncak.madonna@example.net\", \"hudson.favian@example.com\"), last_name (\"Haley\", \"Hauck\", \"Hauck\"), first_name (\"Cindy\", \"Nora\", \"Cindy\"), zip_code (\"00589\", \"22731\", \"86010\"), home_phone (\"085.557.0379x84348\", \"893-862-5295x61709\", \"363.948.1090\"), city (\"Beerton\", \"Lake Valentin\", \"South Daisyfurt\") | owners_first_name : owner_id (7, 10, 2), first_name (\"Cindy\", \"Nora\", \"Cindy\") | dogs : date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 10:25:46\", \"2018-03-25 06:58:44\"), dog_id (9, 10, 9), date_arrived (\"2017-06-25 10:14:05\", \"2017-12-22 05:02:02\", \"2017-04-15 09:25:31\"), owner_id (3, 8, 6), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), date_of_birth (\"2015-02-26 21:31:22\", \"2018-03-17 04:05:12\", \"2012-05-31 08:01:36\"), weight (\"1.72\", \"8.16\", \"3.52\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"6\", \"2\", \"1\"), name (\"Bessie\", \"Troy\", \"Kacey\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-23 16:02:04\", \"2018-03-07 21:45:43\") | professionals : email_address (\"jacynthe.mclaughlin@example.net\", \"goyette.roosevelt@example.net\", \"uboehm@example.org\"), role_code (\"Employee\", \"Veterenarian\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), state (\"Wisconsin\", \"NewMexico\", \"Hawaii\"), last_name (\"Braun\", \"Hayes\", \"Ullrich\"), cell_number (\"1-258-285-4707x8020\", \"00230569697\", \"(369)908-7311x065\"), home_phone (\"971.048.3763x9404\", \"(920)304-4499x59146\", \"312.216.3352\"), professional_id (11, 15, 8), city (\"Baileymouth\", \"Jaceton\", \"Juddton\"), zip_code (\"02281\", \"98844\", \"41215\"), first_name (\"Velva\", \"Brady\", \"Karley\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (656, 139, 668), dog_id (7, 4, 4), professional_id (6, 6, 4), treatment_id (7, 8, 15), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-03-13 12:22:58\", \"2018-03-11 04:23:15\")", 
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    "\"%North%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "owners": "first_name"
        }, 
        "primary_key": {
            "owners": "owner_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : home_phone 997-7627\", city , owner_id , first_name , email_address , state , last_name , zip_code , cell_number 9217952551\", \"1-739-421-2225x38148\", street  | owners_email_address : email_address , owner_id  | dogs : owner_id , abandoned_yn , name , date_departed , breed_code , date_of_birth , date_adopted , date_arrived , weight , dog_id , age , size_code , gender  | professionals : cell_number , city , first_name , last_name , professional_id , street , zip_code , email_address , role_code , state , home_phone 0259033559\", \"1-609-566-2752x25197\" | treatments : treatment_id , date_of_treatment , dog_id , treatment_type_code , cost_of_treatment , professional_id ", 
        "query2": "select t1.first_name, t1.last_name, t2.email_address from owners as t1 join owners_email_address as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "from", 
            "owners", 
            "where", 
            "state", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "owners", 
            "live", 
            "in", 
            "the", 
            "state", 
            "whose", 
            "name", 
            "contains", 
            "the", 
            "substring", 
            "'North", 
            "'", 
            "?", 
            "List", 
            "his", 
            "first", 
            "name", 
            ",", 
            "last", 
            "name", 
            "and", 
            "email", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "FROM", 
            "Owners", 
            "WHERE", 
            "state", 
            "LIKE", 
            "'", 
            "%", 
            "North", 
            "%", 
            "'"
        ], 
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : home_phone (\"066.264.7885\", \"066.264.7885\", \"(058)997-7627\"), city (\"Lake Tia\", \"West Leonard\", \"Port Zackery\"), owner_id (14, 8, 13), first_name (\"Lorenz\", \"Adelle\", \"Gay\"), email_address (\"hudson.favian@example.com\", \"christy49@example.org\", \"pearlie18@example.com\"), state (\"NewYork\", \"Pennsylvania\", \"Mississippi\"), last_name (\"Stoltenberg\", \"Price\", \"Price\"), zip_code (\"92406\", \"02647\", \"35747\"), cell_number (\"559.874.3011x989\", \"+70(4)9217952551\", \"1-739-421-2225x38148\"), street (\"1858 Jan Park\", \"60352 Kayleigh Crossing Suite 700\", \"2417 Keara Stravenue Apt. 146\") | owners_email_address : email_address (\"hudson.favian@example.com\", \"christy49@example.org\", \"pearlie18@example.com\"), owner_id (7, 11, 7) | dogs : owner_id (14, 14, 2), abandoned_yn (\"1\", \"0\"), name (\"Hipolito\", \"Jesus\", \"George\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 10:25:46\", \"2018-03-25 13:07:04\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2015-02-26 21:31:22\", \"2010-11-11 07:11:53\", \"2012-05-31 08:01:36\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-08 15:03:00\", \"2018-02-25 23:45:30\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-10-24 04:45:13\", \"2017-07-25 15:19:07\"), weight (\"3.52\", \"1.39\", \"4.01\"), dog_id (14, 12, 14), age (\"6\", \"8\", \"4\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\") | professionals : cell_number (\"499-434-0215x1628\", \"461-801-2600\", \"00230569697\"), city (\"New Laurytown\", \"Domenickton\", \"West Heidi\"), first_name (\"Ruben\", \"Lesly\", \"Lesly\"), last_name (\"Frami\", \"O'Reilly\", \"O'Reilly\"), professional_id (6, 8, 2), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), zip_code (\"80775\", \"33020\", \"67980\"), email_address (\"marquardt.furman@example.org\", \"mekhi.little@example.org\", \"lambert62@example.org\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Connecticut\", \"Utah\", \"California\"), home_phone (\"346.594.3739\", \"+02(1)0259033559\", \"1-609-566-2752x25197\") | treatments : treatment_id (15, 1, 2), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-02-26 09:08:53\", \"2018-03-24 22:25:58\"), dog_id (2, 12, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (147, 514, 945), professional_id (8, 8, 6)", 
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    "\"%North%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "owners": "email_address"
        }, 
        "primary_key": {
            "owners": "owner_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : last_name , owner_id , street , zip_code , state , home_phone , email_address , cell_number , city , first_name  | owners_last_name : last_name , owner_id  | dogs : breed_code , gender , dog_id , name , owner_id , abandoned_yn , age , date_of_birth , date_arrived , weight , date_departed , size_code , date_adopted  | professionals : role_code , professional_id , cell_number 908-7311x065\", \"889-940-2676\", city , last_name , state , home_phone , first_name , email_address , zip_code , street  | treatments : dog_id , date_of_treatment , professional_id , treatment_id , cost_of_treatment , treatment_type_code ", 
        "query2": "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "from", 
            "owners", 
            "where", 
            "state", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Which", 
            "owners", 
            "live", 
            "in", 
            "the", 
            "state", 
            "whose", 
            "name", 
            "contains", 
            "the", 
            "substring", 
            "'North", 
            "'", 
            "?", 
            "List", 
            "his", 
            "first", 
            "name", 
            ",", 
            "last", 
            "name", 
            "and", 
            "email", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "FROM", 
            "Owners", 
            "WHERE", 
            "state", 
            "LIKE", 
            "'", 
            "%", 
            "North", 
            "%", 
            "'"
        ], 
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : last_name (\"Funk\", \"Stoltenberg\", \"Feil\"), owner_id (8, 14, 2), street (\"0647 Hintz Village Apt. 024\", \"60352 Kayleigh Crossing Suite 700\", \"2635 Caitlyn Plains\"), zip_code (\"92406\", \"93165\", \"02647\"), state (\"Arizona\", \"Virginia\", \"Vermont\"), home_phone (\"130-796-4589x05454\", \"085.557.0379x84348\", \"066.264.7885\"), email_address (\"zboncak.madonna@example.net\", \"lynn81@example.org\", \"angeline99@example.com\"), cell_number (\"739-136-7202\", \"762.589.6117x1328\", \"481-483-9083x37986\"), city (\"Lake Jennyferfort\", \"Port Reannamouth\", \"Port Reannamouth\"), first_name (\"Lorenz\", \"Jaclyn\", \"Kade\") | owners_last_name : last_name (\"Funk\", \"Stoltenberg\", \"Feil\"), owner_id (8, 12, 12) | dogs : breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), dog_id (7, 4, 7), name (\"Mavis\", \"Jeffrey\", \"George\"), owner_id (1, 8, 10), abandoned_yn (\"1\", \"0\"), age (\"2\", \"1\", \"9\"), date_of_birth (\"2012-01-27 05:11:53\", \"2012-05-03 21:42:25\", \"2012-01-27 05:11:53\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-07-25 15:19:07\", \"2017-12-29 23:24:13\"), weight (\"7.57\", \"8.96\", \"2.18\"), date_departed (\"2018-03-25 06:46:07\", \"2018-03-25 14:15:41\", \"2018-03-25 02:11:32\"), size_code (\"LGE\", \"MED\", \"SML\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-03-10 15:06:43\", \"2018-03-10 15:06:43\") | professionals : role_code (\"Employee\", \"Veterenarian\"), professional_id (10, 7, 3), cell_number (\"889-940-2676\", \"(369)908-7311x065\", \"889-940-2676\"), city (\"Jaceton\", \"West Heidi\", \"New Laurytown\"), last_name (\"Kshlerin\", \"O'Reilly\", \"Murazik\"), state (\"Connecticut\", \"Indiana\", \"Alabama\"), home_phone (\"325-155-0801x7005\", \"246-951-0080x76716\", \"1-138-287-3775\"), first_name (\"Brady\", \"Danny\", \"Winfield\"), email_address (\"delphine29@example.com\", \"west.eula@example.net\", \"marquardt.furman@example.org\"), zip_code (\"07412\", \"98844\", \"54312\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\") | treatments : dog_id (4, 1, 4), date_of_treatment (\"2018-03-01 04:14:46\", \"2018-02-26 09:08:53\", \"2018-03-24 22:25:58\"), professional_id (4, 10, 8), treatment_id (2, 7, 3), cost_of_treatment (349, 266, 407), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")", 
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    "\"%North%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "owners": "last_name"
        }, 
        "primary_key": {
            "owners": "owner_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , street , last_name , state , home_phone 563-0260x454\", \"747-5094x8134\", zip_code , city , email_address , cell_number 768-5439x484\", \"399-3116\", \"+004323592985\", first_name  | owners_first_name : first_name , owner_id  | dogs : date_of_birth , name , age , size_code , owner_id , gender , date_arrived , weight , date_adopted , dog_id , breed_code , date_departed , abandoned_yn  | professionals : state , city , street , cell_number , last_name , zip_code , home_phone 1132733868\", \"022.529.0550x1319\", \"+712898266914\", professional_id , role_code , first_name , email_address  | treatments : cost_of_treatment , professional_id , date_of_treatment , dog_id , treatment_type_code , treatment_id ", 
        "query2": "select t2.first_name, t1.last_name, t1.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "from", 
            "owners", 
            "where", 
            "state", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "first", 
            "name", 
            ",", 
            "last", 
            "name", 
            "and", 
            "email", 
            "of", 
            "the", 
            "owners", 
            "living", 
            "in", 
            "a", 
            "state", 
            "whose", 
            "name", 
            "contains", 
            "the", 
            "substring", 
            "'North", 
            "'", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "FROM", 
            "Owners", 
            "WHERE", 
            "state", 
            "LIKE", 
            "'", 
            "%", 
            "North", 
            "%", 
            "'"
        ], 
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (15, 10, 3), street (\"2417 Keara Stravenue Apt. 146\", \"692 Jaskolski Forges\", \"0647 Hintz Village Apt. 024\"), last_name (\"Hauck\", \"Stoltenberg\", \"Nicolas\"), state (\"Washington\", \"Mississippi\", \"Washington\"), home_phone (\"066.264.7885\", \"(799)563-0260x454\", \"(094)747-5094x8134\"), zip_code (\"02647\", \"61019\", \"87304\"), city (\"Port Zackery\", \"Lake Jennyferfort\", \"Port Reannamouth\"), email_address (\"lynn81@example.org\", \"wpfeffer@example.net\", \"ykris@example.com\"), cell_number (\"(722)768-5439x484\", \"(257)399-3116\", \"+00(2)4323592985\"), first_name (\"Cindy\", \"Johann\", \"Melisa\") | owners_first_name : first_name (\"Cindy\", \"Johann\", \"Melisa\"), owner_id (11, 5, 2) | dogs : date_of_birth (\"2012-05-03 21:42:25\", \"2017-09-19 05:39:09\", \"2010-11-11 07:11:53\"), name (\"Jeffrey\", \"Mavis\", \"Mavis\"), age (\"9\", \"6\", \"5\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (10, 12, 10), gender (\"1\", \"0\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-10-25 00:55:34\", \"2017-06-18 19:45:38\"), weight (\"4.01\", \"9.48\", \"9.48\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-07 21:45:43\", \"2018-03-14 08:05:18\"), dog_id (7, 7, 8), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 05:07:47\", \"2018-03-24 23:48:59\"), abandoned_yn (\"1\", \"0\") | professionals : state (\"Alabama\", \"Mississippi\", \"Indiana\"), city (\"Kirastad\", \"Borisside\", \"Raynorfort\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), cell_number (\"328.842.3792\", \"889-940-2676\", \"328.842.3792\"), last_name (\"Christiansen\", \"Tillman\", \"Frami\"), zip_code (\"17902\", \"41215\", \"17902\"), home_phone (\"+43(5)1132733868\", \"022.529.0550x1319\", \"+71(6)2898266914\"), professional_id (2, 4, 3), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Sigurd\", \"Jayson\", \"Jayson\"), email_address (\"goyette.roosevelt@example.net\", \"lucile.shanahan@example.org\", \"lourdes.lowe@example.net\") | treatments : cost_of_treatment (852, 428, 407), professional_id (7, 7, 9), date_of_treatment (\"2018-03-19 04:39:54\", \"2018-03-15 20:25:34\", \"2018-03-16 10:27:36\"), dog_id (1, 15, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (7, 6, 1)", 
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    "\"%North%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "owners": "first_name"
        }, 
        "primary_key": {
            "owners": "owner_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , state , city , zip_code , first_name , email_address , last_name , home_phone 747-5094x8134\", \"997-7627\", cell_number 768-5439x484\", \"341.667.8085\", street  | owners_email_address : email_address , owner_id  | dogs : name , size_code , date_departed , gender , owner_id , breed_code , date_adopted , date_arrived , age , dog_id , abandoned_yn , weight , date_of_birth  | professionals : state , city , home_phone , professional_id , cell_number , role_code , street , email_address , last_name , first_name , zip_code  | treatments : dog_id , treatment_id , treatment_type_code , date_of_treatment , cost_of_treatment , professional_id ", 
        "query2": "select t1.first_name, t1.last_name, t2.email_address from owners as t1 join owners_email_address as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "from", 
            "owners", 
            "where", 
            "state", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "first", 
            "name", 
            ",", 
            "last", 
            "name", 
            "and", 
            "email", 
            "of", 
            "the", 
            "owners", 
            "living", 
            "in", 
            "a", 
            "state", 
            "whose", 
            "name", 
            "contains", 
            "the", 
            "substring", 
            "'North", 
            "'", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "FROM", 
            "Owners", 
            "WHERE", 
            "state", 
            "LIKE", 
            "'", 
            "%", 
            "North", 
            "%", 
            "'"
        ], 
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (15, 11, 1), state (\"Arkansas\", \"Mississippi\", \"Vermont\"), city (\"Brakusfurt\", \"Lake Jennyferfort\", \"Barrettburgh\"), zip_code (\"92406\", \"11990\", \"36871\"), first_name (\"Melisa\", \"Jaclyn\", \"Rachelle\"), email_address (\"angeline99@example.com\", \"pearlie18@example.com\", \"hudson.favian@example.com\"), last_name (\"Stoltenberg\", \"Prohaska\", \"Haley\"), home_phone (\"363.948.1090\", \"(094)747-5094x8134\", \"(058)997-7627\"), cell_number (\"121.381.3316x6535\", \"(722)768-5439x484\", \"341.667.8085\"), street (\"51934 Treutel Harbor\", \"59509 Mellie Mountain\", \"89011 Kertzmann Spring Suite 642\") | owners_email_address : email_address (\"angeline99@example.com\", \"pearlie18@example.com\", \"hudson.favian@example.com\"), owner_id (12, 10, 2) | dogs : name (\"Bessie\", \"Bessie\", \"Hipolito\"), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-24 23:48:59\", \"2018-03-25 06:29:10\", \"2018-03-25 06:29:10\"), gender (\"1\", \"0\"), owner_id (11, 14, 1), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-18 07:47:40\", \"2018-03-18 07:47:40\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-10-25 00:55:34\", \"2017-04-20 00:58:55\"), age (\"2\", \"9\", \"4\"), dog_id (14, 13, 15), abandoned_yn (\"1\", \"0\"), weight (\"1.39\", \"9.48\", \"8.96\"), date_of_birth (\"2015-02-26 21:31:22\", \"2010-11-11 07:11:53\", \"2015-02-26 21:31:22\") | professionals : state (\"Mississippi\", \"Connecticut\", \"Connecticut\"), city (\"North Odellfurt\", \"Borisside\", \"New Maryjane\"), home_phone (\"971.048.3763x9404\", \"246-951-0080x76716\", \"022.529.0550x1319\"), professional_id (12, 3, 15), cell_number (\"1-258-285-4707x8020\", \"1-181-670-9466\", \"1-185-137-1945x409\"), role_code (\"Employee\", \"Veterenarian\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), email_address (\"west.eula@example.net\", \"lucile.shanahan@example.org\", \"delphine29@example.com\"), last_name (\"Hyatt\", \"Braun\", \"Kshlerin\"), first_name (\"Velva\", \"Sigurd\", \"Olaf\"), zip_code (\"17902\", \"67980\", \"02281\") | treatments : dog_id (13, 1, 13), treatment_id (14, 4, 6), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-13 12:22:58\", \"2018-03-15 19:10:02\"), cost_of_treatment (668, 349, 681), professional_id (14, 8, 10)", 
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    "\"%North%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "owners": "email_address"
        }, 
        "primary_key": {
            "owners": "owner_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , street , state , city , first_name , last_name , owner_id , zip_code , home_phone 997-7627\", \"318-052-6573\", \"085.557.0379x84348\", cell_number 271-6744x4507\" | owners_last_name : last_name , owner_id  | dogs : abandoned_yn , date_arrived , size_code , breed_code , weight , dog_id , age , date_of_birth , date_adopted , name , owner_id , date_departed , gender  | professionals : first_name , cell_number 908-7311x065\", \"939-2435x80863\", role_code , zip_code , professional_id , home_phone , email_address , state , city , street , last_name  | treatments : treatment_type_code , dog_id , cost_of_treatment , date_of_treatment , professional_id , treatment_id ", 
        "query2": "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "from", 
            "owners", 
            "where", 
            "state", 
            "like", 
            "value"
        ], 
        "question_toks": [
            "Return", 
            "the", 
            "first", 
            "name", 
            ",", 
            "last", 
            "name", 
            "and", 
            "email", 
            "of", 
            "the", 
            "owners", 
            "living", 
            "in", 
            "a", 
            "state", 
            "whose", 
            "name", 
            "contains", 
            "the", 
            "substring", 
            "'North", 
            "'", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "first_name", 
            ",", 
            "last_name", 
            ",", 
            "email_address", 
            "FROM", 
            "Owners", 
            "WHERE", 
            "state", 
            "LIKE", 
            "'", 
            "%", 
            "North", 
            "%", 
            "'"
        ], 
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"hudson.favian@example.com\", \"zboncak.madonna@example.net\", \"zboncak.madonna@example.net\"), street (\"2635 Caitlyn Plains\", \"0647 Hintz Village Apt. 024\", \"9212 Rosenbaum Lights\"), state (\"Mississippi\", \"NewYork\", \"Mississippi\"), city (\"Lake Jennyferfort\", \"East Hillardberg\", \"West Leonard\"), first_name (\"Gay\", \"Lorenz\", \"Tre\"), last_name (\"DuBuque\", \"Stoltenberg\", \"Fisher\"), owner_id (11, 6, 2), zip_code (\"22731\", \"00589\", \"35747\"), home_phone (\"(058)997-7627\", \"318-052-6573\", \"085.557.0379x84348\"), cell_number (\"762.589.6117x1328\", \"478.978.0729\", \"(783)271-6744x4507\") | owners_last_name : last_name (\"DuBuque\", \"Stoltenberg\", \"Fisher\"), owner_id (2, 15, 10) | dogs : abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-06-25 10:14:05\", \"2017-12-22 05:02:02\", \"2017-06-25 10:14:05\"), size_code (\"LGE\", \"MED\", \"SML\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), weight (\"1.72\", \"5.16\", \"4.01\"), dog_id (11, 2, 2), age (\"1\", \"1\", \"3\"), date_of_birth (\"2012-05-31 08:01:36\", \"2013-02-13 05:15:21\", \"2008-10-09 22:38:53\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-02-27 00:27:57\", \"2018-03-13 12:47:15\"), name (\"Hipolito\", \"Holden\", \"Hipolito\"), owner_id (3, 7, 14), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 14:15:41\", \"2018-03-25 06:29:10\"), gender (\"1\", \"0\") | professionals : first_name (\"Brady\", \"Taryn\", \"Sigurd\"), cell_number (\"1-185-137-1945x409\", \"(369)908-7311x065\", \"(275)939-2435x80863\"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"43129\", \"17902\", \"07412\"), professional_id (7, 5, 6), home_phone (\"1-138-287-3775\", \"325-155-0801x7005\", \"971.048.3763x9404\"), email_address (\"west.eula@example.net\", \"mekhi.little@example.org\", \"lucile.shanahan@example.org\"), state (\"Wisconsin\", \"Alabama\", \"NewMexico\"), city (\"Borisside\", \"East Ila\", \"McLaughlinfort\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), last_name (\"Murazik\", \"Watsica\", \"Murazik\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (15, 10, 4), cost_of_treatment (567, 266, 407), date_of_treatment (\"2018-03-19 04:39:54\", \"2018-02-28 17:09:43\", \"2018-02-28 17:09:43\"), professional_id (4, 10, 7), treatment_id (9, 6, 5)", 
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        4
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    9, 
                    [
                        0, 
                        [
                            0, 
                            15, 
                            false
                        ], 
                        null
                    ], 
                    "\"%North%\"", 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                11, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                12, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                17, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "owners": "last_name"
        }, 
        "primary_key": {
            "owners": "owner_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : first_name , street , zip_code , last_name , state , cell_number , home_phone , owner_id , city , email_address  | dogs : date_of_birth , name , abandoned_yn , date_arrived , date_adopted , date_departed , owner_id , breed_code , age , weight , size_code , gender , dog_id  | dogs_weight : dog_id , weight  | professionals : email_address , professional_id , last_name , home_phone , state , role_code , street , city , first_name , zip_code , cell_number  | treatments : professional_id , cost_of_treatment , dog_id , treatment_id , treatment_type_code , date_of_treatment ", 
        "query2": "select t1.name, t1.age, t2.weight from dogs as t1 join dogs_weight as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "from", 
            "dogs", 
            "where", 
            "abandoned_yn", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "dog", 
            "name", 
            ",", 
            "age", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "dogs", 
            "who", 
            "have", 
            "been", 
            "abandoned", 
            "?", 
            "1", 
            "stands", 
            "for", 
            "yes", 
            ",", 
            "and", 
            "0", 
            "stands", 
            "for", 
            "no", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "FROM", 
            "Dogs", 
            "WHERE", 
            "abandoned_yn", 
            "=", 
            "1"
        ], 
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : first_name (\"Heather\", \"Kade\", \"Lorenz\"), street (\"692 Jaskolski Forges\", \"692 Jaskolski Forges\", \"2635 Caitlyn Plains\"), zip_code (\"25609\", \"00589\", \"36871\"), last_name (\"Hauck\", \"Schmitt\", \"Haley\"), state (\"Washington\", \"Vermont\", \"NewYork\"), cell_number (\"121.381.3316x6535\", \"481-483-9083x37986\", \"633.455.3045x85484\"), home_phone (\"01802479758\", \"893-862-5295x61709\", \"085.557.0379x84348\"), owner_id (9, 1, 5), city (\"Lake Tia\", \"Lake Carleyborough\", \"East Hillardberg\"), email_address (\"pearlie18@example.com\", \"hudson.favian@example.com\", \"ybergstrom@example.com\") | dogs : date_of_birth (\"2012-10-14 14:44:37\", \"2012-01-27 05:11:53\", \"2013-02-20 14:50:56\"), name (\"Holden\", \"Bessie\", \"Bessie\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-05-06 08:03:52\", \"2017-10-16 20:06:21\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-03-25 08:12:51\", \"2018-03-25 08:12:51\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 14:15:41\", \"2018-03-24 19:12:22\"), owner_id (7, 8, 8), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"3\", \"9\", \"3\"), weight (\"8.04\", \"2.18\", \"9.8\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), dog_id (6, 2, 14) | dogs_weight : dog_id (2, 11, 10), weight (\"8.04\", \"2.18\", \"9.8\") | professionals : email_address (\"goyette.roosevelt@example.net\", \"lourdes.lowe@example.net\", \"west.eula@example.net\"), professional_id (13, 5, 6), last_name (\"Hyatt\", \"Braun\", \"Watsica\"), home_phone (\"971.048.3763x9404\", \"346.594.3739\", \"1-138-287-3775\"), state (\"Alabama\", \"NorthCarolina\", \"Connecticut\"), role_code (\"Employee\", \"Veterenarian\"), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), city (\"East Ila\", \"Jaceton\", \"East Ila\"), first_name (\"Brady\", \"Karley\", \"Domenica\"), zip_code (\"43129\", \"41215\", \"80775\"), cell_number (\"1-258-285-4707x8020\", \"1-185-137-1945x409\", \"00230569697\") | treatments : professional_id (9, 5, 8), cost_of_treatment (139, 429, 428), dog_id (10, 1, 10), treatment_id (14, 2, 14), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-08 05:26:23\", \"2018-02-26 09:08:53\")", 
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1", 
        "query1": "select name, age, weight from dogs where abandoned_yn = 1", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            22, 
                            false
                        ], 
                        null
                    ], 
                    1.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                29, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "weight"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , state , home_phone , email_address , owner_id , street , first_name , zip_code , last_name , cell_number  | dogs : owner_id , date_arrived , date_departed , name , abandoned_yn , date_of_birth , age , size_code , dog_id , weight , date_adopted , gender , breed_code  | dogs_age : age , dog_id  | professionals : role_code , city , first_name , email_address , street , professional_id , last_name , zip_code , state , cell_number , home_phone 1132733868\", \"325-155-0801x7005\" | treatments : professional_id , treatment_id , treatment_type_code , dog_id , date_of_treatment , cost_of_treatment ", 
        "query2": "select t1.name, t2.age, t1.weight from dogs as t1 join dogs_age as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "from", 
            "dogs", 
            "where", 
            "abandoned_yn", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "dog", 
            "name", 
            ",", 
            "age", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "dogs", 
            "who", 
            "have", 
            "been", 
            "abandoned", 
            "?", 
            "1", 
            "stands", 
            "for", 
            "yes", 
            ",", 
            "and", 
            "0", 
            "stands", 
            "for", 
            "no", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "FROM", 
            "Dogs", 
            "WHERE", 
            "abandoned_yn", 
            "=", 
            "1"
        ], 
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"Beerton\", \"East Hillardberg\", \"Beerton\"), state (\"Wisconsin\", \"Vermont\", \"Arizona\"), home_phone (\"085.557.0379x84348\", \"1-332-849-1908\", \"066.264.7885\"), email_address (\"edythe62@example.org\", \"hudson.favian@example.com\", \"hudson.favian@example.com\"), owner_id (9, 6, 4), street (\"15828 Spencer Extensions\", \"1858 Jan Park\", \"51934 Treutel Harbor\"), first_name (\"Adelle\", \"Adelle\", \"Jaclyn\"), zip_code (\"22731\", \"36871\", \"92406\"), last_name (\"Rippin\", \"Fisher\", \"Stoltenberg\"), cell_number (\"121.381.3316x6535\", \"1-626-264-7659x1697\", \"481-483-9083x37986\") | dogs : owner_id (11, 11, 12), date_arrived (\"2018-01-17 11:44:16\", \"2017-05-06 08:03:52\", \"2017-10-24 04:45:13\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 02:47:40\", \"2018-03-25 02:11:32\"), name (\"Hipolito\", \"Jesus\", \"Merritt\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2008-05-30 12:51:34\", \"2012-01-27 05:11:53\", \"2008-05-30 12:51:34\"), age (\"1\", \"9\", \"4\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (7, 7, 4), weight (\"8.95\", \"7.57\", \"4.01\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-02-25 23:45:30\", \"2018-03-23 16:02:04\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | dogs_age : age (\"1\", \"9\", \"4\"), dog_id (11, 12, 12) | professionals : role_code (\"Employee\", \"Veterenarian\"), city (\"Borisside\", \"New Laurytown\", \"South Rockyport\"), first_name (\"Winfield\", \"Domenica\", \"Vernice\"), email_address (\"marquardt.furman@example.org\", \"jerrod.bahringer@example.org\", \"goyette.roosevelt@example.net\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), professional_id (11, 6, 7), last_name (\"Pouros\", \"Murazik\", \"Frami\"), zip_code (\"77129\", \"33020\", \"54312\"), state (\"California\", \"NewMexico\", \"Wyoming\"), cell_number (\"461-801-2600\", \"1-258-285-4707x8020\", \"00230569697\"), home_phone (\"325-155-0801x7005\", \"+43(5)1132733868\", \"325-155-0801x7005\") | treatments : professional_id (9, 14, 8), treatment_id (13, 2, 1), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (12, 15, 2), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\", \"2018-02-26 09:08:53\"), cost_of_treatment (681, 429, 514)", 
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1", 
        "query1": "select name, age, weight from dogs where abandoned_yn = 1", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            22, 
                            false
                        ], 
                        null
                    ], 
                    1.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                29, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "age"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , cell_number 399-3116\", \"1-626-264-7659x1697\", owner_id , first_name , email_address , state , city , zip_code , home_phone 997-7627\", \"916.976.9480x13851\", last_name  | dogs : dog_id , weight , breed_code , owner_id , gender , abandoned_yn , date_of_birth , size_code , age , name , date_adopted , date_departed , date_arrived  | dogs_name : name , dog_id  | professionals : zip_code , home_phone , email_address , city , cell_number , role_code , last_name , street , professional_id , state , first_name  | treatments : treatment_id , dog_id , professional_id , cost_of_treatment , treatment_type_code , date_of_treatment ", 
        "query2": "select t2.name, t1.age, t1.weight from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "from", 
            "dogs", 
            "where", 
            "abandoned_yn", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "dog", 
            "name", 
            ",", 
            "age", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "dogs", 
            "who", 
            "have", 
            "been", 
            "abandoned", 
            "?", 
            "1", 
            "stands", 
            "for", 
            "yes", 
            ",", 
            "and", 
            "0", 
            "stands", 
            "for", 
            "no", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "FROM", 
            "Dogs", 
            "WHERE", 
            "abandoned_yn", 
            "=", 
            "1"
        ], 
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"68118 Daniel Row\", \"51934 Treutel Harbor\", \"60352 Kayleigh Crossing Suite 700\"), cell_number (\"559.874.3011x989\", \"(257)399-3116\", \"1-626-264-7659x1697\"), owner_id (8, 5, 15), first_name (\"Jaclyn\", \"Orlando\", \"Heather\"), email_address (\"christy49@example.org\", \"ykris@example.com\", \"wpfeffer@example.net\"), state (\"Arizona\", \"NorthDakota\", \"Indiana\"), city (\"Lake Tia\", \"Port Reannamouth\", \"Lake Jennyferfort\"), zip_code (\"86010\", \"78297\", \"86010\"), home_phone (\"1-346-655-5842x768\", \"(058)997-7627\", \"916.976.9480x13851\"), last_name (\"Hamill\", \"Schmitt\", \"Price\") | dogs : dog_id (7, 8, 1), weight (\"6.92\", \"8.04\", \"6.92\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (2, 10, 7), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2010-11-11 07:11:53\", \"2012-10-14 14:44:37\", \"2012-05-03 21:42:25\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"1\", \"9\", \"1\"), name (\"Holden\", \"Jesus\", \"Jeffrey\"), date_adopted (\"2018-03-08 15:03:00\", \"2018-03-07 21:45:43\", \"2018-03-18 07:47:40\"), date_departed (\"2018-03-24 19:12:22\", \"2018-03-24 23:48:59\", \"2018-03-25 06:29:10\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-10-25 00:55:34\", \"2017-09-08 20:10:13\") | dogs_name : name (\"Holden\", \"Jesus\", \"Jeffrey\"), dog_id (5, 8, 9) | professionals : zip_code (\"34041\", \"77129\", \"07412\"), home_phone (\"971.048.3763x9404\", \"022.529.0550x1319\", \"022.529.0550x1319\"), email_address (\"goyette.roosevelt@example.net\", \"goyette.roosevelt@example.net\", \"lambert62@example.org\"), city (\"McLaughlinfort\", \"North Adelberttown\", \"East Ila\"), cell_number (\"889-940-2676\", \"962-983-8109x3509\", \"461-801-2600\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Hyatt\", \"Hyatt\", \"Hayes\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), professional_id (12, 1, 5), state (\"NewMexico\", \"Connecticut\", \"Mississippi\"), first_name (\"Ericka\", \"Karley\", \"Jayson\") | treatments : treatment_id (2, 4, 6), dog_id (10, 14, 10), professional_id (5, 7, 8), cost_of_treatment (567, 668, 313), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-14 19:10:40\", \"2018-03-15 20:25:34\")", 
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1", 
        "query1": "select name, age, weight from dogs where abandoned_yn = 1", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            22, 
                            false
                        ], 
                        null
                    ], 
                    1.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                29, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "name"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , cell_number , city , first_name , zip_code , home_phone 563-0260x454\", \"1-346-655-5842x768\", \"563-0260x454\", owner_id , state , email_address , last_name  | dogs : name , dog_id , weight , age , abandoned_yn , date_arrived , size_code , date_of_birth , gender , breed_code , owner_id , date_departed , date_adopted  | dogs_weight : dog_id , weight  | professionals : first_name , state , email_address , last_name , city , zip_code , professional_id , home_phone , role_code , street , cell_number 908-7311x065\" | treatments : dog_id , date_of_treatment , cost_of_treatment , treatment_type_code , professional_id , treatment_id ", 
        "query2": "select t1.name, t1.age, t2.weight from dogs as t1 join dogs_weight as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "from", 
            "dogs", 
            "where", 
            "abandoned_yn", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "dog", 
            "name", 
            ",", 
            "age", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "dogs", 
            "that", 
            "were", 
            "abandoned", 
            "?", 
            "Note", 
            "that", 
            "1", 
            "stands", 
            "for", 
            "yes", 
            ",", 
            "and", 
            "0", 
            "stands", 
            "for", 
            "no", 
            "in", 
            "the", 
            "tables", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "FROM", 
            "Dogs", 
            "WHERE", 
            "abandoned_yn", 
            "=", 
            "1"
        ], 
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"57382 Yost Ridges\", \"15828 Spencer Extensions\", \"57382 Yost Ridges\"), cell_number (\"1-739-421-2225x38148\", \"559.874.3011x989\", \"481-483-9083x37986\"), city (\"South Daisyfurt\", \"East Hillardberg\", \"Port Reannamouth\"), first_name (\"Orlando\", \"Melisa\", \"Cindy\"), zip_code (\"87304\", \"36871\", \"22731\"), home_phone (\"(799)563-0260x454\", \"1-346-655-5842x768\", \"(799)563-0260x454\"), owner_id (13, 2, 14), state (\"Arizona\", \"Florida\", \"NewYork\"), email_address (\"marks.gail@example.org\", \"lynn81@example.org\", \"pearlie18@example.com\"), last_name (\"Hamill\", \"Stoltenberg\", \"Haley\") | dogs : name (\"Narciso\", \"Bessie\", \"George\"), dog_id (8, 10, 9), weight (\"8.04\", \"7.57\", \"6.92\"), age (\"3\", \"1\", \"3\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-12-22 05:02:02\", \"2018-01-17 11:44:16\", \"2017-04-15 09:25:31\"), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2018-03-17 04:05:12\", \"2010-11-11 07:11:53\", \"2010-11-11 07:11:53\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (13, 12, 7), date_departed (\"2018-03-24 19:12:22\", \"2018-03-25 10:25:46\", \"2018-03-25 04:42:14\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-02-25 23:45:30\", \"2018-03-21 10:41:18\") | dogs_weight : dog_id (4, 12, 7), weight (\"8.04\", \"7.57\", \"6.92\") | professionals : first_name (\"Brady\", \"Brady\", \"Velva\"), state (\"SouthCarolina\", \"NewMexico\", \"Indiana\"), email_address (\"marquardt.furman@example.org\", \"marquardt.furman@example.org\", \"cole.margarita@example.org\"), last_name (\"Walter\", \"Braun\", \"Kshlerin\"), city (\"South Rockyport\", \"New Maryjane\", \"New Laurytown\"), zip_code (\"06646\", \"33020\", \"02281\"), professional_id (1, 10, 1), home_phone (\"022.529.0550x1319\", \"320-508-6023\", \"891.475.2256\"), role_code (\"Employee\", \"Veterenarian\"), street (\"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), cell_number (\"461-801-2600\", \"609-405-2990\", \"(369)908-7311x065\") | treatments : dog_id (13, 7, 13), date_of_treatment (\"2018-03-24 22:25:58\", \"2018-03-13 12:22:58\", \"2018-03-23 13:52:10\"), cost_of_treatment (139, 656, 567), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (14, 8, 6), treatment_id (4, 3, 14)", 
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1", 
        "query1": "select name, age, weight from dogs where abandoned_yn = 1", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            22, 
                            false
                        ], 
                        null
                    ], 
                    1.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                29, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "weight"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , first_name , cell_number 9217952551\", state , home_phone , street , zip_code , last_name , city , email_address  | dogs : size_code , date_of_birth , dog_id , owner_id , breed_code , gender , date_departed , weight , name , date_arrived , abandoned_yn , age , date_adopted  | dogs_age : dog_id , age  | professionals : city , role_code , cell_number , street , last_name , first_name , professional_id , home_phone 338-3342x585\", \"246-951-0080x76716\", \"338-3342x585\", email_address , state , zip_code  | treatments : dog_id , professional_id , cost_of_treatment , date_of_treatment , treatment_type_code , treatment_id ", 
        "query2": "select t1.name, t2.age, t1.weight from dogs as t1 join dogs_age as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "from", 
            "dogs", 
            "where", 
            "abandoned_yn", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "dog", 
            "name", 
            ",", 
            "age", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "dogs", 
            "that", 
            "were", 
            "abandoned", 
            "?", 
            "Note", 
            "that", 
            "1", 
            "stands", 
            "for", 
            "yes", 
            ",", 
            "and", 
            "0", 
            "stands", 
            "for", 
            "no", 
            "in", 
            "the", 
            "tables", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "FROM", 
            "Dogs", 
            "WHERE", 
            "abandoned_yn", 
            "=", 
            "1"
        ], 
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (2, 8, 4), first_name (\"Nora\", \"Orlando\", \"Emelie\"), cell_number (\"559.874.3011x989\", \"559.874.3011x989\", \"+70(4)9217952551\"), state (\"Florida\", \"NorthDakota\", \"SouthDakota\"), home_phone (\"318-052-6573\", \"363.948.1090\", \"066.264.7885\"), street (\"2635 Caitlyn Plains\", \"51934 Treutel Harbor\", \"2635 Caitlyn Plains\"), zip_code (\"61019\", \"36871\", \"22693\"), last_name (\"Nicolas\", \"Ondricka\", \"Prohaska\"), city (\"Barrettburgh\", \"Brakusfurt\", \"East Maribelbury\"), email_address (\"fschoen@example.net\", \"ykris@example.com\", \"edythe62@example.org\") | dogs : size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2008-05-30 12:51:34\", \"2017-09-19 05:39:09\", \"2012-01-27 05:11:53\"), dog_id (9, 11, 14), owner_id (8, 5, 1), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 02:47:40\", \"2018-03-25 04:42:14\"), weight (\"8.16\", \"9.48\", \"1.72\"), name (\"Holden\", \"George\", \"Evangeline\"), date_arrived (\"2017-04-20 00:58:55\", \"2018-01-17 11:44:16\", \"2017-12-22 05:02:02\"), abandoned_yn (\"1\", \"0\"), age (\"2\", \"6\", \"3\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-25 08:12:51\", \"2018-02-27 00:27:57\") | dogs_age : dog_id (3, 13, 9), age (\"2\", \"6\", \"3\") | professionals : city (\"North Adelberttown\", \"McLaughlinfort\", \"Jaceton\"), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"880-659-7577x736\", \"461-801-2600\", \"00230569697\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), last_name (\"Murazik\", \"Pouros\", \"Pouros\"), first_name (\"Sigurd\", \"Monte\", \"Karley\"), professional_id (6, 9, 9), home_phone (\"(230)338-3342x585\", \"246-951-0080x76716\", \"(230)338-3342x585\"), email_address (\"goyette.roosevelt@example.net\", \"lambert62@example.org\", \"lucile.shanahan@example.org\"), state (\"Indiana\", \"Hawaii\", \"NorthCarolina\"), zip_code (\"98844\", \"67980\", \"67980\") | treatments : dog_id (10, 10, 12), professional_id (6, 10, 14), cost_of_treatment (139, 139, 945), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-10 11:45:58\", \"2018-03-24 22:25:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (15, 11, 11)", 
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1", 
        "query1": "select name, age, weight from dogs where abandoned_yn = 1", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            22, 
                            false
                        ], 
                        null
                    ], 
                    1.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                29, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "age"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , cell_number 271-6744x4507\", \"762.589.6117x1328\", \"559.874.3011x989\", email_address , first_name , last_name , zip_code , owner_id , state , street , home_phone  | dogs : age , date_of_birth , size_code , weight , gender , name , date_departed , abandoned_yn , date_arrived , date_adopted , owner_id , breed_code , dog_id  | dogs_name : dog_id , name  | professionals : last_name , cell_number , street , zip_code , first_name , professional_id , home_phone 2898266914\", state , city , email_address , role_code  | treatments : dog_id , professional_id , date_of_treatment , treatment_id , treatment_type_code , cost_of_treatment ", 
        "query2": "select t2.name, t1.age, t1.weight from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "from", 
            "dogs", 
            "where", 
            "abandoned_yn", 
            "=", 
            "value"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "dog", 
            "name", 
            ",", 
            "age", 
            "and", 
            "weight", 
            "of", 
            "the", 
            "dogs", 
            "that", 
            "were", 
            "abandoned", 
            "?", 
            "Note", 
            "that", 
            "1", 
            "stands", 
            "for", 
            "yes", 
            ",", 
            "and", 
            "0", 
            "stands", 
            "for", 
            "no", 
            "in", 
            "the", 
            "tables", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "name", 
            ",", 
            "age", 
            ",", 
            "weight", 
            "FROM", 
            "Dogs", 
            "WHERE", 
            "abandoned_yn", 
            "=", 
            "1"
        ], 
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"Beerton\", \"Port Reannamouth\", \"Lake Jennyferfort\"), cell_number (\"(783)271-6744x4507\", \"762.589.6117x1328\", \"559.874.3011x989\"), email_address (\"margaretta.runte@example.net\", \"kturner@example.net\", \"wpfeffer@example.net\"), first_name (\"Cindy\", \"Cindy\", \"Heather\"), last_name (\"Schmitt\", \"Price\", \"Hamill\"), zip_code (\"11990\", \"02647\", \"45244\"), owner_id (10, 12, 3), state (\"SouthDakota\", \"Wisconsin\", \"Arizona\"), street (\"1204 Mae Highway Apt. 107\", \"68118 Daniel Row\", \"1204 Mae Highway Apt. 107\"), home_phone (\"1-346-655-5842x768\", \"916.976.9480x13851\", \"1-346-655-5842x768\") | dogs : age (\"4\", \"6\", \"6\"), date_of_birth (\"2008-05-19 15:54:49\", \"2017-09-19 05:39:09\", \"2013-02-20 14:50:56\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.04\", \"6.92\", \"7.57\"), gender (\"1\", \"0\"), name (\"Hipolito\", \"Merritt\", \"Kacey\"), date_departed (\"2018-03-24 19:12:22\", \"2018-03-25 02:47:40\", \"2018-03-24 19:12:22\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-10-25 00:55:34\", \"2018-01-02 03:15:29\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-05 06:05:23\", \"2018-03-13 12:47:15\"), owner_id (2, 3, 6), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (3, 11, 9) | dogs_name : dog_id (8, 12, 2), name (\"Hipolito\", \"Merritt\", \"Kacey\") | professionals : last_name (\"Frami\", \"Kshlerin\", \"Braun\"), cell_number (\"328.842.3792\", \"011.193.9081x3186\", \"1-185-137-1945x409\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), zip_code (\"54312\", \"41215\", \"43129\"), first_name (\"Lesly\", \"Ruben\", \"Jayson\"), professional_id (13, 4, 13), home_phone (\"246-951-0080x76716\", \"246-951-0080x76716\", \"+71(6)2898266914\"), state (\"SouthCarolina\", \"Indiana\", \"SouthCarolina\"), city (\"Kirastad\", \"New Maryjane\", \"Jaceton\"), email_address (\"deanna.schuster@example.com\", \"lourdes.lowe@example.net\", \"lucile.shanahan@example.org\"), role_code (\"Employee\", \"Veterenarian\") | treatments : dog_id (13, 7, 12), professional_id (6, 4, 10), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-04 20:33:43\", \"2018-03-16 10:27:36\"), treatment_id (7, 8, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (139, 139, 656)", 
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1", 
        "query1": "select name, age, weight from dogs where abandoned_yn = 1", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [
                [
                    false, 
                    2, 
                    [
                        0, 
                        [
                            0, 
                            22, 
                            false
                        ], 
                        null
                    ], 
                    1.0, 
                    null
                ]
            ], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                25, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                26, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                29, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "name"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | charges_charge_type : charge_type , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , first_name , zip_code , last_name , cell_number 4323592985\", \"+004323592985\", home_phone 997-7627\", state , owner_id , street , email_address  | dogs : dog_id , gender , date_adopted , name , date_arrived , size_code , date_of_birth , abandoned_yn , owner_id , age , breed_code , date_departed , weight  | professionals : first_name , street , professional_id , cell_number , role_code , state , email_address , home_phone , city , zip_code , last_name  | treatments : treatment_id , cost_of_treatment , date_of_treatment , professional_id , treatment_type_code , dog_id ", 
        "query2": "select t2.charge_type, t1.charge_amount from charges as t1 join charges_charge_type as t2 on t1.charge_id = t2.charge_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "from", 
            "charges"
        ], 
        "question_toks": [
            "How", 
            "much", 
            "does", 
            "each", 
            "charge", 
            "type", 
            "costs", 
            "?", 
            "List", 
            "both", 
            "charge", 
            "type", 
            "and", 
            "amount", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "FROM", 
            "Charges"
        ], 
        "question": "How much does each charge type costs? List both charge type and amount.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | charges_charge_type : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"West Leonard\", \"Port Zackery\", \"West Leonard\"), first_name (\"Jaclyn\", \"Tre\", \"Kade\"), zip_code (\"86010\", \"92406\", \"92406\"), last_name (\"Nicolas\", \"Feil\", \"Hamill\"), cell_number (\"1-626-264-7659x1697\", \"+00(2)4323592985\", \"+00(2)4323592985\"), home_phone (\"130-796-4589x05454\", \"893-862-5295x61709\", \"(058)997-7627\"), state (\"SouthDakota\", \"NewYork\", \"Arkansas\"), owner_id (5, 5, 1), street (\"59509 Mellie Mountain\", \"51934 Treutel Harbor\", \"15828 Spencer Extensions\"), email_address (\"christy49@example.org\", \"ybergstrom@example.com\", \"lynn81@example.org\") | dogs : dog_id (13, 8, 8), gender (\"1\", \"0\"), date_adopted (\"2018-03-05 06:05:23\", \"2018-03-07 21:45:43\", \"2018-03-18 07:47:40\"), name (\"Jeffrey\", \"Jesus\", \"Hipolito\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-06-25 10:14:05\", \"2017-12-29 23:24:13\"), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\", \"2008-10-09 22:38:53\"), abandoned_yn (\"1\", \"0\"), owner_id (14, 7, 6), age (\"6\", \"6\", \"5\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-24 19:12:22\", \"2018-03-24 19:12:22\"), weight (\"4.36\", \"9.48\", \"4.36\") | professionals : first_name (\"Vernice\", \"Taryn\", \"Ruben\"), street (\"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"72532 Hane Course\nLake Berylland, ND 95283\"), professional_id (11, 8, 7), cell_number (\"1-258-285-4707x8020\", \"499-434-0215x1628\", \"889-940-2676\"), role_code (\"Employee\", \"Veterenarian\"), state (\"SouthCarolina\", \"NorthCarolina\", \"Mississippi\"), email_address (\"goyette.roosevelt@example.net\", \"jeichmann@example.com\", \"jacynthe.mclaughlin@example.net\"), home_phone (\"1-138-287-3775\", \"891.475.2256\", \"1-138-287-3775\"), city (\"Baileymouth\", \"Juddton\", \"North Adelberttown\"), zip_code (\"98844\", \"06646\", \"41215\"), last_name (\"Frami\", \"Tillman\", \"Hayes\") | treatments : treatment_id (9, 15, 2), cost_of_treatment (428, 945, 945), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-11 04:23:15\", \"2018-03-15 20:25:34\"), professional_id (8, 10, 14), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (14, 1, 1)", 
        "orig_query": "select charge_type, charge_amount from charges", 
        "query1": "select charge_type, charge_amount from charges", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "charges": "charge_type"
        }, 
        "primary_key": {
            "charges": "charge_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | charges_charge_amount : charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : zip_code , last_name , cell_number 768-5439x484\", \"768-5439x484\", \"+004323592985\", street , owner_id , city , home_phone 563-0260x454\", \"318-052-6573\", state , email_address , first_name  | dogs : weight , date_departed , breed_code , name , abandoned_yn , owner_id , dog_id , size_code , date_of_birth , date_arrived , date_adopted , age , gender  | professionals : cell_number 939-2435x80863\", \"1-258-285-4707x8020\", \"139-321-7313\", professional_id , role_code , first_name , street , home_phone , zip_code , email_address , last_name , city , state  | treatments : date_of_treatment , cost_of_treatment , dog_id , treatment_type_code , professional_id , treatment_id ", 
        "query2": "select t1.charge_type, t2.charge_amount from charges as t1 join charges_charge_amount as t2 on t1.charge_id = t2.charge_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "from", 
            "charges"
        ], 
        "question_toks": [
            "How", 
            "much", 
            "does", 
            "each", 
            "charge", 
            "type", 
            "costs", 
            "?", 
            "List", 
            "both", 
            "charge", 
            "type", 
            "and", 
            "amount", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "FROM", 
            "Charges"
        ], 
        "question": "How much does each charge type costs? List both charge type and amount.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | charges_charge_amount : charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : zip_code (\"86010\", \"02647\", \"36871\"), last_name (\"Funk\", \"Haley\", \"Fisher\"), cell_number (\"(722)768-5439x484\", \"(722)768-5439x484\", \"+00(2)4323592985\"), street (\"1858 Jan Park\", \"1204 Mae Highway Apt. 107\", \"2417 Keara Stravenue Apt. 146\"), owner_id (15, 15, 15), city (\"Lake Valentin\", \"New Margaretteborough\", \"Lake Valentin\"), home_phone (\"893-862-5295x61709\", \"(799)563-0260x454\", \"318-052-6573\"), state (\"Mississippi\", \"Florida\", \"Arkansas\"), email_address (\"margaretta.runte@example.net\", \"lynn81@example.org\", \"ybergstrom@example.com\"), first_name (\"Nora\", \"Jaclyn\", \"Melisa\") | dogs : weight (\"5.16\", \"1.72\", \"8.96\"), date_departed (\"2018-03-24 19:12:22\", \"2018-03-25 06:29:10\", \"2018-03-25 05:07:47\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Bessie\", \"Betty\", \"Kacey\"), abandoned_yn (\"1\", \"0\"), owner_id (3, 1, 3), dog_id (3, 1, 5), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2012-05-31 08:01:36\", \"2012-07-11 17:15:10\", \"2010-11-11 07:11:53\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-09-08 20:10:13\", \"2017-12-29 06:08:26\"), date_adopted (\"2018-02-27 00:27:57\", \"2018-03-13 12:47:15\", \"2018-03-13 12:47:15\"), age (\"5\", \"6\", \"9\"), gender (\"1\", \"0\") | professionals : cell_number (\"(275)939-2435x80863\", \"1-258-285-4707x8020\", \"139-321-7313\"), professional_id (7, 10, 11), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Karley\", \"Taryn\", \"Winfield\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), home_phone (\"022.529.0550x1319\", \"1-138-287-3775\", \"320-508-6023\"), zip_code (\"17902\", \"80775\", \"52476\"), email_address (\"marquardt.furman@example.org\", \"uboehm@example.org\", \"goyette.roosevelt@example.net\"), last_name (\"Christiansen\", \"Considine\", \"Christiansen\"), city (\"Juddton\", \"Baileymouth\", \"Baileymouth\"), state (\"Utah\", \"Connecticut\", \"Alabama\") | treatments : date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-15 19:10:02\", \"2018-03-01 04:14:46\"), cost_of_treatment (349, 313, 139), dog_id (15, 15, 7), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (9, 10, 4), treatment_id (14, 11, 2)", 
        "orig_query": "select charge_type, charge_amount from charges", 
        "query1": "select charge_type, charge_amount from charges", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "charges": "charge_amount"
        }, 
        "primary_key": {
            "charges": "charge_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | charges_charge_type : charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , home_phone , first_name , street , city , cell_number 9217952551\", \"559.874.3011x989\", \"121.381.3316x6535\", state , email_address , last_name , zip_code  | dogs : size_code , abandoned_yn , date_arrived , name , date_of_birth , owner_id , dog_id , gender , date_departed , date_adopted , weight , breed_code , age  | professionals : first_name , home_phone 338-3342x585\", \"304-4499x59146\", role_code , email_address , last_name , city , professional_id , cell_number , street , zip_code , state  | treatments : cost_of_treatment , date_of_treatment , professional_id , treatment_type_code , treatment_id , dog_id ", 
        "query2": "select t2.charge_type, t1.charge_amount from charges as t1 join charges_charge_type as t2 on t1.charge_id = t2.charge_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "from", 
            "charges"
        ], 
        "question_toks": [
            "List", 
            "each", 
            "charge", 
            "type", 
            "and", 
            "its", 
            "amount", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "FROM", 
            "Charges"
        ], 
        "question": "List each charge type and its amount.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | charges_charge_type : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (5, 1, 5), home_phone (\"363.948.1090\", \"1-332-849-1908\", \"1-682-845-0116x63235\"), first_name (\"Orlando\", \"Gay\", \"Rachelle\"), street (\"89011 Kertzmann Spring Suite 642\", \"9212 Rosenbaum Lights\", \"1204 Mae Highway Apt. 107\"), city (\"East Maribelbury\", \"Brakusfurt\", \"Port Zackery\"), cell_number (\"+70(4)9217952551\", \"559.874.3011x989\", \"121.381.3316x6535\"), state (\"Maryland\", \"Mississippi\", \"Indiana\"), email_address (\"zboncak.madonna@example.net\", \"lynn81@example.org\", \"margaretta.runte@example.net\"), last_name (\"Stoltenberg\", \"Feil\", \"Hamill\"), zip_code (\"35747\", \"00589\", \"92406\") | dogs : size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-06-18 19:45:38\", \"2018-01-17 11:44:16\"), name (\"Bessie\", \"Troy\", \"Houston\"), date_of_birth (\"2008-10-09 22:38:53\", \"2012-01-27 05:11:53\", \"2013-02-20 14:50:56\"), owner_id (5, 6, 8), dog_id (9, 10, 14), gender (\"1\", \"0\"), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 02:47:40\", \"2018-03-25 06:46:07\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-02-25 23:45:30\", \"2018-03-05 06:05:23\"), weight (\"1.39\", \"4.36\", \"8.95\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"8\", \"6\", \"2\") | professionals : first_name (\"Taryn\", \"Olaf\", \"Olaf\"), home_phone (\"246-951-0080x76716\", \"(230)338-3342x585\", \"(920)304-4499x59146\"), role_code (\"Employee\", \"Veterenarian\"), email_address (\"goyette.roosevelt@example.net\", \"goyette.roosevelt@example.net\", \"west.eula@example.net\"), last_name (\"O'Reilly\", \"Watsica\", \"Christiansen\"), city (\"Borisside\", \"West Heidi\", \"East Ila\"), professional_id (8, 2, 1), cell_number (\"328.842.3792\", \"609-405-2990\", \"328.842.3792\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), zip_code (\"41215\", \"06646\", \"84515\"), state (\"Connecticut\", \"NorthCarolina\", \"Mississippi\") | treatments : cost_of_treatment (852, 945, 313), date_of_treatment (\"2018-03-11 04:23:15\", \"2018-03-24 22:25:58\", \"2018-03-24 22:25:58\"), professional_id (10, 4, 5), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (15, 3, 15), dog_id (13, 4, 7)", 
        "orig_query": "select charge_type, charge_amount from charges", 
        "query1": "select charge_type, charge_amount from charges", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "charges": "charge_type"
        }, 
        "primary_key": {
            "charges": "charge_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | charges_charge_amount : charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : zip_code , home_phone 997-7627\", \"085.557.0379x84348\", city , first_name , email_address , last_name , owner_id , street , cell_number 9217952551\", \"1-739-421-2225x38148\", \"+709217952551\", state  | dogs : abandoned_yn , breed_code , gender , age , date_of_birth , size_code , date_adopted , date_arrived , date_departed , dog_id , weight , owner_id , name  | professionals : state , cell_number 908-7311x065\", \"328.842.3792\", professional_id , home_phone 304-4499x59146\", \"246-951-0080x76716\", \"1-138-287-3775\", city , role_code , street , last_name , first_name , zip_code , email_address  | treatments : date_of_treatment , professional_id , cost_of_treatment , treatment_type_code , dog_id , treatment_id ", 
        "query2": "select t1.charge_type, t2.charge_amount from charges as t1 join charges_charge_amount as t2 on t1.charge_id = t2.charge_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "from", 
            "charges"
        ], 
        "question_toks": [
            "List", 
            "each", 
            "charge", 
            "type", 
            "and", 
            "its", 
            "amount", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "charge_type", 
            ",", 
            "charge_amount", 
            "FROM", 
            "Charges"
        ], 
        "question": "List each charge type and its amount.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | charges_charge_amount : charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : zip_code (\"11990\", \"22731\", \"61019\"), home_phone (\"130-796-4589x05454\", \"(058)997-7627\", \"085.557.0379x84348\"), city (\"Beerton\", \"Lake Carleyborough\", \"Port Zackery\"), first_name (\"Tre\", \"Jaclyn\", \"Lorenz\"), email_address (\"ybergstrom@example.com\", \"angeline99@example.com\", \"pearlie18@example.com\"), last_name (\"Stoltenberg\", \"Hamill\", \"Fisher\"), owner_id (11, 13, 13), street (\"1204 Mae Highway Apt. 107\", \"59509 Mellie Mountain\", \"692 Jaskolski Forges\"), cell_number (\"+70(4)9217952551\", \"1-739-421-2225x38148\", \"+70(4)9217952551\"), state (\"NewYork\", \"Pennsylvania\", \"Arkansas\") | dogs : abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), age (\"6\", \"9\", \"4\"), date_of_birth (\"2009-04-12 06:02:48\", \"2018-03-17 04:05:12\", \"2012-05-03 21:42:25\"), size_code (\"LGE\", \"MED\", \"SML\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-13 12:47:15\", \"2018-03-25 08:12:51\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-10-24 04:45:13\", \"2017-12-22 05:02:02\"), date_departed (\"2018-03-25 04:50:22\", \"2018-03-25 02:47:40\", \"2018-03-24 19:12:22\"), dog_id (10, 12, 8), weight (\"8.16\", \"7.57\", \"5.16\"), owner_id (10, 7, 11), name (\"Troy\", \"Hipolito\", \"Houston\") | professionals : state (\"Wisconsin\", \"Hawaii\", \"Utah\"), cell_number (\"328.842.3792\", \"(369)908-7311x065\", \"328.842.3792\"), professional_id (9, 5, 10), home_phone (\"(920)304-4499x59146\", \"246-951-0080x76716\", \"1-138-287-3775\"), city (\"East Ila\", \"North Odellfurt\", \"East Ila\"), role_code (\"Employee\", \"Veterenarian\"), street (\"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), last_name (\"Walter\", \"Christiansen\", \"Murazik\"), first_name (\"Karley\", \"Sigurd\", \"Brady\"), zip_code (\"54312\", \"02281\", \"98844\"), email_address (\"mekhi.little@example.org\", \"mekhi.little@example.org\", \"jeichmann@example.com\") | treatments : date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-13 12:22:58\", \"2018-03-08 05:26:23\"), professional_id (4, 6, 14), cost_of_treatment (147, 139, 668), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (12, 1, 1), treatment_id (15, 8, 7)", 
        "orig_query": "select charge_type, charge_amount from charges", 
        "query1": "select charge_type, charge_amount from charges", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        1
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "charges": "charge_amount"
        }, 
        "primary_key": {
            "charges": "charge_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_type , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : street , owner_id , email_address , home_phone , last_name , zip_code , cell_number , city , first_name , state  | dogs : date_arrived , date_of_birth , breed_code , name , abandoned_yn , weight , dog_id , age , owner_id , date_adopted , date_departed , size_code , gender  | professionals : state , professional_id , city , home_phone 2898266914\", first_name , street , zip_code , cell_number , role_code , last_name , email_address  | professionals_cell_number : professional_id , cell_number  | treatments : treatment_type_code , cost_of_treatment , treatment_id , dog_id , professional_id , date_of_treatment ", 
        "query2": "select t1.email_address, t2.cell_number, t1.home_phone from professionals as t1 join professionals_cell_number as t2 on t1.professional_id = t2.professional_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "from", 
            "professionals"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "email", 
            ",", 
            "cell", 
            "phone", 
            "and", 
            "home", 
            "phone", 
            "of", 
            "all", 
            "the", 
            "professionals", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "FROM", 
            "professionals"
        ], 
        "question": "List the email, cell phone and home phone of all the professionals.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : street (\"60352 Kayleigh Crossing Suite 700\", \"60352 Kayleigh Crossing Suite 700\", \"60352 Kayleigh Crossing Suite 700\"), owner_id (5, 8, 6), email_address (\"lynn81@example.org\", \"marks.gail@example.org\", \"kturner@example.net\"), home_phone (\"363.948.1090\", \"066.264.7885\", \"01802479758\"), last_name (\"Funk\", \"Prohaska\", \"Hamill\"), zip_code (\"35747\", \"87304\", \"45244\"), cell_number (\"1-739-421-2225x38148\", \"1-626-264-7659x1697\", \"478.978.0729\"), city (\"East Hillardberg\", \"South Afton\", \"West Leonard\"), first_name (\"Kade\", \"Rolando\", \"Rachelle\"), state (\"Wisconsin\", \"Washington\", \"Pennsylvania\") | dogs : date_arrived (\"2017-10-25 00:55:34\", \"2017-10-16 20:06:21\", \"2017-07-25 15:19:07\"), date_of_birth (\"2009-04-12 06:02:48\", \"2013-02-20 14:50:56\", \"2015-02-26 21:31:22\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Kacey\", \"Hipolito\", \"Betty\"), abandoned_yn (\"1\", \"0\"), weight (\"8.04\", \"3.52\", \"8.96\"), dog_id (1, 1, 13), age (\"8\", \"8\", \"5\"), owner_id (6, 3, 1), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-21 10:41:18\", \"2018-03-08 15:03:00\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 15:05:16\", \"2018-03-25 15:05:16\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\") | professionals : state (\"SouthCarolina\", \"Montana\", \"Hawaii\"), professional_id (7, 9, 10), city (\"Domenickton\", \"Domenickton\", \"Borisside\"), home_phone (\"312.216.3352\", \"320-508-6023\", \"+71(6)2898266914\"), first_name (\"Lesly\", \"Ericka\", \"Danny\"), street (\"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), zip_code (\"06646\", \"02281\", \"17902\"), cell_number (\"499-434-0215x1628\", \"139-321-7313\", \"00230569697\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Hayes\", \"Ullrich\", \"Kshlerin\"), email_address (\"jacynthe.mclaughlin@example.net\", \"jerrod.bahringer@example.org\", \"delphine29@example.com\") | professionals_cell_number : professional_id (10, 11, 14), cell_number (\"499-434-0215x1628\", \"139-321-7313\", \"00230569697\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (429, 147, 428), treatment_id (3, 14, 15), dog_id (1, 4, 14), professional_id (5, 4, 4), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-19 04:39:54\", \"2018-03-01 04:14:46\")", 
        "orig_query": "select email_address, cell_number, home_phone from professionals", 
        "query1": "select email_address, cell_number, home_phone from professionals", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                41, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "cell_number"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , owner_id , first_name , city , zip_code , cell_number 768-5439x484\", email_address , state , last_name , home_phone  | dogs : date_of_birth , age , size_code , abandoned_yn , owner_id , gender , date_departed , date_adopted , breed_code , name , dog_id , date_arrived , weight  | professionals : first_name , zip_code , professional_id , last_name , role_code , home_phone 304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\", email_address , cell_number 908-7311x065\", \"00230569697\", street , city , state  | professionals_home_phone : home_phone 304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\", professional_id  | treatments : cost_of_treatment , date_of_treatment , dog_id , treatment_type_code , treatment_id , professional_id ", 
        "query2": "select t1.email_address, t1.cell_number, t2.home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "from", 
            "professionals"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "email", 
            ",", 
            "cell", 
            "phone", 
            "and", 
            "home", 
            "phone", 
            "of", 
            "all", 
            "the", 
            "professionals", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "FROM", 
            "professionals"
        ], 
        "question": "List the email, cell phone and home phone of all the professionals.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"57382 Yost Ridges\", \"0647 Hintz Village Apt. 024\", \"15828 Spencer Extensions\"), owner_id (2, 13, 2), first_name (\"Orlando\", \"Tre\", \"Melisa\"), city (\"Barrettburgh\", \"Brakusfurt\", \"Lake Valentin\"), zip_code (\"78297\", \"87304\", \"86010\"), cell_number (\"478.978.0729\", \"559.874.3011x989\", \"(722)768-5439x484\"), email_address (\"kturner@example.net\", \"pearlie18@example.com\", \"kturner@example.net\"), state (\"Washington\", \"Pennsylvania\", \"Arizona\"), last_name (\"Stoltenberg\", \"DuBuque\", \"Nicolas\"), home_phone (\"085.557.0379x84348\", \"1-332-849-1908\", \"066.264.7885\") | dogs : date_of_birth (\"2008-10-09 22:38:53\", \"2008-05-19 15:54:49\", \"2012-07-11 17:15:10\"), age (\"4\", \"1\", \"6\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), owner_id (3, 12, 13), gender (\"1\", \"0\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 04:42:14\", \"2018-03-24 19:36:59\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-08 15:03:00\", \"2018-03-18 07:47:40\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Mavis\", \"Lyric\", \"Kacey\"), dog_id (5, 15, 10), date_arrived (\"2017-05-06 08:03:52\", \"2017-12-22 05:02:02\", \"2018-01-02 03:15:29\"), weight (\"9.48\", \"4.01\", \"6.92\") | professionals : first_name (\"Ruben\", \"Monte\", \"Ericka\"), zip_code (\"43129\", \"17902\", \"98844\"), professional_id (6, 8, 1), last_name (\"Frami\", \"Ullrich\", \"Considine\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"(920)304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\"), email_address (\"jacynthe.mclaughlin@example.net\", \"jerrod.bahringer@example.org\", \"lourdes.lowe@example.net\"), cell_number (\"1-258-285-4707x8020\", \"(369)908-7311x065\", \"00230569697\"), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), city (\"North Odellfurt\", \"North Odellfurt\", \"North Adelberttown\"), state (\"Hawaii\", \"Indiana\", \"Alabama\") | professionals_home_phone : home_phone (\"(920)304-4499x59146\", \"246-951-0080x76716\", \"022.529.0550x1319\"), professional_id (10, 2, 14) | treatments : cost_of_treatment (428, 428, 428), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-03-01 04:14:46\", \"2018-03-19 04:39:54\"), dog_id (7, 2, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (5, 7, 10), professional_id (6, 4, 10)", 
        "orig_query": "select email_address, cell_number, home_phone from professionals", 
        "query1": "select email_address, cell_number, home_phone from professionals", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                41, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "home_phone"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : cell_number , first_name , email_address , state , owner_id , zip_code , home_phone , street , last_name , city  | dogs : date_of_birth , date_arrived , weight , owner_id , name , size_code , gender , abandoned_yn , age , breed_code , date_adopted , date_departed , dog_id  | professionals : zip_code , cell_number , role_code , home_phone 2898266914\", \"971.048.3763x9404\", professional_id , street , email_address , city , state , first_name , last_name  | professionals_email_address : professional_id , email_address  | treatments : treatment_id , date_of_treatment , cost_of_treatment , dog_id , treatment_type_code , professional_id ", 
        "query2": "select t2.email_address, t1.cell_number, t1.home_phone from professionals as t1 join professionals_email_address as t2 on t1.professional_id = t2.professional_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "from", 
            "professionals"
        ], 
        "question_toks": [
            "List", 
            "the", 
            "email", 
            ",", 
            "cell", 
            "phone", 
            "and", 
            "home", 
            "phone", 
            "of", 
            "all", 
            "the", 
            "professionals", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "FROM", 
            "professionals"
        ], 
        "question": "List the email, cell phone and home phone of all the professionals.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : cell_number (\"121.381.3316x6535\", \"739-136-7202\", \"739-136-7202\"), first_name (\"Melisa\", \"Melisa\", \"Johann\"), email_address (\"ykris@example.com\", \"pearlie18@example.com\", \"christy49@example.org\"), state (\"Wisconsin\", \"Virginia\", \"Florida\"), owner_id (5, 13, 12), zip_code (\"36871\", \"36871\", \"87304\"), home_phone (\"363.948.1090\", \"1-346-655-5842x768\", \"318-052-6573\"), street (\"2635 Caitlyn Plains\", \"6950 Katherine Forges Apt. 630\", \"692 Jaskolski Forges\"), last_name (\"Rippin\", \"Price\", \"Feil\"), city (\"Brakusfurt\", \"Port Zackery\", \"East Hillardberg\") | dogs : date_of_birth (\"2015-02-26 21:31:22\", \"2012-07-11 17:15:10\", \"2008-05-19 15:54:49\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-05-06 08:03:52\", \"2017-10-25 00:55:34\"), weight (\"9.48\", \"8.04\", \"7.57\"), owner_id (11, 11, 14), name (\"Jeffrey\", \"Betty\", \"Hipolito\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), age (\"1\", \"3\", \"2\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-08 15:03:00\", \"2018-02-27 00:27:57\", \"2018-03-25 08:12:51\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 02:47:40\", \"2018-03-25 04:50:22\"), dog_id (3, 12, 11) | professionals : zip_code (\"02281\", \"84515\", \"17902\"), cell_number (\"461-801-2600\", \"139-321-7313\", \"00230569697\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"891.475.2256\", \"+71(6)2898266914\", \"971.048.3763x9404\"), professional_id (1, 11, 12), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), email_address (\"lambert62@example.org\", \"mekhi.little@example.org\", \"uboehm@example.org\"), city (\"Borisside\", \"Kirastad\", \"West Heidi\"), state (\"SouthCarolina\", \"Montana\", \"Wisconsin\"), first_name (\"Danny\", \"Taryn\", \"Jayson\"), last_name (\"Jacobs\", \"Tillman\", \"Walter\") | professionals_email_address : professional_id (1, 11, 15), email_address (\"lambert62@example.org\", \"mekhi.little@example.org\", \"uboehm@example.org\") | treatments : treatment_id (2, 2, 3), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-19 04:39:54\", \"2018-03-08 05:26:23\"), cost_of_treatment (147, 266, 313), dog_id (13, 10, 15), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (5, 5, 10)", 
        "orig_query": "select email_address, cell_number, home_phone from professionals", 
        "query1": "select email_address, cell_number, home_phone from professionals", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                41, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "email_address"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , street , cell_number 768-5439x484\", \"341.667.8085\", zip_code , home_phone , first_name , last_name , city , state , email_address  | dogs : date_arrived , weight , age , date_adopted , owner_id , name , size_code , dog_id , date_of_birth , breed_code , date_departed , gender , abandoned_yn  | professionals : last_name , email_address , city , state , street , professional_id , cell_number , zip_code , role_code , home_phone 0259033559\", \"320-508-6023\", \"1-609-566-2752x25197\", first_name  | professionals_cell_number : professional_id , cell_number  | treatments : treatment_type_code , professional_id , dog_id , cost_of_treatment , treatment_id , date_of_treatment ", 
        "query2": "select t1.email_address, t2.cell_number, t1.home_phone from professionals as t1 join professionals_cell_number as t2 on t1.professional_id = t2.professional_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "from", 
            "professionals"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "email", 
            ",", 
            "cell", 
            "phone", 
            "and", 
            "home", 
            "phone", 
            "of", 
            "each", 
            "professional", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "FROM", 
            "professionals"
        ], 
        "question": "What are the email, cell phone and home phone of each professional?", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (7, 1, 14), street (\"2635 Caitlyn Plains\", \"51934 Treutel Harbor\", \"59509 Mellie Mountain\"), cell_number (\"633.455.3045x85484\", \"(722)768-5439x484\", \"341.667.8085\"), zip_code (\"00589\", \"22693\", \"45244\"), home_phone (\"130-796-4589x05454\", \"318-052-6573\", \"363.948.1090\"), first_name (\"Adelle\", \"Tre\", \"Emelie\"), last_name (\"Schmitt\", \"Ondricka\", \"Prohaska\"), city (\"Brakusfurt\", \"South Afton\", \"East Hillardberg\"), state (\"NorthDakota\", \"SouthDakota\", \"Wisconsin\"), email_address (\"margaretta.runte@example.net\", \"pearlie18@example.com\", \"ykris@example.com\") | dogs : date_arrived (\"2017-07-25 15:19:07\", \"2018-01-02 03:15:29\", \"2017-10-16 20:06:21\"), weight (\"9.8\", \"1.39\", \"9.8\"), age (\"9\", \"6\", \"1\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-02-27 00:27:57\", \"2018-03-25 08:12:51\"), owner_id (13, 5, 2), name (\"Merritt\", \"Merritt\", \"Jesus\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (4, 9, 1), date_of_birth (\"2012-10-14 14:44:37\", \"2009-04-12 06:02:48\", \"2008-10-09 22:38:53\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-24 23:48:59\", \"2018-03-25 02:47:40\", \"2018-03-25 10:25:46\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\") | professionals : last_name (\"Pouros\", \"Kshlerin\", \"O'Reilly\"), email_address (\"jeichmann@example.com\", \"delphine29@example.com\", \"cole.margarita@example.org\"), city (\"East Ila\", \"New Laurytown\", \"North Odellfurt\"), state (\"NewMexico\", \"NorthCarolina\", \"Mississippi\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), professional_id (6, 12, 11), cell_number (\"139-321-7313\", \"011.193.9081x3186\", \"1-185-137-1945x409\"), zip_code (\"34041\", \"33020\", \"06646\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"+02(1)0259033559\", \"320-508-6023\", \"1-609-566-2752x25197\"), first_name (\"Ericka\", \"Olaf\", \"Olaf\") | professionals_cell_number : professional_id (12, 5, 10), cell_number (\"139-321-7313\", \"011.193.9081x3186\", \"1-185-137-1945x409\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (10, 9, 4), dog_id (4, 7, 2), cost_of_treatment (147, 313, 567), treatment_id (2, 14, 2), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-08 05:26:23\", \"2018-03-10 11:45:58\")", 
        "orig_query": "select email_address, cell_number, home_phone from professionals", 
        "query1": "select email_address, cell_number, home_phone from professionals", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                41, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "cell_number"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , cell_number , state , first_name , zip_code , owner_id , email_address , last_name , home_phone 997-7627\", \"318-052-6573\", city  | dogs : owner_id , gender , date_departed , name , age , date_of_birth , date_arrived , breed_code , dog_id , weight , date_adopted , size_code , abandoned_yn  | professionals : first_name , email_address , zip_code , street , home_phone , state , role_code , city , last_name , cell_number 908-7311x065\", \"00230569697\", \"011.193.9081x3186\", professional_id  | professionals_home_phone : home_phone , professional_id  | treatments : date_of_treatment , treatment_id , professional_id , cost_of_treatment , treatment_type_code , dog_id ", 
        "query2": "select t1.email_address, t1.cell_number, t2.home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "from", 
            "professionals"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "email", 
            ",", 
            "cell", 
            "phone", 
            "and", 
            "home", 
            "phone", 
            "of", 
            "each", 
            "professional", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "FROM", 
            "professionals"
        ], 
        "question": "What are the email, cell phone and home phone of each professional?", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"59509 Mellie Mountain\", \"15828 Spencer Extensions\", \"2417 Keara Stravenue Apt. 146\"), cell_number (\"762.589.6117x1328\", \"762.589.6117x1328\", \"739-136-7202\"), state (\"Virginia\", \"Pennsylvania\", \"Wisconsin\"), first_name (\"Lorenz\", \"Emelie\", \"Adelle\"), zip_code (\"92406\", \"61019\", \"61019\"), owner_id (4, 5, 14), email_address (\"edythe62@example.org\", \"lynn81@example.org\", \"pearlie18@example.com\"), last_name (\"Ondricka\", \"Rippin\", \"Hamill\"), home_phone (\"1-332-849-1908\", \"(058)997-7627\", \"318-052-6573\"), city (\"Lake Valentin\", \"East Hillardberg\", \"Port Reannamouth\") | dogs : owner_id (8, 10, 5), gender (\"1\", \"0\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 05:07:47\", \"2018-03-25 13:07:04\"), name (\"Merritt\", \"Troy\", \"Jesus\"), age (\"9\", \"9\", \"4\"), date_of_birth (\"2008-05-19 15:54:49\", \"2012-01-27 05:11:53\", \"2013-02-20 14:50:56\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-06-25 10:14:05\", \"2017-04-15 09:25:31\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (12, 6, 1), weight (\"7.57\", \"8.16\", \"4.01\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-21 10:41:18\", \"2018-03-13 12:47:15\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\") | professionals : first_name (\"Danny\", \"Brady\", \"Taryn\"), email_address (\"lucile.shanahan@example.org\", \"cole.margarita@example.org\", \"marquardt.furman@example.org\"), zip_code (\"54312\", \"54312\", \"41215\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), home_phone (\"320-508-6023\", \"022.529.0550x1319\", \"971.048.3763x9404\"), state (\"Connecticut\", \"Alabama\", \"California\"), role_code (\"Employee\", \"Veterenarian\"), city (\"Jaceton\", \"East Ila\", \"New Laurytown\"), last_name (\"Christiansen\", \"Tillman\", \"Christiansen\"), cell_number (\"(369)908-7311x065\", \"00230569697\", \"011.193.9081x3186\"), professional_id (6, 12, 14) | professionals_home_phone : home_phone (\"320-508-6023\", \"022.529.0550x1319\", \"971.048.3763x9404\"), professional_id (10, 15, 12) | treatments : date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-24 22:25:58\", \"2018-03-13 12:22:58\"), treatment_id (1, 7, 7), professional_id (8, 9, 9), cost_of_treatment (428, 407, 514), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (14, 13, 15)", 
        "orig_query": "select email_address, cell_number, home_phone from professionals", 
        "query1": "select email_address, cell_number, home_phone from professionals", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                41, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "home_phone"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : last_name , street , zip_code , cell_number , first_name , city , home_phone , email_address , state , owner_id  | dogs : date_arrived , breed_code , age , date_adopted , size_code , gender , name , weight , abandoned_yn , owner_id , dog_id , date_of_birth , date_departed  | professionals : state , last_name , cell_number , role_code , home_phone , city , zip_code , email_address , first_name , professional_id , street  | professionals_email_address : email_address , professional_id  | treatments : date_of_treatment , cost_of_treatment , professional_id , treatment_type_code , treatment_id , dog_id ", 
        "query2": "select t2.email_address, t1.cell_number, t1.home_phone from professionals as t1 join professionals_email_address as t2 on t1.professional_id = t2.professional_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "from", 
            "professionals"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "email", 
            ",", 
            "cell", 
            "phone", 
            "and", 
            "home", 
            "phone", 
            "of", 
            "each", 
            "professional", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "email_address", 
            ",", 
            "cell_number", 
            ",", 
            "home_phone", 
            "FROM", 
            "professionals"
        ], 
        "question": "What are the email, cell phone and home phone of each professional?", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : last_name (\"Fisher\", \"Hamill\", \"Funk\"), street (\"1858 Jan Park\", \"2417 Keara Stravenue Apt. 146\", \"68118 Daniel Row\"), zip_code (\"00589\", \"45244\", \"22693\"), cell_number (\"478.978.0729\", \"762.589.6117x1328\", \"633.455.3045x85484\"), first_name (\"Tre\", \"Nora\", \"Heather\"), city (\"West Leonard\", \"New Margaretteborough\", \"South Daisyfurt\"), home_phone (\"1-346-655-5842x768\", \"1-332-849-1908\", \"1-332-849-1908\"), email_address (\"angeline99@example.com\", \"hudson.favian@example.com\", \"ybergstrom@example.com\"), state (\"Wisconsin\", \"Pennsylvania\", \"Washington\"), owner_id (2, 7, 7) | dogs : date_arrived (\"2017-10-25 00:55:34\", \"2018-01-17 11:44:16\", \"2017-04-20 00:58:55\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"1\", \"5\", \"1\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-13 12:47:15\", \"2018-02-25 23:45:30\"), size_code (\"LGE\", \"MED\", \"SML\"), gender (\"1\", \"0\"), name (\"Troy\", \"Evangeline\", \"Kacey\"), weight (\"1.72\", \"8.16\", \"9.48\"), abandoned_yn (\"1\", \"0\"), owner_id (11, 14, 3), dog_id (15, 8, 3), date_of_birth (\"2012-05-31 08:01:36\", \"2018-03-17 04:05:12\", \"2015-02-26 21:31:22\"), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 04:42:14\", \"2018-03-25 10:25:46\") | professionals : state (\"Connecticut\", \"NorthCarolina\", \"Montana\"), last_name (\"Frami\", \"Braun\", \"Considine\"), cell_number (\"00230569697\", \"962-983-8109x3509\", \"889-940-2676\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"325-155-0801x7005\", \"246-951-0080x76716\", \"312.216.3352\"), city (\"South Rockyport\", \"East Ila\", \"Jaceton\"), zip_code (\"34041\", \"43129\", \"67980\"), email_address (\"deanna.schuster@example.com\", \"west.eula@example.net\", \"west.eula@example.net\"), first_name (\"Taryn\", \"Taryn\", \"Brady\"), professional_id (6, 2, 2), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\") | professionals_email_address : email_address (\"deanna.schuster@example.com\", \"west.eula@example.net\", \"west.eula@example.net\"), professional_id (15, 5, 6) | treatments : date_of_treatment (\"2018-03-15 19:10:02\", \"2018-02-26 09:08:53\", \"2018-03-15 19:10:02\"), cost_of_treatment (945, 407, 349), professional_id (5, 8, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (11, 6, 14), dog_id (2, 15, 14)", 
        "orig_query": "select email_address, cell_number, home_phone from professionals", 
        "query1": "select email_address, cell_number, home_phone from professionals", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        6
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                41, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                43, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                42, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "professionals": "email_address"
        }, 
        "primary_key": {
            "professionals": "professional_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , home_phone 563-0260x454\", city , state , last_name , owner_id , first_name , street , zip_code , cell_number  | dogs : date_of_birth , abandoned_yn , gender , owner_id , size_code , age , date_departed , name , breed_code , weight , dog_id , date_adopted , date_arrived  | dogs_breed_code : breed_code , dog_id  | professionals : first_name , city , last_name , street , professional_id , state , cell_number , home_phone , role_code , zip_code , email_address  | treatments : cost_of_treatment , professional_id , treatment_id , date_of_treatment , treatment_type_code , dog_id ", 
        "query2": "select distinct t2.breed_code, t1.size_code from dogs as t1 join dogs_breed_code as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "distinct", 
            "breed_code", 
            ",", 
            "size_code", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "all", 
            "the", 
            "possible", 
            "breed", 
            "type", 
            "and", 
            "size", 
            "type", 
            "combinations", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "DISTINCT", 
            "breed_code", 
            ",", 
            "size_code", 
            "FROM", 
            "dogs"
        ], 
        "question": "What are all the possible breed type and size type combinations?", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"pearlie18@example.com\", \"ykris@example.com\", \"angeline99@example.com\"), home_phone (\"01802479758\", \"01802479758\", \"(799)563-0260x454\"), city (\"New Margaretteborough\", \"Lake Valentin\", \"East Hillardberg\"), state (\"Washington\", \"Arkansas\", \"Wisconsin\"), last_name (\"Prohaska\", \"Schmitt\", \"Funk\"), owner_id (15, 11, 3), first_name (\"Cindy\", \"Rachelle\", \"Nora\"), street (\"68118 Daniel Row\", \"68118 Daniel Row\", \"1858 Jan Park\"), zip_code (\"86010\", \"61019\", \"11990\"), cell_number (\"559.874.3011x989\", \"341.667.8085\", \"762.589.6117x1328\") | dogs : date_of_birth (\"2012-05-31 08:01:36\", \"2013-02-20 14:50:56\", \"2010-11-11 07:11:53\"), abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), owner_id (14, 5, 10), size_code (\"LGE\", \"MED\", \"SML\"), age (\"1\", \"8\", \"9\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 04:42:14\", \"2018-03-25 02:47:40\"), name (\"Merritt\", \"Jesus\", \"Hipolito\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), weight (\"4.01\", \"9.8\", \"1.39\"), dog_id (1, 1, 10), date_adopted (\"2018-03-05 06:05:23\", \"2018-03-13 12:47:15\", \"2018-03-10 15:06:43\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-12-29 23:24:13\", \"2017-09-08 20:10:13\") | dogs_breed_code : breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (11, 3, 15) | professionals : first_name (\"Velva\", \"Sigurd\", \"Olaf\"), city (\"Jaceton\", \"Raynorfort\", \"New Maryjane\"), last_name (\"Tillman\", \"Hyatt\", \"O'Reilly\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \"), professional_id (1, 10, 8), state (\"Connecticut\", \"SouthCarolina\", \"Montana\"), cell_number (\"1-185-137-1945x409\", \"1-258-285-4707x8020\", \"461-801-2600\"), home_phone (\"971.048.3763x9404\", \"325-155-0801x7005\", \"022.529.0550x1319\"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"98844\", \"54312\", \"02281\"), email_address (\"schneider.kathryne@example.org\", \"goyette.roosevelt@example.net\", \"uboehm@example.org\") | treatments : cost_of_treatment (668, 567, 656), professional_id (4, 4, 10), treatment_id (5, 6, 11), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-23 13:52:10\", \"2018-03-15 19:10:02\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (1, 14, 2)", 
        "orig_query": "select distinct breed_code, size_code from dogs", 
        "query1": "select distinct breed_code, size_code from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                true, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "breed_code"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_type , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : state , owner_id , zip_code , city , email_address , first_name , cell_number , home_phone , last_name , street  | dogs : dog_id , owner_id , age , name , breed_code , date_adopted , weight , date_arrived , date_departed , gender , date_of_birth , size_code , abandoned_yn  | dogs_size_code : dog_id , size_code  | professionals : role_code , cell_number 908-7311x065\", professional_id , city , zip_code , last_name , email_address , first_name , home_phone 0259033559\", \"+431132733868\", \"1-138-287-3775\", state , street  | treatments : treatment_id , treatment_type_code , cost_of_treatment , professional_id , dog_id , date_of_treatment ", 
        "query2": "select distinct t1.breed_code, t2.size_code from dogs as t1 join dogs_size_code as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "distinct", 
            "breed_code", 
            ",", 
            "size_code", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "all", 
            "the", 
            "possible", 
            "breed", 
            "type", 
            "and", 
            "size", 
            "type", 
            "combinations", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "DISTINCT", 
            "breed_code", 
            ",", 
            "size_code", 
            "FROM", 
            "dogs"
        ], 
        "question": "What are all the possible breed type and size type combinations?", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : state (\"Arizona\", \"NewYork\", \"Maryland\"), owner_id (6, 6, 1), zip_code (\"35747\", \"93165\", \"61019\"), city (\"Lake Tia\", \"Barrettburgh\", \"Lake Carleyborough\"), email_address (\"christy49@example.org\", \"angeline99@example.com\", \"lynn81@example.org\"), first_name (\"Orlando\", \"Nora\", \"Rolando\"), cell_number (\"559.874.3011x989\", \"739-136-7202\", \"559.874.3011x989\"), home_phone (\"1-332-849-1908\", \"318-052-6573\", \"066.264.7885\"), last_name (\"Haley\", \"Ondricka\", \"Price\"), street (\"2635 Caitlyn Plains\", \"0647 Hintz Village Apt. 024\", \"692 Jaskolski Forges\") | dogs : dog_id (1, 9, 11), owner_id (3, 7, 2), age (\"6\", \"8\", \"3\"), name (\"Hipolito\", \"Hipolito\", \"Betty\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-21 10:41:18\", \"2018-03-07 21:45:43\", \"2018-03-18 15:12:50\"), weight (\"2.18\", \"8.04\", \"9.48\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-10-16 20:06:21\", \"2017-12-29 06:08:26\"), date_departed (\"2018-03-25 06:29:10\", \"2018-03-24 23:48:59\", \"2018-03-25 15:05:16\"), gender (\"1\", \"0\"), date_of_birth (\"2017-09-19 05:39:09\", \"2012-10-14 14:44:37\", \"2012-05-31 08:01:36\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\") | dogs_size_code : dog_id (13, 7, 11), size_code (\"LGE\", \"MED\", \"SML\") | professionals : role_code (\"Employee\", \"Veterenarian\"), cell_number (\"889-940-2676\", \"011.193.9081x3186\", \"(369)908-7311x065\"), professional_id (5, 1, 11), city (\"New Laurytown\", \"Borisside\", \"South Rockyport\"), zip_code (\"77129\", \"43129\", \"54312\"), last_name (\"Christiansen\", \"Christiansen\", \"Hyatt\"), email_address (\"jeichmann@example.com\", \"lucile.shanahan@example.org\", \"uboehm@example.org\"), first_name (\"Domenica\", \"Karley\", \"Karley\"), home_phone (\"+02(1)0259033559\", \"+43(5)1132733868\", \"1-138-287-3775\"), state (\"Montana\", \"California\", \"Montana\"), street (\"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\") | treatments : treatment_id (13, 9, 8), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (349, 428, 349), professional_id (7, 6, 6), dog_id (15, 10, 13), date_of_treatment (\"2018-03-15 20:25:34\", \"2018-03-01 04:14:46\", \"2018-03-16 10:27:36\")", 
        "orig_query": "select distinct breed_code, size_code from dogs", 
        "query1": "select distinct breed_code, size_code from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                true, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "size_code"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : cell_number 9217952551\", \"121.381.3316x6535\", email_address , home_phone 034-1670\", \"916.976.9480x13851\", \"363.948.1090\", first_name , owner_id , last_name , city , zip_code , state , street  | dogs : gender , abandoned_yn , breed_code , dog_id , age , date_arrived , name , date_adopted , owner_id , date_of_birth , date_departed , weight , size_code  | dogs_breed_code : breed_code , dog_id  | professionals : professional_id , street , city , zip_code , cell_number 908-7311x065\", \"880-659-7577x736\", \"889-940-2676\", email_address , role_code , first_name , home_phone , state , last_name  | treatments : treatment_id , dog_id , treatment_type_code , date_of_treatment , cost_of_treatment , professional_id ", 
        "query2": "select distinct t2.breed_code, t1.size_code from dogs as t1 join dogs_breed_code as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "distinct", 
            "breed_code", 
            ",", 
            "size_code", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "distinct", 
            "breed", 
            "type", 
            "and", 
            "size", 
            "type", 
            "combinations", 
            "for", 
            "dogs", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "DISTINCT", 
            "breed_code", 
            ",", 
            "size_code", 
            "FROM", 
            "dogs"
        ], 
        "question": "Find the distinct breed type and size type combinations for dogs.", 
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : cell_number (\"478.978.0729\", \"+70(4)9217952551\", \"121.381.3316x6535\"), email_address (\"kturner@example.net\", \"wpfeffer@example.net\", \"angeline99@example.com\"), home_phone (\"(544)034-1670\", \"916.976.9480x13851\", \"363.948.1090\"), first_name (\"Cindy\", \"Johann\", \"Heather\"), owner_id (6, 11, 12), last_name (\"Haley\", \"Hamill\", \"Fisher\"), city (\"Beerton\", \"Lake Valentin\", \"Lake Tia\"), zip_code (\"92406\", \"02647\", \"93165\"), state (\"Vermont\", \"Pennsylvania\", \"Arizona\"), street (\"57382 Yost Ridges\", \"2417 Keara Stravenue Apt. 146\", \"2635 Caitlyn Plains\") | dogs : gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (15, 9, 2), age (\"8\", \"3\", \"4\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-12-29 06:08:26\", \"2017-05-06 08:03:52\"), name (\"Hipolito\", \"Betty\", \"Mavis\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-10 15:06:43\", \"2018-03-14 08:05:18\"), owner_id (1, 11, 2), date_of_birth (\"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\", \"2013-02-20 14:50:56\"), date_departed (\"2018-03-25 13:07:04\", \"2018-03-25 10:25:46\", \"2018-03-25 06:46:07\"), weight (\"6.92\", \"4.36\", \"7.57\"), size_code (\"LGE\", \"MED\", \"SML\") | dogs_breed_code : breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (5, 15, 14) | professionals : professional_id (12, 3, 14), street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"72532 Hane Course\nLake Berylland, ND 95283\"), city (\"Borisside\", \"McLaughlinfort\", \"New Maryjane\"), zip_code (\"07412\", \"98844\", \"54312\"), cell_number (\"(369)908-7311x065\", \"880-659-7577x736\", \"889-940-2676\"), email_address (\"lambert62@example.org\", \"uboehm@example.org\", \"lucile.shanahan@example.org\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Domenica\", \"Ericka\", \"Danny\"), home_phone (\"022.529.0550x1319\", \"346.594.3739\", \"971.048.3763x9404\"), state (\"Utah\", \"California\", \"Alabama\"), last_name (\"Walter\", \"Walter\", \"Christiansen\") | treatments : treatment_id (7, 12, 6), dog_id (1, 15, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-11 04:23:15\", \"2018-03-24 22:25:58\"), cost_of_treatment (349, 852, 668), professional_id (7, 9, 7)", 
        "orig_query": "select distinct breed_code, size_code from dogs", 
        "query1": "select distinct breed_code, size_code from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                true, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "breed_code"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number 9217952551\", \"399-3116\", \"762.589.6117x1328\", email_address , last_name , city , zip_code , street , home_phone , owner_id , state , first_name  | dogs : weight , date_of_birth , size_code , dog_id , name , age , breed_code , gender , abandoned_yn , date_departed , date_adopted , date_arrived , owner_id  | dogs_size_code : size_code , dog_id  | professionals : last_name , professional_id , role_code , street , state , cell_number , zip_code , city , first_name , email_address , home_phone  | treatments : cost_of_treatment , date_of_treatment , treatment_id , treatment_type_code , dog_id , professional_id ", 
        "query2": "select distinct t1.breed_code, t2.size_code from dogs as t1 join dogs_size_code as t2 on t1.dog_id = t2.dog_id", 
        "db_id": "dog_kennels", 
        "query_toks_no_value": [
            "select", 
            "distinct", 
            "breed_code", 
            ",", 
            "size_code", 
            "from", 
            "dogs"
        ], 
        "question_toks": [
            "Find", 
            "the", 
            "distinct", 
            "breed", 
            "type", 
            "and", 
            "size", 
            "type", 
            "combinations", 
            "for", 
            "dogs", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "DISTINCT", 
            "breed_code", 
            ",", 
            "size_code", 
            "FROM", 
            "dogs"
        ], 
        "question": "Find the distinct breed type and size type combinations for dogs.", 
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"+70(4)9217952551\", \"(257)399-3116\", \"762.589.6117x1328\"), email_address (\"christy49@example.org\", \"ymaggio@example.com\", \"lynn81@example.org\"), last_name (\"Fisher\", \"Hauck\", \"Fisher\"), city (\"East Maribelbury\", \"West Leonard\", \"Lake Valentin\"), zip_code (\"61019\", \"00589\", \"78297\"), street (\"2635 Caitlyn Plains\", \"68118 Daniel Row\", \"68118 Daniel Row\"), home_phone (\"1-332-849-1908\", \"1-346-655-5842x768\", \"916.976.9480x13851\"), owner_id (6, 11, 6), state (\"NewYork\", \"NorthDakota\", \"Vermont\"), first_name (\"Rachelle\", \"Heather\", \"Jaclyn\") | dogs : weight (\"6.92\", \"6.92\", \"3.52\"), date_of_birth (\"2010-11-11 07:11:53\", \"2008-05-30 12:51:34\", \"2018-03-17 04:05:12\"), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (5, 9, 5), name (\"Houston\", \"Jesus\", \"Holden\"), age (\"2\", \"4\", \"4\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 13:07:04\", \"2018-03-25 10:25:46\", \"2018-03-25 13:07:04\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-18 07:47:40\", \"2018-02-27 11:54:35\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-05-06 08:03:52\", \"2017-06-18 19:45:38\"), owner_id (2, 5, 7) | dogs_size_code : size_code (\"LGE\", \"MED\", \"SML\"), dog_id (13, 5, 13) | professionals : last_name (\"Considine\", \"Tillman\", \"Braun\"), professional_id (8, 3, 15), role_code (\"Employee\", \"Veterenarian\"), street (\"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), state (\"NorthCarolina\", \"SouthCarolina\", \"NorthCarolina\"), cell_number (\"962-983-8109x3509\", \"139-321-7313\", \"880-659-7577x736\"), zip_code (\"06646\", \"84515\", \"67980\"), city (\"Kirastad\", \"Borisside\", \"Kirastad\"), first_name (\"Lesly\", \"Winfield\", \"Sigurd\"), email_address (\"cole.margarita@example.org\", \"jacynthe.mclaughlin@example.net\", \"delphine29@example.com\"), home_phone (\"891.475.2256\", \"891.475.2256\", \"1-138-287-3775\") | treatments : cost_of_treatment (668, 681, 668), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-19 04:39:54\", \"2018-03-23 13:52:10\"), treatment_id (3, 7, 9), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (15, 14, 4), professional_id (14, 6, 7)", 
        "orig_query": "select distinct breed_code, size_code from dogs", 
        "query1": "select distinct breed_code, size_code from dogs", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        5
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                true, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                23, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                24, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "dogs": "size_code"
        }, 
        "primary_key": {
            "dogs": "dog_id"
        }
    }, 
    {
        "schema_without_content": "singer : name , citizenship , singer_id , birth_year , net_worth_millions  | singer_citizenship : singer_id , citizenship  | song : title , singer_id , highest_position , song_id , sales ", 
        "query2": "select t1.birth_year, t2.citizenship from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "birth_year", 
            ",", 
            "citizenship", 
            "from", 
            "singer"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "birth", 
            "year", 
            "and", 
            "citizenship", 
            "of", 
            "singers", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Birth_Year", 
            ",", 
            "Citizenship", 
            "FROM", 
            "singer"
        ], 
        "question": "What are the birth year and citizenship of singers?", 
        "schema_with_content": "singer : name (\"Gina Rinehart\", \"Alice Walton\", \"Christy Walton\"), citizenship (\"United States\", \"United States\", \"Germany\"), singer_id (2, 2, 4), birth_year (1949.0, 1942.0, 1940.0), net_worth_millions (30.0, 14.3, 28.8) | singer_citizenship : singer_id (5, 4, 6), citizenship (\"United States\", \"United States\", \"Germany\") | song : title (\"Left Outside Alone\", \"Cha Cha Slide\", \"All This Time\"), singer_id (2, 2, 6), highest_position (1.0, 3.0), song_id (8, 8, 7), sales (261000.0, 335000.0, 335000.0)", 
        "orig_query": "select birth_year, citizenship from singer", 
        "query1": "select birth_year, citizenship from singer", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "citizenship"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "singer : citizenship , birth_year , singer_id , name , net_worth_millions  | singer_birth_year : singer_id , birth_year  | song : sales , singer_id , highest_position , title \", \"Yeah\", song_id ", 
        "query2": "select t2.birth_year, t1.citizenship from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "birth_year", 
            ",", 
            "citizenship", 
            "from", 
            "singer"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "birth", 
            "year", 
            "and", 
            "citizenship", 
            "of", 
            "singers", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Birth_Year", 
            ",", 
            "Citizenship", 
            "FROM", 
            "singer"
        ], 
        "question": "What are the birth year and citizenship of singers?", 
        "schema_with_content": "singer : citizenship (\"Australia\", \"Chile\", \"Germany\"), birth_year (1953.0, 1940.0, 1949.0), singer_id (8, 4, 8), name (\"Liliane Bettencourt\", \"Gina Rinehart\", \"Susanne Klatten\"), net_worth_millions (17.8, 30.0, 14.3) | singer_birth_year : singer_id (2, 2, 6), birth_year (1953.0, 1940.0, 1949.0) | song : sales (275000.0, 552407.0, 1094000.0), singer_id (7, 6, 6), highest_position (1.0, 3.0), title (\"Call on Me\", \"F**k It (I Don't Want You Back)\", \"Yeah\"), song_id (7, 8, 1)", 
        "orig_query": "select birth_year, citizenship from singer", 
        "query1": "select birth_year, citizenship from singer", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "birth_year"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "singer : net_worth_millions , birth_year , name , citizenship , singer_id  | singer_citizenship : singer_id , citizenship  | song : highest_position , title , song_id , sales , singer_id ", 
        "query2": "select t1.birth_year, t2.citizenship from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "birth_year", 
            ",", 
            "citizenship", 
            "from", 
            "singer"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "birth", 
            "years", 
            "and", 
            "citizenships", 
            "of", 
            "the", 
            "singers", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Birth_Year", 
            ",", 
            "Citizenship", 
            "FROM", 
            "singer"
        ], 
        "question": "What are the birth years and citizenships of the singers?", 
        "schema_with_content": "singer : net_worth_millions (28.8, 17.0, 14.3), birth_year (1949.0, 1953.0, 1940.0), name (\"Alice Walton\", \"Alice Walton\", \"Liliane Bettencourt\"), citizenship (\"France\", \"Australia\", \"United States\"), singer_id (6, 7, 4) | singer_citizenship : singer_id (6, 2, 6), citizenship (\"France\", \"Australia\", \"United States\") | song : highest_position (1.0, 3.0), title (\"Call on Me\", \"All This Time\", \"Mysterious Girl\"), song_id (6, 5, 7), sales (261000.0, 335000.0, 300000.0), singer_id (1, 6, 1)", 
        "orig_query": "select birth_year, citizenship from singer", 
        "query1": "select birth_year, citizenship from singer", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "citizenship"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "singer : citizenship , birth_year , net_worth_millions , name , singer_id  | singer_birth_year : singer_id , birth_year  | song : sales , song_id , title \", singer_id , highest_position ", 
        "query2": "select t2.birth_year, t1.citizenship from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "birth_year", 
            ",", 
            "citizenship", 
            "from", 
            "singer"
        ], 
        "question_toks": [
            "What", 
            "are", 
            "the", 
            "birth", 
            "years", 
            "and", 
            "citizenships", 
            "of", 
            "the", 
            "singers", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Birth_Year", 
            ",", 
            "Citizenship", 
            "FROM", 
            "singer"
        ], 
        "question": "What are the birth years and citizenships of the singers?", 
        "schema_with_content": "singer : citizenship (\"Chile\", \"Chile\", \"United States\"), birth_year (1944.0, 1962.0, 1949.0), net_worth_millions (17.4, 17.8, 17.8), name (\"Christy Walton\", \"Abigail Johnson\", \"Liliane Bettencourt\"), singer_id (8, 8, 8) | singer_birth_year : singer_id (8, 6, 7), birth_year (1944.0, 1962.0, 1949.0) | song : sales (335000.0, 292000.0, 292000.0), song_id (2, 3, 2), title (\"Mysterious Girl\", \"Mysterious Girl\", \"F**k It (I Don't Want You Back)\"), singer_id (1, 6, 7), highest_position (1.0, 3.0)", 
        "orig_query": "select birth_year, citizenship from singer", 
        "query1": "select birth_year, citizenship from singer", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                3, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "birth_year"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "singer : birth_year , singer_id , name , citizenship , net_worth_millions  | singer_net_worth_millions : net_worth_millions , singer_id  | song : singer_id , song_id , title , sales , highest_position ", 
        "query2": "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "citizenship", 
            ",", 
            "max", 
            "(", 
            "net_worth_millions", 
            ")", 
            "from", 
            "singer", 
            "group", 
            "by", 
            "citizenship"
        ], 
        "question_toks": [
            "Show", 
            "different", 
            "citizenships", 
            "and", 
            "the", 
            "maximum", 
            "net", 
            "worth", 
            "of", 
            "singers", 
            "of", 
            "each", 
            "citizenship", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Citizenship", 
            ",", 
            "max", 
            "(", 
            "Net_Worth_Millions", 
            ")", 
            "FROM", 
            "singer", 
            "GROUP", 
            "BY", 
            "Citizenship"
        ], 
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", 
        "schema_with_content": "singer : birth_year (1944.0, 1962.0, 1944.0), singer_id (2, 6, 4), name (\"Jacqueline Mars\", \"Gina Rinehart\", \"Alice Walton\"), citizenship (\"United States\", \"Australia\", \"Chile\"), net_worth_millions (17.8, 26.3, 14.3) | singer_net_worth_millions : net_worth_millions (17.8, 26.3, 14.3), singer_id (5, 3, 4) | song : singer_id (6, 5, 2), song_id (5, 5, 5), title (\"Mysterious Girl\", \"Left Outside Alone\", \"Do They Know It's Christmas\"), sales (552407.0, 261000.0, 552407.0), highest_position (1.0, 3.0)", 
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    5, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "net_worth_millions"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "singer : singer_id , birth_year , net_worth_millions , name , citizenship  | singer_citizenship : singer_id , citizenship  | song : sales , highest_position , title \", singer_id , song_id ", 
        "query2": "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "citizenship", 
            ",", 
            "max", 
            "(", 
            "net_worth_millions", 
            ")", 
            "from", 
            "singer", 
            "group", 
            "by", 
            "citizenship"
        ], 
        "question_toks": [
            "Show", 
            "different", 
            "citizenships", 
            "and", 
            "the", 
            "maximum", 
            "net", 
            "worth", 
            "of", 
            "singers", 
            "of", 
            "each", 
            "citizenship", 
            "."
        ], 
        "query_toks": [
            "SELECT", 
            "Citizenship", 
            ",", 
            "max", 
            "(", 
            "Net_Worth_Millions", 
            ")", 
            "FROM", 
            "singer", 
            "GROUP", 
            "BY", 
            "Citizenship"
        ], 
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", 
        "schema_with_content": "singer : singer_id (1, 7, 2), birth_year (1944.0, 1962.0, 1949.0), net_worth_millions (17.4, 17.8, 28.8), name (\"Christy Walton\", \"Iris Fontbona\", \"Iris Fontbona\"), citizenship (\"France\", \"Chile\", \"Germany\") | singer_citizenship : singer_id (4, 1, 8), citizenship (\"France\", \"Chile\", \"Germany\") | song : sales (300000.0, 261000.0, 1094000.0), highest_position (1.0, 3.0), title (\"All This Time\", \"Cha Cha Slide\", \"F**k It (I Don't Want You Back)\"), singer_id (6, 4, 6), song_id (4, 4, 3)", 
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    5, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "citizenship"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "singer : singer_id , citizenship , birth_year , net_worth_millions , name  | singer_net_worth_millions : singer_id , net_worth_millions  | song : sales , highest_position , singer_id , song_id , title ", 
        "query2": "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "citizenship", 
            ",", 
            "max", 
            "(", 
            "net_worth_millions", 
            ")", 
            "from", 
            "singer", 
            "group", 
            "by", 
            "citizenship"
        ], 
        "question_toks": [
            "For", 
            "each", 
            "citizenship", 
            ",", 
            "what", 
            "is", 
            "the", 
            "maximum", 
            "net", 
            "worth", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Citizenship", 
            ",", 
            "max", 
            "(", 
            "Net_Worth_Millions", 
            ")", 
            "FROM", 
            "singer", 
            "GROUP", 
            "BY", 
            "Citizenship"
        ], 
        "question": "For each citizenship, what is the maximum net worth?", 
        "schema_with_content": "singer : singer_id (2, 5, 6), citizenship (\"Germany\", \"Australia\", \"Australia\"), birth_year (1948.0, 1953.0, 1949.0), net_worth_millions (17.4, 12.7, 30.0), name (\"Gina Rinehart\", \"Liliane Bettencourt\", \"Christy Walton\") | singer_net_worth_millions : singer_id (1, 7, 3), net_worth_millions (17.4, 12.7, 30.0) | song : sales (1094000.0, 261000.0, 351421.0), highest_position (1.0, 3.0), singer_id (6, 1, 2), song_id (4, 1, 3), title (\"Cha Cha Slide\", \"Cha Cha Slide\", \"Yeah\")", 
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    5, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "net_worth_millions"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }, 
    {
        "schema_without_content": "singer : birth_year , name , citizenship , singer_id , net_worth_millions  | singer_citizenship : singer_id , citizenship  | song : highest_position , singer_id , song_id , title \", \"Left Outside Alone\", \"Do They Know It's Christmas\", sales ", 
        "query2": "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship", 
        "db_id": "singer", 
        "query_toks_no_value": [
            "select", 
            "citizenship", 
            ",", 
            "max", 
            "(", 
            "net_worth_millions", 
            ")", 
            "from", 
            "singer", 
            "group", 
            "by", 
            "citizenship"
        ], 
        "question_toks": [
            "For", 
            "each", 
            "citizenship", 
            ",", 
            "what", 
            "is", 
            "the", 
            "maximum", 
            "net", 
            "worth", 
            "?"
        ], 
        "query_toks": [
            "SELECT", 
            "Citizenship", 
            ",", 
            "max", 
            "(", 
            "Net_Worth_Millions", 
            ")", 
            "FROM", 
            "singer", 
            "GROUP", 
            "BY", 
            "Citizenship"
        ], 
        "question": "For each citizenship, what is the maximum net worth?", 
        "schema_with_content": "singer : birth_year (1942.0, 1962.0, 1949.0), name (\"Susanne Klatten\", \"Susanne Klatten\", \"Alice Walton\"), citizenship (\"Australia\", \"Germany\", \"Germany\"), singer_id (5, 3, 1), net_worth_millions (14.3, 17.0, 26.3) | singer_citizenship : singer_id (5, 7, 2), citizenship (\"Australia\", \"Germany\", \"Germany\") | song : highest_position (1.0, 3.0), singer_id (2, 5, 2), song_id (2, 7, 3), title (\"F**k It (I Don't Want You Back)\", \"Left Outside Alone\", \"Do They Know It's Christmas\"), sales (351421.0, 335000.0, 300000.0)", 
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship", 
        "sql": {
            "orderBy": [], 
            "from": {
                "table_units": [
                    [
                        "table_unit", 
                        0
                    ]
                ], 
                "conds": []
            }, 
            "union": null, 
            "except": null, 
            "groupBy": [
                [
                    0, 
                    5, 
                    false
                ]
            ], 
            "limit": null, 
            "intersect": null, 
            "where": [], 
            "having": [], 
            "select": [
                false, 
                [
                    [
                        0, 
                        [
                            0, 
                            [
                                0, 
                                5, 
                                false
                            ], 
                            null
                        ]
                    ], 
                    [
                        1, 
                        [
                            0, 
                            [
                                0, 
                                4, 
                                false
                            ], 
                            null
                        ]
                    ]
                ]
            ]
        }, 
        "split_map": {
            "singer": "citizenship"
        }, 
        "primary_key": {
            "singer": "singer_id"
        }
    }
]