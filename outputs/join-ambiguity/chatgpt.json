[
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            ",",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "question_toks": [
            "Show",
            "name",
            ",",
            "country",
            ",",
            "age",
            "for",
            "all",
            "singers",
            "ordered",
            "by",
            "age",
            "from",
            "the",
            "oldest",
            "to",
            "the",
            "youngest",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country, age from singer order by age desc",
        "split_map": {
            "singer": "name"
        },
        "schema_with_content": "stadium : stadium_id (5, 5, 10), lowest (400, 411, 331), location (\"Brechin City\", \"Ayr United\", \"Ayr United\"), average (638, 642, 2106), name (\"Glebe Park\", \"Bayview Stadium\", \"Hampden Park\"), capacity (2000, 11998, 3960), highest (780, 837, 1057) | singer : singer_id (4, 4, 5), song_name (\"Dangerous\", \"Hey Oh\", \"Love\"), age (32, 41, 25), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2013\", \"1992\", \"2008\"), is_male (\"F\", \"T\") | singer_name : name (\"Timbaland\", \"John Nizinik\", \"Timbaland\"), singer_id (4, 6, 5) | concert : concert_id (4, 6, 6), stadium_id (\"1\", \"2\", \"10\"), year (\"2014\", \"2015\"), theme (\"Free choice\", \"Bleeding Love\", \"Wide Awake\"), concert_name (\"Week 2\", \"Week 1\", \"Week 2\") | singer_in_concert : singer_id (\"3\", \"3\", \"2\"), concert_id (5, 1, 4)",
        "schema_without_content": "stadium : stadium_id , lowest , location , average , name , capacity , highest  | singer : singer_id , song_name , age , country , song_release_year , is_male  | singer_name : name , singer_id  | concert : concert_id , stadium_id , year , theme , concert_name  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select name, country, age from singer order by age desc",
            "select age, country, name from singer order by age desc",
            "select name, age, country from singer order by age desc",
            "select age, name, country from singer order by age desc",
            "select country, name, age from singer order by age desc"
        ],
        "query1": "select name, country, age from singer order by age desc",
        "query2": "select t2.name, t1.country, t1.age from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            ",",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "question_toks": [
            "Show",
            "name",
            ",",
            "country",
            ",",
            "age",
            "for",
            "all",
            "singers",
            "ordered",
            "by",
            "age",
            "from",
            "the",
            "oldest",
            "to",
            "the",
            "youngest",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country, age from singer order by age desc",
        "split_map": {
            "singer": "country"
        },
        "schema_with_content": "stadium : highest (837, 1057, 780), lowest (466, 533, 411), average (637, 638, 2106), name (\"Balmoor\", \"Forthbank Stadium\", \"Glebe Park\"), location (\"Stirling Albion\", \"Alloa Athletic\", \"Alloa Athletic\"), capacity (4125, 10104, 2000), stadium_id (6, 9, 5) | singer : singer_id (3, 4, 2), age (29, 52, 43), song_name (\"You\", \"Sun\", \"Hey Oh\"), is_male (\"F\", \"T\"), song_release_year (\"2003\", \"2008\", \"2008\"), name (\"Tribal King\", \"Tribal King\", \"John Nizinik\") | singer_country : country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 2, 3) | concert : year (\"2014\", \"2015\"), stadium_id (\"10\", \"7\", \"2\"), concert_id (3, 3, 5), theme (\"Free choice 2\", \"Free choice\", \"Free choice\"), concert_name (\"Week 1\", \"Week 1\", \"Super bootcamp\") | singer_in_concert : singer_id (\"6\", \"3\", \"3\"), concert_id (5, 6, 2)",
        "schema_without_content": "stadium : highest , lowest , average , name , location , capacity , stadium_id  | singer : singer_id , age , song_name , is_male , song_release_year , name  | singer_country : country , singer_id  | concert : year , stadium_id , concert_id , theme , concert_name  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select name, age, country from singer join singer_country on singer.singer_id = singer_country.singer_id order by age desc",
            "select age, name, country from singer join singer_country on singer.singer_id = singer_country.singer_id order by age desc",
            "select name, country, age from singer_country join singer on singer_country.singer_id = singer.singer_id order by age desc",
            "select age, country, name from singer_country join singer on singer_country.singer_id = singer.singer_id order by age desc",
            "select name, age, country from singer order by age desc"
        ],
        "query1": "select name, country, age from singer order by age desc",
        "query2": "select t1.name, t2.country, t1.age from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            ",",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "question_toks": [
            "Show",
            "name",
            ",",
            "country",
            ",",
            "age",
            "for",
            "all",
            "singers",
            "ordered",
            "by",
            "age",
            "from",
            "the",
            "oldest",
            "to",
            "the",
            "youngest",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country, age from singer order by age desc",
        "split_map": {
            "singer": "age"
        },
        "schema_with_content": "stadium : capacity (4125, 10104, 2000), stadium_id (1, 4, 4), location (\"Stirling Albion\", \"Arbroath\", \"East Fife\"), lowest (533, 315, 404), average (1477, 615, 638), name (\"Balmoor\", \"Glebe Park\", \"Glebe Park\"), highest (1125, 1763, 4812) | singer : name (\"Tribal King\", \"Tribal King\", \"John Nizinik\"), song_release_year (\"2013\", \"2014\", \"2003\"), song_name (\"Sun\", \"Hey Oh\", \"Hey Oh\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 3, 2) | singer_age : age (29, 41, 32), singer_id (5, 3, 5) | concert : concert_id (3, 5, 3), concert_name (\"Home Visits\", \"Week 2\", \"Week 1\"), year (\"2014\", \"2015\"), theme (\"Happy Tonight\", \"Free choice\", \"Party All Night\"), stadium_id (\"1\", \"10\", \"7\") | singer_in_concert : concert_id (5, 2, 3), singer_id (\"5\", \"6\", \"2\")",
        "schema_without_content": "stadium : capacity , stadium_id , location , lowest , average , name , highest  | singer : name , song_release_year , song_name , is_male , country , singer_id  | singer_age : age , singer_id  | concert : concert_id , concert_name , year , theme , stadium_id  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select name, country, age from singer join singer_age on singer.singer_id = singer_age.singer_id order by age desc",
            "select name, age, country from singer join singer_age on singer.singer_id = singer_age.singer_id order by age desc",
            "select country, name, age from singer join singer_age on singer.singer_id = singer_age.singer_id order by age desc",
            "select age, name, country from singer join singer_age on singer.singer_id = singer_age.singer_id order by age desc",
            "select country, age, name from singer join singer_age on singer.singer_id = singer_age.singer_id order by age desc"
        ],
        "query1": "select name, country, age from singer order by age desc",
        "query2": "select t1.name, t1.country, t2.age from singer as t1 join singer_age as t2 on t1.singer_id = t2.singer_id order by t2.age desc"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            ",",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            ",",
            "countries",
            ",",
            "and",
            "ages",
            "for",
            "every",
            "singer",
            "in",
            "descending",
            "order",
            "of",
            "age",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country, age from singer order by age desc",
        "split_map": {
            "singer": "name"
        },
        "schema_with_content": "stadium : capacity (2000, 52500, 3808), lowest (411, 533, 404), average (638, 638, 552), location (\"East Fife\", \"Queen's Park\", \"Queen's Park\"), name (\"Stark's Park\", \"Forthbank Stadium\", \"Balmoor\"), highest (780, 837, 837), stadium_id (5, 2, 5) | singer : singer_id (6, 6, 2), song_release_year (\"2014\", \"2013\", \"2016\"), age (41, 25, 32), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Sun\", \"Hey Oh\", \"Gentleman\") | singer_name : name (\"Justin Brown\", \"Timbaland\", \"Tribal King\"), singer_id (1, 1, 4) | concert : theme (\"Happy Tonight\", \"Free choice 2\", \"Free choice\"), year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Super bootcamp\", \"Auditions\"), stadium_id (\"7\", \"7\", \"2\"), concert_id (2, 6, 1) | singer_in_concert : singer_id (\"4\", \"2\", \"4\"), concert_id (6, 4, 4)",
        "schema_without_content": "stadium : capacity , lowest , average , location , name , highest , stadium_id  | singer : singer_id , song_release_year , age , is_male , country , song_name  | singer_name : name , singer_id  | concert : theme , year , concert_name , stadium_id , concert_id  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select name, country, age from singer order by age desc",
            "select age, name, country from singer order by age desc",
            "select name, age, country from singer order by age desc",
            "select name, country, age from singer order by age desc nulls last",
            "select name, age, country from singer where is_male = 'T' order by age desc"
        ],
        "query1": "select name, country, age from singer order by age desc",
        "query2": "select t2.name, t1.country, t1.age from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            ",",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            ",",
            "countries",
            ",",
            "and",
            "ages",
            "for",
            "every",
            "singer",
            "in",
            "descending",
            "order",
            "of",
            "age",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country, age from singer order by age desc",
        "split_map": {
            "singer": "country"
        },
        "schema_with_content": "stadium : name (\"Hampden Park\", \"Hampden Park\", \"Balmoor\"), capacity (3100, 52500, 4125), location (\"East Fife\", \"Arbroath\", \"Peterhead\"), highest (1763, 1057, 1980), average (637, 637, 1477), stadium_id (2, 1, 10), lowest (411, 315, 1294) | singer : singer_id (1, 1, 5), age (43, 25, 43), song_release_year (\"1992\", \"2014\", \"2016\"), song_name (\"Hey Oh\", \"You\", \"Love\"), name (\"Rose White\", \"John Nizinik\", \"Tribal King\"), is_male (\"F\", \"T\") | singer_country : country (\"Netherlands\", \"United States\", \"France\"), singer_id (6, 1, 2) | concert : year (\"2014\", \"2015\"), theme (\"Party All Night\", \"Happy Tonight\", \"Bleeding Love\"), stadium_id (\"1\", \"2\", \"10\"), concert_name (\"Home Visits\", \"Week 2\", \"Super bootcamp\"), concert_id (1, 2, 1) | singer_in_concert : concert_id (2, 6, 5), singer_id (\"6\", \"3\", \"4\")",
        "schema_without_content": "stadium : name , capacity , location , highest , average , stadium_id , lowest  | singer : singer_id , age , song_release_year , song_name , name , is_male  | singer_country : country , singer_id  | concert : year , theme , stadium_id , concert_name , concert_id  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select name, country, age from singer_country as t1 join singer as t2 on t1.singer_id = t2.singer_id order by age desc",
            "select name, age, country from singer_country as t1 join singer as t2 on t1.singer_id = t2.singer_id order by age desc",
            "select age, country, name from singer_country as t1 join singer as t2 on t1.singer_id = t2.singer_id order by age desc",
            "select age, name, country from singer_country as t1 join singer as t2 on t1.singer_id = t2.singer_id order by age desc",
            "select country, age, name from singer_country as t1 join singer as t2 on t1.singer_id = t2.singer_id order by age desc"
        ],
        "query1": "select name, country, age from singer order by age desc",
        "query2": "select t1.name, t2.country, t1.age from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id order by t1.age desc"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            ",",
            "age",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            ",",
            "age",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            ",",
            "countries",
            ",",
            "and",
            "ages",
            "for",
            "every",
            "singer",
            "in",
            "descending",
            "order",
            "of",
            "age",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country, age from singer order by age desc",
        "split_map": {
            "singer": "age"
        },
        "schema_with_content": "stadium : lowest (400, 1057, 466), stadium_id (3, 9, 5), location (\"East Fife\", \"Raith Rovers\", \"Arbroath\"), highest (1980, 1980, 780), name (\"Balmoor\", \"Gayfield Park\", \"Glebe Park\"), average (642, 615, 730), capacity (4125, 3100, 10104) | singer : name (\"Rose White\", \"Joe Sharp\", \"John Nizinik\"), song_name (\"Love\", \"Dangerous\", \"Love\"), is_male (\"F\", \"T\"), singer_id (1, 2, 3), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"1992\", \"1992\", \"2016\") | singer_age : singer_id (6, 1, 4), age (41, 32, 25) | concert : concert_id (5, 6, 1), stadium_id (\"9\", \"9\", \"9\"), concert_name (\"Week 2\", \"Home Visits\", \"Auditions\"), year (\"2014\", \"2015\"), theme (\"Party All Night\", \"Happy Tonight\", \"Happy Tonight\") | singer_in_concert : concert_id (2, 2, 1), singer_id (\"4\", \"4\", \"2\")",
        "schema_without_content": "stadium : lowest , stadium_id , location , highest , name , average , capacity  | singer : name , song_name , is_male , singer_id , country , song_release_year  | singer_age : singer_id , age  | concert : concert_id , stadium_id , concert_name , year , theme  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select t1.name, t1.country, t2.age from singer as t1 join singer_age as t2 on t1.singer_id = t2.singer_id order by t2.age desc",
            "select t1.name, t1.country, t2.age from singer_age as t2 join singer as t1 on t1.singer_id = t2.singer_id order by t2.age desc",
            "select name, country, age from singer_age natural join singer order by age desc",
            "select name, country, age from singer join singer_age on singer.singer_id = singer_age.singer_id order by age desc",
            "select name, country, age from singer_age join singer on singer.singer_id = singer_age.singer_id order by age desc"
        ],
        "query1": "select name, country, age from singer order by age desc",
        "query2": "select t1.name, t1.country, t2.age from singer as t1 join singer_age as t2 on t1.singer_id = t2.singer_id order by t2.age desc"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "song_name",
            ",",
            "song_release_year",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "value"
        ],
        "question": "Show the name and the release year of the song by the youngest singer.",
        "question_toks": [
            "Show",
            "the",
            "name",
            "and",
            "the",
            "release",
            "year",
            "of",
            "the",
            "song",
            "by",
            "the",
            "youngest",
            "singer",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select song_name, song_release_year from singer order by age limit 1",
        "split_map": {
            "singer": "song_name"
        },
        "schema_with_content": "stadium : highest (1125, 4812, 1980), stadium_id (6, 6, 6), name (\"Glebe Park\", \"Bayview Stadium\", \"Recreation Park\"), lowest (400, 411, 466), capacity (10104, 10104, 3960), average (638, 638, 2106), location (\"Stirling Albion\", \"Stirling Albion\", \"Ayr United\") | singer : singer_id (1, 4, 3), song_release_year (\"2008\", \"1992\", \"2003\"), name (\"Timbaland\", \"Tribal King\", \"Timbaland\"), country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), age (32, 32, 52) | singer_song_name : song_name (\"Dangerous\", \"Dangerous\", \"Sun\"), singer_id (2, 2, 2) | concert : concert_id (2, 2, 3), year (\"2014\", \"2015\"), theme (\"Bleeding Love\", \"Bleeding Love\", \"Party All Night\"), stadium_id (\"2\", \"9\", \"2\"), concert_name (\"Super bootcamp\", \"Super bootcamp\", \"Home Visits\") | singer_in_concert : concert_id (3, 4, 3), singer_id (\"4\", \"6\", \"3\")",
        "schema_without_content": "stadium : highest , stadium_id , name , lowest , capacity , average , location  | singer : singer_id , song_release_year , name , country , is_male , age  | singer_song_name : song_name , singer_id  | concert : concert_id , year , theme , stadium_id , concert_name  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select name, song_release_year from singer where age = (select min(age) from singer)",
            "select song_release_year, name from singer where age = (select min(age) from singer)",
            "select name, song_release_year from singer where age = (select min(age) from singer) order by age limit 1",
            "select song_release_year, name from singer where age = (select min(age) from singer) order by age limit 1",
            "select t1.name, t1.song_release_year from singer as t1 join (select min(age) as min_age from singer) as t2 on t1.age = t2.min_age"
        ],
        "query1": "select song_name, song_release_year from singer order by age limit 1",
        "query2": "select t2.song_name, t1.song_release_year from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "song_name",
            ",",
            "song_release_year",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "value"
        ],
        "question": "Show the name and the release year of the song by the youngest singer.",
        "question_toks": [
            "Show",
            "the",
            "name",
            "and",
            "the",
            "release",
            "year",
            "of",
            "the",
            "song",
            "by",
            "the",
            "youngest",
            "singer",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select song_name, song_release_year from singer order by age limit 1",
        "split_map": {
            "singer": "song_release_year"
        },
        "schema_with_content": "stadium : name (\"Forthbank Stadium\", \"Gayfield Park\", \"Bayview Stadium\"), capacity (3808, 3100, 52500), lowest (1057, 1294, 315), highest (837, 2363, 1057), average (552, 2106, 638), location (\"Arbroath\", \"East Fife\", \"Arbroath\"), stadium_id (9, 6, 2) | singer : age (43, 25, 43), singer_id (2, 6, 4), song_name (\"Gentleman\", \"Hey Oh\", \"Dangerous\"), name (\"Justin Brown\", \"John Nizinik\", \"Rose White\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\") | singer_song_release_year : singer_id (1, 4, 3), song_release_year (\"1992\", \"2014\", \"2014\") | concert : theme (\"Free choice\", \"Party All Night\", \"Wide Awake\"), year (\"2014\", \"2015\"), stadium_id (\"2\", \"9\", \"2\"), concert_name (\"Home Visits\", \"Super bootcamp\", \"Auditions\"), concert_id (4, 2, 6) | singer_in_concert : concert_id (4, 3, 2), singer_id (\"3\", \"3\", \"3\")",
        "schema_without_content": "stadium : name , capacity , lowest , highest , average , location , stadium_id  | singer : age , singer_id , song_name , name , is_male , country  | singer_song_release_year : singer_id , song_release_year  | concert : theme , year , stadium_id , concert_name , concert_id  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select t1.name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(age) from singer)",
            "select t1.name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(t1.age) from singer as t1)",
            "select t2.song_release_year, t1.name from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(age) from singer)",
            "select t2.song_release_year, t1.name from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(t1.age) from singer as t1)",
            "select t1.name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(age) over())"
        ],
        "query1": "select song_name, song_release_year from singer order by age limit 1",
        "query2": "select t1.song_name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "song_name",
            ",",
            "song_release_year",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "value"
        ],
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "release",
            "years",
            "for",
            "all",
            "the",
            "songs",
            "of",
            "the",
            "youngest",
            "singer",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select song_name, song_release_year from singer order by age limit 1",
        "split_map": {
            "singer": "song_name"
        },
        "schema_with_content": "stadium : lowest (331, 404, 1057), location (\"Queen's Park\", \"Alloa Athletic\", \"Stirling Albion\"), highest (1980, 780, 1980), name (\"Stark's Park\", \"Bayview Stadium\", \"Forthbank Stadium\"), average (2106, 2106, 615), stadium_id (10, 2, 1), capacity (3808, 4000, 10104) | singer : is_male (\"F\", \"T\"), singer_id (4, 2, 5), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"1992\", \"2008\", \"2016\"), name (\"Joe Sharp\", \"Timbaland\", \"Timbaland\"), age (52, 41, 32) | singer_song_name : singer_id (2, 2, 6), song_name (\"Hey Oh\", \"Gentleman\", \"Dangerous\") | concert : concert_id (6, 6, 2), concert_name (\"Super bootcamp\", \"Week 2\", \"Super bootcamp\"), theme (\"Wide Awake\", \"Wide Awake\", \"Free choice 2\"), year (\"2014\", \"2015\"), stadium_id (\"1\", \"7\", \"2\") | singer_in_concert : singer_id (\"6\", \"5\", \"3\"), concert_id (4, 2, 6)",
        "schema_without_content": "stadium : lowest , location , highest , name , average , stadium_id , capacity  | singer : is_male , singer_id , country , song_release_year , name , age  | singer_song_name : singer_id , song_name  | concert : concert_id , concert_name , theme , year , stadium_id  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select t2.song_release_year, t3.song_name from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id join (select min(age) as min_age from singer) as t4 on t1.age = t4.min_age join singer_in_concert as t3 on t1.singer_id = t3.singer_id",
            "select t2.song_name, t2.song_release_year from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id join (select min(age) as min_age from singer) as t4 on t1.age = t4.min_age join singer_in_concert as t3 on t1.singer_id = t3.singer_id",
            "select t2.song_release_year, t3.song_name from singer as t1 join singer_in_concert as t3 on t1.singer_id = t3.singer_id join (select min(age) as min_age from singer) as t4 on t1.age = t4.min_age join singer_song_name as t2 on t1.singer_id = t2.singer_id",
            "select t2.song_name, t2.song_release_year from singer as t1 join singer_in_concert as t3 on t1.singer_id = t3.singer_id join (select min(age) as min_age from singer) as t4 on t1.age = t4.min_age join singer_song_name as t2 on t1.singer_id = t2.singer_id",
            "select t3.song_name, t2.song_release_year from singer_in_concert as t1 join singer_song_name as t3 on t1.singer_id = t3.singer_id join singer as t2 on t1.singer_id = t2.singer_id where t2.age = (select min(age) from singer)"
        ],
        "query1": "select song_name, song_release_year from singer order by age limit 1",
        "query2": "select t2.song_name, t1.song_release_year from singer as t1 join singer_song_name as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "song_name",
            ",",
            "song_release_year",
            "FROM",
            "singer",
            "ORDER",
            "BY",
            "age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "song_name",
            ",",
            "song_release_year",
            "from",
            "singer",
            "order",
            "by",
            "age",
            "limit",
            "value"
        ],
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "release",
            "years",
            "for",
            "all",
            "the",
            "songs",
            "of",
            "the",
            "youngest",
            "singer",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select song_name, song_release_year from singer order by age limit 1",
        "split_map": {
            "singer": "song_release_year"
        },
        "schema_with_content": "stadium : stadium_id (4, 2, 2), location (\"Ayr United\", \"Peterhead\", \"East Fife\"), highest (1057, 2363, 2363), average (552, 1477, 552), capacity (3808, 10104, 2000), name (\"Somerset Park\", \"Hampden Park\", \"Hampden Park\"), lowest (1294, 331, 404) | singer : name (\"Rose White\", \"Rose White\", \"Justin Brown\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (1, 5, 5), song_name (\"Love\", \"Gentleman\", \"Sun\"), is_male (\"F\", \"T\"), age (29, 29, 41) | singer_song_release_year : singer_id (6, 2, 4), song_release_year (\"2013\", \"2016\", \"2008\") | concert : year (\"2014\", \"2015\"), concert_name (\"Week 1\", \"Auditions\", \"Super bootcamp\"), concert_id (4, 2, 3), theme (\"Wide Awake\", \"Free choice\", \"Happy Tonight\"), stadium_id (\"1\", \"7\", \"9\") | singer_in_concert : concert_id (1, 5, 3), singer_id (\"5\", \"5\", \"2\")",
        "schema_without_content": "stadium : stadium_id , location , highest , average , capacity , name , lowest  | singer : name , country , singer_id , song_name , is_male , age  | singer_song_release_year : singer_id , song_release_year  | concert : year , concert_name , concert_id , theme , stadium_id  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select t2.song_name, t3.song_release_year from singer as t1 join singer_song_release_year as t3 on t1.singer_id = t3.singer_id join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(age) from singer)",
            "select t2.song_name, t3.song_release_year from singer_song_release_year as t3 join singer as t1 on t1.singer_id = t3.singer_id join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(age) from singer)",
            "select t2.song_release_year, t2.song_name from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id where t1.age = (select min(age) from singer)",
            "select t2.song_release_year, t2.song_name from singer_song_release_year as t2 join singer as t1 on t1.singer_id = t2.singer_id where t1.age = (select min(age) from singer)",
            "select t3.song_release_year, t2.song_name from singer_in_concert as t1 join singer_song_release_year as t3 on t1.singer_id = t3.singer_id join singer_song_release_year as t2 on t1.singer_id = t2.singer_id join singer as t4 on t1.singer_id = t4.singer_id where t4.age = (select min(age) from singer)"
        ],
        "query1": "select song_name, song_release_year from singer order by age limit 1",
        "query2": "select t1.song_name, t2.song_release_year from singer as t1 join singer_song_release_year as t2 on t1.singer_id = t2.singer_id order by t1.age limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "capacity",
            "BETWEEN",
            "5000",
            "AND",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium",
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "question_toks": [
            "Show",
            "location",
            "and",
            "name",
            "for",
            "all",
            "stadiums",
            "with",
            "a",
            "capacity",
            "between",
            "5000",
            "and",
            "10000",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5000.0,
                    10000.0
                ]
            ]
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000",
        "split_map": {
            "stadium": "name"
        },
        "schema_with_content": "stadium : stadium_id (9, 3, 1), highest (1125, 1980, 837), average (1477, 730, 552), capacity (11998, 4125, 4000), location (\"Queen's Park\", \"Peterhead\", \"Brechin City\"), lowest (533, 404, 331) | stadium_name : stadium_id (9, 4, 4), name (\"Bayview Stadium\", \"Forthbank Stadium\", \"Hampden Park\") | singer : country (\"Netherlands\", \"United States\", \"France\"), singer_id (1, 1, 4), is_male (\"F\", \"T\"), age (41, 43, 25), name (\"Tribal King\", \"Justin Brown\", \"Joe Sharp\"), song_name (\"Gentleman\", \"Dangerous\", \"Sun\"), song_release_year (\"1992\", \"2008\", \"2014\") | concert : concert_name (\"Auditions\", \"Auditions\", \"Week 2\"), theme (\"Bleeding Love\", \"Bleeding Love\", \"Free choice\"), concert_id (6, 3, 6), stadium_id (\"9\", \"2\", \"2\"), year (\"2014\", \"2015\") | singer_in_concert : concert_id (6, 2, 2), singer_id (\"5\", \"3\", \"6\")",
        "schema_without_content": "stadium : stadium_id , highest , average , capacity , location , lowest  | stadium_name : stadium_id , name  | singer : country , singer_id , is_male , age , name , song_name , song_release_year  | concert : concert_name , theme , concert_id , stadium_id , year  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select location, name from stadium where capacity between 5000 and 10000",
            "select name, location from stadium where capacity >= 5000 and capacity <= 10000",
            "select location, name from stadium where capacity > 5000 and capacity < 10000",
            "select name, location from stadium where capacity > 5000 and capacity < 10000",
            "select s.location, s.name from stadium as s where s.capacity > 5000 and s.capacity < 10000"
        ],
        "query1": "select location, name from stadium where capacity between 5000 and 10000",
        "query2": "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "capacity",
            "BETWEEN",
            "5000",
            "AND",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium",
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "question_toks": [
            "Show",
            "location",
            "and",
            "name",
            "for",
            "all",
            "stadiums",
            "with",
            "a",
            "capacity",
            "between",
            "5000",
            "and",
            "10000",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5000.0,
                    10000.0
                ]
            ]
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000",
        "split_map": {
            "stadium": "location"
        },
        "schema_with_content": "stadium : stadium_id (10, 7, 4), name (\"Balmoor\", \"Balmoor\", \"Forthbank Stadium\"), average (638, 2106, 552), capacity (3100, 3100, 52500), highest (780, 2363, 1125), lowest (411, 400, 466) | stadium_location : stadium_id (10, 10, 9), location (\"East Fife\", \"East Fife\", \"Arbroath\") | singer : age (41, 41, 29), song_release_year (\"2014\", \"2008\", \"1992\"), is_male (\"F\", \"T\"), name (\"Justin Brown\", \"Justin Brown\", \"Joe Sharp\"), singer_id (2, 5, 4), song_name (\"Dangerous\", \"Love\", \"You\"), country (\"Netherlands\", \"United States\", \"France\") | concert : concert_id (3, 3, 2), year (\"2014\", \"2015\"), theme (\"Free choice\", \"Wide Awake\", \"Free choice\"), concert_name (\"Super bootcamp\", \"Auditions\", \"Auditions\"), stadium_id (\"7\", \"10\", \"10\") | singer_in_concert : concert_id (1, 5, 5), singer_id (\"3\", \"6\", \"2\")",
        "schema_without_content": "stadium : stadium_id , name , average , capacity , highest , lowest  | stadium_location : stadium_id , location  | singer : age , song_release_year , is_male , name , singer_id , song_name , country  | concert : concert_id , year , theme , concert_name , stadium_id  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select location, name from stadium_location join stadium on stadium_location.stadium_id = stadium.stadium_id where capacity between 5000 and 10000",
            "select name, location from stadium join stadium_location on stadium.stadium_id = stadium_location.stadium_id where capacity between 5000 and 10000",
            "select location, name from stadium_location join stadium on stadium_location.stadium_id = stadium.stadium_id where capacity >= 5000 and capacity <= 10000",
            "select name, location from stadium join stadium_location on stadium.stadium_id = stadium_location.stadium_id where capacity >= 5000 and capacity <= 10000",
            "select sloc.location, s.name from stadium as s join stadium_location as sloc on s.stadium_id = sloc.stadium_id where s.capacity between 5000 and 10000"
        ],
        "query1": "select location, name from stadium where capacity between 5000 and 10000",
        "query2": "select t2.location, t1.name from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "capacity",
            "BETWEEN",
            "5000",
            "AND",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium",
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "question_toks": [
            "What",
            "are",
            "the",
            "locations",
            "and",
            "names",
            "of",
            "all",
            "stations",
            "with",
            "capacity",
            "between",
            "5000",
            "and",
            "10000",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5000.0,
                    10000.0
                ]
            ]
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000",
        "split_map": {
            "stadium": "name"
        },
        "schema_with_content": "stadium : capacity (3960, 3100, 4000), highest (1763, 1125, 1763), average (615, 730, 637), location (\"Stirling Albion\", \"Ayr United\", \"Arbroath\"), stadium_id (9, 4, 2), lowest (533, 404, 1294) | stadium_name : stadium_id (2, 2, 4), name (\"Forthbank Stadium\", \"Balmoor\", \"Bayview Stadium\") | singer : singer_id (1, 1, 2), name (\"Timbaland\", \"John Nizinik\", \"John Nizinik\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2013\", \"2008\", \"2008\"), age (41, 43, 29), is_male (\"F\", \"T\"), song_name (\"Sun\", \"Dangerous\", \"Gentleman\") | concert : stadium_id (\"9\", \"9\", \"7\"), concert_id (2, 5, 6), year (\"2014\", \"2015\"), concert_name (\"Super bootcamp\", \"Week 1\", \"Week 2\"), theme (\"Happy Tonight\", \"Wide Awake\", \"Wide Awake\") | singer_in_concert : singer_id (\"5\", \"3\", \"2\"), concert_id (2, 6, 2)",
        "schema_without_content": "stadium : capacity , highest , average , location , stadium_id , lowest  | stadium_name : stadium_id , name  | singer : singer_id , name , country , song_release_year , age , is_male , song_name  | concert : stadium_id , concert_id , year , concert_name , theme  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select location, name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where capacity between 5000 and 10000",
            "select name, location from stadium_name as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t2.capacity between 5000 and 10000",
            "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000",
            "select t2.name, t1.location from stadium_name as t2 join stadium as t1 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000",
            "select location, name from stadium where capacity between 5000 and 10000"
        ],
        "query1": "select location, name from stadium where capacity between 5000 and 10000",
        "query2": "select t1.location, t2.name from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "LOCATION",
            ",",
            "name",
            "FROM",
            "stadium",
            "WHERE",
            "capacity",
            "BETWEEN",
            "5000",
            "AND",
            "10000"
        ],
        "query_toks_no_value": [
            "select",
            "location",
            ",",
            "name",
            "from",
            "stadium",
            "where",
            "capacity",
            "between",
            "value",
            "and",
            "value"
        ],
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "question_toks": [
            "What",
            "are",
            "the",
            "locations",
            "and",
            "names",
            "of",
            "all",
            "stations",
            "with",
            "capacity",
            "between",
            "5000",
            "and",
            "10000",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    1,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5000.0,
                    10000.0
                ]
            ]
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select location, name from stadium where capacity between 5000 and 10000",
        "split_map": {
            "stadium": "location"
        },
        "schema_with_content": "stadium : capacity (52500, 10104, 10104), average (637, 2106, 864), stadium_id (2, 2, 7), highest (1057, 4812, 1763), lowest (1294, 315, 533), name (\"Gayfield Park\", \"Hampden Park\", \"Glebe Park\") | stadium_location : stadium_id (5, 4, 4), location (\"Raith Rovers\", \"Queen's Park\", \"Queen's Park\") | singer : name (\"Timbaland\", \"Rose White\", \"John Nizinik\"), is_male (\"F\", \"T\"), singer_id (5, 1, 3), song_release_year (\"2014\", \"1992\", \"2008\"), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Gentleman\", \"Gentleman\", \"Dangerous\"), age (43, 43, 25) | concert : concert_name (\"Super bootcamp\", \"Week 1\", \"Week 2\"), year (\"2014\", \"2015\"), theme (\"Wide Awake\", \"Party All Night\", \"Party All Night\"), concert_id (6, 3, 3), stadium_id (\"1\", \"2\", \"10\") | singer_in_concert : singer_id (\"3\", \"2\", \"5\"), concert_id (4, 5, 3)",
        "schema_without_content": "stadium : capacity , average , stadium_id , highest , lowest , name  | stadium_location : stadium_id , location  | singer : name , is_male , singer_id , song_release_year , country , song_name , age  | concert : concert_name , year , theme , concert_id , stadium_id  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select name, location from stadium_location as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where capacity between 5000 and 10000",
            "select location, name from stadium_location as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where capacity between 5000 and 10000",
            "select name, location from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where capacity between 5000 and 10000",
            "select location, name from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where capacity between 5000 and 10000",
            "select t2.name, t1.location from stadium_location as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t2.capacity between 5000 and 10000"
        ],
        "query1": "select location, name from stadium where capacity between 5000 and 10000",
        "query2": "select t2.location, t1.name from stadium as t1 join stadium_location as t2 on t1.stadium_id = t2.stadium_id where t1.capacity between 5000 and 10000"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "capacity",
            "FROM",
            "stadium",
            "ORDER",
            "BY",
            "average",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc",
            "limit",
            "value"
        ],
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "capacity",
            "for",
            "the",
            "stadium",
            "with",
            "highest",
            "average",
            "attendance",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select name, capacity from stadium order by average desc limit 1",
        "split_map": {
            "stadium": "name"
        },
        "schema_with_content": "stadium : lowest (400, 533, 331), location (\"Stirling Albion\", \"Stirling Albion\", \"Arbroath\"), stadium_id (2, 6, 2), highest (1125, 921, 1980), average (642, 615, 730), capacity (11998, 3960, 2000) | stadium_name : name (\"Balmoor\", \"Recreation Park\", \"Forthbank Stadium\"), stadium_id (2, 1, 6) | singer : is_male (\"F\", \"T\"), name (\"John Nizinik\", \"Timbaland\", \"John Nizinik\"), country (\"Netherlands\", \"United States\", \"France\"), song_release_year (\"2003\", \"2003\", \"2003\"), singer_id (1, 6, 5), age (32, 43, 32), song_name (\"Sun\", \"Hey Oh\", \"Sun\") | concert : concert_name (\"Week 2\", \"Super bootcamp\", \"Auditions\"), stadium_id (\"2\", \"10\", \"10\"), theme (\"Party All Night\", \"Free choice 2\", \"Free choice\"), year (\"2014\", \"2015\"), concert_id (2, 3, 3) | singer_in_concert : concert_id (2, 6, 1), singer_id (\"4\", \"4\", \"2\")",
        "schema_without_content": "stadium : lowest , location , stadium_id , highest , average , capacity  | stadium_name : name , stadium_id  | singer : is_male , name , country , song_release_year , singer_id , age , song_name  | concert : concert_name , stadium_id , theme , year , concert_id  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select name, capacity from stadium where average = (select max(average) from stadium)",
            "select capacity, name from stadium where average = (select max(average) from stadium)",
            "select s.name, s.capacity from stadium as s join (select max(average) as max_average from stadium) as t on s.average = t.max_average",
            "select s.capacity, s.name from stadium as s join (select max(average) as max_average from stadium) as t on s.average = t.max_average",
            "select name, capacity from stadium where highest/2 = average"
        ],
        "query1": "select name, capacity from stadium order by average desc limit 1",
        "query2": "select t2.name, t1.capacity from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "capacity",
            "FROM",
            "stadium",
            "ORDER",
            "BY",
            "average",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc",
            "limit",
            "value"
        ],
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "capacity",
            "for",
            "the",
            "stadium",
            "with",
            "highest",
            "average",
            "attendance",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select name, capacity from stadium order by average desc limit 1",
        "split_map": {
            "stadium": "capacity"
        },
        "schema_with_content": "stadium : highest (921, 1125, 4812), stadium_id (1, 4, 2), name (\"Somerset Park\", \"Bayview Stadium\", \"Somerset Park\"), lowest (411, 315, 331), location (\"Raith Rovers\", \"Ayr United\", \"Raith Rovers\"), average (552, 552, 642) | stadium_capacity : stadium_id (4, 10, 1), capacity (2000, 2000, 52500) | singer : song_release_year (\"2003\", \"2016\", \"1992\"), age (41, 52, 41), song_name (\"Hey Oh\", \"Sun\", \"Sun\"), name (\"Rose White\", \"John Nizinik\", \"Timbaland\"), is_male (\"F\", \"T\"), country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 4, 3) | concert : year (\"2014\", \"2015\"), concert_name (\"Home Visits\", \"Home Visits\", \"Auditions\"), concert_id (3, 5, 6), stadium_id (\"9\", \"2\", \"9\"), theme (\"Party All Night\", \"Party All Night\", \"Free choice 2\") | singer_in_concert : concert_id (5, 4, 3), singer_id (\"2\", \"4\", \"2\")",
        "schema_without_content": "stadium : highest , stadium_id , name , lowest , location , average  | stadium_capacity : stadium_id , capacity  | singer : song_release_year , age , song_name , name , is_male , country , singer_id  | concert : year , concert_name , concert_id , stadium_id , theme  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id where highest = (select max(average) from stadium)",
            "select t2.capacity, t1.name from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id where highest = (select max(average) from stadium)",
            "select t1.name, t2.capacity from stadium_capacity as t2 join stadium as t1 on t1.stadium_id = t2.stadium_id where highest = (select max(average) from stadium)",
            "select t2.capacity, t1.name from stadium_capacity as t2 join stadium as t1 on t1.stadium_id = t2.stadium_id where highest = (select max(average) from stadium)",
            "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id where t1.average = (select max(average) from stadium)"
        ],
        "query1": "select name, capacity from stadium order by average desc limit 1",
        "query2": "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "capacity",
            "FROM",
            "stadium",
            "ORDER",
            "BY",
            "average",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc",
            "limit",
            "value"
        ],
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "capacity",
            "for",
            "the",
            "stadium",
            "with",
            "the",
            "highest",
            "average",
            "attendance",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select name, capacity from stadium order by average desc limit 1",
        "split_map": {
            "stadium": "name"
        },
        "schema_with_content": "stadium : lowest (400, 315, 1294), location (\"East Fife\", \"Ayr United\", \"Alloa Athletic\"), stadium_id (7, 6, 6), highest (837, 1125, 921), average (642, 1477, 864), capacity (4000, 4000, 3960) | stadium_name : stadium_id (4, 5, 9), name (\"Glebe Park\", \"Forthbank Stadium\", \"Hampden Park\") | singer : age (25, 41, 41), country (\"Netherlands\", \"United States\", \"France\"), singer_id (3, 2, 2), is_male (\"F\", \"T\"), name (\"Joe Sharp\", \"Joe Sharp\", \"Timbaland\"), song_release_year (\"2014\", \"2008\", \"1992\"), song_name (\"You\", \"Dangerous\", \"You\") | concert : year (\"2014\", \"2015\"), concert_name (\"Home Visits\", \"Week 1\", \"Week 2\"), stadium_id (\"1\", \"2\", \"7\"), concert_id (3, 4, 1), theme (\"Free choice\", \"Bleeding Love\", \"Free choice 2\") | singer_in_concert : concert_id (3, 3, 6), singer_id (\"2\", \"3\", \"2\")",
        "schema_without_content": "stadium : lowest , location , stadium_id , highest , average , capacity  | stadium_name : stadium_id , name  | singer : age , country , singer_id , is_male , name , song_release_year , song_name  | concert : year , concert_name , stadium_id , concert_id , theme  | singer_in_concert : concert_id , singer_id ",
        "chatgpt_out": [
            "select t1.name, t1.capacity from stadium as t1 join (select stadium_id from stadium order by average desc limit 1) as t2 on t1.stadium_id = t2.stadium_id",
            "select t1.capacity, t1.name from stadium as t1 join (select stadium_id from stadium order by average desc limit 1) as t2 on t1.stadium_id = t2.stadium_id",
            "select name, capacity from stadium where average = (select max(average) as highest_avg from stadium)",
            "select capacity, name from stadium where average = (select max(average) as highest_avg from stadium)",
            "select t1.name, t1.capacity from stadium as t1 join (select max(average) as highest_avg from stadium) as t2 on t1.average = t2.highest_avg"
        ],
        "query1": "select name, capacity from stadium order by average desc limit 1",
        "query2": "select t2.name, t1.capacity from stadium as t1 join stadium_name as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "capacity",
            "FROM",
            "stadium",
            "ORDER",
            "BY",
            "average",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "capacity",
            "from",
            "stadium",
            "order",
            "by",
            "average",
            "desc",
            "limit",
            "value"
        ],
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "capacity",
            "for",
            "the",
            "stadium",
            "with",
            "the",
            "highest",
            "average",
            "attendance",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "stadium": "stadium_id"
        },
        "orig_query": "select name, capacity from stadium order by average desc limit 1",
        "split_map": {
            "stadium": "capacity"
        },
        "schema_with_content": "stadium : highest (837, 837, 780), location (\"Arbroath\", \"Ayr United\", \"Peterhead\"), lowest (400, 404, 1294), stadium_id (1, 2, 2), average (864, 2106, 552), name (\"Stark's Park\", \"Gayfield Park\", \"Glebe Park\") | stadium_capacity : stadium_id (9, 6, 5), capacity (10104, 3960, 3808) | singer : name (\"Justin Brown\", \"Tribal King\", \"John Nizinik\"), song_release_year (\"2013\", \"2008\", \"1992\"), song_name (\"You\", \"Hey Oh\", \"Hey Oh\"), is_male (\"F\", \"T\"), age (43, 25, 43), country (\"Netherlands\", \"United States\", \"France\"), singer_id (2, 2, 1) | concert : year (\"2014\", \"2015\"), stadium_id (\"9\", \"7\", \"1\"), concert_name (\"Super bootcamp\", \"Week 2\", \"Auditions\"), concert_id (5, 4, 4), theme (\"Bleeding Love\", \"Party All Night\", \"Bleeding Love\") | singer_in_concert : singer_id (\"2\", \"5\", \"4\"), concert_id (4, 3, 3)",
        "schema_without_content": "stadium : highest , location , lowest , stadium_id , average , name  | stadium_capacity : stadium_id , capacity  | singer : name , song_release_year , song_name , is_male , age , country , singer_id  | concert : year , stadium_id , concert_name , concert_id , theme  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id where t1.average = (select max(average) from stadium)",
            "select t2.capacity, t1.name from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id where t1.average = (select max(average) from stadium)",
            "select t1.name, t2.capacity from stadium_capacity as t2 join stadium as t1 on t2.stadium_id = t1.stadium_id where t1.average = (select max(average) from stadium)",
            "select t2.capacity, t1.name from stadium_capacity as t2 join stadium as t1 on t2.stadium_id = t1.stadium_id where t1.average = (select max(average) from stadium)",
            "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id where t1.highest = (select max(highest) from stadium)"
        ],
        "query1": "select name, capacity from stadium order by average desc limit 1",
        "query2": "select t1.name, t2.capacity from stadium as t1 join stadium_capacity as t2 on t1.stadium_id = t2.stadium_id order by t1.average desc limit 1"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "song_name",
            "LIKE",
            "'",
            "%",
            "Hey",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer",
            "where",
            "song_name",
            "like",
            "value"
        ],
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "question_toks": [
            "what",
            "is",
            "the",
            "name",
            "and",
            "nation",
            "of",
            "the",
            "singer",
            "who",
            "have",
            "a",
            "song",
            "having",
            "'Hey",
            "'",
            "in",
            "its",
            "name",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country from singer where song_name like '%Hey%'",
        "split_map": {
            "singer": "name"
        },
        "schema_with_content": "stadium : average (637, 552, 638), lowest (466, 411, 331), capacity (10104, 4000, 3960), highest (780, 837, 780), location (\"Stirling Albion\", \"Arbroath\", \"Alloa Athletic\"), name (\"Forthbank Stadium\", \"Forthbank Stadium\", \"Glebe Park\"), stadium_id (1, 10, 4) | singer : country (\"Netherlands\", \"United States\", \"France\"), is_male (\"F\", \"T\"), age (52, 32, 32), song_release_year (\"1992\", \"2008\", \"1992\"), singer_id (3, 4, 6), song_name (\"Gentleman\", \"Dangerous\", \"Dangerous\") | singer_name : name (\"John Nizinik\", \"Timbaland\", \"Justin Brown\"), singer_id (5, 6, 6) | concert : stadium_id (\"9\", \"1\", \"2\"), concert_name (\"Week 1\", \"Week 1\", \"Week 2\"), year (\"2014\", \"2015\"), concert_id (1, 1, 6), theme (\"Bleeding Love\", \"Bleeding Love\", \"Party All Night\") | singer_in_concert : singer_id (\"2\", \"2\", \"4\"), concert_id (5, 4, 3)",
        "schema_without_content": "stadium : average , lowest , capacity , highest , location , name , stadium_id  | singer : country , is_male , age , song_release_year , singer_id , song_name  | singer_name : name , singer_id  | concert : stadium_id , concert_name , year , concert_id , theme  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select t1.country, t2.name from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'",
            "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'",
            "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%' group by t1.country, t2.name",
            "select t1.country, t2.name from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t2.name like '%Hey%' group by t1.country, t2.name",
            "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id join singer_in_concert as t3 on t1.singer_id = t3.singer_id join concert as t4 on t3.concert_id = t4.concert_id where t2.name like '%Hey%' group by t2.name, t1.country"
        ],
        "query1": "select name, country from singer where song_name like '%Hey%'",
        "query2": "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "song_name",
            "LIKE",
            "'",
            "%",
            "Hey",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer",
            "where",
            "song_name",
            "like",
            "value"
        ],
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "question_toks": [
            "what",
            "is",
            "the",
            "name",
            "and",
            "nation",
            "of",
            "the",
            "singer",
            "who",
            "have",
            "a",
            "song",
            "having",
            "'Hey",
            "'",
            "in",
            "its",
            "name",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country from singer where song_name like '%Hey%'",
        "split_map": {
            "singer": "country"
        },
        "schema_with_content": "stadium : highest (4812, 1057, 1125), location (\"Ayr United\", \"Brechin City\", \"Stirling Albion\"), stadium_id (7, 4, 6), capacity (52500, 3960, 2000), average (638, 642, 638), name (\"Forthbank Stadium\", \"Somerset Park\", \"Bayview Stadium\"), lowest (404, 411, 315) | singer : song_name (\"Dangerous\", \"Hey Oh\", \"Hey Oh\"), song_release_year (\"2016\", \"2014\", \"2013\"), singer_id (6, 3, 3), age (25, 41, 32), is_male (\"F\", \"T\"), name (\"Joe Sharp\", \"Timbaland\", \"Tribal King\") | singer_country : singer_id (6, 5, 5), country (\"Netherlands\", \"United States\", \"France\") | concert : concert_name (\"Week 1\", \"Super bootcamp\", \"Week 2\"), theme (\"Wide Awake\", \"Happy Tonight\", \"Wide Awake\"), concert_id (1, 6, 1), year (\"2014\", \"2015\"), stadium_id (\"7\", \"2\", \"7\") | singer_in_concert : singer_id (\"3\", \"6\", \"5\"), concert_id (5, 1, 3)",
        "schema_without_content": "stadium : highest , location , stadium_id , capacity , average , name , lowest  | singer : song_name , song_release_year , singer_id , age , is_male , name  | singer_country : singer_id , country  | concert : concert_name , theme , concert_id , year , stadium_id  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select distinct t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'",
            "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'",
            "select distinct t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id join singer_in_concert as t3 on t1.singer_id = t3.singer_id join concert as t4 on t3.concert_id = t4.concert_id where t1.song_name like '%Hey%'",
            "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id join singer_in_concert as t3 on t1.singer_id = t3.singer_id join concert as t4 on t3.concert_id = t4.concert_id where t1.song_name like '%Hey%'",
            "select t2.name, t3.country from concert as t1 join singer_in_concert as t2 on t1.concert_id = t2.concert_id join singer_country as t3 on t2.singer_id = t3.singer_id join singer as t4 on t2.singer_id = t4.singer_id where t4.song_name like '%Hey%'"
        ],
        "query1": "select name, country from singer where song_name like '%Hey%'",
        "query2": "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "song_name",
            "LIKE",
            "'",
            "%",
            "Hey",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer",
            "where",
            "song_name",
            "like",
            "value"
        ],
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "country",
            "of",
            "origin",
            "of",
            "every",
            "singer",
            "who",
            "has",
            "a",
            "song",
            "with",
            "the",
            "word",
            "'Hey",
            "'",
            "in",
            "its",
            "title",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country from singer where song_name like '%Hey%'",
        "split_map": {
            "singer": "name"
        },
        "schema_with_content": "stadium : average (864, 642, 552), name (\"Balmoor\", \"Hampden Park\", \"Bayview Stadium\"), highest (4812, 1980, 1763), capacity (2000, 3100, 52500), location (\"Peterhead\", \"East Fife\", \"East Fife\"), stadium_id (1, 1, 2), lowest (1057, 404, 1057) | singer : singer_id (6, 1, 2), country (\"Netherlands\", \"United States\", \"France\"), song_name (\"Hey Oh\", \"Hey Oh\", \"Gentleman\"), is_male (\"F\", \"T\"), age (41, 52, 25), song_release_year (\"2003\", \"2016\", \"2014\") | singer_name : name (\"Joe Sharp\", \"Rose White\", \"Joe Sharp\"), singer_id (3, 6, 1) | concert : theme (\"Party All Night\", \"Free choice\", \"Wide Awake\"), concert_id (2, 4, 1), year (\"2014\", \"2015\"), concert_name (\"Home Visits\", \"Week 1\", \"Week 1\"), stadium_id (\"2\", \"10\", \"9\") | singer_in_concert : singer_id (\"6\", \"2\", \"6\"), concert_id (6, 6, 3)",
        "schema_without_content": "stadium : average , name , highest , capacity , location , stadium_id , lowest  | singer : singer_id , country , song_name , is_male , age , song_release_year  | singer_name : name , singer_id  | concert : theme , concert_id , year , concert_name , stadium_id  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select name, country from singer where song_name like '%Hey%'",
            "select country, name from singer where song_name like '%Hey%'",
            "select distinct name, country from singer join singer_name on singer.singer_id = singer_name.singer_id where song_name like '%Hey%'",
            "select distinct country, name from singer join singer_name on singer.singer_id = singer_name.singer_id where song_name like '%Hey%'",
            "select name, country from singer where lower(song_name) like '%hey%'"
        ],
        "query1": "select name, country from singer where song_name like '%Hey%'",
        "query2": "select t2.name, t1.country from singer as t1 join singer_name as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
    },
    {
        "db_id": "concert_singer",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "country",
            "FROM",
            "singer",
            "WHERE",
            "song_name",
            "LIKE",
            "'",
            "%",
            "Hey",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "country",
            "from",
            "singer",
            "where",
            "song_name",
            "like",
            "value"
        ],
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "country",
            "of",
            "origin",
            "of",
            "every",
            "singer",
            "who",
            "has",
            "a",
            "song",
            "with",
            "the",
            "word",
            "'Hey",
            "'",
            "in",
            "its",
            "title",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"%Hey%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select name, country from singer where song_name like '%Hey%'",
        "split_map": {
            "singer": "country"
        },
        "schema_with_content": "stadium : name (\"Balmoor\", \"Hampden Park\", \"Forthbank Stadium\"), average (730, 864, 642), location (\"Arbroath\", \"Ayr United\", \"Ayr United\"), capacity (10104, 3960, 4125), highest (780, 780, 921), lowest (315, 1294, 411), stadium_id (3, 1, 3) | singer : age (25, 52, 25), is_male (\"F\", \"T\"), song_release_year (\"2003\", \"2008\", \"2013\"), singer_id (5, 5, 6), name (\"Tribal King\", \"Timbaland\", \"Justin Brown\"), song_name (\"Dangerous\", \"Dangerous\", \"Hey Oh\") | singer_country : country (\"Netherlands\", \"United States\", \"France\"), singer_id (1, 5, 2) | concert : concert_id (6, 5, 6), stadium_id (\"10\", \"2\", \"9\"), year (\"2014\", \"2015\"), concert_name (\"Week 2\", \"Home Visits\", \"Home Visits\"), theme (\"Bleeding Love\", \"Free choice 2\", \"Wide Awake\") | singer_in_concert : singer_id (\"3\", \"6\", \"5\"), concert_id (4, 2, 5)",
        "schema_without_content": "stadium : name , average , location , capacity , highest , lowest , stadium_id  | singer : age , is_male , song_release_year , singer_id , name , song_name  | singer_country : country , singer_id  | concert : concert_id , stadium_id , year , concert_name , theme  | singer_in_concert : singer_id , concert_id ",
        "chatgpt_out": [
            "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'",
            "select t2.country, t1.name from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'",
            "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like 'Hey%'",
            "select t2.country, t1.name from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like 'Hey%'",
            "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey'"
        ],
        "query1": "select name, country from singer where song_name like '%Hey%'",
        "query2": "select t1.name, t2.country from singer as t1 join singer_country as t2 on t1.singer_id = t2.singer_id where t1.song_name like '%Hey%'"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "petType",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "petType"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "question_toks": [
            "Find",
            "the",
            "maximum",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            ".",
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "pet",
            "type",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select max(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "weight"
        },
        "schema_with_content": "student : lname (\"Schwartz\", \"Kumar\", \"Epp\"), stuid (1029, 1025, 1014), fname (\"Lisa\", \"Tracy\", \"Shiela\"), city_code (\"BAL\", \"BAL\", \"PIT\"), advisor (2192, 7134, 2311), sex (\"F\", \"M\"), age (21, 18, 26), major (600, 100, 600) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)",
        "schema_without_content": "student : lname , stuid , fname , city_code , advisor , sex , age , major  | has_pet : stuid , petid  | pets : petid , pettype , pet_age  | pets_weight : petid , weight ",
        "chatgpt_out": [
            "select max(t1.weight) as max_weight, t2.pettype from pets_weight as t1 join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select t2.pettype, max(t1.weight) as max_weight from pets_weight as t1 join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select max(t1.weight), t2.pettype from pets_weight as t1 inner join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select t2.pettype, max(t1.weight) from pets_weight as t1 inner join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select max(t1.weight) as max_weight, t2.pettype from pets_weight as t1, pets as t2 where t1.petid = t2.petid group by t2.pettype"
        ],
        "query1": "select max(weight), pettype from pets group by pettype",
        "query2": "select max(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "petType",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "petType"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "question_toks": [
            "Find",
            "the",
            "maximum",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            ".",
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "pet",
            "type",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select max(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : sex (\"F\", \"M\"), age (17, 16, 27), fname (\"Eric\", \"Derek\", \"Michael\"), stuid (1029, 1012, 1021), advisor (7792, 8721, 7723), major (50, 540, 540), city_code (\"ROC\", \"YYZ\", \"HKG\"), lname (\"Cheng\", \"Lee\", \"Lee\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")",
        "schema_without_content": "student : sex , age , fname , stuid , advisor , major , city_code , lname  | has_pet : petid , stuid  | pets : petid , weight , pet_age  | pets_pettype : petid , pettype ",
        "chatgpt_out": [
            "select pettype, max(weight) from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by pettype",
            "select max(t2.weight), t1.pettype from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by t1.pettype",
            "select pettype, weight from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid where weight = (select max(weight) from pets as t3 where t3.petid = t2.petid) order by pettype",
            "select weight, pettype from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid where weight = (select max(weight) from pets as t3 where t3.petid = t2.petid) order by pettype",
            "select pettype, weight from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid where weight = (select max(weight) from pets as t3 where t3.petid = t2.petid) group by pettype"
        ],
        "query1": "select max(weight), pettype from pets group by pettype",
        "query2": "select max(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "petType",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "petType"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "List the maximum weight and type for each type of pet.",
        "question_toks": [
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "type",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select max(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "weight"
        },
        "schema_with_content": "student : city_code (\"PHL\", \"HKG\", \"NAR\"), age (18, 17, 20), advisor (7271, 1121, 8423), sex (\"F\", \"M\"), fname (\"Linda\", \"Jun\", \"Jun\"), lname (\"Prater\", \"Wilson\", \"Kumar\"), major (550, 540, 520), stuid (1031, 1020, 1001) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_weight : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003)",
        "schema_without_content": "student : city_code , age , advisor , sex , fname , lname , major , stuid  | has_pet : stuid , petid  | pets : petid , pettype , pet_age  | pets_weight : weight , petid ",
        "chatgpt_out": [
            "select max(t1.weight), t2.pettype from pets_weight as t1 join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select t2.pettype, max(t1.weight) from pets_weight as t1 join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select max(t1.weight), t2.pettype from pets_weight as t1 left join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select t2.pettype, max(t1.weight) from pets_weight as t1 left join pets as t2 on t1.petid = t2.petid group by t2.pettype",
            "select max(weight), pettype from (select * from pets_weight inner join pets on pets_weight.petid=pets.petid) group by pettype"
        ],
        "query1": "select max(weight), pettype from pets group by pettype",
        "query2": "select max(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "petType",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "petType"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "List the maximum weight and type for each type of pet.",
        "question_toks": [
            "List",
            "the",
            "maximum",
            "weight",
            "and",
            "type",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select max(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : advisor (8423, 7271, 1121), fname (\"Jandy\", \"Eric\", \"Michael\"), major (540, 600, 50), stuid (1030, 1034, 1005), age (17, 19, 20), sex (\"F\", \"M\"), lname (\"Wilson\", \"Brody\", \"Davis\"), city_code (\"DET\", \"SFO\", \"HOU\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")",
        "schema_without_content": "student : advisor , fname , major , stuid , age , sex , lname , city_code  | has_pet : stuid , petid  | pets : weight , petid , pet_age  | pets_pettype : petid , pettype ",
        "chatgpt_out": [
            "select pettype, max(weight) as max_weight from pets_pettype join pets on pets_pettype.petid = pets.petid group by pettype",
            "select pettype, weight as max_weight from pets_pettype join pets on pets_pettype.petid = pets.petid where weight = (select max(weight) from pets) group by pettype",
            "select pettype, max(pets.weight) as max_weight from pets_pettype join pets on pets_pettype.petid = pets.petid group by pettype",
            "select pettype, pets.weight as max_weight from pets_pettype join pets on pets_pettype.petid = pets.petid where pets.weight = (select max(weight) from pets) group by pettype",
            "select pettype, max(weight) as max_weight from pets_pettype join pets on pets_pettype.petid = pets.petid group by pettype, weight having weight = (select max(weight) from pets_pettype join pets on pets_pettype.petid = pets.petid group by pettype, weight)"
        ],
        "query1": "select max(weight), pettype from pets group by pettype",
        "query2": "select max(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "pettype",
            ",",
            "weight",
            "FROM",
            "pets",
            "ORDER",
            "BY",
            "pet_age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets",
            "order",
            "by",
            "pet_age",
            "limit",
            "value"
        ],
        "question": "Find the type and weight of the youngest pet.",
        "question_toks": [
            "Find",
            "the",
            "type",
            "and",
            "weight",
            "of",
            "the",
            "youngest",
            "pet",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select pettype, weight from pets order by pet_age limit 1",
        "split_map": {
            "pets": "weight"
        },
        "schema_with_content": "student : lname (\"Adams\", \"Goldman\", \"Smith\"), sex (\"F\", \"M\"), advisor (2311, 8423, 7723), city_code (\"NYC\", \"HKG\", \"YYZ\"), major (100, 50, 600), age (16, 16, 16), fname (\"Linda\", \"Shiela\", \"William\"), stuid (1008, 1030, 1030) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : pettype (\"cat\", \"dog\"), pet_age (3, 2, 1), petid (2001, 2002, 2003) | pets_weight : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003)",
        "schema_without_content": "student : lname , sex , advisor , city_code , major , age , fname , stuid  | has_pet : petid , stuid  | pets : pettype , pet_age , petid  | pets_weight : weight , petid ",
        "chatgpt_out": [
            "select pettype, weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where pet_age = (select min(pet_age) from pets)",
            "select pettype, weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where pet_age = (select min(pet_age) from pets) order by weight asc limit 1",
            "select pettype, weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where pet_age = (select min(pet_age) from pets) order by weight desc limit 1",
            "select pettype, weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where pet_age = (select min(pet_age) from pets) and weight = (select min(weight) from pets_weight)",
            "select pettype, weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where pet_age = (select min(pet_age) from pets) and weight = (select max(weight) from pets_weight)"
        ],
        "query1": "select pettype, weight from pets order by pet_age limit 1",
        "query2": "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid order by t1.pet_age limit 1"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "pettype",
            ",",
            "weight",
            "FROM",
            "pets",
            "ORDER",
            "BY",
            "pet_age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets",
            "order",
            "by",
            "pet_age",
            "limit",
            "value"
        ],
        "question": "Find the type and weight of the youngest pet.",
        "question_toks": [
            "Find",
            "the",
            "type",
            "and",
            "weight",
            "of",
            "the",
            "youngest",
            "pet",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select pettype, weight from pets order by pet_age limit 1",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : sex (\"F\", \"M\"), advisor (8772, 1121, 8772), fname (\"Jun\", \"George\", \"Susan\"), lname (\"Lee\", \"Tai\", \"Schultz\"), stuid (1007, 1002, 1010), major (100, 520, 550), city_code (\"HOU\", \"HKG\", \"YYZ\"), age (21, 26, 19) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")",
        "schema_without_content": "student : sex , advisor , fname , lname , stuid , major , city_code , age  | has_pet : petid , stuid  | pets : weight , petid , pet_age  | pets_pettype : petid , pettype ",
        "chatgpt_out": [
            "select pettype, weight from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid where pet_age = (select min(pet_age) from pets)",
            "select pettype, weight from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid where t2.pet_age = (select min(pet_age) from pets)",
            "select t1.pettype, t2.weight from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid where t2.pet_age = (select min(pet_age) from pets)",
            "select t1.pettype, t1.weight from pets as t1 where t1.pet_age = (select min(pet_age) from pets) order by pet_age limit 1",
            "select pettype, weight from pets_pettype, pets where pets.petid = pets_pettype.petid and pet_age = (select min(pet_age) from pets)"
        ],
        "query1": "select pettype, weight from pets order by pet_age limit 1",
        "query2": "select t2.pettype, t1.weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid order by t1.pet_age limit 1"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "pettype",
            ",",
            "weight",
            "FROM",
            "pets",
            "ORDER",
            "BY",
            "pet_age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets",
            "order",
            "by",
            "pet_age",
            "limit",
            "value"
        ],
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "question_toks": [
            "What",
            "type",
            "of",
            "pet",
            "is",
            "the",
            "youngest",
            "animal",
            ",",
            "and",
            "how",
            "much",
            "does",
            "it",
            "weigh",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select pettype, weight from pets order by pet_age limit 1",
        "split_map": {
            "pets": "weight"
        },
        "schema_with_content": "student : age (26, 20, 21), fname (\"Jun\", \"Charles\", \"Paul\"), advisor (8721, 2192, 8918), lname (\"Pang\", \"Schmidt\", \"Andreou\"), stuid (1025, 1014, 1004), sex (\"F\", \"M\"), city_code (\"LOS\", \"SFO\", \"LOS\"), major (550, 100, 520) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003) | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)",
        "schema_without_content": "student : age , fname , advisor , lname , stuid , sex , city_code , major  | has_pet : petid , stuid  | pets : pet_age , pettype , petid  | pets_weight : petid , weight ",
        "chatgpt_out": [
            "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where t1.pet_age = (select min(pet_age) from pets)",
            "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where t1.pet_age = (select min(pet_age) from pets) order by t2.weight desc limit 1",
            "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid where t1.pet_age = (select min(pet_age) from pets) order by t2.weight limit 1",
            "select t1.pettype, t2.weight from pets as t1, pets_weight as t2 where t1.petid = t2.petid and t1.pet_age = (select min(pet_age) from pets)",
            "select t1.pettype, t2.weight from pets as t1, pets_weight as t2 where t2.petid in (select petid from pets where pet_age = (select min(pet_age) from pets)) and t1.petid = t2.petid"
        ],
        "query1": "select pettype, weight from pets order by pet_age limit 1",
        "query2": "select t1.pettype, t2.weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid order by t1.pet_age limit 1"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "pettype",
            ",",
            "weight",
            "FROM",
            "pets",
            "ORDER",
            "BY",
            "pet_age",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "pettype",
            ",",
            "weight",
            "from",
            "pets",
            "order",
            "by",
            "pet_age",
            "limit",
            "value"
        ],
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "question_toks": [
            "What",
            "type",
            "of",
            "pet",
            "is",
            "the",
            "youngest",
            "animal",
            ",",
            "and",
            "how",
            "much",
            "does",
            "it",
            "weigh",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select pettype, weight from pets order by pet_age limit 1",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : sex (\"F\", \"M\"), advisor (7723, 8772, 8918), lname (\"Shieber\", \"Smith\", \"Shieber\"), fname (\"Shiela\", \"Linda\", \"Andy\"), age (27, 22, 27), stuid (1004, 1020, 1033), major (520, 540, 540), city_code (\"CHI\", \"DAL\", \"BAL\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")",
        "schema_without_content": "student : sex , advisor , lname , fname , age , stuid , major , city_code  | has_pet : stuid , petid  | pets : weight , petid , pet_age  | pets_pettype : petid , pettype ",
        "chatgpt_out": [
            "select t2.pettype, t1.weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid where t1.pet_age = (select min(pet_age) from pets)",
            "select t2.pettype, t1.weight from pets as t1, pets_pettype as t2 where t1.petid = t2.petid and t1.pet_age = (select min(pet_age) from pets)",
            "select t2.pettype, t1.weight from pets_pettype as t2 join pets as t1 on t2.petid = t1.petid where t1.pet_age = (select min(pet_age) from pets)",
            "select t2.pettype, t1.weight from pets_pettype as t2, pets as t1 where t2.petid = t1.petid and t1.pet_age = (select min(pet_age) from pets)",
            "select pettype, weight from pets_pettype natural join pets where pet_age = (select min(pet_age) from pets)"
        ],
        "query1": "select pettype, weight from pets order by pet_age limit 1",
        "query2": "select t2.pettype, t1.weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid order by t1.pet_age limit 1"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the average and maximum age for each type of pet.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "and",
            "maximum",
            "age",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "split_map": {
            "pets": "pet_age"
        },
        "schema_with_content": "student : fname (\"Arthur\", \"Jandy\", \"Jandy\"), major (50, 600, 600), advisor (7134, 7134, 8423), sex (\"F\", \"M\"), city_code (\"CHI\", \"DET\", \"WAS\"), stuid (1006, 1011, 1016), lname (\"Cheng\", \"Adams\", \"Adams\"), age (22, 26, 17) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3) | pets_pet_age : petid (2001, 2002, 2003), pet_age (3, 2, 1)",
        "schema_without_content": "student : fname , major , advisor , sex , city_code , stuid , lname , age  | has_pet : stuid , petid  | pets : pettype , petid , weight  | pets_pet_age : petid , pet_age ",
        "chatgpt_out": [
            "select pettype, avg(pet_age), max(pet_age) from pets_pet_age join pets on pets_pet_age.petid = pets.petid group by pettype",
            "select pettype, max(pet_age), avg(pet_age) from pets_pet_age join pets on pets_pet_age.petid = pets.petid group by pettype",
            "select pettype, avg(pets_pet_age.pet_age), max(pets_pet_age.pet_age) from pets_pet_age, pets where pets_pet_age.petid = pets.petid group by pettype",
            "select pettype, max(pets_pet_age.pet_age), avg(pets_pet_age.pet_age) from pets_pet_age, pets where pets_pet_age.petid = pets.petid group by pettype",
            "select pettype, avg(pets_pet_age.pet_age), max(pets_pet_age.pet_age) from pets_pet_age join pets on pets_pet_age.petid = pets.petid group by pets.pettype"
        ],
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "query2": "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the average and maximum age for each type of pet.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "and",
            "maximum",
            "age",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : city_code (\"PHL\", \"NYC\", \"LOS\"), age (20, 21, 17), major (550, 600, 550), advisor (5718, 8721, 5718), sex (\"F\", \"M\"), fname (\"Tracy\", \"Ian\", \"Lisa\"), stuid (1032, 1015, 1027), lname (\"Tai\", \"Han\", \"Epp\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)",
        "schema_without_content": "student : city_code , age , major , advisor , sex , fname , stuid , lname  | has_pet : stuid , petid  | pets : petid , pet_age , weight  | pets_pettype : pettype , petid ",
        "chatgpt_out": [
            "select pettype, avg(pet_age), max(pet_age) from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by pettype",
            "select pettype, max(pet_age), avg(pet_age) from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by pettype",
            "select t1.pettype, avg(t2.pet_age), max(t2.pet_age) from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by t1.pettype",
            "select t1.pettype, max(t2.pet_age), avg(t2.pet_age) from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by t1.pettype",
            "select pettype, avg(pet_age), max(pet_age) from pets_pettype as t1 left join pets as t2 on t1.petid = t2.petid group by pettype"
        ],
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "query2": "select avg(t1.pet_age), max(t1.pet_age), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "What is the average and maximum age for each pet type?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "and",
            "maximum",
            "age",
            "for",
            "each",
            "pet",
            "type",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "split_map": {
            "pets": "pet_age"
        },
        "schema_with_content": "student : age (20, 26, 19), stuid (1032, 1004, 1021), advisor (8741, 7271, 7792), city_code (\"NAR\", \"LOS\", \"PHL\"), major (600, 520, 50), fname (\"Derek\", \"Paul\", \"Andy\"), lname (\"Brody\", \"Prater\", \"Kim\"), sex (\"F\", \"M\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : weight (12.0, 13.4, 9.3), petid (2001, 2002, 2003), pettype (\"cat\", \"dog\") | pets_pet_age : petid (2001, 2002, 2003), pet_age (3, 2, 1)",
        "schema_without_content": "student : age , stuid , advisor , city_code , major , fname , lname , sex  | has_pet : stuid , petid  | pets : weight , petid , pettype  | pets_pet_age : petid , pet_age ",
        "chatgpt_out": [
            "select pettype, avg(pet_age) as avg_age, max(pet_age) as max_age from pets_pet_age join pets on pets_pet_age.petid = pets.petid group by pettype",
            "select pettype, max(pet_age) as max_age, avg(pet_age) as avg_age from pets_pet_age join pets on pets_pet_age.petid = pets.petid group by pettype",
            "select pettype, avg(p.pet_age) as avg_age, max(p.pet_age) as max_age from pets_pet_age as p join pets as t on p.petid = t.petid group by t.pettype",
            "select pettype, max(p.pet_age) as max_age, avg(p.pet_age) as avg_age from pets_pet_age as p join pets as t on p.petid = t.petid group by t.pettype",
            "select pettype, avg(pet_age) as avg_age, max(pet_age) as max_age from (select * from pets_pet_age as a join pets as b on a.petid = b.petid) group by pettype"
        ],
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "query2": "select avg(t2.pet_age), max(t2.pet_age), t1.pettype from pets as t1 join pets_pet_age as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "pet_age",
            ")",
            ",",
            "max",
            "(",
            "pet_age",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "What is the average and maximum age for each pet type?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "and",
            "maximum",
            "age",
            "for",
            "each",
            "pet",
            "type",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : lname (\"Brody\", \"Gompers\", \"Han\"), advisor (8722, 2192, 8722), age (27, 20, 18), stuid (1015, 1028, 1016), sex (\"F\", \"M\"), city_code (\"PEK\", \"ATL\", \"HKG\"), major (540, 520, 550), fname (\"Eric\", \"Sarah\", \"Shiela\") | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : pet_age (3, 2, 1), petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)",
        "schema_without_content": "student : lname , advisor , age , stuid , sex , city_code , major , fname  | has_pet : petid , stuid  | pets : pet_age , petid , weight  | pets_pettype : pettype , petid ",
        "chatgpt_out": [
            "select pettype, avg(pet_age) as avg_age, max(pet_age) as max_age from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by pettype",
            "select pettype, max(pet_age) as max_age, avg(pet_age) as avg_age from pets_pettype as t1 join pets as t2 on t1.petid = t2.petid group by pettype",
            "select t1.pettype, avg(t2.pet_age) as avg_age, max(t2.pet_age) as max_age from pets_pettype as t1 join has_pet as t3 on t1.petid = t3.petid join pets as t2 on t1.petid = t2.petid group by t1.pettype",
            "select t1.pettype, max(t2.pet_age) as max_age, avg(t2.pet_age) as avg_age from pets_pettype as t1 join has_pet as t3 on t1.petid = t3.petid join pets as t2 on t1.petid = t2.petid group by t1.pettype",
            "select t2.pettype, avg(t3.pet_age) as avg_age, max(t3.pet_age) as max_age from has_pet as t1 join pets_pettype as t2 on t1.petid = t2.petid join pets as t3 on t1.petid = t3.petid group by t2.pettype"
        ],
        "query1": "select avg(pet_age), max(pet_age), pettype from pets group by pettype",
        "query2": "select avg(t1.pet_age), max(t1.pet_age), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the average weight for each pet type.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "pet",
            "type",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "weight"
        },
        "schema_with_content": "student : sex (\"F\", \"M\"), major (550, 520, 540), fname (\"Steven\", \"Charles\", \"Paul\"), city_code (\"PIT\", \"BOS\", \"HOU\"), advisor (7134, 8423, 8723), lname (\"Simms\", \"Davis\", \"Brown\"), stuid (1007, 1003, 1031), age (19, 26, 21) | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\"), pet_age (3, 2, 1) | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)",
        "schema_without_content": "student : sex , major , fname , city_code , advisor , lname , stuid , age  | has_pet : stuid , petid  | pets : petid , pettype , pet_age  | pets_weight : petid , weight ",
        "chatgpt_out": [
            "select pettype, avg(weight) from pets_weight join pets on pets_weight.petid = pets.petid group by pettype",
            "select avg(weight), pettype from pets_weight join pets on pets_weight.petid = pets.petid group by pettype",
            "select pettype, avg(pets_weight.weight) from pets join pets_weight on pets.petid = pets_weight.petid group by pettype",
            "select avg(pets_weight.weight), pettype from pets join pets_weight on pets.petid = pets_weight.petid group by pettype",
            "select pettype, avg(pets_weight.weight) from pets_weight join pets on pets_weight.petid = pets.petid group by pets.pettype"
        ],
        "query1": "select avg(weight), pettype from pets group by pettype",
        "query2": "select avg(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "Find the average weight for each pet type.",
        "question_toks": [
            "Find",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "pet",
            "type",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : fname (\"Derek\", \"William\", \"Lisa\"), major (50, 50, 540), lname (\"Thornton\", \"Brody\", \"Prater\"), sex (\"F\", \"M\"), advisor (8423, 8918, 8722), age (21, 19, 20), city_code (\"SFO\", \"YYZ\", \"DET\"), stuid (1029, 1021, 1009) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : petid (2001, 2002, 2003), pet_age (3, 2, 1), weight (12.0, 13.4, 9.3) | pets_pettype : pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003)",
        "schema_without_content": "student : fname , major , lname , sex , advisor , age , city_code , stuid  | has_pet : petid , stuid  | pets : petid , pet_age , weight  | pets_pettype : pettype , petid ",
        "chatgpt_out": [
            "select pettype, avg(weight) from pets_pettype join pets using (petid) group by pettype",
            "select pettype, avg(pets.weight) from pets_pettype join has_pet on (pets_pettype.petid=has_pet.petid) join pets on (has_pet.petid=pets.petid) group by pettype",
            "select pettype, avg(pets.weight) from pets_pettype join pets on (pets_pettype.petid=pets.petid) join has_pet on (pets.petid=has_pet.petid) group by pettype",
            "select pettype, avg(weight) from pets join pets_pettype using (petid) group by pettype",
            "select pettype, avg(weight) from pets join pets_pettype on pets.petid = pets_pettype.petid group by pettype"
        ],
        "query1": "select avg(weight), pettype from pets group by pettype",
        "query2": "select avg(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "What is the average weight for each type of pet?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "weight"
        },
        "schema_with_content": "student : stuid (1011, 1012, 1009), fname (\"Steven\", \"Stacy\", \"Bruce\"), sex (\"F\", \"M\"), lname (\"Nelson\", \"Pang\", \"Lee\"), advisor (8423, 7792, 5718), major (100, 550, 600), age (19, 18, 27), city_code (\"DAL\", \"HOU\", \"BOS\") | has_pet : stuid (1001, 1002), petid (2001, 2002, 2003) | pets : pet_age (3, 2, 1), pettype (\"cat\", \"dog\"), petid (2001, 2002, 2003) | pets_weight : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3)",
        "schema_without_content": "student : stuid , fname , sex , lname , advisor , major , age , city_code  | has_pet : stuid , petid  | pets : pet_age , pettype , petid  | pets_weight : petid , weight ",
        "chatgpt_out": [
            "select t1.pettype, avg(t2.weight) from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype",
            "select t1.pettype, avg(t2.weight) as avg_weight from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype",
            "select pettype, avg(weight) from pets_weight group by pettype",
            "select pettype, avg(weight) as avg_weight from pets_weight group by pettype",
            "select t1.pettype, avg(t2.weight) from pets_weight as t2 join pets as t1 on t1.petid = t2.petid group by t1.pettype"
        ],
        "query1": "select avg(weight), pettype from pets group by pettype",
        "query2": "select avg(t2.weight), t1.pettype from pets as t1 join pets_weight as t2 on t1.petid = t2.petid group by t1.pettype"
    },
    {
        "db_id": "pets_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "FROM",
            "pets",
            "GROUP",
            "BY",
            "pettype"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "pettype",
            "from",
            "pets",
            "group",
            "by",
            "pettype"
        ],
        "question": "What is the average weight for each type of pet?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "for",
            "each",
            "type",
            "of",
            "pet",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    12,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "pets": "petid"
        },
        "orig_query": "select avg(weight), pettype from pets group by pettype",
        "split_map": {
            "pets": "pettype"
        },
        "schema_with_content": "student : age (21, 22, 17), city_code (\"NAR\", \"ATL\", \"ATL\"), major (50, 600, 600), lname (\"Simms\", \"Gompers\", \"Han\"), fname (\"Tracy\", \"Dinesh\", \"Bruce\"), stuid (1034, 1020, 1018), sex (\"F\", \"M\"), advisor (8772, 8423, 2192) | has_pet : petid (2001, 2002, 2003), stuid (1001, 1002) | pets : petid (2001, 2002, 2003), weight (12.0, 13.4, 9.3), pet_age (3, 2, 1) | pets_pettype : petid (2001, 2002, 2003), pettype (\"cat\", \"dog\")",
        "schema_without_content": "student : age , city_code , major , lname , fname , stuid , sex , advisor  | has_pet : petid , stuid  | pets : petid , weight , pet_age  | pets_pettype : petid , pettype ",
        "chatgpt_out": [
            "select t2.pettype, avg(t1.weight) as avg_weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype",
            "select t2.pettype, avg(pets.weight) as avg_weight from pets_pettype t2 inner join has_pet on t2.petid = has_pet.petid inner join pets on t2.petid = pets.petid group by t2.pettype",
            "select t2.pettype, avg(t1.weight) as avg_weight from pets_pettype as t2 left join pets as t1 on t1.petid = t2.petid group by t2.pettype",
            "select t2.pettype, avg(pets.weight) as avg_weight from pets_pettype t2 inner join has_pet on t2.petid = has_pet.petid inner join pets on t2.petid = pets.petid group by t2.pettype order by t2.pettype",
            "select pettype, avg(weight) as avg_weight from (select t2.pettype, t1.weight from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid) as temp group by pettype"
        ],
        "query1": "select avg(weight), pettype from pets group by pettype",
        "query2": "select avg(t1.weight), t2.pettype from pets as t1 join pets_pettype as t2 on t1.petid = t2.petid group by t2.pettype"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "Maker",
            ",",
            "Model",
            "FROM",
            "MODEL_LIST",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "question": "What are all the makers and models?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "makers",
            "and",
            "models",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "model_list": "modelid"
        },
        "orig_query": "select maker, model from model_list",
        "split_map": {
            "model_list": "maker"
        },
        "schema_with_content": "continents : continent (\"africa\", \"europe\", \"asia\"), contid (4, 5, 1) | countries : countryid (9, 1, 5), countryname (\"russia\", \"uk\", \"sweden\"), continent (2, 3, 3) | car_makers : id (16, 18, 23), maker (\"chrysler\", \"mazda\", \"volkswagen\"), fullname (\"Triumph\", \"Saab\", \"Daimler Benz\"), country (\"3\", \"5\", \"8\") | model_list : modelid (7, 13, 5), model (\"datsun\", \"jeep\", \"capri\") | model_list_maker : maker (3, 10, 6), modelid (35, 25, 11) | car_names : make (\"honda civic 1500 gl\", \"datsun 310 gx\", \"amc rebel sst\"), makeid (214, 222, 299), model (\"citroen\", \"audi\", \"peugeot\") | cars_data : horsepower (\"107\", \"198\", \"80\"), cylinders (3, 6, 8), id (84, 269, 62), edispl (440.0, 440.0, 80.0), weight (2074, 3755, 4294), accelerate (10.5, 12.2, 23.5), mpg (\"23.5\", \"17\", \"29\"), year (1976, 1972, 1975)",
        "schema_without_content": "continents : continent , contid  | countries : countryid , countryname , continent  | car_makers : id , maker , fullname , country  | model_list : modelid , model  | model_list_maker : maker , modelid  | car_names : make , makeid , model  | cars_data : horsepower , cylinders , id , edispl , weight , accelerate , mpg , year ",
        "chatgpt_out": [
            "select maker, model from car_makers, model_list where car_makers.id = model_list.maker",
            "select model, maker from model_list, car_makers where model_list.maker = car_makers.id",
            "select t1.maker, t2.model from car_makers as t1 join model_list as t2 on t1.id = t2.maker",
            "select t2.model, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker",
            "select distinct maker, model from car_makers, model_list where car_makers.id = model_list.maker"
        ],
        "query1": "select maker, model from model_list",
        "query2": "select t2.maker, t1.model from model_list as t1 join model_list_maker as t2 on t1.modelid = t2.modelid"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "Maker",
            ",",
            "Model",
            "FROM",
            "MODEL_LIST",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "question": "What are all the makers and models?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "makers",
            "and",
            "models",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "model_list": "modelid"
        },
        "orig_query": "select maker, model from model_list",
        "split_map": {
            "model_list": "model"
        },
        "schema_with_content": "continents : contid (2, 1, 5), continent (\"asia\", \"africa\", \"america\") | countries : countryname (\"germany\", \"brazil\", \"mexico\"), continent (1, 1, 2), countryid (2, 6, 4) | car_makers : maker (\"toyota\", \"bmw\", \"hyundai\"), id (12, 11, 4), fullname (\"Ford Motor Company\", \"Chrysler\", \"Chrysler\"), country (\"4\", \"5\", \"4\") | model_list : modelid (8, 2, 26), maker (15, 20, 16) | model_list_model : model (\"pontiac\", \"citroen\", \"nissan\"), modelid (27, 6, 9) | car_names : make (\"dodge coronet custom\", \"bmw 320i\", \"volkswagen model 111\"), model (\"ford\", \"mercedes-benz\", \"fiat\"), makeid (249, 92, 292) | cars_data : year (1979, 1976, 1982), accelerate (16.7, 16.0, 11.0), cylinders (4, 5, 5), horsepower (\"72\", \"198\", \"105\"), mpg (\"18.1\", \"23.5\", \"26.6\"), id (291, 89, 267), weight (2434, 2910, 2035), edispl (134.0, 262.0, 110.0)",
        "schema_without_content": "continents : contid , continent  | countries : countryname , continent , countryid  | car_makers : maker , id , fullname , country  | model_list : modelid , maker  | model_list_model : model , modelid  | car_names : make , model , makeid  | cars_data : year , accelerate , cylinders , horsepower , mpg , id , weight , edispl ",
        "chatgpt_out": [
            "select maker, fullname from car_makers",
            "select distinct maker, fullname from car_makers",
            "select distinct maker, model from model_list join car_makers on model_list.maker = car_makers.id",
            "select distinct maker, model from model_list join car_makers on model_list.maker = car_makers.id join model_list_model on model_list.modelid = model_list_model.modelid",
            "select distinct make, model from car_names"
        ],
        "query1": "select maker, model from model_list",
        "query2": "select t1.maker, t2.model from model_list as t1 join model_list_model as t2 on t1.modelid = t2.modelid"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "Maker",
            ",",
            "Model",
            "FROM",
            "MODEL_LIST",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "question": "What are the makers and models?",
        "question_toks": [
            "What",
            "are",
            "the",
            "makers",
            "and",
            "models",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "model_list": "modelid"
        },
        "orig_query": "select maker, model from model_list",
        "split_map": {
            "model_list": "maker"
        },
        "schema_with_content": "continents : continent (\"australia\", \"africa\", \"australia\"), contid (4, 3, 2) | countries : continent (5, 4, 4), countryid (11, 5, 8), countryname (\"egypt\", \"egypt\", \"sweden\") | car_makers : fullname (\"Nissan Motors\", \"Triumph\", \"Renault\"), id (12, 9, 11), maker (\"citroen\", \"amc\", \"nissan\"), country (\"3\", \"4\", \"3\") | model_list : modelid (5, 14, 21), model (\"kia\", \"fiat\", \"hyundai\") | model_list_maker : maker (6, 17, 7), modelid (22, 2, 8) | car_names : make (\"opel 1900\", \"chevrolet malibu\", \"pontiac safari (sw)\"), makeid (83, 96, 156), model (\"oldsmobile\", \"amc\", \"volvo\") | cars_data : cylinders (4, 3, 8), edispl (115.0, 70.0, 81.0), mpg (\"32.3\", \"29.9\", \"32.3\"), horsepower (\"175\", \"58\", \"84\"), weight (2144, 3211, 2950), year (1970, 1977, 1972), id (378, 77, 128), accelerate (16.2, 13.4, 11.3)",
        "schema_without_content": "continents : continent , contid  | countries : continent , countryid , countryname  | car_makers : fullname , id , maker , country  | model_list : modelid , model  | model_list_maker : maker , modelid  | car_names : make \", makeid , model  | cars_data : cylinders , edispl , mpg , horsepower , weight , year , id , accelerate ",
        "chatgpt_out": [
            "select distinct maker, model from car_makers",
            "select maker, model from model_list_maker",
            "select maker, model from car_makers natural join model_list",
            "select maker, model from car_makers natural join model_list_maker",
            "select distinct fullname as maker, model from car_makers"
        ],
        "query1": "select maker, model from model_list",
        "query2": "select t2.maker, t1.model from model_list as t1 join model_list_maker as t2 on t1.modelid = t2.modelid"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "Maker",
            ",",
            "Model",
            "FROM",
            "MODEL_LIST",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "maker",
            ",",
            "model",
            "from",
            "model_list"
        ],
        "question": "What are the makers and models?",
        "question_toks": [
            "What",
            "are",
            "the",
            "makers",
            "and",
            "models",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "model_list": "modelid"
        },
        "orig_query": "select maker, model from model_list",
        "split_map": {
            "model_list": "model"
        },
        "schema_with_content": "continents : contid (4, 4, 5), continent (\"asia\", \"australia\", \"africa\") | countries : continent (1, 5, 2), countryname (\"usa\", \"mexico\", \"australia\"), countryid (2, 3, 7) | car_makers : country (\"7\", \"8\", \"8\"), id (9, 13, 16), maker (\"kia\", \"saab\", \"fiat\"), fullname (\"Citroen\", \"Volkswagen\", \"Fiat\") | model_list : modelid (13, 23, 4), maker (16, 23, 22) | model_list_model : modelid (27, 13, 28), model (\"hyundai\", \"cadillac\", \"volvo\") | car_names : model (\"subaru\", \"pontiac\", \"plymouth\"), makeid (115, 100, 179), make (\"ford futura\", \"plymouth arrow gs\", \"mercury capri v6\") | cars_data : weight (2391, 3282, 4440), horsepower (\"132\", \"58\", \"70\"), edispl (72.0, 390.0, 383.0), year (1974, 1979, 1971), cylinders (5, 8, 4), id (236, 248, 127), accelerate (24.6, 12.2, 15.5), mpg (\"22\", \"32.8\", \"26.5\")",
        "schema_without_content": "continents : contid , continent  | countries : continent , countryname , countryid  | car_makers : country , id , maker , fullname  | model_list : modelid , maker  | model_list_model : modelid , model  | car_names : model , makeid , make  | cars_data : weight , horsepower , edispl , year , cylinders , id , accelerate , mpg ",
        "chatgpt_out": [
            "select maker, model from car_makers as t1 join model_list as t2 on t1.id = t2.maker join model_list_model as t3 on t2.modelid = t3.modelid",
            "select model, maker from model_list_model as t1 join model_list as t2 on t1.modelid = t2.modelid join car_makers as t3 on t2.maker = t3.id",
            "select maker, model from car_makers as t1 join model_list as t2 on t1.id = t2.maker join model_list_model as t3 on t2.modelid = t3.modelid join cars_data as t4 on t3.model = t4.id",
            "select model, maker from model_list_model as t1 join model_list as t2 on t1.modelid = t2.modelid join car_makers as t3 on t2.maker = t3.id join cars_data as t4 on t1.model = t4.id",
            "select maker, model from car_makers as t1 join model_list as t2 on t1.id = t2.maker join model_list_model as t3 on t2.modelid = t3.modelid join car_names as t4 on t3.model = t4.makeid"
        ],
        "query1": "select maker, model from model_list",
        "query2": "select t1.maker, t2.model from model_list as t1 join model_list_model as t2 on t1.modelid = t2.modelid"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Weight",
            ")",
            ",",
            "YEAR",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data",
            "group",
            "by",
            "year"
        ],
        "question": "What is the average weight of cars each year?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "of",
            "cars",
            "each",
            "year",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select avg(weight), year from cars_data group by year",
        "split_map": {
            "cars_data": "weight"
        },
        "schema_with_content": "continents : continent (\"australia\", \"europe\", \"australia\"), contid (3, 5, 2) | countries : countryid (5, 9, 10), countryname (\"japan\", \"mexico\", \"mexico\"), continent (1, 5, 5) | car_makers : fullname (\"Chrysler\", \"Nissan Motors\", \"Kia Motors\"), maker (\"saab\", \"volkswagen\", \"ford\"), id (1, 8, 15), country (\"6\", \"6\", \"7\") | model_list : model (\"volvo\", \"kia\", \"subaru\"), maker (9, 4, 7), modelid (30, 29, 1) | car_names : model (\"amc\", \"toyota\", \"amc\"), make (\"toyota corona\", \"toyota mark ii\", \"pontiac ventura sj\"), makeid (159, 225, 218) | cars_data : mpg (\"26.5\", \"33\", \"19\"), id (367, 380, 123), edispl (171.0, 119.0, 225.0), accelerate (22.1, 14.0, 13.2), year (1982, 1973, 1980), cylinders (4, 6, 4), horsepower (\"153\", \"103\", \"129\") | cars_data_weight : weight (3210, 4382, 2230), id (110, 163, 316)",
        "schema_without_content": "continents : continent , contid  | countries : countryid , countryname , continent  | car_makers : fullname , maker , id , country  | model_list : model , maker , modelid  | car_names : model , make , makeid  | cars_data : mpg , id , edispl , accelerate , year , cylinders , horsepower  | cars_data_weight : weight , id ",
        "chatgpt_out": [
            "select year, avg(weight) from cars_data_weight group by year",
            "select avg(weight), year from cars_data_weight group by year",
            "select year, avg(t2.weight) from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by year",
            "select avg(t2.weight), year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by year",
            "select year, avg(t2.weight) from car_names as t1 join cars_data as t2 on t1.makeid = t2.id join cars_data_weight as t3 on t2.id = t3.id group by year"
        ],
        "query1": "select avg(weight), year from cars_data group by year",
        "query2": "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Weight",
            ")",
            ",",
            "YEAR",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data",
            "group",
            "by",
            "year"
        ],
        "question": "What is the average weight of cars each year?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "of",
            "cars",
            "each",
            "year",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select avg(weight), year from cars_data group by year",
        "split_map": {
            "cars_data": "year"
        },
        "schema_with_content": "continents : contid (3, 4, 4), continent (\"asia\", \"europe\", \"europe\") | countries : continent (4, 5, 4), countryid (6, 6, 11), countryname (\"korea\", \"brazil\", \"italy\") | car_makers : country (\"8\", \"4\", \"3\"), id (18, 3, 4), maker (\"citroen\", \"honda\", \"bmw\"), fullname (\"Opel\", \"Nissan Motors\", \"Fiat\") | model_list : model (\"subaru\", \"opel\", \"mazda\"), modelid (10, 10, 27), maker (19, 8, 3) | car_names : makeid (83, 311, 162), make (\"ford granada ghia\", \"chevrolet caprice classic\", \"amc matador (sw)\"), model (\"saab\", \"bmw\", \" volkswagen\") | cars_data : edispl (97.0, 155.0, 440.0), horsepower (\"95\", \"95\", \"112\"), weight (2720, 2108, 2795), id (142, 32, 132), accelerate (18.1, 17.1, 15.9), cylinders (4, 5, 3), mpg (\"20.5\", \"40.9\", \"32.9\") | cars_data_year : id (148, 371, 109), year (1978, 1982, 1978)",
        "schema_without_content": "continents : contid , continent  | countries : continent , countryid , countryname  | car_makers : country , id , maker , fullname  | model_list : model , modelid , maker  | car_names : makeid , make \", model  | cars_data : edispl , horsepower , weight , id , accelerate , cylinders , mpg  | cars_data_year : id , year ",
        "chatgpt_out": [
            "select year, avg(weight) as avg_weight from cars_data_year as t1 join cars_data as t2 on t1.id = t2.id group by year",
            "select year, avg(t2.weight) as avg_weight from cars_data_year as t1 join cars_data as t2 on t1.id = t2.id group by t1.year",
            "select year, avg(weight) as avg_weight from cars_data where id in (select id from cars_data_year) group by year",
            "select year, avg(cars_data.weight) as avg_weight from cars_data_year join cars_data using (id) group by year",
            "select year, avg(t2.weight) as avg_weight from cars_data_year as t1 join (select id, weight from cars_data) as t2 on t1.id = t2.id group by t1.year"
        ],
        "query1": "select avg(weight), year from cars_data group by year",
        "query2": "select avg(t1.weight), t2.year from cars_data as t1 join cars_data_year as t2 on t1.id = t2.id group by t2.year"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Weight",
            ")",
            ",",
            "YEAR",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data",
            "group",
            "by",
            "year"
        ],
        "question": "What is the average weight and year for each year?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "and",
            "year",
            "for",
            "each",
            "year",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select avg(weight), year from cars_data group by year",
        "split_map": {
            "cars_data": "weight"
        },
        "schema_with_content": "continents : continent (\"asia\", \"africa\", \"australia\"), contid (3, 3, 1) | countries : countryid (4, 3, 13), countryname (\"egypt\", \"japan\", \"uk\"), continent (1, 5, 3) | car_makers : maker (\"kia\", \"gm\", \"gm\"), fullname (\"BMW\", \"Daimler Benz\", \"Honda\"), id (8, 16, 9), country (\"3\", \"7\", \"2\") | model_list : modelid (14, 36, 36), model (\"mazda\", \"mazda\", \"hyundai\"), maker (8, 9, 10) | car_names : model (\"peugeot\", \"fiat\", \"hi\"), make (\"toyota corolla liftback\", \"honda accord cvcc\", \"buick skylark limited\"), makeid (319, 334, 235) | cars_data : edispl (96.0, 383.0, 146.0), horsepower (\"63\", \"165\", \"61\"), accelerate (19.0, 23.5, 20.4), cylinders (4, 3, 8), year (1976, 1976, 1976), id (184, 106, 134), mpg (\"30\", \"27\", \"18.5\") | cars_data_weight : weight (4295, 4951, 4746), id (84, 1, 324)",
        "schema_without_content": "continents : continent , contid  | countries : countryid , countryname , continent  | car_makers : maker , fullname , id , country  | model_list : modelid , model , maker  | car_names : model , make , makeid  | cars_data : edispl , horsepower , accelerate , cylinders , year , id , mpg  | cars_data_weight : weight , id ",
        "chatgpt_out": [
            "select year, avg(weight) as average_weight from cars_data_weight group by year",
            "select avg(weight) as average_weight, year from cars_data_weight group by year",
            "select year, avg(year) as average_year from cars_data group by year",
            "select avg(year) as average_year, year from cars_data group by year",
            "select year, avg(weight) as average_weight, avg(year) as average_year from cars_data_weight join cars_data on cars_data_weight.id = cars_data.id group by year"
        ],
        "query1": "select avg(weight), year from cars_data group by year",
        "query2": "select avg(t2.weight), t1.year from cars_data as t1 join cars_data_weight as t2 on t1.id = t2.id group by t1.year"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "Weight",
            ")",
            ",",
            "YEAR",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "YEAR",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "weight",
            ")",
            ",",
            "year",
            "from",
            "cars_data",
            "group",
            "by",
            "year"
        ],
        "question": "What is the average weight and year for each year?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "weight",
            "and",
            "year",
            "for",
            "each",
            "year",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select avg(weight), year from cars_data group by year",
        "split_map": {
            "cars_data": "year"
        },
        "schema_with_content": "continents : contid (2, 2, 3), continent (\"asia\", \"europe\", \"europe\") | countries : countryid (8, 10, 11), countryname (\"mexico\", \"france\", \"new zealand\"), continent (2, 3, 1) | car_makers : maker (\"bmw\", \"volkswagen\", \"volvo\"), id (3, 12, 6), fullname (\"Opel\", \"Triumph\", \"Volvo\"), country (\"4\", \"8\", \"4\") | model_list : maker (16, 2, 23), modelid (15, 32, 8), model (\"pontiac\", \"fiat\", \"subaru\") | car_names : makeid (171, 169, 191), make (\"amc rebel sst (sw)\", \"ford f250\", \"mercury zephyr\"), model (\"bmw\", \"nissan\", \"dodge\") | cars_data : mpg (\"21.1\", \"34.3\", \"31.5\"), accelerate (15.1, 12.5, 13.4), weight (1915, 2740, 2835), cylinders (6, 4, 6), id (60, 35, 333), horsepower (\"210\", \"65\", \"48\"), edispl (91.0, 88.0, 383.0) | cars_data_year : year (1973, 1971, 1970), id (68, 294, 175)",
        "schema_without_content": "continents : contid , continent  | countries : countryid , countryname , continent  | car_makers : maker , id , fullname , country  | model_list : maker , modelid , model  | car_names : makeid , make \", \"ford f250\", \"mercury zephyr\", model  | cars_data : mpg , accelerate , weight , cylinders , id , horsepower , edispl  | cars_data_year : year , id ",
        "chatgpt_out": [
            "select year, avg(weight) as average_weight from cars_data_year join cars_data on cars_data_year.id = cars_data.id group by year",
            "select year, avg(weight) from cars_data_year join cars_data on cars_data_year.id = cars_data.id group by year",
            "select year, avg(weight) as average_weight from cars_data join cars_data_year on cars_data.id = cars_data_year.id group by year",
            "select year, avg(weight) from cars_data join cars_data_year on cars_data.id = cars_data_year.id group by year",
            "select year, avg(cars_data.weight) as average_weight from cars_data_year join car_names on cars_data_year.id = car_names.makeid join cars_data on cars_data.id = car_names.makeid group by year"
        ],
        "query1": "select avg(weight), year from cars_data group by year",
        "query2": "select avg(t1.weight), t2.year from cars_data as t1 join cars_data_year as t2 on t1.id = t2.id group by t2.year"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Accelerate",
            ")",
            ",",
            "Cylinders",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "Cylinders",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data",
            "group",
            "by",
            "cylinders"
        ],
        "question": "What is the maximum accelerate for different number of cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "accelerate",
            "for",
            "different",
            "number",
            "of",
            "cylinders",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders",
        "split_map": {
            "cars_data": "cylinders"
        },
        "schema_with_content": "continents : contid (1, 4, 2), continent (\"africa\", \"australia\", \"asia\") | countries : continent (3, 2, 3), countryid (14, 15, 4), countryname (\"usa\", \"france\", \"australia\") | car_makers : country (\"8\", \"4\", \"8\"), id (13, 20, 6), fullname (\"General Motors\", \"Triumph\", \"Nissan Motors\"), maker (\"citroen\", \"ford\", \"nissan\") | model_list : maker (22, 2, 1), model (\"pontiac\", \"mercedes-benz\", \"mazda\"), modelid (3, 18, 9) | car_names : make (\"chevrolet vega\", \"dodge d100\", \"toyota carina\"), model (\"fiat\", \"honda\", \"cadillac\"), makeid (366, 338, 286) | cars_data : id (185, 332, 268), mpg (\"27\", \"37\", \"26.4\"), horsepower (\"130\", \"65\", \"225\"), year (1975, 1974, 1974), edispl (105.0, 140.0, 76.0), weight (3250, 4294, 2774), accelerate (18.3, 14.3, 16.5) | cars_data_cylinders : cylinders (8, 4, 6), id (137, 374, 172)",
        "schema_without_content": "continents : contid , continent  | countries : continent , countryid , countryname  | car_makers : country , id , fullname , maker  | model_list : maker , model , modelid  | car_names : make , model , makeid  | cars_data : id , mpg , horsepower , year , edispl , weight , accelerate  | cars_data_cylinders : cylinders , id ",
        "chatgpt_out": [
            "select max(accelerate), cylinders from cars_data_cylinders as t1 join cars_data as t2 on t1.id = t2.id group by cylinders",
            "select cylinders, max(accelerate) from cars_data_cylinders as t1 join cars_data as t2 on t1.id = t2.id group by cylinders",
            "select max(t2.accelerate), t1.cylinders from cars_data_cylinders as t1 join cars_data as t2 on t1.id = t2.id group by t1.cylinders",
            "select t1.cylinders, max(t2.accelerate) from cars_data_cylinders as t1 join cars_data as t2 on t1.id = t2.id group by t1.cylinders",
            "select max(accelerate), cylinders from cars_data group by cylinders"
        ],
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders",
        "query2": "select max(t1.accelerate), t2.cylinders from cars_data as t1 join cars_data_cylinders as t2 on t1.id = t2.id group by t2.cylinders"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Accelerate",
            ")",
            ",",
            "Cylinders",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "Cylinders",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data",
            "group",
            "by",
            "cylinders"
        ],
        "question": "What is the maximum accelerate for different number of cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "accelerate",
            "for",
            "different",
            "number",
            "of",
            "cylinders",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders",
        "split_map": {
            "cars_data": "accelerate"
        },
        "schema_with_content": "continents : contid (2, 5, 5), continent (\"asia\", \"america\", \"australia\") | countries : countryid (10, 11, 15), continent (5, 3, 1), countryname (\"uk\", \"usa\", \"uk\") | car_makers : maker (\"citroen\", \"peugeaut\", \"volkswagen\"), id (5, 19, 18), fullname (\"Nissan Motors\", \"Hyundai\", \"Peugeaut\"), country (\"7\", \"8\", \"4\") | model_list : model (\"capri\", \"nissan\", \"fiat\"), modelid (15, 7, 32), maker (7, 19, 11) | car_names : make (\"honda prelude\", \"mazda rx-4\", \"mazda rx-4\"), makeid (397, 250, 267), model (\"mercedes\", \"honda\", \"triumph\") | cars_data : edispl (70.0, 120.0, 454.0), mpg (\"20.2\", \"37\", \"22\"), horsepower (\"84\", \"68\", \"82\"), id (139, 333, 272), weight (2234, 4220, 3777), cylinders (4, 5, 3), year (1981, 1971, 1970) | cars_data_accelerate : id (361, 268, 368), accelerate (18.0, 16.6, 18.7)",
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : maker , id , fullname , country  | model_list : model , modelid , maker  | car_names : make , makeid , model  | cars_data : edispl , mpg , horsepower , id , weight , cylinders , year  | cars_data_accelerate : id , accelerate ",
        "chatgpt_out": [
            "select cylinders, max(accelerate) from cars_data_accelerate group by cylinders",
            "select cylinders, accelerate from cars_data_accelerate where accelerate in (select max(accelerate) from cars_data_accelerate group by cylinders)",
            "select cars_data.cylinders, max(cars_data_accelerate.accelerate) from cars_data_accelerate join cars_data on cars_data.id = cars_data_accelerate.id group by cars_data.cylinders",
            "select cars_data.cylinders, cars_data_accelerate.accelerate from cars_data_accelerate join cars_data on cars_data.id = cars_data_accelerate.id where cars_data_accelerate.accelerate in (select max(cars_data_accelerate.accelerate) from cars_data_accelerate join cars_data on cars_data.id = cars_data_accelerate.id group by cars_data.cylinders)",
            "select t1.cylinders, t2.accelerate from cars_data as t1 join (select cylinders, max(accelerate) as accelerate from cars_data_accelerate group by cylinders) as t2 on t1.cylinders = t2.cylinders and t1.id = t2.id"
        ],
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders",
        "query2": "select max(t2.accelerate), t1.cylinders from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Accelerate",
            ")",
            ",",
            "Cylinders",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "Cylinders",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data",
            "group",
            "by",
            "cylinders"
        ],
        "question": "What is the maximum accelerate for all the different cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "accelerate",
            "for",
            "all",
            "the",
            "different",
            "cylinders",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders",
        "split_map": {
            "cars_data": "cylinders"
        },
        "schema_with_content": "continents : continent (\"australia\", \"europe\", \"asia\"), contid (2, 2, 1) | countries : continent (1, 3, 5), countryid (10, 4, 14), countryname (\"uk\", \"germany\", \"australia\") | car_makers : maker (\"mazda\", \"kia\", \"opel\"), fullname (\"Opel\", \"Chrysler\", \"Fiat\"), country (\"8\", \"1\", \"1\"), id (9, 19, 3) | model_list : maker (16, 12, 11), model (\"mazda\", \"honda\", \"cadillac\"), modelid (1, 12, 24) | car_names : makeid (234, 184, 121), make (\"volkswagen super beetle\", \"datsun 510 (sw)\", \"audi 5000s (diesel)\"), model (\"datsun\", \"volkswagen\", \"ford\") | cars_data : accelerate (16.7, 16.7, 14.0), mpg (\"21.1\", \"24.3\", \"23.8\"), id (98, 258, 318), edispl (133.0, 146.0, 110.0), weight (4668, 1980, 2045), year (1974, 1982, 1974), horsepower (\"97\", \"102\", \"75\") | cars_data_cylinders : cylinders (4, 4, 8), id (141, 36, 76)",
        "schema_without_content": "continents : continent , contid  | countries : continent , countryid , countryname  | car_makers : maker , fullname , country , id  | model_list : maker , model , modelid  | car_names : makeid , make \", \"audi 5000s \", model  | cars_data : accelerate , mpg , id , edispl , weight , year , horsepower  | cars_data_cylinders : cylinders , id ",
        "chatgpt_out": [
            "select max(accelerate) from cars_data",
            "select max(accelerate) from cars_data_cylinders join cars_data on cars_data_cylinders.id = cars_data.id",
            "select max(cars_data.accelerate) from cars_data_cylinders join cars_data on cars_data_cylinders.id = cars_data.id",
            "select max(cars_data_cylinders.cylinders) from cars_data_cylinders join cars_data on cars_data_cylinders.id = cars_data.id",
            "select max(cars_data.accelerate) from cars_data join cars_data_cylinders on cars_data.id = cars_data_cylinders.id"
        ],
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders",
        "query2": "select max(t1.accelerate), t2.cylinders from cars_data as t1 join cars_data_cylinders as t2 on t1.id = t2.id group by t2.cylinders"
    },
    {
        "db_id": "car_1",
        "query_toks": [
            "SELECT",
            "max",
            "(",
            "Accelerate",
            ")",
            ",",
            "Cylinders",
            "FROM",
            "CARS_DATA",
            "GROUP",
            "BY",
            "Cylinders",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "max",
            "(",
            "accelerate",
            ")",
            ",",
            "cylinders",
            "from",
            "cars_data",
            "group",
            "by",
            "cylinders"
        ],
        "question": "What is the maximum accelerate for all the different cylinders?",
        "question_toks": [
            "What",
            "is",
            "the",
            "maximum",
            "accelerate",
            "for",
            "all",
            "the",
            "different",
            "cylinders",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    18,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                22,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                18,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cars_data": "id"
        },
        "orig_query": "select max(accelerate), cylinders from cars_data group by cylinders",
        "split_map": {
            "cars_data": "accelerate"
        },
        "schema_with_content": "continents : contid (5, 3, 3), continent (\"africa\", \"america\", \"australia\") | countries : countryid (7, 3, 7), continent (4, 2, 2), countryname (\"france\", \"egypt\", \"russia\") | car_makers : id (2, 8, 21), country (\"3\", \"5\", \"3\"), fullname (\"Fiat\", \"Nissan Motors\", \"Opel\"), maker (\"chrysler\", \"mazda\", \"daimler benz\") | model_list : modelid (8, 32, 27), model (\"buick\", \"plymouth\", \"honda\"), maker (21, 13, 3) | car_names : makeid (29, 180, 360), model (\"audi\", \"chrysler\", \"toyota\"), make (\"ford fairmont (man)\", \"audi 4000\", \"buick regal sport coupe (turbo)\") | cars_data : year (1971, 1979, 1979), edispl (171.0, 383.0, 225.0), id (237, 288, 178), mpg (\"44\", \"17.6\", \"28.1\"), cylinders (5, 5, 6), weight (4135, 2635, 2171), horsepower (\"113\", \"193\", \"170\") | cars_data_accelerate : id (21, 366, 200), accelerate (8.5, 17.7, 15.7)",
        "schema_without_content": "continents : contid , continent  | countries : countryid , continent , countryname  | car_makers : id , country , fullname , maker  | model_list : modelid , model , maker  | car_names : makeid , model , make \", \"audi 4000\", \"buick regal sport coupe \" | cars_data : year , edispl , id , mpg , cylinders , weight , horsepower  | cars_data_accelerate : id , accelerate ",
        "chatgpt_out": [
            "select max(t1.accelerate) from cars_data_accelerate as t1 join cars_data as t2 on t1.id = t2.id group by t2.cylinders",
            "select max(accelerate) from cars_data_accelerate as t1 join cars_data as t2 on t1.id = t2.id group by cylinders",
            "select max(t1.accelerate) from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders",
            "select max(accelerate) from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by cylinders",
            "select max(t1.accelerate) from cars_data_accelerate as t1 join cars_data as t2 on t1.id = t2.id join model_list as t3 on t2.id = t3.maker join car_names as t4 on t3.modelid = t4.makeid group by t2.cylinders"
        ],
        "query1": "select max(accelerate), cylinders from cars_data group by cylinders",
        "query2": "select max(t2.accelerate), t1.cylinders from cars_data as t1 join cars_data_accelerate as t2 on t1.id = t2.id group by t1.cylinders"
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "Airline",
            ",",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "``",
            "USA",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "List all airline names and their abbreviations in \"USA\".",
        "question_toks": [
            "List",
            "all",
            "airline",
            "names",
            "and",
            "their",
            "abbreviations",
            "in",
            "``",
            "USA",
            "''",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airlines": "uid"
        },
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"",
        "split_map": {
            "airlines": "abbreviation"
        },
        "schema_with_content": "airlines : uid (10, 1, 9), country (\"USA\"), airline (\"US Airways\", \"Continental Airlines\", \"Virgin America\") | airlines_abbreviation : uid (4, 9, 11), abbreviation (\"UAL\", \"Allegiant\", \"Southwest\") | airports : city (\"Ada \", \"Albert Lea \", \"Alma \"), countryabbrev (\"US \", \"US\"), airportname (\"Tradewind \", \"Ardmore Municipal Arpt \", \"Alpine \"), country (\"United States \"), airportcode (\"AED\", \"RLI\", \"AFO\") | flights : flightno (1420, 279, 909), airline (12, 6, 4), sourceairport (\" AET\", \" ANB\", \" AST\"), destairport (\" AIK\", \" AKI\", \" AXN\")",
        "schema_without_content": "airlines : uid , country , airline  | airlines_abbreviation : uid , abbreviation  | airports : city , countryabbrev , airportname , country , airportcode  | flights : flightno , airline , sourceairport , destairport ",
        "chatgpt_out": [
            "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'",
            "select t2.abbreviation, t1.airline from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'",
            "select airline, abbreviation from airlines_abbreviation where uid in (select uid from airlines where country = 'USA')",
            "select abbreviation, airline from airlines_abbreviation where uid in (select uid from airlines where country = 'USA')",
            "select t1.airline, t2.abbreviation from airlines as t1, airlines_abbreviation as t2 where t1.country = 'USA' and t1.uid = t2.uid"
        ],
        "query1": "select airline, abbreviation from airlines where country = \"USA\"",
        "query2": "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = \"USA\""
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "Airline",
            ",",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "``",
            "USA",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "List all airline names and their abbreviations in \"USA\".",
        "question_toks": [
            "List",
            "all",
            "airline",
            "names",
            "and",
            "their",
            "abbreviations",
            "in",
            "``",
            "USA",
            "''",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airlines": "uid"
        },
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"",
        "split_map": {
            "airlines": "airline"
        },
        "schema_with_content": "airlines : uid (3, 4, 9), country (\"USA\"), abbreviation (\"AirTran\", \"Delta\", \"JetBlue\") | airlines_airline : airline (\"Virgin America\", \"Southwest Airlines\", \"Northwest Airlines\"), uid (4, 3, 5) | airports : airportcode (\"ATS\", \"AEL\", \"ANV\"), airportname (\"Anacortes \", \"Aniak \", \"Akutan \"), countryabbrev (\"US \", \"US\"), country (\"United States \"), city (\"Anvik \", \"Anaheim \", \" Ann Arbor MI  \") | flights : destairport (\" ABQ\", \" AHT\", \" AFO\"), airline (12, 2, 11), sourceairport (\" AST\", \" APN\", \" ACV\"), flightno (839, 567, 1138)",
        "schema_without_content": "airlines : uid , country , abbreviation  | airlines_airline : airline , uid  | airports : airportcode , airportname , countryabbrev , country , city  | flights : destairport , airline , sourceairport , flightno ",
        "chatgpt_out": [
            "select abbreviation, airline from airlines_airline join airlines on airlines.uid = airlines_airline.uid where airlines.country = 'USA'",
            "select airline, abbreviation from airlines_airline join airlines on airlines.uid = airlines_airline.uid where airlines.country = 'USA'",
            "select abbreviation, airline from airlines join airlines_airline on airlines.uid = airlines_airline.uid where airlines.country = 'USA'",
            "select airline, abbreviation from airlines join airlines_airline on airlines.uid = airlines_airline.uid where airlines.country = 'USA'",
            "select abbreviation, t2.airline from airlines as t1 join airlines_airline as t2 on t1.uid = t2.uid where t1.country = 'USA'"
        ],
        "query1": "select airline, abbreviation from airlines where country = \"USA\"",
        "query2": "select t2.airline, t1.abbreviation from airlines as t1 join airlines_airline as t2 on t1.uid = t2.uid where t1.country = \"USA\""
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "Airline",
            ",",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "``",
            "USA",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "question_toks": [
            "What",
            "are",
            "the",
            "airline",
            "names",
            "and",
            "abbreviations",
            "for",
            "airlines",
            "in",
            "the",
            "USA",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airlines": "uid"
        },
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"",
        "split_map": {
            "airlines": "abbreviation"
        },
        "schema_with_content": "airlines : country (\"USA\"), uid (5, 7, 2), airline (\"US Airways\", \"Frontier Airlines\", \"Allegiant Air\") | airlines_abbreviation : uid (5, 5, 5), abbreviation (\"Frontier\", \"USAir\", \"Delta\") | airports : airportname (\"Angoon \", \"Reilly AHP \", \"Annette Island \"), city (\" Aliceville AL  \", \"Ames \", \"Ashley \"), airportcode (\"AMN\", \"ADT\", \"AIV\"), countryabbrev (\"US \", \"US\"), country (\"United States \") | flights : flightno (296, 894, 124), airline (9, 7, 1), sourceairport (\" ADK\", \" ANC\", \" ATO\"), destairport (\" ATE\", \" KKI\", \" DYS\")",
        "schema_without_content": "airlines : country , uid , airline  | airlines_abbreviation : uid , abbreviation  | airports : airportname , city , airportcode , countryabbrev , country  | flights : flightno , airline , sourceairport , destairport ",
        "chatgpt_out": [
            "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'",
            "select t1.uid, t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'",
            "select t2.abbreviation, t1.airline from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = 'USA'",
            "select t1.airline, t2.abbreviation from airlines_abbreviation as t2 join airlines as t1 on t1.uid = t2.uid where t1.country = 'USA'",
            "select t1.airline, t2.abbreviation from airlines as t1, airlines_abbreviation as t2 where t1.uid = t2.uid and t1.country = 'USA'"
        ],
        "query1": "select airline, abbreviation from airlines where country = \"USA\"",
        "query2": "select t1.airline, t2.abbreviation from airlines as t1 join airlines_abbreviation as t2 on t1.uid = t2.uid where t1.country = \"USA\""
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "Airline",
            ",",
            "Abbreviation",
            "FROM",
            "AIRLINES",
            "WHERE",
            "Country",
            "=",
            "``",
            "USA",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "airline",
            ",",
            "abbreviation",
            "from",
            "airlines",
            "where",
            "country",
            "=",
            "value"
        ],
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "question_toks": [
            "What",
            "are",
            "the",
            "airline",
            "names",
            "and",
            "abbreviations",
            "for",
            "airlines",
            "in",
            "the",
            "USA",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airlines": "uid"
        },
        "orig_query": "select airline, abbreviation from airlines where country = \"USA\"",
        "split_map": {
            "airlines": "airline"
        },
        "schema_with_content": "airlines : country (\"USA\"), uid (6, 5, 3), abbreviation (\"Allegiant\", \"AirTran\", \"Delta\") | airlines_airline : airline (\"American Airlines\", \"American Airlines\", \"Frontier Airlines\"), uid (3, 8, 2) | airports : airportname (\"Lee \", \"Anderson \", \"Esler Field \"), city (\"Annette Island \", \"Arapahoe \", \"Akiak \"), countryabbrev (\"US \", \"US\"), country (\"United States \"), airportcode (\"ASE\", \"AEX\", \"KKI\") | flights : destairport (\" ABQ\", \" ANC\", \" ATW\"), sourceairport (\" AMW\", \" AEX\", \" AEL\"), flightno (610, 234, 641), airline (4, 6, 9)",
        "schema_without_content": "airlines : country , uid , abbreviation  | airlines_airline : airline , uid  | airports : airportname , city , countryabbrev , country , airportcode  | flights : destairport , sourceairport , flightno , airline ",
        "chatgpt_out": [
            "select abbreviation, airline from airlines_airline where airline in (select abbreviation from airlines where country = 'USA')",
            "select airline, abbreviation from airlines_airline where airline in (select abbreviation from airlines where country = 'USA')",
            "select abbreviation, airline from airlines join airlines_airline on airlines.uid = airlines_airline.uid where airlines.country = 'USA'",
            "select airline, abbreviation from airlines join airlines_airline on airlines.uid = airlines_airline.uid where airlines.country = 'USA'",
            "select t2.abbreviation, t1.airline from airlines_airline as t1 join airlines as t2 on t1.uid = t2.uid where t2.country = 'USA'"
        ],
        "query1": "select airline, abbreviation from airlines where country = \"USA\"",
        "query2": "select t2.airline, t1.abbreviation from airlines as t1 join airlines_airline as t2 on t1.uid = t2.uid where t1.country = \"USA\""
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "City",
            ",",
            "Country",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportName",
            "=",
            "``",
            "Alton",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports",
            "where",
            "airportname",
            "=",
            "value"
        ],
        "question": "Which city and country is the Alton airport at?",
        "question_toks": [
            "Which",
            "city",
            "and",
            "country",
            "is",
            "the",
            "Alton",
            "airport",
            "at",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"Alton\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airports": "airportcode"
        },
        "orig_query": "select city, country from airports where airportname = \"Alton\"",
        "split_map": {
            "airports": "city"
        },
        "schema_with_content": "airlines : uid (4, 8, 4), abbreviation (\"AirTran\", \"AirTran\", \"Northwest\"), airline (\"JetBlue Airways\", \"Virgin America\", \"Delta Airlines\"), country (\"USA\") | airports : countryabbrev (\"US \", \"US\"), airportname (\"Antlers \", \"Municipal \", \"Ashland \"), country (\"United States \"), airportcode (\"OTS\", \"DYS\", \"ADG\") | airports_city : city (\"Akiak \", \"Alamogordo \", \"Ardmore \"), airportcode (\"EDF\", \"AXX\", \"HMN\") | flights : airline (1, 8, 7), destairport (\" ARX\", \" AXG\", \" ATW\"), flightno (243, 747, 408), sourceairport (\" ANI\", \" AHF\", \" APV\")",
        "schema_without_content": "airlines : uid , abbreviation , airline , country  | airports : countryabbrev , airportname , country , airportcode  | airports_city : city , airportcode  | flights : airline , destairport , flightno , sourceairport ",
        "chatgpt_out": [
            "select city, country from airports_city where airportcode = 'ALN'",
            "select country, city from airports_city where airportcode = 'ALN'",
            "select city, country from airports where airportcode = 'ALN'",
            "select country, city from airports where airportcode = 'ALN'",
            "select t1.city, t2.country from airports_city as t1 join airports as t2 on t1.airportcode = t2.airportcode where t1.airportcode = 'ALN'"
        ],
        "query1": "select city, country from airports where airportname = \"Alton\"",
        "query2": "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\""
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "City",
            ",",
            "Country",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportName",
            "=",
            "``",
            "Alton",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports",
            "where",
            "airportname",
            "=",
            "value"
        ],
        "question": "Which city and country is the Alton airport at?",
        "question_toks": [
            "Which",
            "city",
            "and",
            "country",
            "is",
            "the",
            "Alton",
            "airport",
            "at",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"Alton\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airports": "airportcode"
        },
        "orig_query": "select city, country from airports where airportname = \"Alton\"",
        "split_map": {
            "airports": "country"
        },
        "schema_with_content": "airlines : abbreviation (\"Allegiant\", \"UAL\", \"Continental\"), country (\"USA\"), uid (3, 7, 12), airline (\"Allegiant Air\", \"JetBlue Airways\", \"Allegiant Air\") | airports : countryabbrev (\"US \", \"US\"), airportcode (\"AHT\", \"ALZ\", \"AFO\"), city (\"Akron/Canton OH  \", \"Albert Lea \", \"Aiken \"), airportname (\"Reilly AHP \", \"Allakaket \", \"Municipal \") | airports_country : country (\"United States \"), airportcode (\"AEL\", \"AHF\", \"ABY\") | flights : airline (12, 2, 4), sourceairport (\" AGN\", \" AXB\", \" ESF\"), destairport (\" AED\", \" ACV\", \" RLI\"), flightno (65, 26, 1286)",
        "schema_without_content": "airlines : abbreviation , country , uid , airline  | airports : countryabbrev , airportcode , city , airportname  | airports_country : country , airportcode  | flights : airline , sourceairport , destairport , flightno ",
        "chatgpt_out": [
            "select city, countryabbrev from airports where airportcode = 'ALN'",
            "select countryabbrev, city from airports where airportname = 'Alton '",
            "select t1.city, t2.countryabbrev from airports as t1 join airports_country as t2 on t1.countryabbrev = t2.country where t1.airportcode = 'ALN'",
            "select t2.countryabbrev, t1.city from airports as t1 join airports_country as t2 on t1.countryabbrev = t2.country where t1.airportname = 'Alton '",
            "select t2.city, t2.countryabbrev from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t1.airline in (select uid from airlines where lower(airline) like '%allegiant%') and lower(t2.city) like '%alton%'"
        ],
        "query1": "select city, country from airports where airportname = \"Alton\"",
        "query2": "select t1.city, t2.country from airports as t1 join airports_country as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\""
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "City",
            ",",
            "Country",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportName",
            "=",
            "``",
            "Alton",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports",
            "where",
            "airportname",
            "=",
            "value"
        ],
        "question": "Give the city and country for the Alton airport.",
        "question_toks": [
            "Give",
            "the",
            "city",
            "and",
            "country",
            "for",
            "the",
            "Alton",
            "airport",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"Alton\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airports": "airportcode"
        },
        "orig_query": "select city, country from airports where airportname = \"Alton\"",
        "split_map": {
            "airports": "city"
        },
        "schema_with_content": "airlines : uid (1, 6, 7), country (\"USA\"), abbreviation (\"American\", \"Virgin\", \"AirTran\"), airline (\"Northwest Airlines\", \"Allegiant Air\", \"American Airlines\") | airports : country (\"United States \"), airportcode (\"NDV\", \"AXB\", \"AHT\"), airportname (\"Aleknagik \", \"Alexandria International \", \"Anaktuvuk \"), countryabbrev (\"US \", \"US\") | airports_city : airportcode (\"HMN\", \"AHT\", \"AUK\"), city (\"Albuquerque \", \"Amarillo \", \"Ashland \") | flights : airline (5, 6, 6), flightno (193, 650, 10), destairport (\" ALZ\", \" ANW\", \" AMW\"), sourceairport (\" ARX\", \" AHT\", \" AED\")",
        "schema_without_content": "airlines : uid , country , abbreviation , airline  | airports : country , airportcode , airportname , countryabbrev  | airports_city : airportcode , city  | flights : airline , flightno , destairport , sourceairport ",
        "chatgpt_out": [
            "select t2.airportname as city, t2.country as country from airports as t2 where t2.airportname = 'Alton'",
            "select t3.city, t3.country from airports as t1 join airports_city as t3 on t1.airportcode = t3.airportcode where t1.airportname = 'Alton'",
            "select t2.country, t3.city from airports as t2 join airports_city as t3 on t2.airportcode = t3.airportcode where t2.airportname = 'Alton'",
            "select t3.country, t2.airportname as city from airports_city as t3 join airports as t2 on t3.airportcode = t2.airportcode where t2.airportname = 'Alton'",
            "select t3.country, t2.airportname as city from airports as t2 join airports_city as t3 on t2.airportcode = t3.airportcode where t2.airportname = 'Alton'"
        ],
        "query1": "select city, country from airports where airportname = \"Alton\"",
        "query2": "select t2.city, t1.country from airports as t1 join airports_city as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\""
    },
    {
        "db_id": "flight_2",
        "query_toks": [
            "SELECT",
            "City",
            ",",
            "Country",
            "FROM",
            "AIRPORTS",
            "WHERE",
            "AirportName",
            "=",
            "``",
            "Alton",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "city",
            ",",
            "country",
            "from",
            "airports",
            "where",
            "airportname",
            "=",
            "value"
        ],
        "question": "Give the city and country for the Alton airport.",
        "question_toks": [
            "Give",
            "the",
            "city",
            "and",
            "country",
            "for",
            "the",
            "Alton",
            "airport",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"Alton\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "airports": "airportcode"
        },
        "orig_query": "select city, country from airports where airportname = \"Alton\"",
        "split_map": {
            "airports": "country"
        },
        "schema_with_content": "airlines : airline (\"US Airways\", \"Allegiant Air\", \"Allegiant Air\"), country (\"USA\"), uid (2, 10, 11), abbreviation (\"Delta\", \"UAL\", \"Frontier\") | airports : airportname (\"Alyeska \", \"Alitak SPB \", \"Fulton International \"), city (\"Adrian \", \"Alakanuk \", \"Alice \"), airportcode (\"ANB\", \"ADG\", \"ADT\"), countryabbrev (\"US \", \"US\") | airports_country : country (\"United States \"), airportcode (\"ATW\", \"ALI\", \"JLH\") | flights : airline (7, 1, 7), flightno (1225, 1060, 124), sourceairport (\" WKK\", \" NGZ\", \" AMA\"), destairport (\" TDW\", \" ABI\", \" WKK\")",
        "schema_without_content": "airlines : airline , country , uid , abbreviation  | airports : airportname , city , airportcode , countryabbrev  | airports_country : country , airportcode  | flights : airline , flightno , sourceairport , destairport ",
        "chatgpt_out": [
            "select t1.city, t2.countryabbrev from airports as t1 join airports_country as t2 on t1.airportcode = t2.airportcode where t1.airportname = 'Alton'",
            "select t1.city, t2.country from airports as t1 join airports_country as t2 on trim(t1.countryabbrev) = trim(t2.countryabbrev) where t1.airportname = 'Alton'",
            "select t1.city, t1.countryabbrev from airports as t1 where t1.airportname = 'Alton'",
            "select t1.city, t1.country from airports as t1 where t1.airportname = 'Alton'",
            "select t1.city, t2.uid from airports as t1 join airlines as t2 on t1.airportcode = trim(t2.airline) where t1.airportname = 'Alton'"
        ],
        "query1": "select city, country from airports where airportname = \"Alton\"",
        "query2": "select t1.city, t2.country from airports as t1 join airports_country as t2 on t1.airportcode = t2.airportcode where t1.airportname = \"Alton\""
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "manager_name",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "value"
        ],
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "question_toks": [
            "Find",
            "the",
            "manager",
            "name",
            "and",
            "district",
            "of",
            "the",
            "shop",
            "whose",
            "number",
            "of",
            "products",
            "is",
            "the",
            "largest",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1",
        "split_map": {
            "shop": "manager_name"
        },
        "schema_with_content": "employee : city (\"Leicester\", \"Bristol\", \"Bath\"), employee_id (1, 3, 6), age (30, 36, 28), name (\"Mark Regan\", \"Jason Hobson\", \"Andrew Sheridan\") | shop : name (\"IFK Mariehamn\", \"FF Jaro\", \"FC Honka\"), location (\"Lahti\", \"Valkeakoski\", \"Kotka\"), district (\"Finnair Stadium\", \"Veritas Stadion\", \"Tapiolan Urheilupuisto\"), number_products (4780, 4780, 5000), shop_id (6, 5, 6) | shop_manager_name : shop_id (3, 3, 3), manager_name (\"Pekka Lyyski\", \"Mika Laurikainen\", \"Antti Muurinen\") | hiring : is_full_time (\"T\", \"F\"), shop_id (2, 1, 4), employee_id (2, 7, 3), start_from (\"2010\", \"2010\", \"2013\") | evaluation : employee_id (\"1\", \"10\", \"10\"), year_awarded (\"2011\", \"2011\", \"2015\"), bonus (3200.0, 4000.0, 3000.0)",
        "schema_without_content": "employee : city , employee_id , age , name  | shop : name , location , district , number_products , shop_id  | shop_manager_name : shop_id , manager_name  | hiring : is_full_time , shop_id , employee_id , start_from  | evaluation : employee_id , year_awarded , bonus ",
        "chatgpt_out": [
            "select t3.manager_name, t2.district from shop as t2 join shop_manager_name as t3 on t2.shop_id = t3.shop_id where t2.number_products = (select max(number_products) from shop)",
            "select t3.district, t2.shop_id from shop as t2 join shop_manager_name as t3 on t2.shop_id = t3.shop_id where t2.number_products = (select max(number_products) from shop)",
            "select t3.manager_name, t2.district from shop as t2 join shop_manager_name as t3 on t2.shop_id = t3.shop_id where t2.number_products = any (select max(number_products) from shop)",
            "select t3.district, t2.shop_id from shop as t2 join shop_manager_name as t3 on t2.shop_id = t3.shop_id where t2.number_products = any (select max(number_products) from shop)",
            "select t3.manager_name, t2.district from shop_manager_name as t3 join shop as t2 on t3.shop_id = t2.shop_id where t2.number_products = (select max(number_products) from shop)"
        ],
        "query1": "select manager_name, district from shop order by number_products desc limit 1",
        "query2": "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "manager_name",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "value"
        ],
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "question_toks": [
            "Find",
            "the",
            "manager",
            "name",
            "and",
            "district",
            "of",
            "the",
            "shop",
            "whose",
            "number",
            "of",
            "products",
            "is",
            "the",
            "largest",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1",
        "split_map": {
            "shop": "district"
        },
        "schema_with_content": "employee : name (\"George Chuter\", \"Lee Mears\", \"Steve Borthwick\"), employee_id (10, 1, 6), age (30, 28, 29), city (\"Bristol\", \"Wasps\", \"Wasps\") | shop : shop_id (7, 3, 8), name (\"FC Honka\", \"FC Lahti\", \"FC KooTeePee\"), location (\"Jakobstad\", \"Mariehamn\", \"Kuopio\"), manager_name (\"Kai Nyyss\u00c3\u00b6nen\", \"Job Dragtsma\", \"Kai Nyyss\u00c3\u00b6nen\"), number_products (3516, 15000, 10000) | shop_district : shop_id (7, 8, 7), district (\"Lahden Stadion\", \"Magnum Areena\", \"Finnair Stadium\") | hiring : employee_id (6, 3, 3), is_full_time (\"T\", \"F\"), shop_id (5, 2, 2), start_from (\"2012\", \"2008\", \"2011\") | evaluation : year_awarded (\"2016\", \"2015\", \"2011\"), employee_id (\"7\", \"10\", \"1\"), bonus (3200.0, 2900.0, 3200.0)",
        "schema_without_content": "employee : name , employee_id , age , city  | shop : shop_id , name , location , manager_name , number_products  | shop_district : shop_id , district  | hiring : employee_id , is_full_time , shop_id , start_from  | evaluation : year_awarded , employee_id , bonus ",
        "chatgpt_out": [
            "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(number_products) from shop)",
            "select t2.manager_name, t1.district from shop_district as t1 join shop as t2 on t1.shop_id = t2.shop_id where t2.number_products = (select max(number_products) from shop)",
            "select t1.manager_name, t1.district from shop_district as t1 join shop as t2 on t1.shop_id = t2.shop_id where t2.number_products = (select max(number_products) from shop)",
            "select t2.manager_name, t1.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(number_products) from shop)",
            "select t2.manager_name, t2.district from shop_district as t1 join shop as t2 on t1.shop_id = t2.shop_id where t2.number_products = (select max(number_products) from shop)"
        ],
        "query1": "select manager_name, district from shop order by number_products desc limit 1",
        "query2": "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "manager_name",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "question_toks": [
            "What",
            "are",
            "the",
            "manager",
            "name",
            "and",
            "district",
            "of",
            "the",
            "shop",
            "that",
            "sells",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1",
        "split_map": {
            "shop": "manager_name"
        },
        "schema_with_content": "employee : employee_id (9, 8, 1), city (\"Wasps\", \"Bath\", \"Bristol\"), age (43, 43, 32), name (\"Andrew Sheridan\", \"Mark Regan\", \"Mark Regan\") | shop : number_products (3516, 3500, 3500), location (\"Mariehamn\", \"Lahti\", \"Kuopio\"), name (\"IFK Mariehamn\", \"IFK Mariehamn\", \"KuPS\"), shop_id (1, 7, 5), district (\"Veritas Stadion\", \"Arto Tolsa Areena\", \"Magnum Areena\") | shop_manager_name : manager_name (\"Mika Laurikainen\", \"Ilkka M\u00c3\u00a4kel\u00c3\u00a4\", \"Olli Huttunen\"), shop_id (7, 3, 6) | hiring : start_from (\"2009\", \"2011\", \"2012\"), is_full_time (\"T\", \"F\"), employee_id (6, 6, 5), shop_id (1, 2, 1) | evaluation : employee_id (\"2\", \"4\", \"2\"), year_awarded (\"2011\", \"2016\", \"2011\"), bonus (3200.0, 2900.0, 2900.0)",
        "schema_without_content": "employee : employee_id , city , age , name  | shop : number_products , location , name , shop_id , district  | shop_manager_name : manager_name , shop_id  | hiring : start_from , is_full_time , employee_id , shop_id  | evaluation : employee_id , year_awarded , bonus ",
        "chatgpt_out": [
            "select t2.manager_name, t2d.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id join (select max(number_products) as max_products, shop_id from shop group by shop_id) as t1d on t1.number_products = t1d.max_products and t1.shop_id = t1d.shop_id join (select district, shop_id from shop) as t2d on t1.shop_id = t2d.shop_id",
            "select t2d.district, t2.manager_name from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id join (select max(number_products) as max_products, shop_id from shop group by shop_id) as t1d on t1.number_products = t1d.max_products and t1.shop_id = t1d.shop_id join (select shop_id, district from shop) as t2d on t1.shop_id = t2d.shop_id",
            "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(number_products) from shop)",
            "select t1.district, t2.manager_name from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(number_products) from shop)",
            "select t1.district, t2.manager_name from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(t3.number_products) from shop as t3)"
        ],
        "query1": "select manager_name, district from shop order by number_products desc limit 1",
        "query2": "select t2.manager_name, t1.district from shop as t1 join shop_manager_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "manager_name",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "manager_name",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "question_toks": [
            "What",
            "are",
            "the",
            "manager",
            "name",
            "and",
            "district",
            "of",
            "the",
            "shop",
            "that",
            "sells",
            "the",
            "largest",
            "number",
            "of",
            "products",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select manager_name, district from shop order by number_products desc limit 1",
        "split_map": {
            "shop": "district"
        },
        "schema_with_content": "employee : name (\"Tim Payne\", \"Andrew Sheridan\", \"Louis Deacon\"), age (40, 30, 30), employee_id (10, 6, 3), city (\"Bath\", \"Bristol\", \"Leicester\") | shop : shop_id (9, 9, 4), number_products (10000, 4780, 1600), location (\"Helsinki\", \"Turku\", \"Mariehamn\"), manager_name (\"Pekka Lyyski\", \"Olli Huttunen\", \"Pekka Lyyski\"), name (\"FF Jaro\", \"IFK Mariehamn\", \"FC Lahti\") | shop_district : shop_id (8, 2, 8), district (\"Lahden Stadion\", \"Tehtaan kentt\u00c3\u00a4\", \"Tapiolan Urheilupuisto\") | hiring : employee_id (5, 6, 1), shop_id (1, 6, 5), start_from (\"2013\", \"2003\", \"2010\"), is_full_time (\"T\", \"F\") | evaluation : bonus (4000.0, 2900.0, 3000.0), employee_id (\"7\", \"1\", \"7\"), year_awarded (\"2011\", \"2016\", \"2016\")",
        "schema_without_content": "employee : name , age , employee_id , city  | shop : shop_id , number_products , location , manager_name , name  | shop_district : shop_id , district  | hiring : employee_id , shop_id , start_from , is_full_time  | evaluation : bonus , employee_id , year_awarded ",
        "chatgpt_out": [
            "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(number_products) from shop)",
            "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(number_products) from shop) group by t1.manager_name, t2.district",
            "select t2.manager_name, t3.district from (select max(number_products) as mp from shop) as t1 join shop as t2 on t1.mp = t2.number_products join shop_district as t3 on t2.shop_id = t3.shop_id",
            "select t2.manager_name, t3.district from (select max(number_products) as mp from shop) as t1 join shop_district as t3 join shop as t2 on t1.mp = t2.number_products and t2.shop_id = t3.shop_id",
            "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id where t1.number_products = (select max(number_products) from shop group by shop_id)"
        ],
        "query1": "select manager_name, district from shop order by number_products desc limit 1",
        "query2": "select t1.manager_name, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc limit 1"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "LOCATION",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "question_toks": [
            "Return",
            "the",
            "name",
            ",",
            "location",
            "and",
            "district",
            "of",
            "all",
            "shops",
            "in",
            "descending",
            "order",
            "of",
            "number",
            "of",
            "products",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select name, location, district from shop order by number_products desc",
        "split_map": {
            "shop": "name"
        },
        "schema_with_content": "employee : city (\"Wasps\", \"Sale\", \"Bristol\"), employee_id (2, 6, 10), name (\"Matt Stevens\", \"Matt Stevens\", \"Phil Vickery\"), age (32, 23, 23) | shop : shop_id (7, 4, 1), district (\"Tehtaan kentt\u00c3\u00a4\", \"Wikl\u00c3\u00b6f Holding Arena\", \"Tapiolan Urheilupuisto\"), manager_name (\"Kai Nyyss\u00c3\u00b6nen\", \"Tommi Kautonen\", \"Antti Muurinen\"), location (\"Jakobstad\", \"Helsinki\", \"Lahti\"), number_products (15000, 15000, 6000) | shop_name : shop_id (5, 9, 9), name (\"HJK\", \"HJK\", \"KuPS\") | hiring : employee_id (4, 1, 5), start_from (\"2010\", \"2008\", \"2011\"), is_full_time (\"T\", \"F\"), shop_id (5, 1, 5) | evaluation : bonus (2900.0, 2900.0, 2900.0), year_awarded (\"2018\", \"2018\", \"2015\"), employee_id (\"10\", \"2\", \"4\")",
        "schema_without_content": "employee : city , employee_id , name , age  | shop : shop_id , district , manager_name , location , number_products  | shop_name : shop_id , name  | hiring : employee_id , start_from , is_full_time , shop_id  | evaluation : bonus , year_awarded , employee_id ",
        "chatgpt_out": [
            "select t1.name, t2.location, t2.district from shop_name as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select t1.name, t2.district, t2.location from shop_name as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select t2.location, t1.name, t2.district from shop_name as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select t2.location, t2.district, t1.name from shop_name as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select t2.district, t2.location, t1.name from shop_name as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc"
        ],
        "query1": "select name, location, district from shop order by number_products desc",
        "query2": "select t2.name, t1.location, t1.district from shop as t1 join shop_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "LOCATION",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "question_toks": [
            "Return",
            "the",
            "name",
            ",",
            "location",
            "and",
            "district",
            "of",
            "all",
            "shops",
            "in",
            "descending",
            "order",
            "of",
            "number",
            "of",
            "products",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select name, location, district from shop order by number_products desc",
        "split_map": {
            "shop": "district"
        },
        "schema_with_content": "employee : city (\"Bath\", \"Leicester\", \"Bath\"), age (30, 30, 30), name (\"Tim Payne\", \"Steve Borthwick\", \"Steve Borthwick\"), employee_id (8, 9, 9) | shop : manager_name (\"Ilkka M\u00c3\u00a4kel\u00c3\u00a4\", \"Pekka Lyyski\", \"Pekka Lyyski\"), name (\"FF Jaro\", \"FC KooTeePee\", \"FC Inter\"), location (\"Espoo\", \"Lahti\", \"Kotka\"), number_products (10000, 4780, 10000), shop_id (4, 6, 5) | shop_district : shop_id (4, 6, 5), district (\"Magnum Areena\", \"Magnum Areena\", \"Veritas Stadion\") | hiring : is_full_time (\"T\", \"F\"), shop_id (6, 1, 5), employee_id (5, 2, 1), start_from (\"2003\", \"2011\", \"2009\") | evaluation : year_awarded (\"2017\", \"2018\", \"2016\"), bonus (3200.0, 3000.0, 3000.0), employee_id (\"1\", \"2\", \"4\")",
        "schema_without_content": "employee : city , age , name , employee_id  | shop : manager_name , name , location , number_products , shop_id  | shop_district : shop_id , district  | hiring : is_full_time , shop_id , employee_id , start_from  | evaluation : year_awarded , bonus , employee_id ",
        "chatgpt_out": [
            "select name, location, district from shop join shop_district on shop.shop_id = shop_district.shop_id order by number_products desc",
            "select name, location, district from shop_district join shop on shop.shop_id = shop_district.shop_id order by number_products desc",
            "select s.name, s.location, sd.district from shop as s join shop_district as sd on s.shop_id = sd.shop_id join shop as s2 on s2.shop_id = sd.shop_id group by s.name, sd.district, s.location order by sum(s2.number_products) desc",
            "select s.name, s.location, sd.district from shop_district as sd join shop as s on s.shop_id = sd.shop_id join shop as s2 on s2.shop_id = sd.shop_id group by s.name, sd.district, s.location order by sum(s2.number_products) desc",
            "select name, location, district from shop_district join shop on shop.shop_id = shop_district.shop_id order by (select count(*) from employee where employee.city = shop.location) desc"
        ],
        "query1": "select name, location, district from shop order by number_products desc",
        "query2": "select t1.name, t1.location, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "LOCATION",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "question_toks": [
            "Return",
            "the",
            "name",
            ",",
            "location",
            "and",
            "district",
            "of",
            "all",
            "shops",
            "in",
            "descending",
            "order",
            "of",
            "number",
            "of",
            "products",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select name, location, district from shop order by number_products desc",
        "split_map": {
            "shop": "location"
        },
        "schema_with_content": "employee : city (\"Bristol\", \"Bristol\", \"Leicester\"), age (43, 36, 43), name (\"Tim Payne\", \"George Chuter\", \"Phil Vickery\"), employee_id (10, 1, 6) | shop : shop_id (1, 1, 6), name (\"IFK Mariehamn\", \"FF Jaro\", \"FC KooTeePee\"), number_products (3500, 5000, 3500), district (\"Jakobstads Centralplan\", \"Jakobstads Centralplan\", \"Lahden Stadion\"), manager_name (\"Mika Laurikainen\", \"Mika Laurikainen\", \"Mika Lehkosuo\") | shop_location : shop_id (8, 5, 2), location (\"Valkeakoski\", \"Valkeakoski\", \"Mariehamn\") | hiring : shop_id (5, 4, 5), employee_id (1, 1, 2), is_full_time (\"T\", \"F\"), start_from (\"2008\", \"2008\", \"2013\") | evaluation : bonus (2900.0, 2900.0, 3000.0), employee_id (\"2\", \"2\", \"4\"), year_awarded (\"2015\", \"2017\", \"2015\")",
        "schema_without_content": "employee : city , age , name , employee_id  | shop : shop_id , name , number_products , district , manager_name  | shop_location : shop_id , location  | hiring : shop_id , employee_id , is_full_time , start_from  | evaluation : bonus , employee_id , year_awarded ",
        "chatgpt_out": [
            "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc",
            "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by number_products desc",
            "select name, location, district from shop join shop_location using (shop_id) order by number_products desc",
            "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 using (shop_id) order by t1.number_products desc",
            "select name, location, district from shop join shop_location using (shop_id) where number_products is not null order by number_products desc"
        ],
        "query1": "select name, location, district from shop order by number_products desc",
        "query2": "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "LOCATION",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "question_toks": [
            "Sort",
            "all",
            "the",
            "shops",
            "by",
            "number",
            "products",
            "in",
            "descending",
            "order",
            ",",
            "and",
            "return",
            "the",
            "name",
            ",",
            "location",
            "and",
            "district",
            "of",
            "each",
            "shop",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select name, location, district from shop order by number_products desc",
        "split_map": {
            "shop": "name"
        },
        "schema_with_content": "employee : city (\"Wasps\", \"Bath\", \"Bath\"), name (\"Lee Mears\", \"George Chuter\", \"Steve Borthwick\"), employee_id (10, 7, 7), age (29, 29, 28) | shop : manager_name (\"Mika Lehkosuo\", \"Pekka Lyyski\", \"Tommi Kautonen\"), location (\"Helsinki\", \"Jakobstad\", \"Valkeakoski\"), district (\"Magnum Areena\", \"Tapiolan Urheilupuisto\", \"Finnair Stadium\"), number_products (6000, 15000, 3516), shop_id (1, 1, 3) | shop_name : name (\"FC Inter\", \"FC Honka\", \"FC Honka\"), shop_id (5, 8, 5) | hiring : employee_id (4, 2, 7), shop_id (8, 8, 2), start_from (\"2012\", \"2011\", \"2009\"), is_full_time (\"T\", \"F\") | evaluation : year_awarded (\"2018\", \"2011\", \"2016\"), employee_id (\"10\", \"1\", \"7\"), bonus (2900.0, 3200.0, 3000.0)",
        "schema_without_content": "employee : city , name , employee_id , age  | shop : manager_name , location , district , number_products , shop_id  | shop_name : name , shop_id  | hiring : employee_id , shop_id , start_from , is_full_time  | evaluation : year_awarded , employee_id , bonus ",
        "chatgpt_out": [
            "select name, location, district from shop order by number_products desc",
            "select name, district, location from shop order by number_products desc",
            "select location, name, district from shop order by number_products desc",
            "select location, district, name from shop order by number_products desc",
            "select district, location, name from shop order by number_products desc"
        ],
        "query1": "select name, location, district from shop order by number_products desc",
        "query2": "select t2.name, t1.location, t1.district from shop as t1 join shop_name as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "LOCATION",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "question_toks": [
            "Sort",
            "all",
            "the",
            "shops",
            "by",
            "number",
            "products",
            "in",
            "descending",
            "order",
            ",",
            "and",
            "return",
            "the",
            "name",
            ",",
            "location",
            "and",
            "district",
            "of",
            "each",
            "shop",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select name, location, district from shop order by number_products desc",
        "split_map": {
            "shop": "district"
        },
        "schema_with_content": "employee : name (\"Steve Borthwick\", \"Steve Borthwick\", \"Andrew Sheridan\"), age (30, 30, 29), employee_id (4, 7, 7), city (\"Wasps\", \"Bristol\", \"Leicester\") | shop : shop_id (1, 3, 8), name (\"FC Haka\", \"FF Jaro\", \"FF Jaro\"), number_products (3516, 6000, 5000), manager_name (\"Pekka Lyyski\", \"Olli Huttunen\", \"Tommi Kautonen\"), location (\"Kotka\", \"Valkeakoski\", \"Helsinki\") | shop_district : shop_id (8, 2, 3), district (\"Lahden Stadion\", \"Tehtaan kentt\u00c3\u00a4\", \"Tehtaan kentt\u00c3\u00a4\") | hiring : employee_id (7, 5, 5), is_full_time (\"T\", \"F\"), start_from (\"2003\", \"2010\", \"2011\"), shop_id (5, 4, 4) | evaluation : year_awarded (\"2016\", \"2018\", \"2018\"), employee_id (\"2\", \"2\", \"7\"), bonus (2900.0, 4000.0, 4000.0)",
        "schema_without_content": "employee : name , age , employee_id , city  | shop : shop_id , name , number_products , manager_name , location  | shop_district : shop_id , district  | hiring : employee_id , is_full_time , start_from , shop_id  | evaluation : year_awarded , employee_id , bonus ",
        "chatgpt_out": [
            "select name, location, district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc",
            "select location, district, name from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc",
            "select name, district, location from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc",
            "select district, location, name from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc",
            "select location, name, district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
        ],
        "query1": "select name, location, district from shop order by number_products desc",
        "query2": "select t1.name, t1.location, t2.district from shop as t1 join shop_district as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
    },
    {
        "db_id": "employee_hire_evaluation",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "LOCATION",
            ",",
            "district",
            "FROM",
            "shop",
            "ORDER",
            "BY",
            "number_products",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "location",
            ",",
            "district",
            "from",
            "shop",
            "order",
            "by",
            "number_products",
            "desc"
        ],
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "question_toks": [
            "Sort",
            "all",
            "the",
            "shops",
            "by",
            "number",
            "products",
            "in",
            "descending",
            "order",
            ",",
            "and",
            "return",
            "the",
            "name",
            ",",
            "location",
            "and",
            "district",
            "of",
            "each",
            "shop",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                8,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "shop": "shop_id"
        },
        "orig_query": "select name, location, district from shop order by number_products desc",
        "split_map": {
            "shop": "location"
        },
        "schema_with_content": "employee : employee_id (3, 2, 9), city (\"Leicester\", \"Bath\", \"Wasps\"), age (43, 43, 30), name (\"Phil Vickery\", \"Andrew Sheridan\", \"Matt Stevens\") | shop : name (\"HJK\", \"FC KooTeePee\", \"FC Haka\"), district (\"Veritas Stadion\", \"Lahden Stadion\", \"Veritas Stadion\"), number_products (6000, 1600, 6000), shop_id (6, 3, 7), manager_name (\"Mika Lehkosuo\", \"Mika Laurikainen\", \"Antti Muurinen\") | shop_location : location (\"Kotka\", \"Kotka\", \"Lahti\"), shop_id (1, 2, 6) | hiring : shop_id (5, 1, 2), employee_id (5, 6, 1), is_full_time (\"T\", \"F\"), start_from (\"2010\", \"2010\", \"2008\") | evaluation : year_awarded (\"2015\", \"2016\", \"2011\"), employee_id (\"7\", \"1\", \"7\"), bonus (3000.0, 3200.0, 4000.0)",
        "schema_without_content": "employee : employee_id , city , age , name  | shop : name , district , number_products , shop_id , manager_name  | shop_location : location , shop_id  | hiring : shop_id , employee_id , is_full_time , start_from  | evaluation : year_awarded , employee_id , bonus ",
        "chatgpt_out": [
            "select name, district, location from shop_location as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select name, location, district from shop_location as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select t2.name, t1.district, t1.location from shop_location as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select t2.name, t1.location, t1.district from shop_location as t1 join shop as t2 on t1.shop_id = t2.shop_id order by t2.number_products desc",
            "select name, district, location from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
        ],
        "query1": "select name, location, district from shop order by number_products desc",
        "query2": "select t1.name, t2.location, t1.district from shop as t1 join shop_location as t2 on t1.shop_id = t2.shop_id order by t1.number_products desc"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "question_toks": [
            "List",
            "document",
            "IDs",
            ",",
            "document",
            "names",
            ",",
            "and",
            "document",
            "descriptions",
            "for",
            "all",
            "documents",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, document_name, document_description from documents",
        "split_map": {
            "documents": "document_description"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"PP\", \"PP\"), template_type_description (\"Paper\", \"Presentation\", \"Paper\") | templates : template_type_code (\"CV\", \"BK\", \"PP\"), date_effective_from (\"1993-10-07 02:33:04\", \"2010-09-24 01:15:11\", \"2012-04-05 07:11:42\"), template_details (\"\"), date_effective_to (\"2008-01-05 14:19:28\", \"1992-05-02 20:06:11\", \"1998-05-12 12:51:29\"), version_number (9, 7, 0), template_id (7, 16, 24) | documents : document_id (33930, 3, 0), document_name (\"Robbin CV\", \"About Korea\", \"Do not panic\"), template_id (11, 14, 22), other_details (None) | documents_document_description : document_id (0, 82, 33930), document_description (\"u\", \"z\", \"u\") | paragraphs : other_details (None), document_id (3830, 33930, 16514113), paragraph_text (\"Brazil\", \"Jersey\", \"Brazil\"), paragraph_id (765713812, 608931827, 510442723)",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_type_code , date_effective_from , template_details , date_effective_to , version_number , template_id  | documents : document_id , document_name , template_id , other_details  | documents_document_description : document_id , document_description  | paragraphs : other_details , document_id , paragraph_text , paragraph_id ",
        "chatgpt_out": [
            "select t1.document_id, t1.document_name, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id",
            "select t1.document_id, t2.document_description, t1.document_name from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id",
            "select t1.document_name, t1.document_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id",
            "select t1.document_name, t2.document_description, t1.document_id from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id",
            "select t2.document_description, t1.document_id, t1.document_name from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id"
        ],
        "query1": "select document_id, document_name, document_description from documents",
        "query2": "select t1.document_id, t1.document_name, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "question_toks": [
            "List",
            "document",
            "IDs",
            ",",
            "document",
            "names",
            ",",
            "and",
            "document",
            "descriptions",
            "for",
            "all",
            "documents",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, document_name, document_description from documents",
        "split_map": {
            "documents": "document_name"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"CV\", \"CV\"), template_type_code (\"BK\", \"PP\", \"BK\") | templates : template_id (7, 22, 24), template_type_code (\"AD\", \"PPT\", \"PPT\"), date_effective_from (\"1984-08-07 13:36:26\", \"1999-06-21 11:10:30\", \"1986-12-09 14:51:36\"), date_effective_to (\"1975-07-16 04:52:10\", \"1998-05-12 12:51:29\", \"2015-09-06 01:08:44\"), template_details (\"\"), version_number (0, 7, 0) | documents : template_id (20, 20, 6), document_id (385906526, 3830, 1), other_details (None), document_description (\"h\", \"h\", \"w\") | documents_document_name : document_name (\"Introduction of OS\", \"Introduction of OS\", \"Customer reviews\"), document_id (33930, 1, 2394) | paragraphs : paragraph_id (765713812, 243399026, 241), other_details (None), paragraph_text (\"Japan\", \"Japan\", \"Brazil\"), document_id (80, 16514113, 3540024)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_id , template_type_code , date_effective_from , date_effective_to , template_details , version_number  | documents : template_id , document_id , other_details , document_description  | documents_document_name : document_name , document_id  | paragraphs : paragraph_id , other_details , paragraph_text , document_id ",
        "chatgpt_out": [
            "select t1.document_id, t2.document_name, t2.document_description from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id",
            "select t2.document_description, t2.document_name, t1.document_id from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id",
            "select t1.document_id, t2.document_description, t2.document_name from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id",
            "select t2.document_name, t1.document_id, t2.document_description from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id",
            "select t2.document_name, t2.document_description, t1.document_id from documents_document_name as t2 join documents as t1 on t1.document_id = t2.document_id"
        ],
        "query1": "select document_id, document_name, document_description from documents",
        "query2": "select t1.document_id, t2.document_name, t1.document_description from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "What are the ids, names, and descriptions for all documents?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            ",",
            "names",
            ",",
            "and",
            "descriptions",
            "for",
            "all",
            "documents",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, document_name, document_description from documents",
        "split_map": {
            "documents": "document_description"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"AD\", \"AD\"), template_type_description (\"Advertisement\", \"Advertisement\", \"Paper\") | templates : date_effective_from (\"1984-08-07 13:36:26\", \"1975-05-20 22:51:19\", \"1983-07-16 21:16:16\"), template_id (6, 19, 10), template_type_code (\"AD\", \"CV\", \"AD\"), date_effective_to (\"1976-10-28 10:08:50\", \"1980-05-07 12:15:47\", \"2015-09-06 01:08:44\"), version_number (7, 7, 8), template_details (\"\") | documents : document_id (76, 82, 33930), template_id (11, 1, 4), document_name (\"Do not panic\", \"How to read a book\", \"Welcome to NY\"), other_details (None) | documents_document_description : document_description (\"u\", \"b\", \"b\"), document_id (50123, 2394, 3) | paragraphs : document_id (3540024, 2394, 33930), other_details (None), paragraph_id (3708, 571212310, 946335436), paragraph_text (\"Indonesia\", \"Somalia\", \"Jersey\")",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , template_id , template_type_code , date_effective_to , version_number , template_details  | documents : document_id , template_id , document_name , other_details  | documents_document_description : document_description , document_id  | paragraphs : document_id , other_details , paragraph_id , paragraph_text ",
        "chatgpt_out": [
            "select t1.document_id, t2.document_name, t2.other_details from documents as t1 join templates as t2 on t1.template_id = t2.template_id",
            "select t1.document_id, t2.other_details, t2.document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id",
            "select t1.document_id, t2.document_name, t3.template_type_description from documents as t1 join templates as t2 on t1.template_id = t2.template_id join ref_template_types as t3 on t2.template_type_code = t3.template_type_code",
            "select t1.document_id, t2.document_name, t2.other_details from documents as t1 join templates as t2 on t1.template_id = t2.template_id join documents_document_description as t3 on t1.document_id = t3.document_id",
            "select t1.document_id, t2.other_details, t3.template_type_description from documents as t1 join templates as t2 on t1.template_id = t2.template_id join ref_template_types as t3 on t2.template_type_code = t3.template_type_code"
        ],
        "query1": "select document_id, document_name, document_description from documents",
        "query2": "select t1.document_id, t1.document_name, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "FROM",
            "Documents"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "document_name",
            ",",
            "document_description",
            "from",
            "documents"
        ],
        "question": "What are the ids, names, and descriptions for all documents?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            ",",
            "names",
            ",",
            "and",
            "descriptions",
            "for",
            "all",
            "documents",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, document_name, document_description from documents",
        "split_map": {
            "documents": "document_name"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"Advertisement\", \"CV\"), template_type_code (\"PP\", \"BK\", \"PP\") | templates : version_number (6, 0, 9), template_type_code (\"BK\", \"PPT\", \"BK\"), date_effective_to (\"1994-12-07 13:26:23\", \"1975-07-16 04:52:10\", \"1995-09-19 22:27:48\"), template_id (8, 8, 22), template_details (\"\"), date_effective_from (\"2005-02-20 00:31:34\", \"1975-05-20 22:51:19\", \"1986-11-14 12:20:18\") | documents : document_id (50123, 2394, 16514113), document_description (\"k\", \"z\", \"n\"), template_id (4, 20, 21), other_details (None) | documents_document_name : document_id (0, 3, 2394), document_name (\"Robbin CV\", \"Customer reviews\", \"How Google people work\") | paragraphs : paragraph_id (765713812, 946335436, 65), paragraph_text (\"Indonesia\", \"Korea\", \"Papua New Guinea\"), document_id (3, 385906526, 16514113), other_details (None)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : version_number , template_type_code , date_effective_to , template_id , template_details , date_effective_from  | documents : document_id , document_description , template_id , other_details  | documents_document_name : document_id , document_name  | paragraphs : paragraph_id , paragraph_text , document_id , other_details ",
        "chatgpt_out": [
            "select document_id, document_name, document_description from documents_document_name join documents on documents_document_name.document_id = documents.document_id",
            "select documents.document_id, document_name, document_description from documents_document_name, documents where documents_document_name.document_id = documents.document_id",
            "select document_id, document_description, document_name from documents join documents_document_name on documents.document_id = documents_document_name.document_id",
            "select documents.document_id, document_description, document_name from documents, documents_document_name where documents.document_id = documents_document_name.document_id",
            "select document_id, document_name, document_description from documents join documents_document_name on documents.template_id = documents_document_name.document_id"
        ],
        "query1": "select document_id, document_name, document_description from documents",
        "query2": "select t1.document_id, t2.document_name, t1.document_description from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_name",
            ",",
            "template_id",
            "FROM",
            "Documents",
            "WHERE",
            "Document_Description",
            "LIKE",
            "``",
            "%",
            "w",
            "%",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "value"
        ],
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "name",
            "and",
            "template",
            "id",
            "for",
            "document",
            "with",
            "description",
            "with",
            "the",
            "letter",
            "'w",
            "'",
            "in",
            "it",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"%w%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"",
        "split_map": {
            "documents": "template_id"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"CV\", \"Book\"), template_type_code (\"BK\", \"CV\", \"PPT\") | templates : version_number (9, 4, 4), date_effective_to (\"1976-10-28 10:08:50\", \"1973-01-12 14:13:34\", \"1976-10-28 10:08:50\"), template_details (\"\"), date_effective_from (\"1996-02-04 11:27:24\", \"1983-07-16 21:16:16\", \"2002-03-02 14:39:49\"), template_id (8, 20, 10), template_type_code (\"PP\", \"BK\", \"CV\") | documents : other_details (None), document_name (\"Welcome to NY\", \"How to read a book\", \"Introduction of OS\"), document_description (\"b\", \"k\", \"f\"), document_id (801801, 801801, 651512) | documents_template_id : template_id (25, 1, 11), document_id (3830, 33930, 0) | paragraphs : paragraph_text (\"Korea\", \"Japan\", \"Senegal\"), paragraph_id (9946, 510442723, 946335436), other_details (None), document_id (651512, 80, 33930)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : version_number , date_effective_to , template_details , date_effective_from , template_id , template_type_code  | documents : other_details , document_name , document_description , document_id  | documents_template_id : template_id , document_id  | paragraphs : paragraph_text , paragraph_id , other_details , document_id ",
        "chatgpt_out": [
            "select t1.document_name, t2.template_id from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_description like '%w%'",
            "select t1.document_name, t2.template_id from documents_template_id as t2 join documents as t1 on t2.document_id = t1.document_id where t1.document_description like '%w%'",
            "select t1.document_name, t2.template_id from documents as t1, documents_template_id as t2 where t1.document_id = t2.document_id and t1.document_description like '%w%'",
            "select t2.template_id, t1.document_name from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_description like '%w%'",
            "select t2.template_id, t1.document_name from documents_template_id as t2 join documents as t1 on t2.document_id = t1.document_id where t1.document_description like '%w%'"
        ],
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"",
        "query2": "select t1.document_name, t2.template_id from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_name",
            ",",
            "template_id",
            "FROM",
            "Documents",
            "WHERE",
            "Document_Description",
            "LIKE",
            "``",
            "%",
            "w",
            "%",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "value"
        ],
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "name",
            "and",
            "template",
            "id",
            "for",
            "document",
            "with",
            "description",
            "with",
            "the",
            "letter",
            "'w",
            "'",
            "in",
            "it",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"%w%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"",
        "split_map": {
            "documents": "document_name"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"CV\", \"PP\"), template_type_description (\"CV\", \"Paper\", \"Presentation\") | templates : date_effective_to (\"1973-01-12 14:13:34\", \"1975-07-16 04:52:10\", \"2015-09-06 01:08:44\"), template_type_code (\"PPT\", \"PP\", \"PPT\"), version_number (5, 3, 3), template_id (20, 0, 22), date_effective_from (\"2012-04-05 07:11:42\", \"1986-12-09 14:51:36\", \"2003-06-05 04:03:45\"), template_details (\"\") | documents : other_details (None), template_id (6, 7, 14), document_description (\"r\", \"n\", \"h\"), document_id (80, 16514113, 2394) | documents_document_name : document_name (\"Understanding DB\", \"How to write a CV\", \"Data base\"), document_id (82, 0, 0) | paragraphs : other_details (None), paragraph_id (608931827, 765713812, 765713812), document_id (50123, 385906526, 385906526), paragraph_text (\"Somalia\", \"Papua New Guinea\", \"Indonesia\")",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_to , template_type_code , version_number , template_id , date_effective_from , template_details  | documents : other_details , template_id , document_description , document_id  | documents_document_name : document_name , document_id  | paragraphs : other_details , paragraph_id , document_id , paragraph_text ",
        "chatgpt_out": [
            "select t1.document_name, t1.document_id, t2.template_id from documents_document_name as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'",
            "select t1.document_id, t1.document_name, t2.template_id from documents_document_name as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'",
            "select t2.template_id, t1.document_name, t1.document_id from documents_document_name as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'",
            "select t2.template_id, t1.document_id, t1.document_name from documents_document_name as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'",
            "select t1.document_name, t2.template_id, t1.document_id from documents_document_name as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'"
        ],
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"",
        "query2": "select t2.document_name, t1.template_id from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_name",
            ",",
            "template_id",
            "FROM",
            "Documents",
            "WHERE",
            "Document_Description",
            "LIKE",
            "``",
            "%",
            "w",
            "%",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "value"
        ],
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "and",
            "template",
            "ids",
            "for",
            "documents",
            "that",
            "contain",
            "the",
            "letter",
            "w",
            "in",
            "their",
            "description",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"%w%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"",
        "split_map": {
            "documents": "template_id"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"BK\", \"PPT\"), template_type_description (\"Book\", \"Book\", \"CV\") | templates : date_effective_from (\"1997-04-17 08:29:44\", \"2012-04-05 07:11:42\", \"1986-11-14 12:20:18\"), version_number (8, 5, 2), template_type_code (\"CV\", \"CV\", \"PPT\"), date_effective_to (\"1973-01-12 14:13:34\", \"2001-04-18 09:29:52\", \"2000-10-22 11:57:12\"), template_id (25, 4, 15), template_details (\"\") | documents : other_details (None), document_description (\"h\", \"h\", \"b\"), document_name (\"Palm reading\", \"Summer Show\", \"Palm reading\"), document_id (3, 3, 16514113) | documents_template_id : template_id (21, 10, 6), document_id (76, 1, 2394) | paragraphs : paragraph_id (16615, 9, 765713812), document_id (33930, 33930, 385906526), other_details (None), paragraph_text (\"Korea\", \"Jersey\", \"UK\")",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , version_number , template_type_code , date_effective_to , template_id , template_details  | documents : other_details , document_description , document_name , document_id  | documents_template_id : template_id , document_id  | paragraphs : paragraph_id , document_id , other_details , paragraph_text ",
        "chatgpt_out": [
            "select t1.document_name, t1.template_id from documents_template_id as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'",
            "select t2.document_name, t1.template_id from documents_template_id as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'",
            "select t1.document_name, t1.template_id from documents_template_id as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description regexp 'w'",
            "select t2.document_name, t1.template_id from documents_template_id as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description regexp 'w'",
            "select t1.template_id, t2.document_name from documents_template_id as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_description like '%w%'"
        ],
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"",
        "query2": "select t1.document_name, t2.template_id from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_name",
            ",",
            "template_id",
            "FROM",
            "Documents",
            "WHERE",
            "Document_Description",
            "LIKE",
            "``",
            "%",
            "w",
            "%",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_name",
            ",",
            "template_id",
            "from",
            "documents",
            "where",
            "document_description",
            "like",
            "value"
        ],
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "and",
            "template",
            "ids",
            "for",
            "documents",
            "that",
            "contain",
            "the",
            "letter",
            "w",
            "in",
            "their",
            "description",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    "\"%w%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_name, template_id from documents where document_description like \"%w%\"",
        "split_map": {
            "documents": "document_name"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"Book\", \"CV\"), template_type_code (\"PPT\", \"PPT\", \"CV\") | templates : template_details (\"\"), date_effective_to (\"1989-11-24 19:06:06\", \"1974-09-14 06:34:39\", \"1992-05-02 20:06:11\"), template_type_code (\"AD\", \"PPT\", \"CV\"), date_effective_from (\"1996-02-04 11:27:24\", \"1975-05-20 22:51:19\", \"2003-06-05 04:03:45\"), version_number (5, 2, 3), template_id (25, 19, 8) | documents : document_description (\"u\", \"b\", \"n\"), template_id (11, 10, 7), other_details (None), document_id (3540024, 801801, 82) | documents_document_name : document_name (\"About Korea\", \"A history of Arts\", \"Introduction of OS\"), document_id (3830, 82, 385906526) | paragraphs : document_id (50123, 33930, 3830), paragraph_text (\"Somalia\", \"Papua New Guinea\", \"Papua New Guinea\"), paragraph_id (1104059, 7, 571212310), other_details (None)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , date_effective_to , template_type_code , date_effective_from , version_number , template_id  | documents : document_description , template_id , other_details , document_id  | documents_document_name : document_name , document_id  | paragraphs : document_id , paragraph_text , paragraph_id , other_details ",
        "chatgpt_out": [
            "select t1.document_description, t1.template_id from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t1.document_description like '%w%'",
            "select t1.template_id, t1.document_description from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t1.document_description like '%w%'",
            "select t2.template_id, t1.document_description from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t1.document_description like '%w%'",
            "select t2.template_id, t2.template_details from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t1.document_description like '%w%'",
            "select t1.document_description, t2.template_id from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t1.document_description like '%w%'"
        ],
        "query1": "select document_name, template_id from documents where document_description like \"%w%\"",
        "query2": "select t2.document_name, t1.template_id from documents as t1 join documents_document_name as t2 on t1.document_id = t2.document_id where t1.document_description like \"%w%\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "template_id",
            ",",
            "Document_Description",
            "FROM",
            "Documents",
            "WHERE",
            "document_name",
            "=",
            "``",
            "Robbin",
            "CV",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents",
            "where",
            "document_name",
            "=",
            "value"
        ],
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "id",
            ",",
            "template",
            "id",
            "and",
            "description",
            "for",
            "document",
            "named",
            "``",
            "Robbin",
            "CV",
            "''",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Robbin CV\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "split_map": {
            "documents": "template_id"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"CV\", \"CV\", \"PP\"), template_type_description (\"Advertisement\", \"Presentation\", \"Book\") | templates : date_effective_from (\"1984-08-07 13:36:26\", \"1997-04-17 08:29:44\", \"1983-07-16 21:16:16\"), template_type_code (\"CV\", \"PP\", \"AD\"), version_number (4, 7, 0), date_effective_to (\"2006-02-06 23:52:04\", \"1989-11-24 19:06:06\", \"1975-07-16 04:52:10\"), template_details (\"\"), template_id (10, 20, 20) | documents : document_description (\"w\", \"w\", \"k\"), document_id (82, 385906526, 3540024), other_details (None), document_name (\"Robbin CV\", \"Data base\", \"How to write a CV\") | documents_template_id : template_id (22, 1, 25), document_id (2394, 16514113, 16514113) | paragraphs : other_details (None), paragraph_id (510442723, 241, 510442723), document_id (3540024, 16514113, 3540024), paragraph_text (\"Ireland\", \"Korea\", \"Ukraine\")",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , template_type_code , version_number , date_effective_to , template_details , template_id  | documents : document_description , document_id , other_details , document_name  | documents_template_id : template_id , document_id  | paragraphs : other_details , paragraph_id , document_id , paragraph_text ",
        "chatgpt_out": [
            "select t1.document_id, t2.template_id, t1.document_description from documents as t1 join templates as t2 on t1.document_name = 'Robbin CV' and t1.document_id = t2.document_id",
            "select t2.document_id, t2.template_id, t1.document_description from documents as t1 join templates as t2 on t1.document_name = 'Robbin CV' and t1.document_id = t2.document_id",
            "select t1.document_id, t2.template_id, t1.document_description from templates as t2 join documents as t1 on t1.document_name = 'Robbin CV' and t1.document_id = t2.document_id",
            "select t2.document_id, t2.template_id, t1.document_description from templates as t2 join documents as t1 on t1.document_name = 'Robbin CV' and t1.document_id = t2.document_id",
            "select t3.document_id, t3.template_id, t3.document_description from documents as t1 join documents_template_id as t2 on t1.document_name = 'Robbin CV' and t1.document_id = t2.document_id join templates as t3 on t2.template_id = t3.template_id"
        ],
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query2": "select t1.document_id, t2.template_id, t1.document_description from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "template_id",
            ",",
            "Document_Description",
            "FROM",
            "Documents",
            "WHERE",
            "document_name",
            "=",
            "``",
            "Robbin",
            "CV",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents",
            "where",
            "document_name",
            "=",
            "value"
        ],
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "question_toks": [
            "What",
            "is",
            "the",
            "document",
            "id",
            ",",
            "template",
            "id",
            "and",
            "description",
            "for",
            "document",
            "named",
            "``",
            "Robbin",
            "CV",
            "''",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Robbin CV\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "split_map": {
            "documents": "document_description"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"BK\", \"PP\"), template_type_description (\"Book\", \"Presentation\", \"Presentation\") | templates : date_effective_from (\"1997-04-17 08:29:44\", \"1986-11-14 12:20:18\", \"1997-04-17 08:29:44\"), version_number (7, 9, 7), template_details (\"\"), template_type_code (\"CV\", \"BK\", \"CV\"), template_id (24, 23, 1), date_effective_to (\"1993-03-24 14:30:23\", \"1992-05-02 20:06:11\", \"1979-11-04 08:58:39\") | documents : document_name (\"How Google people work\", \"How to write a CV\", \"How Google people work\"), other_details (None), template_id (4, 25, 1), document_id (50123, 801801, 3) | documents_document_description : document_description (\"f\", \"z\", \"n\"), document_id (801801, 3, 3) | paragraphs : paragraph_id (241, 1104059, 765713812), other_details (None), document_id (33930, 385906526, 651512), paragraph_text (\"Ukraine\", \"Papua New Guinea\", \"Indonesia\")",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , version_number , template_details , template_type_code , template_id , date_effective_to  | documents : document_name , other_details , template_id , document_id  | documents_document_description : document_description , document_id  | paragraphs : paragraph_id , other_details , document_id , paragraph_text ",
        "chatgpt_out": [
            "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id join templates as t3 on t1.template_id = t3.template_id where t3.template_type_code = 'CV' and t1.document_name = 'Robbin CV'",
            "select t1.template_id, t1.document_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id join templates as t3 on t1.template_id = t3.template_id where t3.template_type_code = 'CV' and t1.document_name = 'Robbin CV'",
            "select t1.document_id, t1.template_id, t2.document_description from templates as t1 join documents as t3 on t1.template_id = t3.template_id join documents_document_description as t2 on t3.document_id = t2.document_id where t1.template_type_code = 'CV' and t3.document_name = 'Robbin CV'",
            "select t1.template_id, t1.document_id, t2.document_description from templates as t1 join documents as t3 on t1.template_id = t3.template_id join documents_document_description as t2 on t3.document_id = t2.document_id where t1.template_type_code = 'CV' and t3.document_name = 'Robbin CV'",
            "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join templates as t3 on t1.template_id = t3.template_id join documents_document_description as t2 on t1.document_id = t2.document_id where t3.template_type_code = 'CV' and t1.document_name = 'Robbin CV'"
        ],
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query2": "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "template_id",
            ",",
            "Document_Description",
            "FROM",
            "Documents",
            "WHERE",
            "document_name",
            "=",
            "``",
            "Robbin",
            "CV",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents",
            "where",
            "document_name",
            "=",
            "value"
        ],
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "question_toks": [
            "Return",
            "the",
            "document",
            "id",
            ",",
            "template",
            "id",
            ",",
            "and",
            "description",
            "for",
            "the",
            "document",
            "with",
            "the",
            "name",
            "Robbin",
            "CV",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Robbin CV\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "split_map": {
            "documents": "template_id"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"CV\", \"CV\"), template_type_code (\"CV\", \"CV\", \"CV\") | templates : template_type_code (\"PP\", \"PPT\", \"AD\"), template_id (24, 8, 25), template_details (\"\"), date_effective_from (\"2012-04-05 07:11:42\", \"2010-09-24 01:15:11\", \"1986-11-14 12:20:18\"), version_number (7, 9, 5), date_effective_to (\"2006-02-06 23:52:04\", \"1975-07-16 04:52:10\", \"1973-01-12 14:13:34\") | documents : document_description (\"w\", \"z\", \"k\"), document_id (82, 80, 16514113), document_name (\"A history of Arts\", \"Welcome to NY\", \"Customer reviews\"), other_details (None) | documents_template_id : document_id (651512, 33930, 3), template_id (1, 21, 14) | paragraphs : paragraph_id (9946, 510442723, 243399026), document_id (385906526, 2394, 3540024), paragraph_text (\"Fiji\", \"Senegal\", \"Brazil\"), other_details (None)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_type_code , template_id , template_details , date_effective_from , version_number , date_effective_to  | documents : document_description , document_id , document_name , other_details  | documents_template_id : document_id , template_id  | paragraphs : paragraph_id , document_id , paragraph_text , other_details ",
        "chatgpt_out": [
            "select t1.document_id, t2.template_id, t2.template_details from documents as t1 join templates as t2 on t1.document_description = t2.template_type_code where t1.document_name = 'Robbin CV'",
            "select t1.document_id, t3.template_id, t3.template_details from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id join templates as t3 on t2.template_id = t3.template_id where t1.document_name = 'Robbin CV'",
            "select t1.document_id, t2.template_id, t2.template_details from documents as t1 join templates as t2 on t1.document_description = t2.template_type_code join documents_template_id as t3 on t1.document_id = t3.document_id where t1.document_name = 'Robbin CV'",
            "select t1.document_id, t3.template_id, t3.template_details from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id join templates as t3 on t3.template_id = t2.template_id where t1.document_name = 'Robbin CV'",
            "select t1.document_id, t3.template_id, t3.template_details from documents_template_id as t1 join templates as t3 on t3.template_id = t1.template_id join documents as t2 on t2.document_id = t1.document_id where t2.document_name = 'Robbin CV'"
        ],
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query2": "select t1.document_id, t2.template_id, t1.document_description from documents as t1 join documents_template_id as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "document_id",
            ",",
            "template_id",
            ",",
            "Document_Description",
            "FROM",
            "Documents",
            "WHERE",
            "document_name",
            "=",
            "``",
            "Robbin",
            "CV",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "document_id",
            ",",
            "template_id",
            ",",
            "document_description",
            "from",
            "documents",
            "where",
            "document_name",
            "=",
            "value"
        ],
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "question_toks": [
            "Return",
            "the",
            "document",
            "id",
            ",",
            "template",
            "id",
            ",",
            "and",
            "description",
            "for",
            "the",
            "document",
            "with",
            "the",
            "name",
            "Robbin",
            "CV",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            11,
                            false
                        ],
                        null
                    ],
                    "\"Robbin CV\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "documents": "document_id"
        },
        "orig_query": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "split_map": {
            "documents": "document_description"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Paper\", \"Presentation\", \"Book\"), template_type_code (\"PP\", \"PPT\", \"PP\") | templates : date_effective_to (\"2000-10-22 11:57:12\", \"1999-07-08 03:31:04\", \"1980-05-07 12:15:47\"), template_type_code (\"AD\", \"BK\", \"CV\"), template_details (\"\"), template_id (14, 7, 21), date_effective_from (\"1993-10-07 02:33:04\", \"2008-08-01 13:57:26\", \"1979-12-24 10:28:16\"), version_number (4, 7, 8) | documents : other_details (None), document_id (3830, 80, 2394), document_name (\"Learning French\", \"Understanding DB\", \"Learning French\"), template_id (22, 14, 8) | documents_document_description : document_description (\"u\", \"k\", \"r\"), document_id (2394, 651512, 2394) | paragraphs : other_details (None), paragraph_text (\"Papua New Guinea\", \"Somalia\", \"Palestinian Territory\"), paragraph_id (7, 3708, 243399026), document_id (80, 50123, 80)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_to , template_type_code , template_details , template_id , date_effective_from , version_number  | documents : other_details , document_id , document_name , template_id  | documents_document_description : document_description , document_id  | paragraphs : other_details , paragraph_text , paragraph_id , document_id ",
        "chatgpt_out": [
            "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id join templates as t3 on t1.template_id = t3.template_id where t3.template_type_code = 'CV' and t1.document_name = 'Robbin CV'",
            "select t1.document_id, t1.template_id, t2.document_description from documents_document_description as t2 join documents as t1 on t2.document_id = t1.document_id join templates as t3 on t1.template_id = t3.template_id where t3.template_type_code = 'CV' and t1.document_name = 'Robbin CV'",
            "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id join templates as t3 on t1.template_id = t3.template_id where t1.document_name = 'Robbin CV' and t3.template_type_code = 'CV'",
            "select t1.document_id, t1.template_id, t2.document_description from documents_document_description as t2 join documents as t1 on t2.document_id = t1.document_id join templates as t3 on t1.template_id = t3.template_id where t1.document_name = 'Robbin CV' and t3.template_type_code = 'CV'",
            "select t1.document_id, t1.template_id, t2.document_description from templates as t1 join documents as t2 on t1.template_id = t2.template_id join documents_document_description as t3 on t2.document_id = t3.document_id where t1.template_type_code = 'CV' and t2.document_name = 'Robbin CV'"
        ],
        "query1": "select document_id, template_id, document_description from documents where document_name = \"Robbin CV\"",
        "query2": "select t1.document_id, t1.template_id, t2.document_description from documents as t1 join documents_document_description as t2 on t1.document_id = t2.document_id where t1.document_name = \"Robbin CV\""
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "question_toks": [
            "Show",
            "template",
            "ids",
            ",",
            "version",
            "numbers",
            ",",
            "and",
            "template",
            "type",
            "codes",
            "for",
            "all",
            "templates",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select template_id, version_number, template_type_code from templates",
        "split_map": {
            "templates": "version_number"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"CV\", \"CV\", \"PPT\"), template_type_description (\"Paper\", \"Book\", \"Paper\") | templates : template_type_code (\"BK\", \"PPT\", \"CV\"), template_details (\"\"), template_id (7, 10, 11), date_effective_to (\"2008-01-05 14:19:28\", \"1973-01-12 14:13:34\", \"2001-04-18 09:29:52\"), date_effective_from (\"1997-04-17 08:29:44\", \"2010-09-24 01:15:11\", \"2002-08-25 13:26:23\") | templates_version_number : template_id (1, 25, 15), version_number (7, 4, 2) | documents : document_description (\"b\", \"y\", \"u\"), document_id (385906526, 0, 3), other_details (None), template_id (14, 11, 6), document_name (\"A history of Arts\", \"Do not panic\", \"How to write a CV\") | paragraphs : other_details (None), paragraph_id (765713812, 3708, 1104059), paragraph_text (\"Korea\", \"Korea\", \"Jersey\"), document_id (80, 651512, 33930)",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_type_code , template_details , template_id , date_effective_to , date_effective_from  | templates_version_number : template_id , version_number  | documents : document_description , document_id , other_details , template_id , document_name  | paragraphs : other_details , paragraph_id , paragraph_text , document_id ",
        "chatgpt_out": [
            "select template_id, version_number, template_type_code from templates join templates_version_number on templates.template_id = templates_version_number.template_id join ref_template_types on ref_template_types.template_type_code = templates.template_type_code",
            "select templates.template_id, templates_version_number.version_number, templates.template_type_code from templates join templates_version_number on templates.template_id = templates_version_number.template_id join ref_template_types on ref_template_types.template_type_code = templates.template_type_code",
            "select template_id, version_number, template_type_code from templates join templates_version_number using(template_id) join ref_template_types using(template_type_code)",
            "select templates.template_id, templates_version_number.version_number, templates.template_type_code from templates join templates_version_number using(template_id) join ref_template_types using(template_type_code)",
            "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1, templates_version_number as t2, ref_template_types as t3 where t1.template_id = t2.template_id and t1.template_type_code = t3.template_type_code"
        ],
        "query1": "select template_id, version_number, template_type_code from templates",
        "query2": "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "question_toks": [
            "Show",
            "template",
            "ids",
            ",",
            "version",
            "numbers",
            ",",
            "and",
            "template",
            "type",
            "codes",
            "for",
            "all",
            "templates",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select template_id, version_number, template_type_code from templates",
        "split_map": {
            "templates": "template_type_code"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"PPT\", \"AD\"), template_type_description (\"Book\", \"Advertisement\", \"Book\") | templates : date_effective_from (\"1975-05-20 22:51:19\", \"1975-05-20 22:51:19\", \"1986-12-09 14:51:36\"), date_effective_to (\"1989-11-24 19:06:06\", \"2006-02-06 23:52:04\", \"1994-12-07 13:26:23\"), template_id (6, 14, 15), version_number (5, 1, 5), template_details (\"\") | templates_template_type_code : template_type_code (\"PPT\", \"PP\", \"PP\"), template_id (18, 18, 9) | documents : document_id (2394, 50123, 80), other_details (None), template_id (14, 25, 11), document_description (\"h\", \"f\", \"n\"), document_name (\"Learning French\", \"Palm reading\", \"Data base\") | paragraphs : other_details (None), document_id (50123, 385906526, 80), paragraph_id (16615, 9946, 280120913), paragraph_text (\"Ukraine\", \"Papua New Guinea\", \"Papua New Guinea\")",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : date_effective_from , date_effective_to , template_id , version_number , template_details  | templates_template_type_code : template_type_code , template_id  | documents : document_id , other_details , template_id , document_description , document_name  | paragraphs : other_details , document_id , paragraph_id , paragraph_text ",
        "chatgpt_out": [
            "select template_id, version_number, template_type_code from templates_template_type_code",
            "select template_id, template_type_code, version_number from templates join templates_template_type_code on templates.template_id = templates_template_type_code.template_id",
            "select template_id, version_number, template_type_code from templates_template_type_code group by template_id, version_number, template_type_code",
            "select template_id, template_type_code, version_number from templates_template_type_code group by template_id, template_type_code, version_number",
            "select templates.template_id, templates.version_number, templates_template_type_code.template_type_code from templates join templates_template_type_code on templates.template_id = templates_template_type_code.template_id"
        ],
        "query1": "select template_id, version_number, template_type_code from templates",
        "query2": "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "What are the ids, version numbers, and type codes for each template?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            ",",
            "version",
            "numbers",
            ",",
            "and",
            "type",
            "codes",
            "for",
            "each",
            "template",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select template_id, version_number, template_type_code from templates",
        "split_map": {
            "templates": "version_number"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Book\", \"Book\", \"Book\"), template_type_code (\"CV\", \"CV\", \"AD\") | templates : template_details (\"\"), template_type_code (\"PPT\", \"PP\", \"PPT\"), date_effective_from (\"1975-05-20 22:51:19\", \"1986-12-09 14:51:36\", \"1993-10-07 02:33:04\"), template_id (25, 1, 20), date_effective_to (\"1980-05-07 12:15:47\", \"1974-09-14 06:34:39\", \"1994-12-07 13:26:23\") | templates_version_number : template_id (7, 21, 23), version_number (1, 3, 5) | documents : other_details (None), document_id (801801, 3830, 50123), document_description (\"y\", \"r\", \"b\"), document_name (\"How to write a CV\", \"Palm reading\", \"A history of Arts\"), template_id (4, 22, 8) | paragraphs : other_details (None), paragraph_text (\"UK\", \"UK\", \"Micronesia\"), paragraph_id (7, 946335436, 9946), document_id (50123, 385906526, 3830)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , template_type_code , date_effective_from , template_id , date_effective_to  | templates_version_number : template_id , version_number  | documents : other_details , document_id , document_description , document_name , template_id  | paragraphs : other_details , paragraph_text , paragraph_id , document_id ",
        "chatgpt_out": [
            "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id",
            "select t1.template_id, t1.template_type_code, t2.version_number from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id",
            "select t2.version_number, t1.template_type_code, t1.template_id from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id",
            "select t2.version_number, t1.template_id, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id",
            "select t1.template_type_code, t1.template_id, t2.version_number from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
        ],
        "query1": "select template_id, version_number, template_type_code from templates",
        "query2": "select t1.template_id, t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "template_id",
            ",",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "What are the ids, version numbers, and type codes for each template?",
        "question_toks": [
            "What",
            "are",
            "the",
            "ids",
            ",",
            "version",
            "numbers",
            ",",
            "and",
            "type",
            "codes",
            "for",
            "each",
            "template",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select template_id, version_number, template_type_code from templates",
        "split_map": {
            "templates": "template_type_code"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Paper\", \"Paper\"), template_type_code (\"BK\", \"CV\", \"BK\") | templates : template_details (\"\"), date_effective_from (\"2005-02-20 00:31:34\", \"1996-02-04 11:27:24\", \"1986-11-14 12:20:18\"), date_effective_to (\"2007-06-06 06:18:53\", \"2006-02-06 23:52:04\", \"1994-12-07 13:26:23\"), template_id (9, 6, 1), version_number (3, 1, 5) | templates_template_type_code : template_type_code (\"BK\", \"AD\", \"CV\"), template_id (6, 20, 18) | documents : document_name (\"Do not panic\", \"Robbin CV\", \"Palm reading\"), document_description (\"r\", \"k\", \"z\"), template_id (4, 21, 1), document_id (1, 3540024, 3830), other_details (None) | paragraphs : paragraph_id (510442723, 65, 3708), document_id (50123, 16514113, 80), other_details (None), paragraph_text (\"Fiji\", \"Ukraine\", \"Jersey\")",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : template_details , date_effective_from , date_effective_to , template_id , version_number  | templates_template_type_code : template_type_code , template_id  | documents : document_name , document_description , template_id , document_id , other_details  | paragraphs : paragraph_id , document_id , other_details , paragraph_text ",
        "chatgpt_out": [
            "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code",
            "select t1.template_id, t2.template_type_code, t1.version_number from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code",
            "select t2.template_type_code, t1.template_id, t1.version_number from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code",
            "select t2.template_type_code, t1.version_number, t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code",
            "select t1.version_number, t1.template_id, t2.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code"
        ],
        "query1": "select template_id, version_number, template_type_code from templates",
        "query2": "select t1.template_id, t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates",
            "WHERE",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "question_toks": [
            "What",
            "is",
            "the",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "for",
            "the",
            "template",
            "with",
            "version",
            "number",
            "later",
            "than",
            "5",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select version_number, template_type_code from templates where version_number > 5",
        "split_map": {
            "templates": "version_number"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"PP\", \"PPT\", \"AD\"), template_type_description (\"Book\", \"Paper\", \"CV\") | templates : template_details (\"\"), template_type_code (\"AD\", \"CV\", \"CV\"), template_id (0, 15, 4), date_effective_to (\"2008-01-05 14:19:28\", \"2000-10-22 11:57:12\", \"2000-10-22 11:57:12\"), date_effective_from (\"2008-08-01 13:57:26\", \"1983-07-16 21:16:16\", \"1986-12-09 14:51:36\") | templates_version_number : version_number (8, 7, 3), template_id (15, 23, 18) | documents : template_id (8, 1, 25), other_details (None), document_description (\"w\", \"k\", \"y\"), document_name (\"How to read a book\", \"A history of Arts\", \"Understanding DB\"), document_id (80, 2394, 3) | paragraphs : other_details (None), paragraph_id (946335436, 9946, 3708), paragraph_text (\"Papua New Guinea\", \"Jersey\", \"Palestinian Territory\"), document_id (80, 385906526, 80)",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_details , template_type_code , template_id , date_effective_to , date_effective_from  | templates_version_number : version_number , template_id  | documents : template_id , other_details , document_description , document_name , document_id  | paragraphs : other_details , paragraph_id , paragraph_text , document_id ",
        "chatgpt_out": [
            "select t1.version_number, t1.template_type_code from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id where t1.version_number > 5",
            "select t1.template_type_code, t1.version_number from templates as t2 join templates_version_number as t1 on t1.template_id = t2.template_id where t1.version_number > 5",
            "select t1.version_number, t2.template_type_code from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id where t1.version_number > 5",
            "select t2.template_type_code, t1.version_number from templates as t2 join templates_version_number as t1 on t1.template_id = t2.template_id where t1.version_number > 5",
            "select t2.template_type_code, t1.version_number from templates as t2 join (select * from templates_version_number where version_number > 5) as t1 on t1.template_id = t2.template_id"
        ],
        "query1": "select version_number, template_type_code from templates where version_number > 5",
        "query2": "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates",
            "WHERE",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "question_toks": [
            "What",
            "is",
            "the",
            "version",
            "number",
            "and",
            "template",
            "type",
            "code",
            "for",
            "the",
            "template",
            "with",
            "version",
            "number",
            "later",
            "than",
            "5",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select version_number, template_type_code from templates where version_number > 5",
        "split_map": {
            "templates": "template_type_code"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Presentation\", \"Book\", \"Paper\"), template_type_code (\"BK\", \"PPT\", \"BK\") | templates : date_effective_to (\"2001-04-18 09:29:52\", \"1979-11-04 08:58:39\", \"1995-09-19 22:27:48\"), version_number (5, 7, 5), date_effective_from (\"1997-04-17 08:29:44\", \"1979-10-20 21:23:20\", \"2003-06-05 04:03:45\"), template_id (19, 11, 7), template_details (\"\") | templates_template_type_code : template_type_code (\"CV\", \"PPT\", \"CV\"), template_id (11, 14, 19) | documents : other_details (None), document_id (0, 3540024, 33930), document_name (\"About Korea\", \"How to read a book\", \"Learning French\"), document_description (\"z\", \"h\", \"y\"), template_id (4, 7, 10) | paragraphs : document_id (80, 16514113, 2394), paragraph_id (765713812, 3708, 241), other_details (None), paragraph_text (\"Korea\", \"Ireland\", \"Fiji\")",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_to , version_number , date_effective_from , template_id , template_details  | templates_template_type_code : template_type_code , template_id  | documents : other_details , document_id , document_name , document_description , template_id  | paragraphs : document_id , paragraph_id , other_details , paragraph_text ",
        "chatgpt_out": [
            "select t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5",
            "select t1.version_number, t1t2.template_type_code from templates as t1 join (select * from templates_template_type_code) as t1t2 on t1.template_id = t1t2.template_id where t1.version_number > 5",
            "select t1t2.version_number, t1t2.template_type_code from (select * from templates where version_number > 5) as t1 join templates_template_type_code as t1t2 on t1.template_id = t1t2.template_id",
            "select t1t2.version_number, t1t2.template_type_code from (select * from templates where version_number > 5) as t1, templates_template_type_code as t1t2 where t1.template_id = t1t2.template_id",
            "select t2.template_type_code, t1.version_number from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5"
        ],
        "query1": "select version_number, template_type_code from templates where version_number > 5",
        "query2": "select t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates",
            "WHERE",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "question_toks": [
            "Return",
            "the",
            "version",
            "numbers",
            "and",
            "template",
            "type",
            "codes",
            "of",
            "templates",
            "with",
            "a",
            "version",
            "number",
            "greater",
            "than",
            "5",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select version_number, template_type_code from templates where version_number > 5",
        "split_map": {
            "templates": "version_number"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Advertisement\", \"Presentation\", \"Advertisement\"), template_type_code (\"PPT\", \"BK\", \"CV\") | templates : date_effective_from (\"1986-12-09 14:51:36\", \"1986-11-14 12:20:18\", \"1975-10-20 02:28:58\"), date_effective_to (\"1973-01-12 14:13:34\", \"1976-10-28 10:08:50\", \"1974-09-14 06:34:39\"), template_type_code (\"PP\", \"CV\", \"AD\"), template_id (21, 4, 1), template_details (\"\") | templates_version_number : template_id (14, 23, 4), version_number (4, 5, 5) | documents : other_details (None), template_id (14, 4, 21), document_name (\"Robbin CV\", \"Data base\", \"Understanding DB\"), document_description (\"y\", \"y\", \"u\"), document_id (33930, 2394, 1) | paragraphs : document_id (16514113, 3, 385906526), paragraph_id (7, 280120913, 946335436), paragraph_text (\"Somalia\", \"Jersey\", \"Papua New Guinea\"), other_details (None)",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_from , date_effective_to , template_type_code , template_id , template_details  | templates_version_number : template_id , version_number  | documents : other_details , template_id , document_name , document_description , document_id  | paragraphs : document_id , paragraph_id , paragraph_text , other_details ",
        "chatgpt_out": [
            "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5",
            "select t2.version_number, t1.template_type_code from templates_version_number as t2 join templates as t1 on t2.template_id = t1.template_id where t2.version_number > 5",
            "select t1.template_type_code, t2.version_number from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5",
            "select t1.template_type_code, t2.version_number from templates_version_number as t2 join templates as t1 on t2.template_id = t1.template_id where t2.version_number > 5",
            "select t1.template_id, t1.template_type_code, t2.version_number from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5"
        ],
        "query1": "select version_number, template_type_code from templates where version_number > 5",
        "query2": "select t2.version_number, t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id where t2.version_number > 5"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "version_number",
            ",",
            "template_type_code",
            "FROM",
            "Templates",
            "WHERE",
            "version_number",
            ">",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "version_number",
            ",",
            "template_type_code",
            "from",
            "templates",
            "where",
            "version_number",
            ">",
            "value"
        ],
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "question_toks": [
            "Return",
            "the",
            "version",
            "numbers",
            "and",
            "template",
            "type",
            "codes",
            "of",
            "templates",
            "with",
            "a",
            "version",
            "number",
            "greater",
            "than",
            "5",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    5.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select version_number, template_type_code from templates where version_number > 5",
        "split_map": {
            "templates": "template_type_code"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"CV\", \"Advertisement\", \"CV\"), template_type_code (\"PP\", \"PPT\", \"CV\") | templates : date_effective_to (\"1975-07-16 04:52:10\", \"1989-11-24 19:06:06\", \"1974-09-14 06:34:39\"), template_details (\"\"), template_id (25, 18, 4), version_number (5, 9, 8), date_effective_from (\"1983-07-16 21:16:16\", \"1979-12-24 10:28:16\", \"2002-08-25 13:26:23\") | templates_template_type_code : template_type_code (\"PPT\", \"PPT\", \"AD\"), template_id (23, 6, 25) | documents : document_description (\"z\", \"b\", \"n\"), document_name (\"Palm reading\", \"Robbin CV\", \"How to read a book\"), template_id (1, 8, 8), other_details (None), document_id (651512, 2394, 1) | paragraphs : paragraph_id (9946, 3708, 608931827), other_details (None), document_id (3830, 3540024, 385906526), paragraph_text (\"Jersey\", \"Brazil\", \"Ireland\")",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_to , template_details , template_id , version_number , date_effective_from  | templates_template_type_code : template_type_code , template_id  | documents : document_description , document_name , template_id , other_details , document_id  | paragraphs : paragraph_id , other_details , document_id , paragraph_text ",
        "chatgpt_out": [
            "select template_type_code, version_number from templates join templates_template_type_code on templates.template_id = templates_template_type_code.template_id where version_number > 5",
            "select version_number, template_type_code from templates join templates_template_type_code on templates.template_id = templates_template_type_code.template_id where version_number > 5",
            "select version_number, template_type_code from templates_template_type_code join templates on templates_template_type_code.template_id = templates.template_id where version_number > 5",
            "select template_type_code, version_number from templates_template_type_code join templates on templates_template_type_code.template_id = templates.template_id where version_number > 5",
            "select t2.template_type_code, t2.version_number from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5"
        ],
        "query1": "select version_number, template_type_code from templates where version_number > 5",
        "query2": "select t1.version_number, t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number > 5"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Version_Number",
            ")",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "What the smallest version number and its template type code?",
        "question_toks": [
            "What",
            "the",
            "smallest",
            "version",
            "number",
            "and",
            "its",
            "template",
            "type",
            "code",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select min(version_number), template_type_code from templates",
        "split_map": {
            "templates": "version_number"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Advertisement\", \"CV\", \"Book\"), template_type_code (\"BK\", \"CV\", \"PPT\") | templates : date_effective_from (\"2002-03-02 14:39:49\", \"1996-02-04 11:27:24\", \"2012-04-05 07:11:42\"), template_details (\"\"), date_effective_to (\"2008-08-08 18:36:43\", \"1975-07-16 04:52:10\", \"2001-04-18 09:29:52\"), template_id (23, 20, 9), template_type_code (\"CV\", \"BK\", \"CV\") | templates_version_number : template_id (6, 6, 14), version_number (8, 4, 7) | documents : other_details (None), template_id (20, 14, 22), document_id (2394, 0, 82), document_description (\"f\", \"f\", \"k\"), document_name (\"Introduction of OS\", \"How to write a CV\", \"How to write a CV\") | paragraphs : paragraph_id (3708, 1104059, 65), document_id (16514113, 33930, 50123), other_details (None), paragraph_text (\"Senegal\", \"Jersey\", \"Senegal\")",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_from , template_details , date_effective_to , template_id , template_type_code  | templates_version_number : template_id , version_number  | documents : other_details , template_id , document_id , document_description , document_name  | paragraphs : paragraph_id , document_id , other_details , paragraph_text ",
        "chatgpt_out": [
            "select min(t1.version_number), t2.template_type_code from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id order by t1.version_number limit 1",
            "select t2.template_type_code, min(t1.version_number) from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id group by t2.template_type_code order by min(t1.version_number) limit 1",
            "select t2.template_type_code, min(t1.version_number) from templates as t2 join templates_version_number as t1 on t1.template_id = t2.template_id group by t2.template_type_code order by min(t1.version_number) limit 1",
            "select min(t1.version_number), t2.template_type_code from templates as t2 join templates_version_number as t1 on t1.template_id = t2.template_id order by t1.version_number limit 1",
            "select t2.template_type_code, min(t1.version_number) from templates as t2 join templates_version_number as t1 on t1.template_id = t2.template_id group by t2.template_type_code order by min(t1.version_number) limit 1"
        ],
        "query1": "select min(version_number), template_type_code from templates",
        "query2": "select min(t2.version_number), t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Version_Number",
            ")",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "What the smallest version number and its template type code?",
        "question_toks": [
            "What",
            "the",
            "smallest",
            "version",
            "number",
            "and",
            "its",
            "template",
            "type",
            "code",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select min(version_number), template_type_code from templates",
        "split_map": {
            "templates": "template_type_code"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"AD\", \"CV\", \"AD\"), template_type_description (\"Presentation\", \"Book\", \"Paper\") | templates : template_id (11, 24, 24), date_effective_from (\"2005-02-20 00:31:34\", \"2005-11-12 07:09:48\", \"2008-08-01 13:57:26\"), date_effective_to (\"1976-10-28 10:08:50\", \"1995-09-19 22:27:48\", \"2008-08-08 18:36:43\"), version_number (9, 2, 1), template_details (\"\") | templates_template_type_code : template_type_code (\"CV\", \"AD\", \"CV\"), template_id (1, 18, 14) | documents : document_description (\"r\", \"u\", \"f\"), document_name (\"A history of Arts\", \"Data base\", \"Understanding DB\"), other_details (None), document_id (82, 2394, 2394), template_id (7, 22, 25) | paragraphs : paragraph_id (571212310, 65, 946335436), other_details (None), paragraph_text (\"Fiji\", \"Somalia\", \"Senegal\"), document_id (3830, 3, 33930)",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : template_id , date_effective_from , date_effective_to , version_number , template_details  | templates_template_type_code : template_type_code , template_id  | documents : document_description , document_name , other_details , document_id , template_id  | paragraphs : paragraph_id , other_details , paragraph_text , document_id ",
        "chatgpt_out": [
            "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id",
            "select t2.template_type_code, min(t1.version_number) from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id",
            "select t2.template_type_code, t1.version_number from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id where t1.version_number = (select min(version_number) from templates)",
            "select t2.template_type_code, min(t1.date_effective_from) from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id",
            "select min(t1.date_effective_from), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
        ],
        "query1": "select min(version_number), template_type_code from templates",
        "query2": "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Version_Number",
            ")",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "question_toks": [
            "Return",
            "the",
            "lowest",
            "version",
            "number",
            ",",
            "along",
            "with",
            "its",
            "corresponding",
            "template",
            "type",
            "code",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select min(version_number), template_type_code from templates",
        "split_map": {
            "templates": "version_number"
        },
        "schema_with_content": "ref_template_types : template_type_description (\"Advertisement\", \"Book\", \"Advertisement\"), template_type_code (\"CV\", \"BK\", \"CV\") | templates : date_effective_to (\"2006-02-06 23:52:04\", \"2007-06-06 06:18:53\", \"1973-01-12 14:13:34\"), date_effective_from (\"2002-03-02 14:39:49\", \"1986-11-14 12:20:18\", \"1986-12-09 14:51:36\"), template_details (\"\"), template_id (24, 14, 1), template_type_code (\"BK\", \"AD\", \"BK\") | templates_version_number : version_number (9, 2, 9), template_id (21, 11, 7) | documents : document_description (\"f\", \"w\", \"r\"), template_id (8, 21, 6), document_id (3830, 385906526, 76), other_details (None), document_name (\"Summer Show\", \"Do not panic\", \"How Google people work\") | paragraphs : paragraph_id (765713812, 571212310, 571212310), other_details (None), document_id (651512, 80, 3830), paragraph_text (\"Somalia\", \"Fiji\", \"Somalia\")",
        "schema_without_content": "ref_template_types : template_type_description , template_type_code  | templates : date_effective_to , date_effective_from , template_details , template_id , template_type_code  | templates_version_number : version_number , template_id  | documents : document_description , template_id , document_id , other_details , document_name  | paragraphs : paragraph_id , other_details , document_id , paragraph_text ",
        "chatgpt_out": [
            "select t2.template_type_code, min(t1.version_number) from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id group by t2.template_type_code order by min(t1.version_number) asc limit 1",
            "select t2.template_type_code, t1.version_number from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id where t1.version_number = (select min(version_number) from templates_version_number) order by t2.template_type_code",
            "select t1.version_number, t2.template_type_code from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id where t1.version_number = (select min(version_number) from templates_version_number)",
            "select t2.template_type_code, t1.version_number from templates_version_number as t1 join templates as t2 on t1.template_id = t2.template_id where t1.version_number = (select min(version_number) from templates_version_number) group by t2.template_type_code",
            "select t2.template_type_code, min(t1.version_number) from templates_version_number as t1, templates as t2 where t2.template_id = t1.template_id group by t2.template_type_code having min(t1.version_number) order by min(t1.version_number) limit 1"
        ],
        "query1": "select min(version_number), template_type_code from templates",
        "query2": "select min(t2.version_number), t1.template_type_code from templates as t1 join templates_version_number as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "cre_Doc_Template_Mgt",
        "query_toks": [
            "SELECT",
            "min",
            "(",
            "Version_Number",
            ")",
            ",",
            "template_type_code",
            "FROM",
            "Templates"
        ],
        "query_toks_no_value": [
            "select",
            "min",
            "(",
            "version_number",
            ")",
            ",",
            "template_type_code",
            "from",
            "templates"
        ],
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "question_toks": [
            "Return",
            "the",
            "lowest",
            "version",
            "number",
            ",",
            "along",
            "with",
            "its",
            "corresponding",
            "template",
            "type",
            "code",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        2,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "templates": "template_id"
        },
        "orig_query": "select min(version_number), template_type_code from templates",
        "split_map": {
            "templates": "template_type_code"
        },
        "schema_with_content": "ref_template_types : template_type_code (\"BK\", \"CV\", \"CV\"), template_type_description (\"CV\", \"Paper\", \"Paper\") | templates : version_number (5, 1, 2), template_id (20, 19, 18), date_effective_from (\"1983-07-16 21:16:16\", \"1986-11-14 12:20:18\", \"1986-11-14 12:20:18\"), template_details (\"\"), date_effective_to (\"1998-05-12 12:51:29\", \"2000-10-22 11:57:12\", \"1973-01-12 14:13:34\") | templates_template_type_code : template_type_code (\"AD\", \"BK\", \"PP\"), template_id (8, 6, 0) | documents : document_name (\"Robbin CV\", \"How Google people work\", \"A history of Arts\"), document_description (\"k\", \"h\", \"u\"), template_id (1, 22, 21), other_details (None), document_id (3830, 0, 651512) | paragraphs : other_details (None), paragraph_id (1104059, 7, 9946), document_id (651512, 385906526, 385906526), paragraph_text (\"Brazil\", \"Brazil\", \"Jersey\")",
        "schema_without_content": "ref_template_types : template_type_code , template_type_description  | templates : version_number , template_id , date_effective_from , template_details , date_effective_to  | templates_template_type_code : template_type_code , template_id  | documents : document_name , document_description , template_id , other_details , document_id  | paragraphs : other_details , paragraph_id , document_id , paragraph_text ",
        "chatgpt_out": [
            "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id group by t2.template_type_code",
            "select t2.template_type_code, min(t1.version_number) from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id group by t2.template_type_code",
            "select min(version_number), template_type_code from templates_template_type_code join templates on templates_template_type_code.template_id = templates.template_id group by template_type_code",
            "select template_type_code, min(version_number) from templates_template_type_code join templates on templates_template_type_code.template_id = templates.template_id group by template_type_code",
            "select t2.template_type_code, min(t1.version_number) from templates_template_type_code as t2 join templates as t1 on t2.template_id = t1.template_id group by t2.template_type_code"
        ],
        "query1": "select min(version_number), template_type_code from templates",
        "query2": "select min(t1.version_number), t2.template_type_code from templates as t1 join templates_template_type_code as t2 on t1.template_id = t2.template_id"
    },
    {
        "db_id": "course_teach",
        "query_toks": [
            "SELECT",
            "Age",
            ",",
            "Hometown",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "What are the age and hometown of teachers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "age",
            "and",
            "hometown",
            "of",
            "teachers",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "teacher": "teacher_id"
        },
        "orig_query": "select age, hometown from teacher",
        "split_map": {
            "teacher": "age"
        },
        "schema_with_content": "course : staring_date (\"17 May\", \"14 May\", \"14 May\"), course (\"Language Arts\", \"Geography\", \"Language Arts\"), course_id (1, 9, 5) | teacher : name (\"Gustaaf Deloor\", \"Kearsley Brown\", \"Joseph Huts\"), teacher_id (3, 3, 5), hometown (\"Farnworth Municipal Borough\", \"Turton Urban District\", \"Little Lever Urban District\") | teacher_age : age (\"29\", \"26\", \"45\"), teacher_id (6, 7, 3) | course_arrange : teacher_id (2, 2, 7), course_id (3, 2, 4), grade (1, 7, 3)",
        "schema_without_content": "course : staring_date , course , course_id  | teacher : name , teacher_id , hometown  | teacher_age : age , teacher_id  | course_arrange : teacher_id , course_id , grade ",
        "chatgpt_out": [
            "select t2.hometown, t1.age from teacher_age as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
            "select t2.age, t2.hometown from teacher_age as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
            "select hometown, age from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id",
            "select age, hometown from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id",
            "select teacher.hometown, teacher_age.age from teacher, teacher_age where teacher.teacher_id = teacher_age.teacher_id"
        ],
        "query1": "select age, hometown from teacher",
        "query2": "select t2.age, t1.hometown from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id"
    },
    {
        "db_id": "course_teach",
        "query_toks": [
            "SELECT",
            "Age",
            ",",
            "Hometown",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "What are the age and hometown of teachers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "age",
            "and",
            "hometown",
            "of",
            "teachers",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "teacher": "teacher_id"
        },
        "orig_query": "select age, hometown from teacher",
        "split_map": {
            "teacher": "hometown"
        },
        "schema_with_content": "course : staring_date (\"15 May\", \"10 May\", \"9 May\"), course_id (9, 7, 2), course (\"Geography\", \"Health\", \"Music\") | teacher : name (\"Joseph Huts\", \"Lucy Wong\", \"Anne Walker\"), teacher_id (7, 3, 5), age (\"29\", \"45\", \"41\") | teacher_hometown : hometown (\"Blackrod Urban District\", \"Farnworth Municipal Borough\", \"Farnworth Municipal Borough\"), teacher_id (3, 2, 3) | course_arrange : grade (3, 7, 1), teacher_id (6, 7, 2), course_id (5, 4, 10)",
        "schema_without_content": "course : staring_date , course_id , course  | teacher : name , teacher_id , age  | teacher_hometown : hometown , teacher_id  | course_arrange : grade , teacher_id , course_id ",
        "chatgpt_out": [
            "select age, hometown from teacher join teacher_hometown on teacher.teacher_id = teacher_hometown.teacher_id",
            "select hometown, age from teacher_hometown join teacher on teacher_hometown.teacher_id = teacher.teacher_id",
            "select age, hometown from teacher_hometown join teacher on teacher_hometown.teacher_id = teacher.teacher_id",
            "select hometown, age from teacher join teacher_hometown on teacher.teacher_id = teacher_hometown.teacher_id",
            "select distinct teacher.age, teacher_hometown.hometown from teacher, teacher_hometown where teacher.teacher_id = teacher_hometown.teacher_id"
        ],
        "query1": "select age, hometown from teacher",
        "query2": "select t1.age, t2.hometown from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id"
    },
    {
        "db_id": "course_teach",
        "query_toks": [
            "SELECT",
            "Age",
            ",",
            "Hometown",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "What is the age and hometown of every teacher?",
        "question_toks": [
            "What",
            "is",
            "the",
            "age",
            "and",
            "hometown",
            "of",
            "every",
            "teacher",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "teacher": "teacher_id"
        },
        "orig_query": "select age, hometown from teacher",
        "split_map": {
            "teacher": "age"
        },
        "schema_with_content": "course : course_id (7, 1, 6), staring_date (\"6 May\", \"11 May\", \"15 May\"), course (\"French\", \"French\", \"Health\") | teacher : teacher_id (2, 6, 5), name (\"Kearsley Brown\", \"Anne Walker\", \"Joseph Huts\"), hometown (\"Horwich Urban District\", \"Blackrod Urban District\", \"Bolton County Borough\") | teacher_age : teacher_id (4, 7, 1), age (\"45\", \"39\", \"45\") | course_arrange : grade (1, 3, 3), course_id (5, 4, 5), teacher_id (7, 2, 3)",
        "schema_without_content": "course : course_id , staring_date , course  | teacher : teacher_id , name , hometown  | teacher_age : teacher_id , age  | course_arrange : grade , course_id , teacher_id ",
        "chatgpt_out": [
            "select hometown, age from teacher join teacher_age on teacher.teacher_id = teacher_age.teacher_id",
            "select age, hometown from teacher join teacher_age on teacher.teacher_id = teacher_age.teacher_id",
            "select hometown, age from teacher_age join teacher on teacher_age.teacher_id = teacher.teacher_id",
            "select age, hometown from teacher_age join teacher on teacher_age.teacher_id = teacher.teacher_id",
            "select teacher.hometown, teacher_age.age from teacher join teacher_age on teacher.teacher_id = teacher_age.teacher_id"
        ],
        "query1": "select age, hometown from teacher",
        "query2": "select t2.age, t1.hometown from teacher as t1 join teacher_age as t2 on t1.teacher_id = t2.teacher_id"
    },
    {
        "db_id": "course_teach",
        "query_toks": [
            "SELECT",
            "Age",
            ",",
            "Hometown",
            "FROM",
            "teacher"
        ],
        "query_toks_no_value": [
            "select",
            "age",
            ",",
            "hometown",
            "from",
            "teacher"
        ],
        "question": "What is the age and hometown of every teacher?",
        "question_toks": [
            "What",
            "is",
            "the",
            "age",
            "and",
            "hometown",
            "of",
            "every",
            "teacher",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "teacher": "teacher_id"
        },
        "orig_query": "select age, hometown from teacher",
        "split_map": {
            "teacher": "hometown"
        },
        "schema_with_content": "course : staring_date (\"13 May\", \"11 May\", \"6 May\"), course (\"Music\", \"Bible\", \"Science\"), course_id (3, 8, 5) | teacher : teacher_id (1, 6, 7), age (\"32\", \"41\", \"32\"), name (\"Vicente Carretero\", \"Vicente Carretero\", \"Gustaaf Deloor\") | teacher_hometown : hometown (\"Little Lever Urban District\", \"Kearsley Urban District\", \"Bolton County Borough\"), teacher_id (5, 5, 1) | course_arrange : grade (5, 1, 5), teacher_id (2, 6, 5), course_id (2, 2, 5)",
        "schema_without_content": "course : staring_date , course , course_id  | teacher : teacher_id , age , name  | teacher_hometown : hometown , teacher_id  | course_arrange : grade , teacher_id , course_id ",
        "chatgpt_out": [
            "select age, hometown from teacher_hometown as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
            "select hometown, age from teacher_hometown as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id",
            "select age, hometown from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id",
            "select hometown, age from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id",
            "select t2.age, t1.hometown from teacher_hometown as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id"
        ],
        "query1": "select age, hometown from teacher",
        "query2": "select t1.age, t2.hometown from teacher as t1 join teacher_hometown as t2 on t1.teacher_id = t2.teacher_id"
    },
    {
        "db_id": "museum_visit",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "Level_of_membership",
            "FROM",
            "visitor",
            "WHERE",
            "Level_of_membership",
            ">",
            "4",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "value",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "and",
            "membership",
            "level",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "higher",
            "than",
            "4",
            ",",
            "and",
            "sort",
            "by",
            "their",
            "age",
            "from",
            "old",
            "to",
            "young",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "visitor": "id"
        },
        "orig_query": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "split_map": {
            "visitor": "name"
        },
        "schema_with_content": "museum : museum_id (2, 8, 1), name (\"Capital Plaza Museum\", \"RiverPark Museum\", \"Willow Grande Museum\"), open_year (\"2000\", \"2011\", \"2000\"), num_of_staff (62, 15, 16) | visitor : id (3, 3, 4), level_of_membership (1, 5, 8), age (56, 36, 36) | visitor_name : id (4, 2, 1), name (\"Rafael van der Vaart\", \"Gonzalo Higua\u00c3\u00adn \", \"Ra\u00c3\u00bal Brown\") | visit : visitor_id (\"5\", \"3\", \"6\"), total_spent (89.98, 19.98, 209.98), num_of_ticket (24, 20, 2), museum_id (2, 1, 4)",
        "schema_without_content": "museum : museum_id , name , open_year , num_of_staff  | visitor : id , level_of_membership , age  | visitor_name : id , name  | visit : visitor_id , total_spent , num_of_ticket , museum_id ",
        "chatgpt_out": [
            "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by t1.age desc",
            "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by age desc",
            "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by t2.age desc",
            "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by age",
            "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by t2.age"
        ],
        "query1": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "query2": "select t2.name, t1.level_of_membership from visitor as t1 join visitor_name as t2 on t1.id = t2.id where t1.level_of_membership > 4 order by t1.age desc"
    },
    {
        "db_id": "museum_visit",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "Level_of_membership",
            "FROM",
            "visitor",
            "WHERE",
            "Level_of_membership",
            ">",
            "4",
            "ORDER",
            "BY",
            "age",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "level_of_membership",
            "from",
            "visitor",
            "where",
            "level_of_membership",
            ">",
            "value",
            "order",
            "by",
            "age",
            "desc"
        ],
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "question_toks": [
            "Find",
            "the",
            "name",
            "and",
            "membership",
            "level",
            "of",
            "the",
            "visitors",
            "whose",
            "membership",
            "level",
            "is",
            "higher",
            "than",
            "4",
            ",",
            "and",
            "sort",
            "by",
            "their",
            "age",
            "from",
            "old",
            "to",
            "young",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            8,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    4.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "visitor": "id"
        },
        "orig_query": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "split_map": {
            "visitor": "level_of_membership"
        },
        "schema_with_content": "museum : name (\"Central City District Residential Museum\", \"Willow Grande Museum\", \"Capital Plaza Museum\"), num_of_staff (15, 12, 18), museum_id (4, 3, 5), open_year (\"2012\", \"2011\", \"2011\") | visitor : name (\"Fernando Gago\", \"Arjen Robben\", \"Rafael van der Vaart\"), age (25, 28, 25), id (5, 2, 6) | visitor_level_of_membership : level_of_membership (1, 2, 1), id (6, 4, 1) | visit : museum_id (4, 8, 2), total_spent (209.98, 19.98, 89.98), num_of_ticket (24, 24, 3), visitor_id (\"5\", \"3\", \"6\")",
        "schema_without_content": "museum : name , num_of_staff , museum_id , open_year  | visitor : name , age , id  | visitor_level_of_membership : level_of_membership , id  | visit : museum_id , total_spent , num_of_ticket , visitor_id ",
        "chatgpt_out": [
            "select t1.name, t2.level_of_membership from visitor as t1 join visitor_level_of_membership as t2 on t1.id = t2.id where t2.level_of_membership > 4 order by t1.age",
            "select t1.name, t2.level_of_membership from visitor as t1 join visitor_level_of_membership as t2 on t1.id = t2.id where t2.level_of_membership > 4 order by t1.age desc",
            "select t1.name, t2.level_of_membership from visitor as t1 join visitor_level_of_membership as t2 on t1.id = t2.id where t2.level_of_membership > 4 order by t1.age asc",
            "select t1.name, t2.level_of_membership from visitor as t1 join visitor_level_of_membership as t2 on t1.id = t2.id where t2.level_of_membership > 4 order by t2.level_of_membership, t1.age",
            "select t1.name, t2.level_of_membership from visitor as t1 join visitor_level_of_membership as t2 on t1.id = t2.id where t2.level_of_membership > 4 order by t2.level_of_membership, t1.age desc"
        ],
        "query1": "select name, level_of_membership from visitor where level_of_membership > 4 order by age desc",
        "query2": "select t1.name, t2.level_of_membership from visitor as t1 join visitor_level_of_membership as t2 on t1.id = t2.id where t2.level_of_membership > 4 order by t1.age desc"
    },
    {
        "db_id": "museum_visit",
        "query_toks": [
            "SELECT",
            "Num_of_Staff",
            ",",
            "Open_Year",
            "FROM",
            "museum",
            "WHERE",
            "name",
            "=",
            "'Plaza",
            "Museum",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "num_of_staff",
            ",",
            "open_year",
            "from",
            "museum",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "question_toks": [
            "What",
            "are",
            "the",
            "opening",
            "year",
            "and",
            "staff",
            "number",
            "of",
            "the",
            "museum",
            "named",
            "Plaza",
            "Museum",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Plaza Museum\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "museum": "museum_id"
        },
        "orig_query": "select num_of_staff, open_year from museum where name = 'Plaza Museum'",
        "split_map": {
            "museum": "open_year"
        },
        "schema_with_content": "museum : num_of_staff (16, 18, 17), name (\"Plaza Museum\", \"Central City District Residential Museum\", \"Place Tower Museum\"), museum_id (5, 6, 8) | museum_open_year : open_year (\"2012\", \"2008\", \"2010\"), museum_id (4, 5, 1) | visitor : id (2, 4, 5), age (25, 25, 28), level_of_membership (6, 2, 2), name (\"Gonzalo Higua\u00c3\u00adn \", \"Rafael van der Vaart\", \"Gonzalo Higua\u00c3\u00adn \") | visit : total_spent (209.98, 320.14, 19.98), visitor_id (\"5\", \"3\", \"6\"), museum_id (4, 1, 2), num_of_ticket (20, 10, 20)",
        "schema_without_content": "museum : num_of_staff , name , museum_id  | museum_open_year : open_year , museum_id  | visitor : id , age , level_of_membership , name  | visit : total_spent , visitor_id , museum_id , num_of_ticket ",
        "chatgpt_out": [
            "select t1.num_of_staff, t2.open_year from museum as t1 join museum_open_year as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'",
            "select t2.open_year, t1.num_of_staff from museum as t1 join museum_open_year as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'",
            "select num_of_staff, open_year from museum, museum_open_year where museum.museum_id = museum_open_year.museum_id and name = 'Plaza Museum'",
            "select open_year, num_of_staff from museum, museum_open_year where museum.museum_id = museum_open_year.museum_id and name = 'Plaza Museum'",
            "select t2.open_year, t1.num_of_staff from museum as t1, museum_open_year as t2 where t1.museum_id = t2.museum_id and t1.name = 'Plaza Museum'"
        ],
        "query1": "select num_of_staff, open_year from museum where name = 'Plaza Museum'",
        "query2": "select t1.num_of_staff, t2.open_year from museum as t1 join museum_open_year as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'"
    },
    {
        "db_id": "museum_visit",
        "query_toks": [
            "SELECT",
            "Num_of_Staff",
            ",",
            "Open_Year",
            "FROM",
            "museum",
            "WHERE",
            "name",
            "=",
            "'Plaza",
            "Museum",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "num_of_staff",
            ",",
            "open_year",
            "from",
            "museum",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "question_toks": [
            "What",
            "are",
            "the",
            "opening",
            "year",
            "and",
            "staff",
            "number",
            "of",
            "the",
            "museum",
            "named",
            "Plaza",
            "Museum",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            2,
                            false
                        ],
                        null
                    ],
                    "\"Plaza Museum\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "museum": "museum_id"
        },
        "orig_query": "select num_of_staff, open_year from museum where name = 'Plaza Museum'",
        "split_map": {
            "museum": "num_of_staff"
        },
        "schema_with_content": "museum : open_year (\"2009\", \"2010\", \"2009\"), name (\"Central City District Residential Museum\", \"Capital Plaza Museum\", \"Central City District Residential Museum\"), museum_id (7, 6, 7) | museum_num_of_staff : museum_id (3, 5, 8), num_of_staff (62, 12, 16) | visitor : level_of_membership (2, 1, 5), name (\"Ra\u00c3\u00bal Brown\", \"Gonzalo Higua\u00c3\u00adn \", \"Fernando Gago\"), age (36, 27, 25), id (4, 3, 6) | visit : total_spent (20.44, 320.14, 209.98), museum_id (1, 8, 1), visitor_id (\"5\", \"3\", \"6\"), num_of_ticket (10, 10, 3)",
        "schema_without_content": "museum : open_year , name , museum_id  | museum_num_of_staff : museum_id , num_of_staff  | visitor : level_of_membership , name , age , id  | visit : total_spent , museum_id , visitor_id , num_of_ticket ",
        "chatgpt_out": [
            "select t1.open_year, t2.num_of_staff from museum as t1 join museum_num_of_staff as t2 on t1.museum_id = t2.museum_id where t1.name = 'Capital Plaza Museum'",
            "select t2.num_of_staff, t1.open_year from museum as t1 join museum_num_of_staff as t2 on t1.museum_id = t2.museum_id where t1.name = 'Capital Plaza Museum'",
            "select open_year, num_of_staff from museum join museum_num_of_staff using (museum_id) where name = 'Capital Plaza Museum'",
            "select num_of_staff, open_year from museum join museum_num_of_staff using (museum_id) where name = 'Capital Plaza Museum'",
            "select t1.open_year, t2.num_of_staff from museum as t1, museum_num_of_staff as t2 where t1.name = 'Capital Plaza Museum' and t1.museum_id = t2.museum_id"
        ],
        "query1": "select num_of_staff, open_year from museum where name = 'Plaza Museum'",
        "query2": "select t2.num_of_staff, t1.open_year from museum as t1 join museum_num_of_staff as t2 on t1.museum_id = t2.museum_id where t1.name = 'Plaza Museum'"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "birth_date",
            "FROM",
            "players",
            "WHERE",
            "country_code",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "value"
        ],
        "question": "List the first name and birth date of all players from the country with code USA.",
        "question_toks": [
            "List",
            "the",
            "first",
            "name",
            "and",
            "birth",
            "date",
            "of",
            "all",
            "players",
            "from",
            "the",
            "country",
            "with",
            "code",
            "USA",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'",
        "split_map": {
            "players": "birth_date"
        },
        "schema_with_content": "players : player_id (220078, 201841, 209262), first_name (\"Alexia Llysel\", \"Agnese\", \"Wei Fang\"), last_name (\"Ondrouchova\", \"Gobol\", \"Pisnik\"), hand (\"L\", \"R\", \"L\"), country_code (\"AUT\", \"BUL\", \"CRC\") | players_birth_date : birth_date (19950216, 19771118, 19760317), player_id (215798, 206126, 207177) | matches : tourney_name (\"Acapulco\", \"Zhuhai\", \"Indian Wells\"), winner_id (201347, 201427, 201311), loser_ht (173, 178, 184), winner_entry (\"\"), winner_name (\"Na Li\", \"Lucie Safarova\", \"Johanna Larsson\"), round (\"F\", \"RR\", \"SF\"), winner_seed (8, 13, 30), winner_ht (162, 176, 168), best_of (3), loser_rank (59, 40, 27), tourney_id (\"2017-0406\", \"2017-M009\", \"2016-0710\"), tourney_level (\"G\", \"I\", \"P\"), loser_rank_points (7035, 8485, 3090), surface (\"Hard\", \"Clay\", \"Grass\"), score (\"6-4 3-6 6-3\", \"6-3 6-2\", \"6-1 6-1\"), loser_age (31.613963039, 28.898015058200002, 22.3080082136), tourney_date (20170410, 20160418, 20170403), draw_size (128, 12, 64), winner_hand (\"R\", \"L\"), winner_rank (37, 14, 6), minutes (77, 46, 71), winner_ioc (\"UKR\", \"CZE\", \"USA\"), loser_id (201585, 200748, 201465), loser_ioc (\"ITA\", \"SVK\", \"SVK\"), loser_hand (\"R\", \"L\"), winner_age (34.7515400411, 31.0006844627, 30.5954825462), match_num (209, 254, 288), winner_rank_points (1970, 4287, 4728), loser_name (\"Kiki Bertens\", \"Yanina Wickmayer\", \"Kiki Bertens\"), year (2013, 2016, 2017), loser_seed (15, 12, 8), loser_entry (\"\") | rankings : ranking (577, 762, 270), ranking_points (233, 1089, 3235), ranking_date (20160815, 20040719, 19900226), player_id (210787, 202403, 211701), tours (36, 9, 2)",
        "schema_without_content": "players : player_id , first_name , last_name , hand , country_code  | players_birth_date : birth_date , player_id  | matches : tourney_name , winner_id , loser_ht , winner_entry , winner_name , round , winner_seed , winner_ht , best_of , loser_rank , tourney_id , tourney_level , loser_rank_points , surface , score , loser_age , tourney_date , draw_size , winner_hand , winner_rank , minutes , winner_ioc , loser_id , loser_ioc , loser_hand , winner_age , match_num , winner_rank_points , loser_name , year , loser_seed , loser_entry  | rankings : ranking , ranking_points , ranking_date , player_id , tours ",
        "chatgpt_out": [
            "select first_name, birth_date from players_birth_date where player_id in (select player_id from players where country_code = 'USA')",
            "select birth_date, first_name from players_birth_date where player_id in (select player_id from players where country_code = 'USA')",
            "select first_name, birth_date from players where country_code = 'USA'",
            "select birth_date, first_name from players where country_code = 'USA'",
            "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
        ],
        "query1": "select first_name, birth_date from players where country_code = 'USA'",
        "query2": "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "birth_date",
            "FROM",
            "players",
            "WHERE",
            "country_code",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "value"
        ],
        "question": "List the first name and birth date of all players from the country with code USA.",
        "question_toks": [
            "List",
            "the",
            "first",
            "name",
            "and",
            "birth",
            "date",
            "of",
            "all",
            "players",
            "from",
            "the",
            "country",
            "with",
            "code",
            "USA",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : country_code (\"CRO\", \"BOL\", \"FRA\"), hand (\"\", \"L\", \"L\"), last_name (\"Milinkovicova\", \"Spegel\", \"Lamagni\"), player_id (213059, 214496, 211075), birth_date (19580310, 19681022, 19970619) | players_first_name : first_name (\"Bryanne\", \"Typhaine\", \"Matilde\"), player_id (215540, 209617, 214121) | matches : tourney_id (\"2017-1086\", \"2017-M024\", \"2016-1087\"), loser_name (\"Svetlana Kuznetsova\", \"Magdalena Rybarikova\", \"Venus Williams\"), loser_ht (182, 174, 170), winner_hand (\"R\", \"L\"), tourney_date (20170227, 20160627, 20170807), loser_hand (\"R\", \"L\"), winner_id (200033, 201499, 201693), winner_rank (10, 43, 22), score (\"1-6 7-6(9) 6-4\", \"6-2 6-3\", \"6-3 3-6 6-3 \"), winner_entry (\"\"), winner_age (28.1724845996, 23.811088295700003, 29.2210814511), tourney_level (\"W\", \"I\", \"I\"), winner_rank_points (5022, 5880, 1800), tourney_name (\"Doha\", \"Luxembourg\", \"French Open\"), year (2013, 2016, 2017), best_of (3), round (\"R32\", \"R32\", \"R16\"), loser_age (34.6557152635, 25.6947296372, 22.058863791900002), winner_seed (30, 16, 27), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ioc (\"JPN\", \"HUN\", \"AUS\"), loser_rank (18, 30, 19), loser_id (201397, 201585, 201444), draw_size (64, 8, 12), loser_entry (\"\"), loser_ioc (\"POL\", \"NED\", \"CZE\"), minutes (128, 170, 173), loser_rank_points (4991, 5205, 3060), loser_seed (26, 15, 14), winner_ht (178, 159, 184), winner_name (\"Timea Babos\", \"Na Li\", \"Misaki Doi\"), match_num (198, 214, 226) | rankings : tours (35, 0, 2), player_id (211242, 202674, 215042), ranking (384, 1004, 147), ranking_date (20050425, 19920601, 20050530), ranking_points (2213, 2508, 1791)",
        "schema_without_content": "players : country_code , hand , last_name , player_id , birth_date  | players_first_name : first_name , player_id  | matches : tourney_id , loser_name , loser_ht , winner_hand , tourney_date , loser_hand , winner_id , winner_rank , score  6-4\", \"6-2 6-3\", \"6-3 3-6 6-3 \", winner_entry , winner_age , tourney_level , winner_rank_points , tourney_name , year , best_of , round , loser_age , winner_seed , surface , winner_ioc , loser_rank , loser_id , draw_size , loser_entry , loser_ioc , minutes , loser_rank_points , loser_seed , winner_ht , winner_name , match_num  | rankings : tours , player_id , ranking , ranking_date , ranking_points ",
        "chatgpt_out": [
            "select first_name, birth_date from players_first_name where player_id in (select player_id from players where country_code = 'USA')",
            "select birth_date, first_name from players_first_name where player_id in (select player_id from players where country_code = 'USA')",
            "select first_name, birth_date from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.country_code = 'USA'",
            "select birth_date, first_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.country_code = 'USA'",
            "select t1.first_name, t1.birth_date from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.country_code = 'USA'"
        ],
        "query1": "select first_name, birth_date from players where country_code = 'USA'",
        "query2": "select t2.first_name, t1.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "birth_date",
            "FROM",
            "players",
            "WHERE",
            "country_code",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "value"
        ],
        "question": "What are the first names and birth dates of players from the USA?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "players",
            "from",
            "the",
            "USA",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'",
        "split_map": {
            "players": "birth_date"
        },
        "schema_with_content": "players : first_name (\"Karine\", \"Erica\", \"Yu Min\"), country_code (\"RHO\", \"ALG\", \"TUN\"), player_id (211387, 218747, 218882), last_name (\"Detlava\", \"Kral\", \"Vallone\"), hand (\"R\", \"\", \"L\") | players_birth_date : player_id (210023, 202496, 217877), birth_date (19960621, 19720814, 19981027) | matches : minutes (152, 94, 90), match_num (278, 276, 291), draw_size (8, 64, 4), winner_age (28.741957563299998, 26.869267624899997, 27.2005475702), winner_hand (\"R\", \"L\"), loser_name (\"Ekaterina Makarova\", \"Sorana Cirstea\", \"Agnieszka Radwanska\"), winner_rank_points (4287, 4236, 3710), round (\"SF\", \"BR\", \"F\"), winner_id (201419, 201427, 201594), winner_ioc (\"USA\", \"UKR\", \"CZE\"), loser_ioc (\"DEN\", \"DEN\", \"ESP\"), winner_seed (9, 21, 2), loser_age (25.6755646817, 29.130732375100003, 25.158110883000003), winner_entry (\"\"), tourney_name (\"Limoges\", \"Istanbul\", \"Strasbourg\"), loser_ht (178, 185, 184), best_of (3), loser_seed (27, 20, 16), loser_rank (35, 5, 25), tourney_id (\"2016-M009\", \"2016-1003\", \"2016-0806\"), winner_ht (173, 182, 159), loser_id (201506, 201512, 201539), score (\"6-4 6-7(4) 6-1\", \"6-4 6-4\", \"6-1 3-6 6-3\"), loser_hand (\"R\", \"L\"), loser_rank_points (1565, 7115, 4555), winner_name (\"Elena Vesnina\", \"Venus Williams\", \"Anastasia Pavlyuchenkova\"), tourney_level (\"W\", \"P\", \"G\"), winner_rank (10, 10, 26), year (2013, 2016, 2017), loser_entry (\"\"), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_date (20161010, 20170116, 20160523) | rankings : ranking_date (19981207, 20160215, 19890501), ranking_points (1192, 950, 1332), player_id (202635, 206207, 206033), tours (23, 6, 23), ranking (1125, 1479, 1416)",
        "schema_without_content": "players : first_name , country_code , player_id , last_name , hand  | players_birth_date : player_id , birth_date  | matches : minutes , match_num , draw_size , winner_age , winner_hand , loser_name , winner_rank_points , round , winner_id , winner_ioc , loser_ioc , winner_seed , loser_age , winner_entry , tourney_name , loser_ht , best_of , loser_seed , loser_rank , tourney_id , winner_ht , loser_id , score  6-1\", \"6-4 6-4\", \"6-1 3-6 6-3\", loser_hand , loser_rank_points , winner_name , tourney_level , winner_rank , year , loser_entry , surface , tourney_date  | rankings : ranking_date , ranking_points , player_id , tours , ranking ",
        "chatgpt_out": [
            "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id join matches as t3 on t1.player_id = t3.winner_id where t3.winner_ioc = 'USA'",
            "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id join matches as t3 on t1.player_id = t3.winner_id where t1.country_code = 'USA'",
            "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id join matches as t3 on t2.player_id = t3.winner_id where t3.winner_ioc = 'USA'",
            "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'",
            "select t1.first_name, t2.birth_date from players_birth_date as t2 join players as t1 on t2.player_id = t1.player_id join matches as t3 on t1.player_id = t3.winner_id where t3.winner_ioc = 'USA'"
        ],
        "query1": "select first_name, birth_date from players where country_code = 'USA'",
        "query2": "select t1.first_name, t2.birth_date from players as t1 join players_birth_date as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "birth_date",
            "FROM",
            "players",
            "WHERE",
            "country_code",
            "=",
            "'USA",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "birth_date",
            "from",
            "players",
            "where",
            "country_code",
            "=",
            "value"
        ],
        "question": "What are the first names and birth dates of players from the USA?",
        "question_toks": [
            "What",
            "are",
            "the",
            "first",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "players",
            "from",
            "the",
            "USA",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            6,
                            false
                        ],
                        null
                    ],
                    "\"USA\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, birth_date from players where country_code = 'USA'",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : last_name (\"Cremer\", \"Falconieri\", \"Vesenjak\"), hand (\"L\", \"L\", \"\"), player_id (202722, 206700, 219288), birth_date (19500731, 19910311, 19730905), country_code (\"NZL\", \"VIE\", \"MAD\") | players_first_name : player_id (215191, 215555, 218678), first_name (\"Duda\", \"Edina\", \"Dyan\") | matches : loser_name (\"Anastasia Pavlyuchenkova\", \"Shuai Peng\", \"Victoria Azarenka\"), tourney_id (\"2017-M024\", \"2016-M014\", \"2016-1064\"), winner_seed (9, 7, 7), loser_id (201616, 201474, 201444), winner_rank (42, 16, 33), winner_ioc (\"GER\", \"SWE\", \"CZE\"), loser_ht (164, 157, 180), tourney_level (\"I\", \"I\", \"G\"), minutes (129, 161, 151), round (\"R32\", \"RR\", \"QF\"), winner_hand (\"R\", \"L\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_rank (48, 9, 32), tourney_name (\"Beijing\", \"Dubai\", \"Hobart\"), winner_ht (183, 182, 184), winner_rank_points (3625, 2416, 2900), tourney_date (20160620, 20170619, 20160613), winner_age (27.9178644764, 26.554414784400002, 22.527036276500002), year (2013, 2016, 2017), score (\"7-6(0) 6-3\", \"6-3 5-7 9-7\", \"6-1 4-6 6-2\"), draw_size (32, 128, 8), loser_entry (\"\"), winner_name (\"Johanna Larsson\", \"Elina Svitolina\", \"Julia Goerges\"), match_num (213, 272, 274), loser_ioc (\"SUI\", \"TPE\", \"BLR\"), loser_age (24.7802874743, 28.4353182752, 31.019849418200003), best_of (3), loser_rank_points (2745, 2280, 3020), winner_id (201521, 201521, 201506), winner_entry (\"\"), loser_seed (18, 14, 17), loser_hand (\"R\", \"L\") | rankings : player_id (215218, 214701, 209649), ranking_points (1909, 2217, 4045), tours (15, 9, 3), ranking (758, 1061, 918), ranking_date (19950925, 19900226, 19890206)",
        "schema_without_content": "players : last_name , hand , player_id , birth_date , country_code  | players_first_name : player_id , first_name  | matches : loser_name , tourney_id , winner_seed , loser_id , winner_rank , winner_ioc , loser_ht , tourney_level , minutes , round , winner_hand , surface , loser_rank , tourney_name , winner_ht , winner_rank_points , tourney_date , winner_age , year , score  6-3\", \"6-3 5-7 9-7\", \"6-1 4-6 6-2\", draw_size , loser_entry , winner_name , match_num , loser_ioc , loser_age , best_of , loser_rank_points , winner_id , winner_entry , loser_seed , loser_hand  | rankings : player_id , ranking_points , tours , ranking , ranking_date ",
        "chatgpt_out": [
            "select t1.first_name, t1.birth_date from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.country_code = 'USA'",
            "select t2.first_name, t2.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'",
            "select t1.first_name, t1.birth_date from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.country_code = 'USA'",
            "select t2.first_name, t2.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'",
            "select t1.first_name, t1.birth_date from players_first_name as t1 join rankings as t2 on t1.player_id = t2.player_id join players as t3 on t1.player_id = t3.player_id where t3.country_code = 'USA'"
        ],
        "query1": "select first_name, birth_date from players where country_code = 'USA'",
        "query2": "select t2.first_name, t1.birth_date from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.country_code = 'USA'"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "country_code",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "value"
        ],
        "question": "Find the first name and country code of the oldest player.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "the",
            "oldest",
            "player",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, country_code from players order by birth_date limit 1",
        "split_map": {
            "players": "country_code"
        },
        "schema_with_content": "players : birth_date (19911202, 19750716, 19850722), player_id (206274, 204970, 212783), first_name (\"Tegan\", \"Maria Victoria\", \"Hijiri\"), last_name (\"Kaligis\", \"Faurfelt\", \"Todoroki\"), hand (\"R\", \"U\", \"\") | players_country_code : player_id (200895, 215910, 207599), country_code (\"ETH\", \"HON\", \"SUI\") | matches : round (\"SF\", \"RR\", \"R16\"), winner_name (\"Kiki Bertens\", \"Karolina Pliskova\", \"Caroline Wozniacki\"), winner_seed (6, 7, 3), winner_entry (\"\"), winner_age (24.2245037645, 24.9993155373, 23.0444900753), loser_seed (3, 5, 26), score (\"6-4 2-6 6-1\", \"7-6(0) 6-4\", \"7-6(1) 0-0 RET\"), loser_hand (\"R\", \"L\"), loser_name (\"Mona Barthel\", \"Kristina Mladenovic\", \"Sorana Cirstea\"), match_num (271, 226, 219), winner_ioc (\"POL\", \"POL\", \"RUS\"), loser_ht (168, 163, 161), loser_entry (\"\"), winner_ht (164, 163, 185), winner_rank_points (2720, 2871, 2340), loser_ioc (\"TPE\", \"NED\", \"SRB\"), loser_age (30.078028747399998, 30.078028747399998, 24.2628336756), winner_rank (15, 61, 20), loser_id (200033, 201619, 202494), year (2013, 2016, 2017), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_name (\"Charleston\", \"Bucharest\", \"Beijing\"), loser_rank_points (1936, 2580, 3698), winner_hand (\"R\", \"L\"), loser_rank (52, 6, 16), draw_size (8, 4, 4), best_of (3), winner_id (201495, 201619, 201493), minutes (109, 95, 73), tourney_id (\"2017-M004\", \"2017-0804\", \"2016-0808\"), tourney_date (20160627, 20170807, 20160222), tourney_level (\"W\", \"I\", \"G\") | rankings : tours (5, 9, 15), ranking (993, 408, 218), ranking_date (20061113, 20130218, 19870302), ranking_points (2541, 2724, 571), player_id (206074, 201610, 211099)",
        "schema_without_content": "players : birth_date , player_id , first_name , last_name , hand  | players_country_code : player_id , country_code  | matches : round , winner_name , winner_seed , winner_entry , winner_age , loser_seed , score  6-4\", \"7-6 0-0 RET\", loser_hand , loser_name , match_num , winner_ioc , loser_ht , loser_entry , winner_ht , winner_rank_points , loser_ioc , loser_age , winner_rank , loser_id , year , surface , tourney_name , loser_rank_points , winner_hand , loser_rank , draw_size , best_of , winner_id , minutes , tourney_id , tourney_date , tourney_level  | rankings : tours , ranking , ranking_date , ranking_points , player_id ",
        "chatgpt_out": [
            "select first_name, country_code from players join players_country_code on players.player_id = players_country_code.player_id order by birth_date asc limit 1",
            "select first_name, country_code from players_country_code join players on players_country_code.player_id = players.player_id order by birth_date asc limit 1",
            "select players.first_name, players_country_code.country_code from players join players_country_code on players.player_id = players_country_code.player_id where birth_date = (select min(birth_date) from players) limit 1",
            "select players_country_code.country_code, players.first_name from players_country_code join players on players_country_code.player_id = players.player_id where birth_date = (select min(birth_date) from players) limit 1",
            "select first_name, country_code from (select first_name, country_code, birth_date, row_number() over(order by birth_date asc) as rn from players join players_country_code on players.player_id = players_country_code.player_id) as sub where rn = 1"
        ],
        "query1": "select first_name, country_code from players order by birth_date limit 1",
        "query2": "select t1.first_name, t2.country_code from players as t1 join players_country_code as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "country_code",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "value"
        ],
        "question": "Find the first name and country code of the oldest player.",
        "question_toks": [
            "Find",
            "the",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "the",
            "oldest",
            "player",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, country_code from players order by birth_date limit 1",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : birth_date (19740809, 19720402, 19910314), hand (\"L\", \"L\", \"\"), player_id (213320, 207392, 211026), country_code (\"BLR\", \"ZIM\", \"BOT\"), last_name (\"Ahtemenciuc\", \"Basto\", \"Kutubidze\") | players_first_name : first_name (\"Min Kyung\", \"Larikah\", \"Aurandrea\"), player_id (206989, 205363, 204904) | matches : loser_rank (6, 2, 40), tourney_id (\"2016-0602\", \"2017-1097\", \"2016-1072\"), loser_rank_points (8485, 2590, 2525), loser_hand (\"R\", \"L\"), loser_ioc (\"ITA\", \"ITA\", \"NED\"), winner_age (26.8829568789, 28.4407939767, 24.985626283400002), winner_ioc (\"AUS\", \"RUS\", \"BLR\"), year (2013, 2016, 2017), surface (\"Hard\", \"Clay\", \"Grass\"), loser_entry (\"\"), winner_entry (\"\"), winner_name (\"Petra Kvitova\", \"Ekaterina Makarova\", \"Irina Camelia Begu\"), winner_seed (9, 19, 1), match_num (218, 221, 283), score (\"3-6 6-1 6-4\", \"7-5 1-6 7-5\", \"6-4 7-6(1)\"), round (\"F\", \"RR\", \"F\"), loser_age (26.466803559200002, 28.574948665300003, 24.249144421599997), winner_ht (176, 164, 183), loser_name (\"Timea Babos\", \"Petra Kvitova\", \"Venus Williams\"), minutes (85, 91, 0), tourney_date (20170515, 20160118, 20160620), tourney_level (\"P\", \"P\", \"W\"), best_of (3), loser_ht (183, 161, 183), loser_seed (2, 3, 30), winner_rank_points (5310, 1994, 9245), draw_size (12, 64, 64), loser_id (201504, 201311, 201621), winner_hand (\"R\", \"L\"), winner_rank (12, 5, 21), tourney_name (\"Prague\", \"Cincinnati\", \"Sydney\"), winner_id (202494, 201662, 201474) | rankings : ranking_date (19990809, 20080421, 20020415), tours (37, 31, 34), ranking_points (2370, 6226, 3200), player_id (206187, 201698, 203437), ranking (941, 546, 1420)",
        "schema_without_content": "players : birth_date , hand , player_id , country_code , last_name  | players_first_name : first_name , player_id  | matches : loser_rank , tourney_id , loser_rank_points , loser_hand , loser_ioc , winner_age , winner_ioc , year , surface , loser_entry , winner_entry , winner_name , winner_seed , match_num , score \", round , loser_age , winner_ht , loser_name , minutes , tourney_date , tourney_level , best_of , loser_ht , loser_seed , winner_rank_points , draw_size , loser_id , winner_hand , winner_rank , tourney_name , winner_id  | rankings : ranking_date , tours , ranking_points , player_id , ranking ",
        "chatgpt_out": [
            "select t1.first_name, t2.country_code from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.birth_date = (select min(birth_date) from players)",
            "select t1.first_name, t2.country_code from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.birth_date = (select min(birth_date) from players) order by t2.birth_date limit 1",
            "select t1.first_name, t2.country_code from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.birth_date = (select min(birth_date) from players) order by t2.birth_date asc limit 1",
            "select t1.first_name, t2.country_code from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.birth_date = (select min(birth_date) from players) and t2.hand != ''",
            "select t1.first_name, t2.country_code from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.birth_date = (select min(birth_date) from players) and t2.hand = 'L'"
        ],
        "query1": "select first_name, country_code from players order by birth_date limit 1",
        "query2": "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "country_code",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "value"
        ],
        "question": "What is the first name and country code of the oldest player?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "the",
            "oldest",
            "player",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, country_code from players order by birth_date limit 1",
        "split_map": {
            "players": "country_code"
        },
        "schema_with_content": "players : player_id (215610, 202400, 200480), first_name (\"Heather\", \"Lutfiana Aris\", \"Guadalupe\"), last_name (\"Zainea\", \"Cabello Gonzalez\", \"Rupp\"), birth_date (19700901, 19821218, 19730922), hand (\"L\", \"R\", \"L\") | players_country_code : player_id (200051, 217710, 217138), country_code (\"FRG\", \"TTO\", \"GUD\") | matches : winner_seed (21, 14, 6), loser_hand (\"R\", \"L\"), tourney_date (20160620, 20131021, 20170320), winner_entry (\"\"), winner_hand (\"R\", \"L\"), winner_rank (50, 6, 22), loser_rank_points (3940, 2146, 6375), loser_id (202470, 201527, 202470), year (2013, 2016, 2017), loser_ht (163, 182, 178), loser_seed (30, 12, 3), loser_rank (33, 60, 34), tourney_level (\"W\", \"P\", \"W\"), match_num (299, 208, 196), draw_size (12, 64, 8), loser_ioc (\"ITA\", \"JPN\", \"ESP\"), winner_ioc (\"NED\", \"POL\", \"GER\"), winner_age (34.4449007529, 23.783709787800003, 24.5585215606), tourney_id (\"2016-540\", \"2017-1027\", \"2016-1086\"), winner_rank_points (5270, 1900, 2343), round (\"SF\", \"QF\", \"R16\"), loser_entry (\"\"), winner_ht (162, 184, 162), minutes (88, 126, 62), loser_age (28.5448323066, 28.1998631075, 31.518138261500003), tourney_name (\"Budapest\", \"Eastbourne\", \"Luxembourg\"), loser_name (\"Venus Williams\", \"Samantha Stosur\", \"Angelique Kerber\"), winner_name (\"Kristina Mladenovic\", \"Julia Goerges\", \"Agnieszka Radwanska\"), winner_id (201535, 201474, 202469), score (\"6-2 6-7(6) 6-2\", \"3-6 7-6(2) 6-0\", \"6-2 6-7(4) 7-5\"), surface (\"Hard\", \"Clay\", \"Grass\"), best_of (3) | rankings : ranking (1384, 100, 253), ranking_points (1503, 1459, 421), tours (10, 38, 8), player_id (205647, 205596, 212008), ranking_date (20030512, 20050606, 19950522)",
        "schema_without_content": "players : player_id , first_name , last_name , birth_date , hand  | players_country_code : player_id , country_code  | matches : winner_seed , loser_hand , tourney_date , winner_entry , winner_hand , winner_rank , loser_rank_points , loser_id , year , loser_ht , loser_seed , loser_rank , tourney_level , match_num , draw_size , loser_ioc , winner_ioc , winner_age , tourney_id , winner_rank_points , round , loser_entry , winner_ht , minutes , loser_age , tourney_name , loser_name , winner_name , winner_id , score  6-2\", \"3-6 7-6 6-0\", \"6-2 6-7 7-5\", surface , best_of  | rankings : ranking , ranking_points , tours , player_id , ranking_date ",
        "chatgpt_out": [
            "select players.first_name, players_country_code.country_code from players join players_country_code on players.player_id = players_country_code.player_id order by players.birth_date limit 1",
            "select players_country_code.country_code, players.first_name from players join players_country_code on players.player_id = players_country_code.player_id order by players.birth_date limit 1",
            "select players.first_name, players_country_code.country_code from players_country_code join players on players_country_code.player_id = players.player_id order by players.birth_date limit 1",
            "select players_country_code.country_code, players.first_name from players_country_code join players on players_country_code.player_id = players.player_id order by players.birth_date limit 1",
            "select t1.first_name, t2.country_code from players as t1 join players_country_code as t2 on t1.player_id = t2.player_id where birth_date = (select min(birth_date) from players)"
        ],
        "query1": "select first_name, country_code from players order by birth_date limit 1",
        "query2": "select t1.first_name, t2.country_code from players as t1 join players_country_code as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "country_code",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "country_code",
            "from",
            "players",
            "order",
            "by",
            "birth_date",
            "limit",
            "value"
        ],
        "question": "What is the first name and country code of the oldest player?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "name",
            "and",
            "country",
            "code",
            "of",
            "the",
            "oldest",
            "player",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, country_code from players order by birth_date limit 1",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : last_name (\"Garcia Martinez\", \"Quadri\", \"Kanda\"), birth_date (20000726, 19910712, 19740209), player_id (201678, 219507, 207334), country_code (\"TKM\", \"AHO\", \"CUB\"), hand (\"L\", \"L\", \"L\") | players_first_name : player_id (208277, 202157, 220335), first_name (\"Dafni\", \"Arancha\", \"Mariapia\") | matches : winner_ioc (\"BLR\", \"USA\", \"HUN\"), loser_ioc (\"JPN\", \"ROU\", \"SUI\"), winner_age (25.6700889802, 23.983572895300004, 25.264887063699998), winner_seed (18, 16, 11), loser_rank_points (8300, 4301, 8485), winner_ht (170, 179, 175), winner_name (\"Carla Suarez Navarro\", \"Irina Camelia Begu\", \"Svetlana Kuznetsova\"), match_num (221, 197, 196), loser_seed (4, 12, 26), loser_entry (\"\"), loser_id (201495, 201539, 201518), loser_rank (7, 60, 46), best_of (3), score (\"4-1 RET\", \"6-7(3) 6-4 6-3\", \"7-6(5) 7-6(2)\"), year (2013, 2016, 2017), winner_id (201521, 201595, 201585), loser_age (23.5592060233, 25.440109514, 34.924024640700004), tourney_name (\"Wuhan\", \"Gstaad\", \"Kaohsiung\"), loser_name (\"Carla Suarez Navarro\", \"Lesia Tsurenko\", \"Serena Williams\"), winner_entry (\"\"), loser_ht (177, 177, 157), tourney_date (20131021, 20161024, 20160606), minutes (131, 144, 77), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_level (\"G\", \"W\", \"W\"), tourney_id (\"2016-1052\", \"2016-1074\", \"2016-1003\"), round (\"F\", \"BR\", \"SF\"), winner_rank (13, 19, 48), winner_hand (\"R\", \"L\"), winner_rank_points (6375, 2600, 1620), draw_size (4, 64, 128), loser_hand (\"R\", \"L\") | rankings : player_id (205898, 202401, 201530), ranking (563, 768, 436), ranking_points (978, 5011, 836), ranking_date (19931122, 20031208, 20130415), tours (18, 32, 16)",
        "schema_without_content": "players : last_name , birth_date , player_id , country_code , hand  | players_first_name : player_id , first_name  | matches : winner_ioc , loser_ioc , winner_age , winner_seed , loser_rank_points , winner_ht , winner_name , match_num , loser_seed , loser_entry , loser_id , loser_rank , best_of , score  6-4 6-3\", \"7-6 7-6\", year , winner_id , loser_age , tourney_name , loser_name , winner_entry , loser_ht , tourney_date , minutes , surface , tourney_level , tourney_id , round , winner_rank , winner_hand , winner_rank_points , draw_size , loser_hand  | rankings : player_id , ranking , ranking_points , ranking_date , tours ",
        "chatgpt_out": [
            "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.birth_date = (select min(birth_date) from players)",
            "select t2.country_code, t1.first_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.birth_date = (select min(birth_date) from players)",
            "select t2.first_name, t2.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.birth_date = (select min(birth_date) from players)",
            "select t2.country_code, t2.first_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.birth_date = (select min(birth_date) from players)",
            "select t1.first_name, t1.country_code from (select * from players order by birth_date limit 1) as t2 join players_first_name as t1 on t2.player_id = t1.player_id"
        ],
        "query1": "select first_name, country_code from players order by birth_date limit 1",
        "query2": "select t2.first_name, t1.country_code from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date limit 1"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "order",
            "by",
            "birth_date"
        ],
        "question": "List the first and last name of all players in the order of birth date.",
        "question_toks": [
            "List",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "players",
            "in",
            "the",
            "order",
            "of",
            "birth",
            "date",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players order by birth_date",
        "split_map": {
            "players": "last_name"
        },
        "schema_with_content": "players : hand (\"R\", \"U\", \"R\"), first_name (\"Josanne\", \"Appollonia\", \"Marja\"), birth_date (19511221, 19931010, 19700912), country_code (\"IRL\", \"KAZ\", \"SYR\"), player_id (214081, 205004, 205131) | players_last_name : player_id (205826, 215124, 208203), last_name (\"Parshina\", \"Sesanker\", \"Nakic\") | matches : winner_hand (\"R\", \"L\"), tourney_level (\"I\", \"G\", \"I\"), round (\"BR\", \"R32\", \"BR\"), tourney_name (\"French Open\", \"Moscow\", \"Beijing\"), tourney_id (\"2016-M009\", \"2016-0806\", \"2016-1081\"), minutes (168, 121, 136), winner_ht (174, 174, 163), surface (\"Hard\", \"Clay\", \"Grass\"), loser_rank (12, 61, 31), loser_entry (\"\"), score (\"3-6 7-6(2) 6-0\", \"6-3 6-4\", \"1-6 7-6(2) 6-4\"), winner_age (27.7371663244, 23.983572895300004, 28.0355920602), loser_seed (15, 16, 18), match_num (202, 220, 290), winner_ioc (\"ESP\", \"JPN\", \"DEN\"), loser_id (201512, 201535, 201539), loser_rank_points (1577, 1460, 3960), loser_name (\"Coco Vandeweghe\", \"Sara Errani\", \"Lesia Tsurenko\"), winner_id (201366, 201505, 202494), winner_rank_points (4600, 2714, 2920), best_of (3), winner_entry (\"\"), loser_ioc (\"BLR\", \"AUS\", \"ITA\"), draw_size (32, 64, 128), year (2013, 2016, 2017), winner_rank (20, 22, 9), loser_ht (177, 181, 179), winner_seed (5, 14, 7), tourney_date (20161010, 20160822, 20170320), loser_hand (\"R\", \"L\"), winner_name (\"Karolina Pliskova\", \"Julia Goerges\", \"Serena Williams\"), loser_age (28.402464065700002, 22.7104722793, 31.8631074606) | rankings : ranking_points (1990, 2456, 5115), ranking (681, 218, 1135), player_id (202645, 202898, 213666), ranking_date (19961111, 19960318, 19961118), tours (15, 15, 14)",
        "schema_without_content": "players : hand , first_name , birth_date , country_code , player_id  | players_last_name : player_id , last_name  | matches : winner_hand , tourney_level , round , tourney_name , tourney_id , minutes , winner_ht , surface , loser_rank , loser_entry , score  6-0\", \"6-3 6-4\", \"1-6 7-6 6-4\", winner_age , loser_seed , match_num , winner_ioc , loser_id , loser_rank_points , loser_name , winner_id , winner_rank_points , best_of , winner_entry , loser_ioc , draw_size , year , winner_rank , loser_ht , winner_seed , tourney_date , loser_hand , winner_name , loser_age  | rankings : ranking_points , ranking , player_id , ranking_date , tours ",
        "chatgpt_out": [
            "select first_name, last_name from players join players_last_name on players.player_id = players_last_name.player_id order by birth_date",
            "select last_name, first_name from players join players_last_name on players.player_id = players_last_name.player_id order by birth_date",
            "select players.first_name, players_last_name.last_name from players join players_last_name on players.player_id = players_last_name.player_id order by players.birth_date",
            "select players_last_name.last_name, players.first_name from players join players_last_name on players.player_id = players_last_name.player_id order by players.birth_date",
            "select first_name, players_last_name.last_name from players join players_last_name on players.player_id = players_last_name.player_id order by players.birth_date"
        ],
        "query1": "select first_name, last_name from players order by birth_date",
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "order",
            "by",
            "birth_date"
        ],
        "question": "List the first and last name of all players in the order of birth date.",
        "question_toks": [
            "List",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "players",
            "in",
            "the",
            "order",
            "of",
            "birth",
            "date",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players order by birth_date",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : country_code (\"GBR\", \"LTU\", \"USA\"), birth_date (19770909, 19880129, 20001213), player_id (204467, 202489, 214725), hand (\"R\", \"L\", \"R\"), last_name (\"Koell\", \"Schaefer\", \"Toulgaridou\") | players_first_name : first_name (\"Razalia\", \"Khrystyna\", \"Blessing\"), player_id (206490, 218351, 213039) | matches : loser_ht (183, 175, 178), loser_id (201444, 201596, 201493), winner_rank_points (5270, 3736, 1994), match_num (219, 210, 161), score (\"7-6(4) 6-4\", \"7-6(6) 6-1\", \"6-7(4) 6-4 6-3\"), best_of (3), winner_id (202428, 201662, 201366), tourney_id (\"2017-1052\", \"2016-540\", \"2016-0804\"), winner_seed (16, 27, 11), tourney_name (\"Luxembourg\", \"s-Hertogenbosch\", \"Brisbane\"), minutes (98, 155, 72), loser_name (\"Irina Camelia Begu\", \"Barbora Zahlavova Strycova\", \"Carla Suarez Navarro\"), surface (\"Hard\", \"Clay\", \"Grass\"), loser_ioc (\"POL\", \"SRB\", \"CZE\"), winner_rank (30, 9, 30), loser_hand (\"R\", \"L\"), tourney_level (\"G\", \"I\", \"I\"), loser_entry (\"\"), winner_entry (\"\"), loser_seed (15, 2, 13), winner_age (27.947980835, 27.748117727600004, 24.4407939767), draw_size (128, 4, 128), loser_rank (1, 60, 66), loser_age (27.373032169699997, 25.3990417522, 22.058863791900002), winner_ht (181, 170, 175), tourney_date (20160613, 20170501, 20170807), winner_name (\"Samantha Stosur\", \"Samantha Stosur\", \"Ekaterina Makarova\"), winner_ioc (\"CZE\", \"SWE\", \"JPN\"), winner_hand (\"R\", \"L\"), round (\"BR\", \"QF\", \"BR\"), loser_rank_points (1290, 4052, 3175), year (2013, 2016, 2017) | rankings : ranking_date (20051205, 19920413, 19910520), tours (26, 6, 10), ranking_points (6006, 128, 120), ranking (986, 291, 228), player_id (213714, 202465, 215967)",
        "schema_without_content": "players : country_code , birth_date , player_id , hand , last_name  | players_first_name : first_name , player_id  | matches : loser_ht , loser_id , winner_rank_points , match_num , score  6-4\", \"7-6 6-1\", \"6-7 6-4 6-3\", best_of , winner_id , tourney_id , winner_seed , tourney_name , minutes , loser_name , surface , loser_ioc , winner_rank , loser_hand , tourney_level , loser_entry , winner_entry , loser_seed , winner_age , draw_size , loser_rank , loser_age , winner_ht , tourney_date , winner_name , winner_ioc , winner_hand , round , loser_rank_points , year  | rankings : ranking_date , tours , ranking_points , ranking , player_id ",
        "chatgpt_out": [
            "select first_name, last_name from players_first_name order by birth_date",
            "select last_name, first_name from players_first_name order by birth_date",
            "select first_name, last_name from players join players_first_name using(player_id) order by birth_date",
            "select last_name, first_name from players join players_first_name using(player_id) order by birth_date",
            "select players_first_name.first_name, players.last_name from players join players_first_name on players.player_id = players_first_name.player_id order by players.birth_date"
        ],
        "query1": "select first_name, last_name from players order by birth_date",
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "order",
            "by",
            "birth_date"
        ],
        "question": "What are the full names of all players, sorted by birth date?",
        "question_toks": [
            "What",
            "are",
            "the",
            "full",
            "names",
            "of",
            "all",
            "players",
            ",",
            "sorted",
            "by",
            "birth",
            "date",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players order by birth_date",
        "split_map": {
            "players": "last_name"
        },
        "schema_with_content": "players : first_name (\"Neyssa\", \"Margarida\", \"Felicia\"), hand (\"U\", \"U\", \"L\"), country_code (\"KAZ\", \"TKM\", \"ECU\"), player_id (201576, 205233, 204139), birth_date (19760920, 19770408, 19810525) | players_last_name : last_name (\"Tomasovic\", \"Chouhib\", \"Duebbers\"), player_id (206902, 217518, 205100) | matches : loser_age (28.101300479099997, 26.869267624899997, 30.9404517454), minutes (68, 132, 152), score (\"6-1 4-6 6-1\", \"6-4 6-4\", \"6-2 6-7(3) 6-3\"), loser_entry (\"\"), winner_age (25.3990417522, 21.6947296372, 31.6495550992), winner_rank_points (3300, 4985, 1255), tourney_name (\"Istanbul\", \"Istanbul\", \"Charleston\"), tourney_id (\"2017-540\", \"2016-1075\", \"2017-1027\"), winner_id (201505, 202428, 201520), tourney_date (20160418, 20160307, 20170703), loser_hand (\"R\", \"L\"), winner_rank (6, 53, 37), draw_size (32, 4, 64), round (\"R32\", \"BR\", \"F\"), winner_hand (\"R\", \"L\"), match_num (213, 276, 283), loser_ht (175, 182, 172), loser_name (\"Misaki Doi\", \"Monica Niculescu\", \"Coco Vandeweghe\"), loser_ioc (\"JPN\", \"RUS\", \"CZE\"), loser_id (201512, 201517, 201514), winner_seed (16, 15, 8), best_of (3), year (2013, 2016, 2017), winner_name (\"Angelique Kerber\", \"Venus Williams\", \"Johanna Larsson\"), loser_rank_points (3185, 2730, 4100), loser_seed (9, 20, 27), winner_entry (\"\"), loser_rank (40, 5, 26), tourney_level (\"W\", \"P\", \"W\"), surface (\"Hard\", \"Clay\", \"Grass\"), winner_ht (179, 183, 163), winner_ioc (\"NED\", \"BEL\", \"UKR\") | rankings : ranking_points (3490, 743, 285), tours (19, 19, 39), ranking (9, 1337, 1194), player_id (210604, 210163, 214503), ranking_date (20051121, 19921026, 20041108)",
        "schema_without_content": "players : first_name , hand , country_code , player_id , birth_date  | players_last_name : last_name , player_id  | matches : loser_age , minutes , score  6-3\", loser_entry , winner_age , winner_rank_points , tourney_name , tourney_id , winner_id , tourney_date , loser_hand , winner_rank , draw_size , round , winner_hand , match_num , loser_ht , loser_name , loser_ioc , loser_id , winner_seed , best_of , year , winner_name , loser_rank_points , loser_seed , winner_entry , loser_rank , tourney_level , surface , winner_ht , winner_ioc  | rankings : ranking_points , tours , ranking , player_id , ranking_date ",
        "chatgpt_out": [
            "select first_name || ' ' || t2.last_name as full_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date",
            "select t2.last_name || ', ' || first_name as full_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date",
            "select first_name || ' ' || t2.last_name as full_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date asc",
            "select t2.last_name || ', ' || first_name as full_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date asc",
            "select first_name || ' ' || t2.last_name as full_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date asc nulls first"
        ],
        "query1": "select first_name, last_name from players order by birth_date",
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id order by t1.birth_date"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "order",
            "by",
            "birth_date"
        ],
        "question": "What are the full names of all players, sorted by birth date?",
        "question_toks": [
            "What",
            "are",
            "the",
            "full",
            "names",
            "of",
            "all",
            "players",
            ",",
            "sorted",
            "by",
            "birth",
            "date",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players order by birth_date",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : player_id (220268, 216098, 220208), birth_date (19860317, 20011119, 19710426), last_name (\"Kratzer\", \"Alastruez Ruiz\", \"Velarde Magana\"), hand (\"U\", \"R\", \"\"), country_code (\"CHI\", \"ECU\", \"PAK\") | players_first_name : player_id (213022, 213738, 220353), first_name (\"Silviya\", \"Yen Ling\", \"Ferny\") | matches : score (\"6-2 5-7 6-4\", \"2-6 6-4 6-1\", \"3-6 6-3 6-4\"), year (2013, 2016, 2017), loser_ht (183, 185, 164), draw_size (64, 32, 12), loser_ioc (\"BEL\", \"HUN\", \"AUS\"), loser_id (201616, 201594, 201427), winner_age (29.2210814511, 26.8829568789, 25.6700889802), loser_name (\"Venus Williams\", \"Timea Babos\", \"Yanina Wickmayer\"), winner_hand (\"R\", \"L\"), winner_ioc (\"RUS\", \"BEL\", \"RUS\"), winner_seed (9, 2, 16), loser_entry (\"\"), round (\"R32\", \"F\", \"BR\"), loser_hand (\"R\", \"L\"), loser_seed (18, 7, 24), winner_name (\"Caroline Wozniacki\", \"Kristina Mladenovic\", \"Lesia Tsurenko\"), tourney_date (20161003, 20170410, 20160829), winner_id (201596, 201662, 201535), loser_rank (56, 19, 34), best_of (3), winner_rank (17, 45, 8), winner_entry (\"\"), winner_rank_points (6500, 5740, 5310), winner_ht (163, 168, 185), tourney_id (\"2016-560\", \"2017-M006\", \"2017-560\"), match_num (209, 282, 214), surface (\"Hard\", \"Clay\", \"Grass\"), minutes (67, 128, 136), tourney_name (\"St. Petersburg\", \"Miami\", \"Dubai\"), loser_rank_points (3020, 1936, 8730), loser_age (28.7036276523, 36.908966461300004, 28.709103353899998), tourney_level (\"G\", \"G\", \"P\") | rankings : ranking_date (19970922, 20060320, 20120123), tours (41, 36, 0), ranking_points (1615, 4397, 1798), player_id (204335, 203470, 211330), ranking (881, 272, 434)",
        "schema_without_content": "players : player_id , birth_date , last_name , hand , country_code  | players_first_name : player_id , first_name  | matches : score , year , loser_ht , draw_size , loser_ioc , loser_id , winner_age , loser_name , winner_hand , winner_ioc , winner_seed , loser_entry , round , loser_hand , loser_seed , winner_name , tourney_date , winner_id , loser_rank , best_of , winner_rank , winner_entry , winner_rank_points , winner_ht , tourney_id , match_num , surface , minutes , tourney_name , loser_rank_points , loser_age , tourney_level  | rankings : ranking_date , tours , ranking_points , player_id , ranking ",
        "chatgpt_out": [
            "select concat(t1.first_name, ' ', t2.last_name) as full_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id order by t2.birth_date",
            "select concat(t2.last_name, ' ', t1.first_name) as full_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id order by t2.birth_date",
            "select t1.first_name, t2.last_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id order by t2.birth_date",
            "select t2.last_name, t1.first_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id order by t2.birth_date",
            "select concat(t1.first_name, ' ', t2.last_name) as full_name from players_first_name as t1, players as t2 where t1.player_id = t2.player_id order by t2.birth_date"
        ],
        "query1": "select first_name, last_name from players order by birth_date",
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id order by t1.birth_date"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "hand",
            "=",
            "'L",
            "'",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "value",
            "order",
            "by",
            "birth_date"
        ],
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "question_toks": [
            "List",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "players",
            "who",
            "are",
            "left",
            "/",
            "L",
            "hand",
            "in",
            "the",
            "order",
            "of",
            "birth",
            "date",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "split_map": {
            "players": "last_name"
        },
        "schema_with_content": "players : first_name (\"Thamara\", \"Aiko\", \"Jimena Paula\"), hand (\"\", \"R\", \"\"), country_code (\"BDI\", \"SLO\", \"ISL\"), birth_date (19610706, 19771201, 19731114), player_id (219273, 215069, 216205) | players_last_name : player_id (200614, 211823, 211994), last_name (\"Garrigues Melendez\", \"Sapogova\", \"Vlak\") | matches : loser_rank_points (1912, 3715, 3116), winner_ht (174, 185, 181), tourney_name (\"Olympics\", \"Montreal\", \"Moscow\"), draw_size (8, 64, 32), score (\"7-6(2) 6-3\", \"6-1 6-7(2) 6-3\", \"5-7 6-4 6-1\"), loser_ht (177, 172, 179), winner_age (21.5222450376, 27.635865845300003, 24.922655715300003), tourney_id (\"2016-1051\", \"2016-1074\", \"2016-540\"), loser_rank (16, 47, 24), loser_ioc (\"JPN\", \"UKR\", \"AUS\"), winner_seed (11, 2, 21), loser_hand (\"R\", \"L\"), round (\"QF\", \"R16\", \"R32\"), minutes (101, 108, 134), winner_hand (\"R\", \"L\"), loser_entry (\"\"), winner_rank (35, 42, 30), loser_name (\"Sara Errani\", \"Caroline Wozniacki\", \"Simona Halep\"), loser_id (201496, 201474, 201366), best_of (3), winner_rank_points (5196, 5205, 1749), loser_age (25.273100616, 24.750171115700002, 31.6906228611), match_num (226, 220, 206), surface (\"Hard\", \"Clay\", \"Grass\"), year (2013, 2016, 2017), tourney_level (\"P\", \"G\", \"G\"), winner_entry (\"\"), loser_seed (24, 7, 28), winner_id (201593, 201521, 201474), winner_name (\"Garbine Muguruza\", \"Roberta Vinci\", \"Jelena Jankovic\"), tourney_date (20170306, 20170130, 20160321), winner_ioc (\"GER\", \"UKR\", \"ITA\") | rankings : ranking (959, 1206, 1169), tours (39, 36, 2), ranking_points (2801, 4470, 4510), player_id (205907, 206070, 201583), ranking_date (19971013, 19921109, 19900507)",
        "schema_without_content": "players : first_name , hand , country_code , birth_date , player_id  | players_last_name : player_id , last_name  | matches : loser_rank_points , winner_ht , tourney_name , draw_size , score  6-3\", \"6-1 6-7 6-3\", \"5-7 6-4 6-1\", loser_ht , winner_age , tourney_id , loser_rank , loser_ioc , winner_seed , loser_hand , round , minutes , winner_hand , loser_entry , winner_rank , loser_name , loser_id , best_of , winner_rank_points , loser_age , match_num , surface , year , tourney_level , winner_entry , loser_seed , winner_id , winner_name , tourney_date , winner_ioc  | rankings : ranking , tours , ranking_points , player_id , ranking_date ",
        "chatgpt_out": [
            "select first_name, last_name from players join players_last_name using(player_id) where hand = 'L' order by birth_date",
            "select first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date",
            "select t1.first_name, last_name from players as t1 join players_last_name using(player_id) where hand = 'L' order by t1.birth_date",
            "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date",
            "select first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where hand = 'L' order by birth_date"
        ],
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "hand",
            "=",
            "'L",
            "'",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "value",
            "order",
            "by",
            "birth_date"
        ],
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "question_toks": [
            "List",
            "the",
            "first",
            "and",
            "last",
            "name",
            "of",
            "all",
            "players",
            "who",
            "are",
            "left",
            "/",
            "L",
            "hand",
            "in",
            "the",
            "order",
            "of",
            "birth",
            "date",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : birth_date (19890415, 19910623, 19930121), country_code (\"INA\", \"CHI\", \"CMR\"), player_id (218777, 203530, 217595), hand (\"L\", \"\", \"R\"), last_name (\"El Kamash\", \"Tago\", \"Kinney\") | players_first_name : player_id (208217, 211446, 213288), first_name (\"Roxane\", \"Stanislava\", \"Aline\") | matches : loser_rank_points (5205, 991, 3175), winner_ioc (\"BLR\", \"CHN\", \"UKR\"), tourney_level (\"P\", \"W\", \"P\"), winner_id (201496, 202469, 201493), loser_name (\"Roberta Vinci\", \"Kristina Mladenovic\", \"Lucie Safarova\"), loser_ioc (\"TPE\", \"USA\", \"RUS\"), loser_entry (\"\"), year (2013, 2016, 2017), tourney_date (20170626, 20170410, 20170130), score (\"6-7(7) 6-2 6-4\", \"6-4 6-2\", \"2-6 6-3 1-0 RET\"), winner_hand (\"R\", \"L\"), draw_size (128, 32, 32), minutes (116, 131, 93), loser_age (22.0479123888, 36.1040383299, 25.1882272416), match_num (152, 163, 282), tourney_id (\"2016-0703\", \"2017-M016\", \"2016-580\"), loser_rank (22, 20, 4), loser_id (201512, 201616, 201693), winner_entry (\"\"), winner_age (22.4421629021, 28.0355920602, 34.3107460643), loser_ht (176, 159, 169), winner_name (\"Elena Vesnina\", \"Roberta Vinci\", \"Yanina Wickmayer\"), winner_ht (162, 163, 168), loser_hand (\"R\", \"L\"), best_of (3), surface (\"Hard\", \"Clay\", \"Grass\"), tourney_name (\"Beijing\", \"Montreal\", \"Us Open\"), loser_seed (8, 25, 7), winner_rank_points (1800, 7676, 5330), winner_rank (35, 17, 48), winner_seed (12, 28, 4), round (\"QF\", \"SF\", \"QF\") | rankings : ranking (134, 1063, 242), ranking_points (1346, 267, 1422), player_id (215388, 213959, 202477), ranking_date (19910114, 20070402, 20010416), tours (11, 6, 14)",
        "schema_without_content": "players : birth_date , country_code , player_id , hand , last_name  | players_first_name : player_id , first_name  | matches : loser_rank_points , winner_ioc , tourney_level , winner_id , loser_name , loser_ioc , loser_entry , year , tourney_date , score  6-2 6-4\", \"6-4 6-2\", \"2-6 6-3 1-0 RET\", winner_hand , draw_size , minutes , loser_age , match_num , tourney_id , loser_rank , loser_id , winner_entry , winner_age , loser_ht , winner_name , winner_ht , loser_hand , best_of , surface , tourney_name , loser_seed , winner_rank_points , winner_rank , winner_seed , round  | rankings : ranking , ranking_points , player_id , ranking_date , tours ",
        "chatgpt_out": [
            "select t1.first_name, t1.last_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t2.birth_date",
            "select t1.last_name, t1.first_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t2.birth_date",
            "select t2.first_name, t2.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date",
            "select t2.last_name, t2.first_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date",
            "select first_name, last_name from players_first_name where player_id in (select player_id from players where hand = 'L') order by birth_date"
        ],
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "hand",
            "=",
            "'L",
            "'",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "value",
            "order",
            "by",
            "birth_date"
        ],
        "question": "What are the full names of all left handed players, in order of birth date?",
        "question_toks": [
            "What",
            "are",
            "the",
            "full",
            "names",
            "of",
            "all",
            "left",
            "handed",
            "players",
            ",",
            "in",
            "order",
            "of",
            "birth",
            "date",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "split_map": {
            "players": "last_name"
        },
        "schema_with_content": "players : player_id (200100, 211863, 204605), first_name (\"Ahsha\", \"Zvezdelina\", \"Yu Min\"), hand (\"U\", \"U\", \"L\"), country_code (\"SAM\", \"ESP\", \"NGR\"), birth_date (19820621, 19840207, 19840516) | players_last_name : last_name (\"Sergeeva\", \"Lo\", \"Mihai\"), player_id (206893, 204662, 204177) | matches : best_of (3), match_num (215, 280, 294), winner_entry (\"\"), loser_age (26.869267624899997, 26.135523614, 33.4893908282), loser_ioc (\"SVK\", \"SRB\", \"RUS\"), winner_seed (24, 15, 10), minutes (129, 134, 51), loser_entry (\"\"), loser_hand (\"R\", \"L\"), tourney_date (20170619, 20160725, 20161024), winner_ioc (\"SRB\", \"ITA\", \"POL\"), winner_id (201535, 200033, 201595), tourney_name (\"Cincinnati\", \"St. Petersburg\", \"WTA Championships\"), winner_hand (\"R\", \"L\"), winner_name (\"Alize Cornet\", \"Irina Camelia Begu\", \"Simona Halep\"), score (\"6-2 6-2\", \"4-6 7-6(2) 6-3\", \"4-6 7-5 6-2\"), winner_ht (185, 181, 179), loser_id (201594, 201594, 201320), loser_seed (8, 20, 13), winner_rank (9, 7, 25), draw_size (8, 8, 8), tourney_id (\"2016-M024\", \"2016-M006\", \"2016-1067\"), round (\"RR\", \"BR\", \"F\"), loser_name (\"Yanina Wickmayer\", \"Dominika Cibulkova\", \"Stefanie Voegele\"), winner_rank_points (3120, 1290, 3390), loser_rank_points (1700, 3637, 3285), winner_age (24.4435318275, 22.058863791900002, 26.9596167009), loser_rank (44, 47, 27), tourney_level (\"W\", \"G\", \"G\"), loser_ht (169, 185, 164), year (2013, 2016, 2017), surface (\"Hard\", \"Clay\", \"Grass\") | rankings : ranking_points (1017, 5981, 482), player_id (210860, 201441, 202616), ranking_date (20100830, 19900730, 19981214), tours (2, 9, 16), ranking (628, 1250, 1233)",
        "schema_without_content": "players : player_id , first_name , hand , country_code , birth_date  | players_last_name : last_name , player_id  | matches : best_of , match_num , winner_entry , loser_age , loser_ioc , winner_seed , minutes , loser_entry , loser_hand , tourney_date , winner_ioc , winner_id , tourney_name , winner_hand , winner_name , score  6-3\", \"4-6 7-5 6-2\", winner_ht , loser_id , loser_seed , winner_rank , draw_size , tourney_id , round , loser_name , winner_rank_points , loser_rank_points , winner_age , loser_rank , tourney_level , loser_ht , year , surface  | rankings : ranking_points , player_id , ranking_date , tours , ranking ",
        "chatgpt_out": [
            "select first_name || ' ' || t2.last_name as full_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date",
            "select t2.first_name || ' ' || t1.last_name as full_name from players_last_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t2.birth_date",
            "select first_name || ' ' || last_name as full_name from players natural join players_last_name where hand = 'L' order by birth_date",
            "select t2.first_name || ' ' || t1.last_name as full_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date",
            "select first_name || ' ' || t2.last_name as full_name from players_last_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t2.birth_date"
        ],
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "query2": "select t1.first_name, t2.last_name from players as t1 join players_last_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
    },
    {
        "db_id": "wta_1",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            "FROM",
            "players",
            "WHERE",
            "hand",
            "=",
            "'L",
            "'",
            "ORDER",
            "BY",
            "birth_date"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            "from",
            "players",
            "where",
            "hand",
            "=",
            "value",
            "order",
            "by",
            "birth_date"
        ],
        "question": "What are the full names of all left handed players, in order of birth date?",
        "question_toks": [
            "What",
            "are",
            "the",
            "full",
            "names",
            "of",
            "all",
            "left",
            "handed",
            "players",
            ",",
            "in",
            "order",
            "of",
            "birth",
            "date",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            5,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"L\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "players": "player_id"
        },
        "orig_query": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "split_map": {
            "players": "first_name"
        },
        "schema_with_content": "players : birth_date (19811115, 19950331, 19830125), country_code (\"VIE\", \"BEN\", \"POR\"), player_id (212092, 205324, 207973), hand (\"U\", \"\", \"\"), last_name (\"Sleeth\", \"Gergelyova\", \"Selenius\") | players_first_name : player_id (219513, 206765, 215828), first_name (\"Yu Hsien\", \"Kate\", \"Beyda\") | matches : year (2013, 2016, 2017), loser_age (24.7994524298, 22.3080082136, 24.892539356599997), loser_ht (157, 164, 181), tourney_date (20160606, 20170612, 20170130), score (\"6-3 7-6(5)\", \"7-6(1) 0-0 RET\", \"6-3 5-7 9-7\"), loser_name (\"Karolina Pliskova\", \"Alize Cornet\", \"Dominika Cibulkova\"), match_num (254, 289, 211), minutes (61, 129, 66), winner_id (201506, 201585, 201540), winner_entry (\"\"), winner_rank_points (2585, 1965, 3625), draw_size (64, 64, 12), tourney_level (\"G\", \"W\", \"P\"), round (\"RR\", \"F\", \"BR\"), loser_id (201325, 201465, 201521), loser_rank (9, 33, 36), winner_age (24.9993155373, 31.9972621492, 25.6317590691), loser_entry (\"\"), winner_ioc (\"HUN\", \"USA\", \"ROU\"), winner_rank (35, 7, 19), best_of (3), winner_name (\"Anastasia Pavlyuchenkova\", \"Samantha Stosur\", \"Simona Halep\"), winner_seed (1, 30, 6), tourney_name (\"Zhuhai\", \"Roland Garros\", \"Toronto\"), loser_ioc (\"BEL\", \"BLR\", \"AUS\"), tourney_id (\"2016-0300\", \"2017-1097\", \"2016-1048\"), winner_ht (181, 178, 176), winner_hand (\"R\", \"L\"), loser_seed (7, 10, 4), surface (\"Hard\", \"Clay\", \"Grass\"), loser_hand (\"R\", \"L\"), loser_rank_points (1951, 1994, 2843) | rankings : ranking (267, 772, 568), ranking_points (1694, 5126, 848), tours (27, 32, 41), ranking_date (20110228, 19880404, 20131014), player_id (206289, 213841, 202666)",
        "schema_without_content": "players : birth_date , country_code , player_id , hand , last_name  | players_first_name : player_id , first_name  | matches : year , loser_age , loser_ht , tourney_date , score \", \"7-6 0-0 RET\", \"6-3 5-7 9-7\", loser_name , match_num , minutes , winner_id , winner_entry , winner_rank_points , draw_size , tourney_level , round , loser_id , loser_rank , winner_age , loser_entry , winner_ioc , winner_rank , best_of , winner_name , winner_seed , tourney_name , loser_ioc , tourney_id , winner_ht , winner_hand , loser_seed , surface , loser_hand , loser_rank_points  | rankings : ranking , ranking_points , tours , ranking_date , player_id ",
        "chatgpt_out": [
            "select t1.first_name || ' ' || t1.last_name as full_name from players as t1 where t1.hand = 'L' order by t1.birth_date",
            "select t1.last_name || ' ' || t1.first_name as full_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t2.birth_date",
            "select t1.first_name || ' ' || t1.last_name as full_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t2.birth_date",
            "select t1.last_name || ' ' || t1.first_name as full_name from players_first_name as t1 join players as t2 on t1.player_id = t2.player_id where t2.hand = 'L' order by t1.birth_date",
            "select t1.first_name || ' ' || t1.last_name as full_name from players as t1 where t1.hand = 'L' order by t1.birth_date"
        ],
        "query1": "select first_name, last_name from players where hand = 'L' order by birth_date",
        "query2": "select t2.first_name, t1.last_name from players as t1 join players_first_name as t2 on t1.player_id = t2.player_id where t1.hand = 'L' order by t1.birth_date"
    },
    {
        "db_id": "battle_death",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "tonnage",
            "FROM",
            "ship",
            "ORDER",
            "BY",
            "name",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "tonnage",
            "from",
            "ship",
            "order",
            "by",
            "name",
            "desc"
        ],
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "question_toks": [
            "List",
            "the",
            "name",
            "and",
            "tonnage",
            "ordered",
            "by",
            "in",
            "descending",
            "alphaetical",
            "order",
            "for",
            "the",
            "names",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "ship": "id"
        },
        "orig_query": "select name, tonnage from ship order by name desc",
        "split_map": {
            "ship": "name"
        },
        "schema_with_content": "battle : name (\"Battle of Rusion\", \"Battle of Messinopolis\", \"Battle of Rodosto\"), id (1, 3, 1), latin_commander (\"Boniface of Montferrat\", \"Baldwin I\", \"Thierry de Termond\"), date (\"31 June 1208\", \"1235\", \"14 April 1205\"), bulgarian_commander (\"Boril\", \"Kaloyan\", \"Boril\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\") | ship : ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), id (7, 7, 7), disposition_of_ship (\"Scuttled\", \"Scuttled\", \"Captured\"), lost_in_battle (5, 5, 6), tonnage (\"t\", \"391\", \"225\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\") | ship_name : id (5, 3, 2), name (\"Bacchus\", \"Bacchus\", \"Mary\") | death : note (\"Kanker, Chhattisgarh\", \"Kanker, Chhattisgarh\", \"East Champaran, Bihar\"), injured (0, 9, 5), caused_by_ship_id (2, 4, 5), killed (29, 3, 0), id (5, 11, 1)",
        "schema_without_content": "battle : name , id , latin_commander , date , bulgarian_commander , result  | ship : ship_type , id , disposition_of_ship , lost_in_battle , tonnage , location  | ship_name : id , name  | death : note , injured , caused_by_ship_id , killed , id ",
        "chatgpt_out": [
            "select name, tonnage from ship order by name desc",
            "select tonnage, name from ship order by name desc",
            "select name, tonnage from ship order by name",
            "select tonnage, name from ship order by name",
            "select s.name, s.tonnage from ship as s join ship_name as sn on s.id = sn.id order by sn.name desc"
        ],
        "query1": "select name, tonnage from ship order by name desc",
        "query2": "select t2.name, t1.tonnage from ship as t1 join ship_name as t2 on t1.id = t2.id order by t2.name desc"
    },
    {
        "db_id": "battle_death",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "tonnage",
            "FROM",
            "ship",
            "ORDER",
            "BY",
            "name",
            "DESC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "tonnage",
            "from",
            "ship",
            "order",
            "by",
            "name",
            "desc"
        ],
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "question_toks": [
            "List",
            "the",
            "name",
            "and",
            "tonnage",
            "ordered",
            "by",
            "in",
            "descending",
            "alphaetical",
            "order",
            "for",
            "the",
            "names",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "ship": "id"
        },
        "orig_query": "select name, tonnage from ship order by name desc",
        "split_map": {
            "ship": "tonnage"
        },
        "schema_with_content": "battle : name (\"Battle of Rodosto\", \"Battle of Rusion\", \"Battle of Rodosto\"), latin_commander (\"Unknown\", \"Henry I\", \"Henry I\"), date (\"June 1205\", \"31 June 1208\", \"February 1206\"), bulgarian_commander (\"Unknown\", \"Kaloyan\", \"Ivan Asen II\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), id (2, 2, 4) | ship : lost_in_battle (8, 7, 5), id (1, 3, 7), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"HMS Atalanta\", \"Three Brothers\", \"HMS Avon\"), disposition_of_ship (\"Wrecked\", \"Captured\", \"Sank\") | ship_tonnage : id (3, 3, 1), tonnage (\"t\", \"391\", \"225\") | death : id (10, 9, 12), caused_by_ship_id (3, 6, 3), killed (4, 29, 4), note (\"Sundargarh, Odisha\", \"East Champaran, Bihar\", \"WestMidnapore, West Bengal\"), injured (0, 9, 5)",
        "schema_without_content": "battle : name , latin_commander , date , bulgarian_commander , result , id  | ship : lost_in_battle , id , location , ship_type , name , disposition_of_ship  | ship_tonnage : id , tonnage  | death : id , caused_by_ship_id , killed , note , injured ",
        "chatgpt_out": [
            "select name, tonnage from ship_tonnage join ship on ship_tonnage.id = ship.id order by name desc",
            "select name, tonnage from ship join ship_tonnage on ship.id = ship_tonnage.id order by name desc",
            "select name, tonnage from ship_tonnage as t1 join ship as t2 on t1.id = t2.id order by name desc",
            "select name, tonnage from ship as t1 join ship_tonnage as t2 on t1.id = t2.id order by name desc",
            "select t1.name, t2.tonnage from ship as t1 join ship_tonnage as t2 on t1.id = t2.id order by t1.name desc"
        ],
        "query1": "select name, tonnage from ship order by name desc",
        "query2": "select t1.name, t2.tonnage from ship as t1 join ship_tonnage as t2 on t1.id = t2.id order by t1.name desc"
    },
    {
        "db_id": "battle_death",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "date",
            "FROM",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "date",
            "from",
            "battle"
        ],
        "question": "List the name, date and result of each battle.",
        "question_toks": [
            "List",
            "the",
            "name",
            ",",
            "date",
            "and",
            "result",
            "of",
            "each",
            "battle",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "battle": "id"
        },
        "orig_query": "select name, date from battle",
        "split_map": {
            "battle": "name"
        },
        "schema_with_content": "battle : id (6, 5, 7), bulgarian_commander (\"Boril\", \"Kaloyan\", \"Unknown\"), latin_commander (\"Boniface of Montferrat\", \"Henry I\", \"Unknown\"), date (\"31 June 1208\", \"1235\", \"4 September 1207\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\") | battle_name : id (3, 6, 3), name (\"Battle of Boruy\", \"Battle of Boruy\", \"Battle of Serres\") | ship : name (\"HMS Avon\", \"Lettice\", \"Lettice\"), lost_in_battle (5, 5, 5), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), disposition_of_ship (\"Captured\", \"Captured\", \"Sank\"), id (4, 5, 4), tonnage (\"t\", \"391\", \"225\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\") | death : caused_by_ship_id (2, 3, 1), injured (0, 9, 5), note (\"Gajapati, Odisha\", \"Sundargarh, Odisha\", \"Sundargarh, Odisha\"), id (3, 9, 11), killed (0, 25, 29)",
        "schema_without_content": "battle : id , bulgarian_commander , latin_commander , date , result  | battle_name : id , name  | ship : name , lost_in_battle , ship_type , disposition_of_ship , id , tonnage , location  | death : caused_by_ship_id , injured , note , id , killed ",
        "chatgpt_out": [
            "select name, date, result from battle_name join battle on battle_name.id = battle.id",
            "select date, result, name from battle join battle_name on battle.id = battle_name.id",
            "select b.name, b.date, b.result from battle b",
            "select name, result, date from battle",
            "select date, name, result from battle_name join battle on battle_name.id = battle.id"
        ],
        "query1": "select name, date from battle",
        "query2": "select t2.name, t1.date from battle as t1 join battle_name as t2 on t1.id = t2.id"
    },
    {
        "db_id": "battle_death",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "date",
            "FROM",
            "battle"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "date",
            "from",
            "battle"
        ],
        "question": "List the name, date and result of each battle.",
        "question_toks": [
            "List",
            "the",
            "name",
            ",",
            "date",
            "and",
            "result",
            "of",
            "each",
            "battle",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "battle": "id"
        },
        "orig_query": "select name, date from battle",
        "split_map": {
            "battle": "date"
        },
        "schema_with_content": "battle : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), latin_commander (\"John of Brienne\", \"Henry I\", \"Baldwin I\"), id (8, 2, 2), bulgarian_commander (\"Boril\", \"Ivan Asen II\", \"Ivan Asen II\"), name (\"Siege of Constantinople\", \"Siege of Constantinople\", \"Battle of Adrianople\") | battle_date : id (2, 7, 8), date (\"February 1206\", \"14 April 1205\", \"1235\") | ship : ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), disposition_of_ship (\"Captured\", \"Captured\", \"Sank\"), lost_in_battle (8, 6, 8), id (6, 3, 7), tonnage (\"t\", \"391\", \"225\"), name (\"Bon Accord\", \"Bacchus\", \"Bacchus\") | death : note (\"Kanker, Chhattisgarh\", \"Bokaro, Jharkhand\", \"Kanker, Chhattisgarh\"), injured (0, 9, 5), caused_by_ship_id (4, 2, 1), killed (29, 4, 29), id (13, 5, 10)",
        "schema_without_content": "battle : result , latin_commander , id , bulgarian_commander , name  | battle_date : id , date  | ship : ship_type , location , disposition_of_ship , lost_in_battle , id , tonnage , name  | death : note , injured , caused_by_ship_id , killed , id ",
        "chatgpt_out": [
            "select battle.name, battle_date.date, battle.result from battle join battle_date on battle.id = battle_date.id",
            "select battle.name, battle_date.date, battle.result from battle_date join battle on battle.id = battle_date.id",
            "select b.name, bd.date, b.result from battle as b inner join battle_date as bd on b.id = bd.id",
            "select b.name, bd.date, b.result from battle_date as bd inner join battle as b on bd.id = b.id",
            "select name, result, date from battle join battle_date using (id)"
        ],
        "query1": "select name, date from battle",
        "query2": "select t1.name, t2.date from battle as t1 join battle_date as t2 on t1.id = t2.id"
    },
    {
        "db_id": "battle_death",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "RESULT",
            "FROM",
            "battle",
            "WHERE",
            "bulgarian_commander",
            "!",
            "=",
            "'Boril",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle",
            "where",
            "bulgarian_commander",
            "!",
            "=",
            "value"
        ],
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            "and",
            "results",
            "of",
            "the",
            "battles",
            "when",
            "the",
            "bulgarian",
            "commander",
            "is",
            "not",
            "'Boril",
            "'"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Boril\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "battle": "id"
        },
        "orig_query": "select name, result from battle where bulgarian_commander != 'Boril'",
        "split_map": {
            "battle": "name"
        },
        "schema_with_content": "battle : bulgarian_commander (\"Unknown\", \"Ivan Asen II\", \"Kaloyan\"), id (3, 4, 2), date (\"February 1206\", \"4 September 1207\", \"June 1205\"), result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), latin_commander (\"John of Brienne\", \"Thierry de Termond\", \"Boniface of Montferrat\") | battle_name : id (7, 1, 5), name (\"Battle of Serres\", \"Battle of Adrianople\", \"Battle of Rodosto\") | ship : lost_in_battle (8, 6, 5), id (1, 5, 4), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), name (\"Three Brothers\", \"HMS Atalanta\", \"Three Brothers\"), disposition_of_ship (\"Captured\", \"Sank\", \"Wrecked\"), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), tonnage (\"t\", \"391\", \"225\") | death : id (5, 9, 12), injured (0, 9, 5), killed (14, 0, 0), note (\"Bastar, Chattisgarh\", \"Bokaro, Jharkhand\", \"Bokaro, Jharkhand\"), caused_by_ship_id (2, 6, 5)",
        "schema_without_content": "battle : bulgarian_commander , id , date , result , latin_commander  | battle_name : id , name  | ship : lost_in_battle , id , ship_type , name , disposition_of_ship , location , tonnage  | death : id , injured , killed , note , caused_by_ship_id ",
        "chatgpt_out": [
            "select name, result from battle where bulgarian_commander != 'Boril'",
            "select result, name from battle where bulgarian_commander != 'Boril'",
            "select t1.name, t1.result from battle as t1 left join battle_death as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'",
            "select t1.result, t1.name from battle as t1 left join battle_death as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'",
            "select t2.name, t2.result from battle_death as t1 join battle as t2 on t1.id = t2.id where t2.bulgarian_commander != 'Boril'"
        ],
        "query1": "select name, result from battle where bulgarian_commander != 'Boril'",
        "query2": "select t2.name, t1.result from battle as t1 join battle_name as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'"
    },
    {
        "db_id": "battle_death",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "RESULT",
            "FROM",
            "battle",
            "WHERE",
            "bulgarian_commander",
            "!",
            "=",
            "'Boril",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "result",
            "from",
            "battle",
            "where",
            "bulgarian_commander",
            "!",
            "=",
            "value"
        ],
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            "and",
            "results",
            "of",
            "the",
            "battles",
            "when",
            "the",
            "bulgarian",
            "commander",
            "is",
            "not",
            "'Boril",
            "'"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"Boril\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "battle": "id"
        },
        "orig_query": "select name, result from battle where bulgarian_commander != 'Boril'",
        "split_map": {
            "battle": "result"
        },
        "schema_with_content": "battle : latin_commander (\"Boniface of Montferrat\", \"John of Brienne\", \"Unknown\"), bulgarian_commander (\"Unknown\", \"Kaloyan\", \"Kaloyan\"), date (\"14 April 1205\", \"31 January 1206\", \"February 1206\"), name (\"Battle of Boruy\", \"Battle of Adrianople\", \"Battle of Messinopolis\"), id (8, 6, 7) | battle_result : result (\"Bulgarian victory\", \"Latin victory\", \"Two Year Truce\"), id (4, 3, 3) | ship : tonnage (\"t\", \"391\", \"225\"), id (2, 1, 6), ship_type (\"Brig\", \"18-gun Brig\", \"8 gun Brig\"), disposition_of_ship (\"Sank\", \"Sank\", \"Sank\"), lost_in_battle (4, 6, 8), location (\"English Channel\", \"SW Approaches\", \"Mid-Atlantic\"), name (\"Lettice\", \"Bacchus\", \"Bacchus\") | death : id (5, 10, 1), injured (0, 9, 5), killed (8, 3, 3), caused_by_ship_id (3, 4, 5), note (\"Dantewada, Chhattisgarh\", \"Bokaro, Jharkhand\", \"Kanker, Chhattisgarh\")",
        "schema_without_content": "battle : latin_commander , bulgarian_commander , date , name , id  | battle_result : result , id  | ship : tonnage , id , ship_type , disposition_of_ship , lost_in_battle , location , name  | death : id , injured , killed , caused_by_ship_id , note ",
        "chatgpt_out": [
            "select name, result from battle join battle_result on battle.id = battle_result.id where bulgarian_commander <> 'Boril'",
            "select name, result from battle_result join battle on battle.id = battle_result.id where bulgarian_commander <> 'Boril'",
            "select t1.name, t2.result from battle as t1 join battle_result as t2 on t1.id = t2.id where t1.bulgarian_commander <> 'Boril'",
            "select t1.name, t2.result from battle_result as t2 join battle as t1 on t1.id = t2.id where t1.bulgarian_commander <> 'Boril'",
            "select name, result from battle_result where id in (select id from battle where bulgarian_commander <> 'Boril')"
        ],
        "query1": "select name, result from battle where bulgarian_commander != 'Boril'",
        "query2": "select t1.name, t2.result from battle as t1 join battle_result as t2 on t1.id = t2.id where t1.bulgarian_commander != 'Boril'"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "line_1",
            ",",
            "line_2",
            "FROM",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "what are all the addresses including line 1 and line 2?",
        "question_toks": [
            "what",
            "are",
            "all",
            "the",
            "addresses",
            "including",
            "line",
            "1",
            "and",
            "line",
            "2",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "addresses": "address_id"
        },
        "orig_query": "select line_1, line_2 from addresses",
        "split_map": {
            "addresses": "line_2"
        },
        "schema_with_content": "addresses : line_1 (\"16998 Mraz Lodge\", \"67942 Carlotta Ferry Apt. 686\", \"186 Evan Motorway Apt. 409\"), line_3 (None), country (\"Samoa\", \"Norfolk Island\", \"New Caledonia\"), zip_postcode (\"777\", \"777\", \"902\"), address_id (4, 14, 14), other_address_details (None), city (\"North Omer\", \"Mariliehaven\", \"Prohaskafort\"), state_province_county (\"Kansas\", \"Hawaii\", \"Virginia\") | addresses_line_2 : line_2 (\"Suite 865\", \"Suite 079\", \"Apt. 335\"), address_id (4, 4, 13) | courses : course_description (\"b\", \"c\", \"k\"), other_details (None), course_id (11, 11, 15), course_name (\"ds\", \"ai\", \"ai\") | departments : department_name (\"drama\", \"computer science\", \"computer science\"), department_id (9, 10, 5), department_description (\"doloribus\", \"nihil\", \"ea\"), other_details (None) | degree_programs : degree_program_id (14, 6, 15), degree_summary_description (\"aut\", \"et\", \"quam\"), other_details (None), department_id (8, 13, 3), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_name (\"a\", \"a\", \"b\"), course_id (1, 5, 6), other_details (None), section_description (\"qui\", \"facilis\", \"voluptatem\"), section_id (12, 14, 15) | semesters : other_details (None), semester_id (8, 7, 8), semester_description (\"o\", \"o\", \"c\"), semester_name (\"winter 2018\", \"spring 2019\", \"spring 2018\") | students : cell_mobile_number (\"(605)919-3594x3661\", \"(507)365-8405\", \"1-879-796-8987x164\"), date_first_registered (\"2004-12-24 12:36:46\", \"1989-05-24 23:31:29\", \"2018-03-13 09:56:22\"), permanent_address_id (15, 11, 3), other_student_details (\"facilis\", \"atque\", \"facilis\"), date_left (\"2007-08-02 04:12:58\", \"2007-11-28 12:50:21\", \"2007-03-31 09:53:19\"), ssn (\"494\", \"494\", \"156\"), email_address (\"johns.unique@example.net\", \"nya.lesch@example.net\", \"lhartmann@example.org\"), first_name (\"Deon\", \"Reva\", \"Jarvis\"), current_address_id (15, 9, 12), middle_name (\"Golda\", \"Mossie\", \"Neal\"), student_id (4, 9, 14), last_name (\"Gleichner\", \"Osinski\", \"Huel\") | student_enrolment : semester_id (1, 6, 13), degree_program_id (10, 11, 5), other_details (None), student_enrolment_id (12, 3, 11), student_id (5, 5, 4) | student_enrolment_courses : student_enrolment_id (8, 8, 4), course_id (14, 11, 13), student_course_id (70882679, 604750, 2) | transcripts : transcript_id (9, 4, 5), transcript_date (\"1985-04-29 01:20:20\", \"1985-08-21 09:32:39\", \"1988-04-30 01:19:47\"), other_details (None) | transcript_contents : student_course_id (45105806, 70882679, 96), transcript_id (11, 15, 8)",
        "schema_without_content": "addresses : line_1 , line_3 , country , zip_postcode , address_id , other_address_details , city , state_province_county  | addresses_line_2 : line_2 , address_id  | courses : course_description , other_details , course_id , course_name  | departments : department_name , department_id , department_description , other_details  | degree_programs : degree_program_id , degree_summary_description , other_details , department_id , degree_summary_name  | sections : section_name , course_id , other_details , section_description , section_id  | semesters : other_details , semester_id , semester_description , semester_name  | students : cell_mobile_number 919-3594x3661\", \"365-8405\", \"1-879-796-8987x164\", date_first_registered , permanent_address_id , other_student_details , date_left , ssn , email_address , first_name , current_address_id , middle_name , student_id , last_name  | student_enrolment : semester_id , degree_program_id , other_details , student_enrolment_id , student_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : transcript_id , transcript_date , other_details  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select line_1, line_2 from addresses_line_2 join addresses on addresses_line_2.address_id = addresses.address_id",
            "select line_1, addresses_line_2.line_2 from addresses join addresses_line_2 on addresses_line_2.address_id = addresses.address_id",
            "select line_1, line_2 from addresses left join addresses_line_2 on addresses.address_id = addresses_line_2.address_id",
            "select addresses_line_2.line_2, line_1 from addresses_line_2 join addresses on addresses_line_2.address_id = addresses.address_id",
            "select line_2, line_1 from addresses_line_2 join addresses on addresses_line_2.address_id = addresses.address_id"
        ],
        "query1": "select line_1, line_2 from addresses",
        "query2": "select t1.line_1, t2.line_2 from addresses as t1 join addresses_line_2 as t2 on t1.address_id = t2.address_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "line_1",
            ",",
            "line_2",
            "FROM",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "what are all the addresses including line 1 and line 2?",
        "question_toks": [
            "what",
            "are",
            "all",
            "the",
            "addresses",
            "including",
            "line",
            "1",
            "and",
            "line",
            "2",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "addresses": "address_id"
        },
        "orig_query": "select line_1, line_2 from addresses",
        "split_map": {
            "addresses": "line_1"
        },
        "schema_with_content": "addresses : state_province_county (\"Hawaii\", \"Florida\", \"Florida\"), line_3 (None), line_2 (\"Suite 703\", \"Apt. 370\", \"Apt. 388\"), other_address_details (None), country (\"Bermuda\", \"Gabon\", \"Angola\"), address_id (8, 5, 15), zip_postcode (\"386\", \"847\", \"590\"), city (\"South Palma\", \"Herzoghaven\", \"Lake Laishafurt\") | addresses_line_1 : address_id (9, 2, 12), line_1 (\"0144 Lamar Plaza Apt. 346\", \"67942 Carlotta Ferry Apt. 686\", \"0643 Muller Vista\") | courses : course_description (\"w\", \"v\", \"d\"), course_name (\"la\", \"os\", \"cal\"), other_details (None), course_id (14, 6, 2) | departments : department_description (\"ea\", \"in\", \"doloribus\"), department_name (\"computer science\", \"art\", \"drama\"), other_details (None), department_id (1, 6, 10) | degree_programs : department_id (13, 14, 2), degree_summary_description (\"architecto\", \"cumque\", \"aut\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (9, 11, 11), other_details (None) | sections : course_id (1, 1, 4), section_id (8, 4, 12), section_description (\"et\", \"doloremque\", \"qui\"), section_name (\"a\", \"a\", \"d\"), other_details (None) | semesters : semester_id (10, 8, 8), semester_name (\"spring 2010\", \"spring 2010\", \"spring 2018\"), semester_description (\"w\", \"m\", \"g\"), other_details (None) | students : email_address (\"johns.unique@example.net\", \"erwin.zboncak@example.com\", \"qo'kon@example.com\"), student_id (3, 6, 11), first_name (\"Jarvis\", \"Milton\", \"Helga\"), middle_name (\"Vaughn\", \"Cleve\", \"Judd\"), ssn (\"3\", \"156\", \"43\"), cell_mobile_number (\"03174364122\", \"(605)919-3594x3661\", \"(096)889-8954x524\"), date_first_registered (\"2014-03-28 05:48:23\", \"1971-02-05 07:28:23\", \"1997-03-20 16:47:25\"), permanent_address_id (14, 8, 9), last_name (\"Balistreri\", \"Osinski\", \"Rogahn\"), date_left (\"2016-04-09 12:27:04\", \"2007-08-02 04:12:58\", \"2014-05-30 23:32:02\"), other_student_details (\"omnis\", \"non\", \"autem\"), current_address_id (14, 2, 12) | student_enrolment : other_details (None), degree_program_id (10, 9, 8), student_enrolment_id (4, 1, 10), semester_id (4, 4, 1), student_id (1, 14, 1) | student_enrolment_courses : course_id (2, 12, 11), student_enrolment_id (10, 4, 13), student_course_id (9860, 83814225, 45105806) | transcripts : transcript_date (\"1990-03-05 11:59:41\", \"1986-07-12 07:27:29\", \"1984-01-18 23:07:07\"), transcript_id (7, 9, 15), other_details (None) | transcript_contents : transcript_id (9, 8, 4), student_course_id (7, 8, 2)",
        "schema_without_content": "addresses : state_province_county , line_3 , line_2 , other_address_details , country , address_id , zip_postcode , city  | addresses_line_1 : address_id , line_1  | courses : course_description , course_name , other_details , course_id  | departments : department_description , department_name , other_details , department_id  | degree_programs : department_id , degree_summary_description , degree_summary_name , degree_program_id , other_details  | sections : course_id , section_id , section_description , section_name , other_details  | semesters : semester_id , semester_name , semester_description , other_details  | students : email_address , student_id , first_name , middle_name , ssn , cell_mobile_number 919-3594x3661\", \"889-8954x524\", date_first_registered , permanent_address_id , last_name , date_left , other_student_details , current_address_id  | student_enrolment : other_details , degree_program_id , student_enrolment_id , semester_id , student_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select * from addresses_line_1 join addresses on addresses_line_1.address_id = addresses.address_id",
            "select addresses.*, addresses_line_1.line_1, addresses_line_1.line_2 from addresses join addresses_line_1 on addresses.address_id = addresses_line_1.address_id",
            "select a.*, l.line_1, l.line_2 from addresses as a join addresses_line_1 as l on a.address_id = l.address_id",
            "select addresses.*, addresses_line_1.line_1, addresses_line_1.line_2 from addresses_line_1 join addresses on addresses_line_1.address_id = addresses.address_id",
            "select * from addresses join addresses_line_1 on addresses.address_id = addresses_line_1.address_id"
        ],
        "query1": "select line_1, line_2 from addresses",
        "query2": "select t2.line_1, t1.line_2 from addresses as t1 join addresses_line_1 as t2 on t1.address_id = t2.address_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "line_1",
            ",",
            "line_2",
            "FROM",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "What is the first and second line for all addresses?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "and",
            "second",
            "line",
            "for",
            "all",
            "addresses",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "addresses": "address_id"
        },
        "orig_query": "select line_1, line_2 from addresses",
        "split_map": {
            "addresses": "line_2"
        },
        "schema_with_content": "addresses : line_1 (\"2294 Grant Square Apt. 235\", \"979 Haag Shores Suite 656\", \"2294 Grant Square Apt. 235\"), city (\"Mariliehaven\", \"North Omer\", \"Mariliehaven\"), country (\"Burundi\", \"Kyrgyz Republic\", \"Bermuda\"), line_3 (None), other_address_details (None), zip_postcode (\"895\", \"638\", \"943\"), state_province_county (\"Delaware\", \"Hawaii\", \"Hawaii\"), address_id (13, 10, 2) | addresses_line_2 : address_id (2, 7, 11), line_2 (\"Apt. 583\", \"Suite 079\", \"Suite 239\") | courses : other_details (None), course_id (3, 9, 5), course_name (\"pl\", \"pl\", \"ai\"), course_description (\"p\", \"c\", \"d\") | departments : department_id (3, 9, 14), department_name (\"linguistic\", \"statistics\", \"math\"), department_description (\"natus\", \"autem\", \"non\"), other_details (None) | degree_programs : degree_program_id (2, 14, 5), department_id (14, 15, 8), degree_summary_description (\"architecto\", \"unde\", \"esse\"), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (6, 6, 4), other_details (None), section_description (\"non\", \"provident\", \"nesciunt\"), section_name (\"p\", \"f\", \"j\"), course_id (6, 5, 4) | semesters : semester_description (\"w\", \"t\", \"t\"), semester_name (\"spring 2014\", \"spring 2013\", \"fall 2010\"), other_details (None), semester_id (4, 15, 2) | students : ssn (\"3\", \"34458427\", \"156\"), current_address_id (10, 2, 15), email_address (\"jillian26@example.net\", \"nya.lesch@example.net\", \"swift.kolby@example.com\"), date_left (\"1990-09-01 05:03:27\", \"2017-07-09 21:38:43\", \"2007-08-02 04:12:58\"), last_name (\"Jaskolski\", \"Rempel\", \"Rogahn\"), permanent_address_id (11, 8, 5), middle_name (\"Anna\", \"Aaliyah\", \"Vaughn\"), student_id (11, 8, 9), date_first_registered (\"1989-05-24 23:31:29\", \"1976-10-26 02:33:06\", \"2004-12-24 12:36:46\"), other_student_details (\"et\", \"non\", \"laborum\"), first_name (\"Milton\", \"Delaney\", \"Reva\"), cell_mobile_number (\"436.613.7683\", \"1-009-710-5151\", \"07661787471\") | student_enrolment : semester_id (1, 1, 1), other_details (None), student_enrolment_id (8, 4, 15), degree_program_id (3, 5, 8), student_id (14, 7, 14) | student_enrolment_courses : student_enrolment_id (8, 14, 13), course_id (4, 4, 2), student_course_id (70882679, 604750, 2) | transcripts : transcript_date (\"1975-05-20 18:31:21\", \"2010-12-13 10:55:15\", \"1986-07-12 07:27:29\"), transcript_id (15, 9, 4), other_details (None) | transcript_contents : student_course_id (45105806, 0, 0), transcript_id (5, 5, 2)",
        "schema_without_content": "addresses : line_1 , city , country , line_3 , other_address_details , zip_postcode , state_province_county , address_id  | addresses_line_2 : address_id , line_2  | courses : other_details , course_id , course_name , course_description  | departments : department_id , department_name , department_description , other_details  | degree_programs : degree_program_id , department_id , degree_summary_description , other_details , degree_summary_name  | sections : section_id , other_details , section_description , section_name , course_id  | semesters : semester_description , semester_name , other_details , semester_id  | students : ssn , current_address_id , email_address , date_left , last_name , permanent_address_id , middle_name , student_id , date_first_registered , other_student_details , first_name , cell_mobile_number  | student_enrolment : semester_id , other_details , student_enrolment_id , degree_program_id , student_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select line_1, line_2 from addresses_line_2 join addresses on addresses_line_2.address_id = addresses.address_id",
            "select line_2, line_1 from addresses_line_2 join addresses on addresses_line_2.address_id = addresses.address_id",
            "select line_1, line_2 from addresses join addresses_line_2 on addresses.address_id = addresses_line_2.address_id",
            "select line_2, line_1 from addresses join addresses_line_2 on addresses.address_id = addresses_line_2.address_id",
            "select line_1 || ' ' || line_2 as address from addresses join addresses_line_2 on addresses.address_id = addresses_line_2.address_id"
        ],
        "query1": "select line_1, line_2 from addresses",
        "query2": "select t1.line_1, t2.line_2 from addresses as t1 join addresses_line_2 as t2 on t1.address_id = t2.address_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "line_1",
            ",",
            "line_2",
            "FROM",
            "addresses"
        ],
        "query_toks_no_value": [
            "select",
            "line_1",
            ",",
            "line_2",
            "from",
            "addresses"
        ],
        "question": "What is the first and second line for all addresses?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            "and",
            "second",
            "line",
            "for",
            "all",
            "addresses",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "addresses": "address_id"
        },
        "orig_query": "select line_1, line_2 from addresses",
        "split_map": {
            "addresses": "line_1"
        },
        "schema_with_content": "addresses : other_address_details (None), country (\"Saudi Arabia\", \"Kyrgyz Republic\", \"Croatia\"), address_id (12, 13, 13), zip_postcode (\"386\", \"902\", \"777\"), city (\"Port Oceane\", \"South Palma\", \"Port Oceane\"), state_province_county (\"WestVirginia\", \"WestVirginia\", \"Hawaii\"), line_2 (\"Suite 703\", \"Suite 830\", \"Apt. 370\"), line_3 (None) | addresses_line_1 : address_id (12, 5, 3), line_1 (\"74046 Metz Walk Apt. 113\", \"492 Wilkinson Route\", \"74046 Metz Walk Apt. 113\") | courses : course_description (\"v\", \"n\", \"p\"), course_id (3, 8, 9), course_name (\"os\", \"math\", \"fr\"), other_details (None) | departments : department_description (\"doloribus\", \"aliquam\", \"nisi\"), department_id (7, 2, 13), other_details (None), department_name (\"drama\", \"management\", \"biology\") | degree_programs : other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (7, 7, 12), degree_summary_description (\"esse\", \"aperiam\", \"placeat\"), department_id (7, 15, 14) | sections : section_id (11, 13, 13), other_details (None), section_name (\"p\", \"b\", \"p\"), course_id (8, 4, 6), section_description (\"nesciunt\", \"voluptas\", \"provident\") | semesters : semester_name (\"spring 2012\", \"spring 2016\", \"winter 2018\"), other_details (None), semester_id (10, 10, 1), semester_description (\"l\", \"l\", \"l\") | students : date_left (\"1997-11-16 08:54:33\", \"2014-05-30 23:32:02\", \"2004-12-08 05:29:11\"), current_address_id (14, 10, 1), cell_mobile_number (\"1-879-796-8987x164\", \"03174364122\", \"(507)365-8405\"), middle_name (\"Mossie\", \"Golda\", \"Neal\"), last_name (\"Carroll\", \"Ward\", \"Osinski\"), permanent_address_id (15, 3, 3), email_address (\"nya.lesch@example.net\", \"skassulke@example.net\", \"mya88@example.org\"), first_name (\"Timmothy\", \"Orrin\", \"Milton\"), student_id (1, 10, 15), ssn (\"156\", \"668\", \"43\"), date_first_registered (\"2017-01-04 08:10:25\", \"1973-05-19 19:12:46\", \"2017-01-04 08:10:25\"), other_student_details (\"atque\", \"laborum\", \"nesciunt\") | student_enrolment : student_enrolment_id (4, 8, 13), student_id (12, 6, 5), degree_program_id (9, 5, 3), other_details (None), semester_id (2, 12, 5) | student_enrolment_courses : course_id (8, 4, 13), student_course_id (8, 604750, 604750), student_enrolment_id (9, 14, 8) | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1998-11-22 12:18:29\", \"1984-12-19 00:37:21\"), transcript_id (12, 14, 2), other_details (None) | transcript_contents : transcript_id (11, 2, 13), student_course_id (70882679, 28982908, 96)",
        "schema_without_content": "addresses : other_address_details , country , address_id , zip_postcode , city , state_province_county , line_2 , line_3  | addresses_line_1 : address_id , line_1  | courses : course_description , course_id , course_name , other_details  | departments : department_description , department_id , other_details , department_name  | degree_programs : other_details , degree_summary_name , degree_program_id , degree_summary_description , department_id  | sections : section_id , other_details , section_name , course_id , section_description  | semesters : semester_name , other_details , semester_id , semester_description  | students : date_left , current_address_id , cell_mobile_number 365-8405\", middle_name , last_name , permanent_address_id , email_address , first_name , student_id , ssn , date_first_registered , other_student_details  | student_enrolment : student_enrolment_id , student_id , degree_program_id , other_details , semester_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : transcript_date , transcript_id , other_details  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select line_1, line_2 from addresses_line_1",
            "select line_2, line_1 from addresses_line_1",
            "select line_1, line_2 from addresses",
            "select line_2, line_1 from addresses",
            "select line_1, line_2 from addresses where line_1 is not null"
        ],
        "query1": "select line_1, line_2 from addresses",
        "query2": "select t2.line_1, t1.line_2 from addresses as t1 join addresses_line_1 as t2 on t1.address_id = t2.address_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "section_name",
            ",",
            "section_description",
            "FROM",
            "Sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "What are the names and descriptions of all the sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "descriptions",
            "of",
            "all",
            "the",
            "sections",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "sections": "section_id"
        },
        "orig_query": "select section_name, section_description from sections",
        "split_map": {
            "sections": "section_description"
        },
        "schema_with_content": "addresses : address_id (12, 14, 15), city (\"Mariliehaven\", \"Michelleburgh\", \"North Omer\"), state_province_county (\"Washington\", \"Virginia\", \"Hawaii\"), line_3 (None), other_address_details (None), line_2 (\"Apt. 406\", \"Suite 703\", \"Suite 674\"), line_1 (\"186 Evan Motorway Apt. 409\", \"2294 Grant Square Apt. 235\", \"7081 Eda Center\"), zip_postcode (\"669\", \"847\", \"777\"), country (\"Croatia\", \"Cook Islands\", \"New Caledonia\") | courses : course_name (\"en\", \"ml\", \"la\"), course_description (\"d\", \"l\", \"d\"), course_id (8, 14, 3), other_details (None) | departments : department_description (\"error\", \"autem\", \"nihil\"), department_name (\"drama\", \"medical\", \"history\"), other_details (None), department_id (5, 2, 3) | degree_programs : department_id (3, 12, 7), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"voluptas\", \"cumque\", \"esse\"), other_details (None), degree_program_id (8, 6, 10) | sections : other_details (None), section_name (\"j\", \"a\", \"k\"), section_id (14, 10, 14), course_id (9, 2, 10) | sections_section_description : section_id (9, 2, 6), section_description (\"voluptatem\", \"non\", \"ex\") | semesters : semester_id (4, 3, 1), semester_name (\"fall 2018\", \"spring 2016\", \"spring 2014\"), semester_description (\"m\", \"o\", \"g\"), other_details (None) | students : middle_name (\"Neal\", \"Mossie\", \"Osborne\"), date_first_registered (\"2009-09-25 00:14:25\", \"2014-03-28 05:48:23\", \"2014-03-28 05:48:23\"), date_left (\"1971-05-17 19:28:49\", \"2004-12-08 05:29:11\", \"2007-08-02 04:12:58\"), last_name (\"Balistreri\", \"Ward\", \"Jaskolski\"), student_id (1, 2, 12), first_name (\"Hobart\", \"Frida\", \"Reva\"), email_address (\"dell43@example.net\", \"qo'kon@example.com\", \"nbruen@example.org\"), cell_mobile_number (\"(462)246-7921\", \"677.401.9382\", \"(982)153-1469x1733\"), current_address_id (6, 7, 1), other_student_details (\"et\", \"et\", \"assumenda\"), ssn (\"156\", \"6274274\", \"6274274\"), permanent_address_id (15, 5, 14) | student_enrolment : degree_program_id (8, 12, 12), student_enrolment_id (6, 15, 8), semester_id (2, 12, 2), other_details (None), student_id (7, 14, 4) | student_enrolment_courses : student_course_id (9860, 96, 28982908), student_enrolment_id (8, 13, 10), course_id (12, 11, 14) | transcripts : other_details (None), transcript_date (\"1990-03-05 11:59:41\", \"1984-01-18 23:07:07\", \"1999-01-06 20:06:46\"), transcript_id (12, 8, 12) | transcript_contents : student_course_id (76, 7, 76), transcript_id (11, 12, 5)",
        "schema_without_content": "addresses : address_id , city , state_province_county , line_3 , other_address_details , line_2 , line_1 , zip_postcode , country  | courses : course_name , course_description , course_id , other_details  | departments : department_description , department_name , other_details , department_id  | degree_programs : department_id , degree_summary_name , degree_summary_description , other_details , degree_program_id  | sections : other_details , section_name , section_id , course_id  | sections_section_description : section_id , section_description  | semesters : semester_id , semester_name , semester_description , other_details  | students : middle_name , date_first_registered , date_left , last_name , student_id , first_name , email_address , cell_mobile_number 246-7921\", \"677.401.9382\", \"153-1469x1733\", current_address_id , other_student_details , ssn , permanent_address_id  | student_enrolment : degree_program_id , student_enrolment_id , semester_id , other_details , student_id  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select section_name, other_details from sections",
            "select other_details, section_name from sections",
            "select section_name, sections.other_details from sections",
            "select sections.other_details, section_name from sections",
            "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id"
        ],
        "query1": "select section_name, section_description from sections",
        "query2": "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "section_name",
            ",",
            "section_description",
            "FROM",
            "Sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "What are the names and descriptions of all the sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "descriptions",
            "of",
            "all",
            "the",
            "sections",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "sections": "section_id"
        },
        "orig_query": "select section_name, section_description from sections",
        "split_map": {
            "sections": "section_name"
        },
        "schema_with_content": "addresses : other_address_details (None), line_1 (\"2294 Grant Square Apt. 235\", \"2294 Grant Square Apt. 235\", \"9283 Schulist Falls Apt. 037\"), city (\"Herzoghaven\", \"Prohaskafort\", \"Herzoghaven\"), country (\"Saudi Arabia\", \"Burundi\", \"Kyrgyz Republic\"), zip_postcode (\"590\", \"068\", \"590\"), state_province_county (\"Idaho\", \"Kentucky\", \"Kentucky\"), address_id (5, 4, 9), line_3 (None), line_2 (\"Apt. 406\", \"Apt. 335\", \"Suite 079\") | courses : course_id (1, 4, 15), other_details (None), course_name (\"rs\", \"os\", \"db\"), course_description (\"w\", \"w\", \"n\") | departments : department_id (8, 2, 8), other_details (None), department_description (\"error\", \"doloribus\", \"nisi\"), department_name (\"linguistic\", \"dance\", \"dance\") | degree_programs : department_id (8, 14, 7), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_program_id (3, 7, 10), degree_summary_description (\"aperiam\", \"officiis\", \"earum\") | sections : section_id (8, 9, 7), other_details (None), section_description (\"ad\", \"quis\", \"facilis\"), course_id (10, 14, 14) | sections_section_name : section_id (4, 4, 15), section_name (\"o\", \"g\", \"h\") | semesters : semester_name (\"winter 2018\", \"winter 2010\", \"spring 2019\"), semester_id (6, 2, 3), semester_description (\"m\", \"f\", \"o\"), other_details (None) | students : date_first_registered (\"1989-05-24 23:31:29\", \"2017-01-04 08:10:25\", \"1982-06-19 13:15:18\"), other_student_details (\"assumenda\", \"quia\", \"nesciunt\"), first_name (\"Jarvis\", \"Hobart\", \"Warren\"), current_address_id (6, 7, 9), email_address (\"nya.lesch@example.net\", \"gracie29@example.com\", \"skassulke@example.net\"), last_name (\"Balistreri\", \"Ankunding\", \"Rempel\"), permanent_address_id (15, 9, 3), middle_name (\"Brooklyn\", \"Alberta\", \"Cleve\"), date_left (\"2017-07-09 21:38:43\", \"2017-07-09 21:38:43\", \"1971-05-17 19:28:49\"), cell_mobile_number (\"(605)919-3594x3661\", \"03174364122\", \"07661787471\"), student_id (6, 5, 11), ssn (\"248\", \"248\", \"248\") | student_enrolment : degree_program_id (11, 5, 9), student_enrolment_id (8, 14, 8), student_id (9, 1, 14), semester_id (12, 13, 13), other_details (None) | student_enrolment_courses : course_id (4, 12, 8), student_course_id (45105806, 8, 76), student_enrolment_id (6, 4, 14) | transcripts : transcript_date (\"1986-07-12 07:27:29\", \"1985-08-21 09:32:39\", \"1984-12-19 00:37:21\"), other_details (None), transcript_id (13, 11, 8) | transcript_contents : student_course_id (76, 45105806, 28982908), transcript_id (11, 13, 4)",
        "schema_without_content": "addresses : other_address_details , line_1 , city , country , zip_postcode , state_province_county , address_id , line_3 , line_2  | courses : course_id , other_details , course_name , course_description  | departments : department_id , other_details , department_description , department_name  | degree_programs : department_id , degree_summary_name , other_details , degree_program_id , degree_summary_description  | sections : section_id , other_details , section_description , course_id  | sections_section_name : section_id , section_name  | semesters : semester_name , semester_id , semester_description , other_details  | students : date_first_registered , other_student_details , first_name , current_address_id , email_address , last_name , permanent_address_id , middle_name , date_left , cell_mobile_number 919-3594x3661\", \"03174364122\", \"07661787471\", student_id , ssn  | student_enrolment : degree_program_id , student_enrolment_id , student_id , semester_id , other_details  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select section_name, section_description from sections_section_name",
            "select section_description, section_name from sections_section_name",
            "select section_name, t1.section_description from sections_section_name as t1 join sections as t2 on t1.section_id = t2.section_id",
            "select t1.section_description, section_name from sections_section_name as t1 join sections as t2 on t1.section_id = t2.section_id",
            "select section_name, t2.section_description from sections_section_name as t1 join sections as t2 on t1.section_id = t2.section_id"
        ],
        "query1": "select section_name, section_description from sections",
        "query2": "select t2.section_name, t1.section_description from sections as t1 join sections_section_name as t2 on t1.section_id = t2.section_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "section_name",
            ",",
            "section_description",
            "FROM",
            "Sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "What are the names and descriptions for all the sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "descriptions",
            "for",
            "all",
            "the",
            "sections",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "sections": "section_id"
        },
        "orig_query": "select section_name, section_description from sections",
        "split_map": {
            "sections": "section_description"
        },
        "schema_with_content": "addresses : address_id (2, 1, 1), line_3 (None), line_1 (\"9283 Schulist Falls Apt. 037\", \"74046 Metz Walk Apt. 113\", \"202 Hessel Views Apt. 468\"), state_province_county (\"Kansas\", \"Idaho\", \"WestVirginia\"), city (\"Mariliehaven\", \"Herzoghaven\", \"Mariliehaven\"), zip_postcode (\"400\", \"638\", \"902\"), country (\"New Caledonia\", \"Samoa\", \"New Caledonia\"), line_2 (\"Suite 865\", \"Apt. 689\", \"Apt. 468\"), other_address_details (None) | courses : course_name (\"nlp\", \"pl\", \"rs\"), course_description (\"p\", \"l\", \"l\"), course_id (5, 1, 12), other_details (None) | departments : other_details (None), department_name (\"geography\", \"drama\", \"math\"), department_description (\"ea\", \"nostrum\", \"error\"), department_id (15, 5, 4) | degree_programs : department_id (11, 11, 12), degree_summary_description (\"aperiam\", \"architecto\", \"et\"), degree_program_id (13, 15, 9), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (12, 11, 2), other_details (None), section_name (\"e\", \"p\", \"b\"), course_id (6, 2, 8) | sections_section_description : section_description (\"qui\", \"doloremque\", \"ex\"), section_id (6, 15, 14) | semesters : semester_description (\"c\", \"c\", \"x\"), other_details (None), semester_name (\"spring 2018\", \"winter 2018\", \"spring 2013\"), semester_id (4, 1, 6) | students : student_id (1, 9, 11), date_left (\"2007-11-28 12:50:21\", \"2007-11-28 12:50:21\", \"2006-08-04 17:26:49\"), first_name (\"Hobart\", \"Jarvis\", \"Gregg\"), last_name (\"Osinski\", \"Weimann\", \"Christiansen\"), email_address (\"baumbach.lucious@example.org\", \"jillian26@example.net\", \"dell43@example.net\"), date_first_registered (\"2014-03-28 05:48:23\", \"2018-03-13 09:56:22\", \"2009-09-25 00:14:25\"), permanent_address_id (11, 14, 8), other_student_details (\"autem\", \"rerum\", \"facilis\"), cell_mobile_number (\"09700166582\", \"09700166582\", \"07661787471\"), current_address_id (15, 2, 7), middle_name (\"Brooklyn\", \"Anna\", \"Mona\"), ssn (\"34458427\", \"68095\", \"248\") | student_enrolment : student_id (7, 12, 6), other_details (None), degree_program_id (12, 9, 2), semester_id (6, 9, 6), student_enrolment_id (1, 14, 13) | student_enrolment_courses : student_course_id (96, 604750, 45105806), student_enrolment_id (6, 4, 4), course_id (11, 13, 8) | transcripts : transcript_date (\"1975-10-28 15:16:51\", \"1975-10-28 15:16:51\", \"1990-03-05 11:59:41\"), other_details (None), transcript_id (11, 8, 7) | transcript_contents : transcript_id (5, 9, 4), student_course_id (2, 28982908, 7)",
        "schema_without_content": "addresses : address_id , line_3 , line_1 , state_province_county , city , zip_postcode , country , line_2 , other_address_details  | courses : course_name , course_description , course_id , other_details  | departments : other_details , department_name , department_description , department_id  | degree_programs : department_id , degree_summary_description , degree_program_id , other_details , degree_summary_name  | sections : section_id , other_details , section_name , course_id  | sections_section_description : section_description , section_id  | semesters : semester_description , other_details , semester_name , semester_id  | students : student_id , date_left , first_name , last_name , email_address , date_first_registered , permanent_address_id , other_student_details , cell_mobile_number , current_address_id , middle_name , ssn  | student_enrolment : student_id , other_details , degree_program_id , semester_id , student_enrolment_id  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select name, section_description from sections_section_description",
            "select s.section_name, ssd.section_description from sections as s join sections_section_description as ssd on s.section_id = ssd.section_id",
            "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id",
            "select section_name, section_description from sections join sections_section_description using(section_id)",
            "select section_name, section_description from sections_section_description join sections using(section_id)"
        ],
        "query1": "select section_name, section_description from sections",
        "query2": "select t1.section_name, t2.section_description from sections as t1 join sections_section_description as t2 on t1.section_id = t2.section_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "section_name",
            ",",
            "section_description",
            "FROM",
            "Sections"
        ],
        "query_toks_no_value": [
            "select",
            "section_name",
            ",",
            "section_description",
            "from",
            "sections"
        ],
        "question": "What are the names and descriptions for all the sections?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "descriptions",
            "for",
            "all",
            "the",
            "sections",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "sections": "section_id"
        },
        "orig_query": "select section_name, section_description from sections",
        "split_map": {
            "sections": "section_name"
        },
        "schema_with_content": "addresses : city (\"Mariliehaven\", \"Port Chelsea\", \"North Omer\"), address_id (3, 9, 11), state_province_county (\"Washington\", \"Virginia\", \"SouthDakota\"), country (\"Samoa\", \"Saudi Arabia\", \"Kyrgyz Republic\"), line_1 (\"7081 Eda Center\", \"202 Hessel Views Apt. 468\", \"16998 Mraz Lodge\"), line_3 (None), zip_postcode (\"590\", \"541\", \"902\"), other_address_details (None), line_2 (\"Apt. 406\", \"Apt. 305\", \"Apt. 335\") | courses : other_details (None), course_description (\"w\", \"c\", \"v\"), course_name (\"db\", \"rs\", \"rs\"), course_id (6, 3, 12) | departments : department_description (\"ea\", \"dolorem\", \"doloribus\"), department_id (2, 2, 6), other_details (None), department_name (\"linguistic\", \"history\", \"math\") | degree_programs : degree_summary_description (\"cumque\", \"et\", \"placeat\"), department_id (2, 3, 8), degree_program_id (3, 4, 12), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : other_details (None), section_id (6, 11, 13), section_description (\"voluptas\", \"quis\", \"reprehenderit\"), course_id (4, 7, 12) | sections_section_name : section_name (\"u\", \"d\", \"o\"), section_id (4, 12, 12) | semesters : semester_description (\"m\", \"f\", \"m\"), semester_id (3, 5, 3), semester_name (\"spring 2018\", \"spring 2016\", \"spring 2018\"), other_details (None) | students : middle_name (\"Neal\", \"Aaliyah\", \"Brooklyn\"), last_name (\"Jaskolski\", \"Kemmer\", \"Osinski\"), first_name (\"Milton\", \"Jarvis\", \"Reva\"), date_left (\"2007-11-28 12:50:21\", \"2014-05-30 23:32:02\", \"2007-08-02 04:12:58\"), permanent_address_id (11, 14, 14), cell_mobile_number (\"877.549.9067x8723\", \"436.613.7683\", \"(605)919-3594x3661\"), ssn (\"68095\", \"402\", \"68095\"), current_address_id (1, 6, 9), other_student_details (\"non\", \"qui\", \"quia\"), student_id (15, 1, 12), email_address (\"nbruen@example.org\", \"erwin.zboncak@example.com\", \"baumbach.lucious@example.org\"), date_first_registered (\"2009-09-25 00:14:25\", \"2007-08-29 23:25:41\", \"1971-02-05 07:28:23\") | student_enrolment : student_enrolment_id (6, 15, 14), degree_program_id (2, 12, 4), semester_id (15, 13, 5), other_details (None), student_id (12, 14, 9) | student_enrolment_courses : course_id (12, 13, 13), student_course_id (96, 9860, 0), student_enrolment_id (4, 5, 13) | transcripts : transcript_id (9, 6, 14), other_details (None), transcript_date (\"1999-01-06 20:06:46\", \"1975-05-20 18:31:21\", \"1984-01-18 23:07:07\") | transcript_contents : student_course_id (7, 0, 96), transcript_id (2, 13, 2)",
        "schema_without_content": "addresses : city , address_id , state_province_county , country , line_1 , line_3 , zip_postcode , other_address_details , line_2  | courses : other_details , course_description , course_name , course_id  | departments : department_description , department_id , other_details , department_name  | degree_programs : degree_summary_description , department_id , degree_program_id , other_details , degree_summary_name  | sections : other_details , section_id , section_description , course_id  | sections_section_name : section_name , section_id  | semesters : semester_description , semester_id , semester_name , other_details  | students : middle_name , last_name , first_name , date_left , permanent_address_id , cell_mobile_number 919-3594x3661\", ssn , current_address_id , other_student_details , student_id , email_address , date_first_registered  | student_enrolment : student_enrolment_id , degree_program_id , semester_id , other_details , student_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : transcript_id , other_details , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select section_name, section_description from sections_section_name",
            "select section_description, section_name from sections_section_name",
            "select section_name, t1.section_description from sections_section_name as t1 join sections as t2 on t1.section_id = t2.section_id",
            "select t1.section_description, section_name from sections_section_name as t1 join sections as t2 on t1.section_id = t2.section_id",
            "select t2.section_name, t1.section_description from sections_section_name as t1 join sections as t2 on t1.section_id = t2.section_id"
        ],
        "query1": "select section_name, section_description from sections",
        "query2": "select t2.section_name, t1.section_description from sections as t1 join sections_section_name as t2 on t1.section_id = t2.section_id"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "first",
            "student",
            "to",
            "register",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "split_map": {
            "students": "last_name"
        },
        "schema_with_content": "addresses : line_2 (\"Suite 383\", \"Suite 383\", \"Suite 830\"), address_id (7, 10, 15), country (\"Iceland\", \"Lesotho\", \"Burundi\"), other_address_details (None), line_1 (\"202 Hessel Views Apt. 468\", \"186 Evan Motorway Apt. 409\", \"3999 Aufderhar Ways Suite 593\"), zip_postcode (\"847\", \"148\", \"847\"), city (\"New Clemensburgh\", \"Lake Careyberg\", \"Michelleburgh\"), line_3 (None), state_province_county (\"Washington\", \"Kansas\", \"Kentucky\") | courses : course_description (\"q\", \"p\", \"v\"), course_name (\"ml\", \"en\", \"en\"), course_id (11, 11, 2), other_details (None) | departments : department_id (7, 2, 5), other_details (None), department_description (\"nihil\", \"autem\", \"aliquam\"), department_name (\"dance\", \"law\", \"management\") | degree_programs : department_id (8, 7, 15), other_details (None), degree_summary_description (\"qui\", \"et\", \"quam\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (13, 6, 9) | sections : section_id (5, 3, 7), section_description (\"et\", \"nesciunt\", \"reprehenderit\"), course_id (10, 1, 2), section_name (\"l\", \"c\", \"k\"), other_details (None) | semesters : other_details (None), semester_id (9, 7, 6), semester_name (\"spring 2016\", \"spring 2015\", \"spring 2013\"), semester_description (\"y\", \"w\", \"g\") | students : cell_mobile_number (\"1-879-796-8987x164\", \"1-879-796-8987x164\", \"(605)919-3594x3661\"), first_name (\"Deon\", \"Delaney\", \"Jordy\"), email_address (\"lhartmann@example.org\", \"lhartmann@example.org\", \"qo'kon@example.com\"), current_address_id (10, 10, 2), date_left (\"2017-07-09 21:38:43\", \"1982-06-11 00:25:39\", \"1997-11-16 08:54:33\"), student_id (4, 14, 6), middle_name (\"Aaliyah\", \"Lorenz\", \"Aisha\"), other_student_details (\"rerum\", \"qui\", \"laborum\"), ssn (\"68095\", \"3\", \"304246\"), permanent_address_id (9, 9, 11), date_first_registered (\"1973-05-19 19:12:46\", \"2014-03-28 05:48:23\", \"2009-09-25 00:14:25\") | students_last_name : student_id (6, 11, 2), last_name (\"Balistreri\", \"Carroll\", \"Rogahn\") | student_enrolment : semester_id (9, 4, 5), student_enrolment_id (14, 1, 13), degree_program_id (11, 3, 9), student_id (6, 5, 7), other_details (None) | student_enrolment_courses : student_course_id (83814225, 9860, 438800), course_id (3, 14, 8), student_enrolment_id (2, 13, 2) | transcripts : other_details (None), transcript_date (\"2013-06-30 13:01:40\", \"1990-03-05 11:59:41\", \"1984-01-18 23:07:07\"), transcript_id (2, 2, 14) | transcript_contents : transcript_id (9, 8, 4), student_course_id (96, 76, 76)",
        "schema_without_content": "addresses : line_2 , address_id , country , other_address_details , line_1 , zip_postcode , city , line_3 , state_province_county  | courses : course_description , course_name , course_id , other_details  | departments : department_id , other_details , department_description , department_name  | degree_programs : department_id , other_details , degree_summary_description , degree_summary_name , degree_program_id  | sections : section_id , section_description , course_id , section_name , other_details  | semesters : other_details , semester_id , semester_name , semester_description  | students : cell_mobile_number 919-3594x3661\", first_name , email_address , current_address_id , date_left , student_id , middle_name , other_student_details , ssn , permanent_address_id , date_first_registered  | students_last_name : student_id , last_name  | student_enrolment : semester_id , student_enrolment_id , degree_program_id , student_id , other_details  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select first_name, middle_name, last_name from students order by date_first_registered limit 1",
            "select middle_name, last_name, first_name from students order by date_first_registered limit 1",
            "select last_name, middle_name, first_name from students order by date_first_registered limit 1",
            "select first_name, last_name, middle_name from students order by date_first_registered limit 1",
            "select middle_name, first_name, last_name from students order by date_first_registered limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "first",
            "student",
            "to",
            "register",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "split_map": {
            "students": "middle_name"
        },
        "schema_with_content": "addresses : zip_postcode (\"847\", \"386\", \"148\"), country (\"Iceland\", \"Samoa\", \"New Caledonia\"), city (\"New Clemensburgh\", \"Port Elvisfurt\", \"Lake Careyberg\"), line_1 (\"492 Wilkinson Route\", \"74046 Metz Walk Apt. 113\", \"3999 Aufderhar Ways Suite 593\"), line_2 (\"Apt. 468\", \"Suite 830\", \"Apt. 305\"), address_id (6, 4, 13), line_3 (None), state_province_county (\"Kentucky\", \"Kentucky\", \"NorthCarolina\"), other_address_details (None) | courses : course_description (\"v\", \"n\", \"l\"), other_details (None), course_name (\"fr\", \"db\", \"en\"), course_id (5, 7, 9) | departments : department_id (8, 9, 7), department_description (\"natus\", \"nihil\", \"error\"), department_name (\"computer science\", \"management\", \"engineer\"), other_details (None) | degree_programs : other_details (None), degree_summary_description (\"architecto\", \"voluptas\", \"aperiam\"), department_id (4, 7, 8), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (2, 13, 5) | sections : section_name (\"e\", \"g\", \"y\"), other_details (None), course_id (9, 1, 12), section_description (\"voluptas\", \"ad\", \"voluptas\"), section_id (15, 14, 7) | semesters : semester_name (\"spring 2013\", \"spring 2017\", \"summer 2010\"), other_details (None), semester_description (\"l\", \"q\", \"q\"), semester_id (9, 12, 3) | students : cell_mobile_number (\"(605)919-3594x3661\", \"(982)153-1469x1733\", \"(605)919-3594x3661\"), date_left (\"2006-08-04 17:26:49\", \"2016-04-09 12:27:04\", \"1971-05-17 19:28:49\"), email_address (\"jillian26@example.net\", \"johns.unique@example.net\", \"erwin.zboncak@example.com\"), permanent_address_id (5, 11, 14), last_name (\"Balistreri\", \"Jaskolski\", \"Gleichner\"), student_id (14, 7, 2), first_name (\"Gregg\", \"Deon\", \"Delaney\"), date_first_registered (\"2018-03-13 09:56:22\", \"2018-03-13 09:56:22\", \"2017-01-04 08:10:25\"), other_student_details (\"nesciunt\", \"atque\", \"facilis\"), current_address_id (12, 9, 1), ssn (\"39\", \"248\", \"965\") | students_middle_name : student_id (10, 12, 7), middle_name (\"Golda\", \"Anna\", \"Osborne\") | student_enrolment : student_enrolment_id (9, 9, 14), other_details (None), degree_program_id (8, 9, 3), student_id (5, 4, 1), semester_id (4, 13, 1) | student_enrolment_courses : student_course_id (7, 8, 76), student_enrolment_id (14, 14, 6), course_id (3, 4, 6) | transcripts : transcript_id (2, 10, 4), transcript_date (\"1986-07-12 07:27:29\", \"1975-10-28 15:16:51\", \"1975-05-06 12:04:47\"), other_details (None) | transcript_contents : transcript_id (4, 5, 9), student_course_id (76, 96, 45105806)",
        "schema_without_content": "addresses : zip_postcode , country , city , line_1 , line_2 , address_id , line_3 , state_province_county , other_address_details  | courses : course_description , other_details , course_name , course_id  | departments : department_id , department_description , department_name , other_details  | degree_programs : other_details , degree_summary_description , department_id , degree_summary_name , degree_program_id  | sections : section_name , other_details , course_id , section_description , section_id  | semesters : semester_name , other_details , semester_description , semester_id  | students : cell_mobile_number 919-3594x3661\", \"153-1469x1733\", \"919-3594x3661\", date_left , email_address , permanent_address_id , last_name , student_id , first_name , date_first_registered , other_student_details , current_address_id , ssn  | students_middle_name : student_id , middle_name  | student_enrolment : student_enrolment_id , other_details , degree_program_id , student_id , semester_id  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | transcripts : transcript_id , transcript_date , other_details  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1",
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id where t1.date_first_registered = (select min(date_first_registered) from students) limit 1",
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id where t1.date_first_registered = (select min(date_first_registered) from students)",
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc fetch first row only",
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id where t1.date_first_registered = (select min(date_first_registered) from students) fetch first row only"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "first",
            "student",
            "to",
            "register",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "split_map": {
            "students": "first_name"
        },
        "schema_with_content": "addresses : zip_postcode (\"148\", \"541\", \"068\"), country (\"Kyrgyz Republic\", \"Saudi Arabia\", \"Burundi\"), other_address_details (None), line_2 (\"Apt. 388\", \"Apt. 388\", \"Apt. 583\"), city (\"Lake Careyberg\", \"Port Elvisfurt\", \"Mariliehaven\"), line_3 (None), address_id (11, 15, 2), state_province_county (\"Hawaii\", \"WestVirginia\", \"Virginia\"), line_1 (\"0144 Lamar Plaza Apt. 346\", \"202 Hessel Views Apt. 468\", \"7081 Eda Center\") | courses : course_description (\"l\", \"p\", \"b\"), course_id (11, 3, 6), course_name (\"dl\", \"pl\", \"pl\"), other_details (None) | departments : other_details (None), department_id (13, 3, 10), department_name (\"history\", \"computer science\", \"linguistic\"), department_description (\"dolorem\", \"non\", \"nihil\") | degree_programs : other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (15, 12, 2), degree_summary_description (\"placeat\", \"assumenda\", \"architecto\"), degree_program_id (4, 11, 8) | sections : other_details (None), section_id (6, 12, 11), course_id (7, 2, 8), section_description (\"qui\", \"qui\", \"doloremque\"), section_name (\"a\", \"h\", \"e\") | semesters : semester_name (\"summer 2010\", \"fall 2018\", \"spring 2012\"), semester_id (2, 5, 3), semester_description (\"l\", \"y\", \"o\"), other_details (None) | students : ssn (\"965\", \"68095\", \"402\"), current_address_id (15, 15, 6), student_id (4, 2, 10), date_left (\"2013-10-05 17:41:28\", \"2006-08-04 17:26:49\", \"2014-05-30 23:32:02\"), date_first_registered (\"2007-08-29 23:25:41\", \"2004-12-24 12:36:46\", \"1971-02-05 07:28:23\"), email_address (\"swift.kolby@example.com\", \"baumbach.lucious@example.org\", \"nya.lesch@example.net\"), cell_mobile_number (\"877.549.9067x8723\", \"(213)445-0399x85208\", \"09700166582\"), last_name (\"Kemmer\", \"Osinski\", \"Rogahn\"), middle_name (\"Mona\", \"Aaliyah\", \"Judd\"), other_student_details (\"nesciunt\", \"atque\", \"rerum\"), permanent_address_id (9, 14, 5) | students_first_name : first_name (\"Timmothy\", \"Jordy\", \"Reva\"), student_id (14, 7, 11) | student_enrolment : other_details (None), student_id (7, 1, 4), student_enrolment_id (9, 9, 7), degree_program_id (3, 8, 5), semester_id (4, 13, 4) | student_enrolment_courses : student_course_id (0, 0, 1), course_id (8, 3, 2), student_enrolment_id (14, 5, 14) | transcripts : transcript_date (\"1985-08-21 09:32:39\", \"1999-01-06 20:06:46\", \"1985-04-29 01:20:20\"), other_details (None), transcript_id (3, 5, 13) | transcript_contents : student_course_id (8, 45105806, 76), transcript_id (11, 2, 12)",
        "schema_without_content": "addresses : zip_postcode , country , other_address_details , line_2 , city , line_3 , address_id , state_province_county , line_1  | courses : course_description , course_id , course_name , other_details  | departments : other_details , department_id , department_name , department_description  | degree_programs : other_details , degree_summary_name , department_id , degree_summary_description , degree_program_id  | sections : other_details , section_id , course_id , section_description , section_name  | semesters : semester_name , semester_id , semester_description , other_details  | students : ssn , current_address_id , student_id , date_left , date_first_registered , email_address , cell_mobile_number 445-0399x85208\", \"09700166582\", last_name , middle_name , other_student_details , permanent_address_id  | students_first_name : first_name , student_id  | student_enrolment : other_details , student_id , student_enrolment_id , degree_program_id , semester_id  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select first_name, middle_name, last_name from students_first_name where student_id = (select student_id from students order by date_first_registered limit 1)",
            "select middle_name, last_name, first_name from students_first_name where student_id = (select student_id from students order by date_first_registered limit 1)",
            "select first_name, last_name, middle_name from students_first_name where student_id = (select student_id from students order by date_first_registered limit 1)",
            "select middle_name, first_name, last_name from students_first_name where student_id = (select student_id from students order by date_first_registered limit 1)",
            "select last_name, first_name, middle_name from students_first_name where student_id = (select student_id from students order by date_first_registered limit 1)"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the first student to register?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "first",
            "student",
            "to",
            "register",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "split_map": {
            "students": "last_name"
        },
        "schema_with_content": "addresses : state_province_county (\"Washington\", \"SouthDakota\", \"Washington\"), other_address_details (None), line_1 (\"858 Peggie Bypass Suite 212\", \"492 Wilkinson Route\", \"202 Hessel Views Apt. 468\"), line_2 (\"Suite 239\", \"Apt. 335\", \"Suite 239\"), city (\"Lake Laishafurt\", \"Michelleburgh\", \"Mariliehaven\"), country (\"Cook Islands\", \"Haiti\", \"Lesotho\"), address_id (6, 12, 7), line_3 (None), zip_postcode (\"541\", \"386\", \"068\") | courses : course_name (\"ml\", \"rs\", \"os\"), course_id (11, 11, 1), other_details (None), course_description (\"q\", \"n\", \"q\") | departments : department_description (\"consequatur\", \"in\", \"nisi\"), department_name (\"computer science\", \"management\", \"medical\"), department_id (12, 2, 6), other_details (None) | degree_programs : department_id (7, 15, 2), degree_summary_description (\"aperiam\", \"architecto\", \"earum\"), degree_program_id (13, 14, 9), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None) | sections : course_id (1, 2, 12), other_details (None), section_id (11, 10, 10), section_description (\"reprehenderit\", \"non\", \"non\"), section_name (\"h\", \"l\", \"g\") | semesters : semester_description (\"t\", \"g\", \"g\"), semester_name (\"spring 2016\", \"spring 2014\", \"spring 2010\"), other_details (None), semester_id (12, 7, 9) | students : other_student_details (\"quia\", \"voluptatem\", \"et\"), first_name (\"Jett\", \"Stanford\", \"Jordy\"), ssn (\"248\", \"\", \"6274274\"), date_first_registered (\"2009-09-25 00:14:25\", \"1997-03-20 16:47:25\", \"2018-03-13 09:56:22\"), permanent_address_id (9, 4, 9), current_address_id (10, 12, 15), email_address (\"johns.unique@example.net\", \"skassulke@example.net\", \"dell43@example.net\"), middle_name (\"Golda\", \"Cleve\", \"Mona\"), date_left (\"2007-08-02 04:12:58\", \"1971-05-17 19:28:49\", \"2007-03-31 09:53:19\"), student_id (14, 3, 1), cell_mobile_number (\"677.401.9382\", \"(213)445-0399x85208\", \"(462)246-7921\") | students_last_name : student_id (12, 4, 6), last_name (\"Christiansen\", \"Kemmer\", \"Weimann\") | student_enrolment : student_enrolment_id (12, 12, 8), other_details (None), semester_id (15, 15, 12), student_id (4, 14, 4), degree_program_id (4, 11, 12) | student_enrolment_courses : course_id (2, 6, 10), student_course_id (9860, 7, 0), student_enrolment_id (9, 8, 6) | transcripts : other_details (None), transcript_id (14, 2, 1), transcript_date (\"1998-11-22 12:18:29\", \"1985-08-21 09:32:39\", \"2013-06-30 13:01:40\") | transcript_contents : student_course_id (96, 2, 8), transcript_id (11, 12, 9)",
        "schema_without_content": "addresses : state_province_county , other_address_details , line_1 , line_2 , city , country , address_id , line_3 , zip_postcode  | courses : course_name , course_id , other_details , course_description  | departments : department_description , department_name , department_id , other_details  | degree_programs : department_id , degree_summary_description , degree_program_id , degree_summary_name , other_details  | sections : course_id , other_details , section_id , section_description , section_name  | semesters : semester_description , semester_name , other_details , semester_id  | students : other_student_details , first_name , ssn , date_first_registered , permanent_address_id , current_address_id , email_address , middle_name , date_left , student_id , cell_mobile_number 445-0399x85208\", \"246-7921\" | students_last_name : student_id , last_name  | student_enrolment : student_enrolment_id , other_details , semester_id , student_id , degree_program_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered limit 1",
            "select t1.first_name, t1.middle_name, t3.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join students_last_name as t3 on t1.student_id = t3.student_id order by t1.date_first_registered limit 1",
            "select t1.first_name, t1.middle_name, t3.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t4 on t2.student_enrolment_id = t4.student_enrolment_id join courses as t3 on t3.course_id = t4.course_id order by t1.date_first_registered limit 1",
            "select t1.first_name, t1.middle_name, t3.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t4 on t2.student_enrolment_id = t4.student_enrolment_id join courses as t3 on t3.course_id = t4.course_id join students_last_name as t5 on t1.student_id = t5.student_id order by t1.date_first_registered limit 1",
            "select t1.first_name, t1.middle_name, t3.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t4 on t2.student_enrolment_id = t4.student_enrolment_id join courses as t3 on t3.course_id = t4.course_id join students_last_name as t5 on t1.student_id = t5.student_id join addresses as t6 on t1.permanent_address_id = t6.address_id where t6.state_province_county = 'Washington' order by t1.date_first_registered limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the first student to register?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "first",
            "student",
            "to",
            "register",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "split_map": {
            "students": "middle_name"
        },
        "schema_with_content": "addresses : zip_postcode (\"669\", \"446\", \"148\"), line_3 (None), city (\"Port Elvisfurt\", \"New Clemensburgh\", \"Michelleburgh\"), other_address_details (None), country (\"Gibraltar\", \"Kyrgyz Republic\", \"Kyrgyz Republic\"), line_2 (\"Suite 830\", \"Apt. 370\", \"Suite 239\"), line_1 (\"186 Evan Motorway Apt. 409\", \"9283 Schulist Falls Apt. 037\", \"202 Hessel Views Apt. 468\"), address_id (6, 6, 3), state_province_county (\"WestVirginia\", \"Kentucky\", \"Idaho\") | courses : course_id (11, 7, 12), other_details (None), course_description (\"n\", \"c\", \"b\"), course_name (\"oop\", \"nlp\", \"cal\") | departments : other_details (None), department_description (\"nihil\", \"doloribus\", \"error\"), department_id (9, 2, 14), department_name (\"computer science\", \"art\", \"medical\") | degree_programs : degree_program_id (14, 11, 2), department_id (8, 11, 12), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"architecto\", \"qui\", \"esse\"), other_details (None) | sections : course_id (14, 12, 1), section_name (\"b\", \"e\", \"y\"), section_description (\"quis\", \"reprehenderit\", \"et\"), other_details (None), section_id (4, 9, 14) | semesters : semester_description (\"w\", \"y\", \"f\"), semester_name (\"winter 2018\", \"spring 2017\", \"winter 2010\"), other_details (None), semester_id (9, 8, 12) | students : last_name (\"Rogahn\", \"Huel\", \"Osinski\"), student_id (15, 11, 11), permanent_address_id (11, 5, 14), cell_mobile_number (\"(605)919-3594x3661\", \"(462)246-7921\", \"(462)246-7921\"), date_first_registered (\"1997-03-20 16:47:25\", \"2014-03-28 05:48:23\", \"2007-08-29 23:25:41\"), date_left (\"2007-11-28 12:50:21\", \"1997-11-16 08:54:33\", \"2014-05-30 23:32:02\"), ssn (\"34458427\", \"6274274\", \"39\"), current_address_id (6, 7, 14), other_student_details (\"quia\", \"facilis\", \"quia\"), email_address (\"beth42@example.org\", \"nya.lesch@example.net\", \"lhartmann@example.org\"), first_name (\"Timmothy\", \"Delaney\", \"Jordy\") | students_middle_name : middle_name (\"Alberta\", \"Vaughn\", \"Osborne\"), student_id (12, 9, 1) | student_enrolment : student_enrolment_id (8, 8, 1), semester_id (15, 15, 12), student_id (7, 6, 1), degree_program_id (10, 12, 11), other_details (None) | student_enrolment_courses : student_enrolment_id (2, 6, 5), student_course_id (83814225, 96, 681404), course_id (12, 10, 4) | transcripts : transcript_id (11, 6, 11), other_details (None), transcript_date (\"1986-07-12 07:27:29\", \"2010-12-13 10:55:15\", \"1984-01-18 23:07:07\") | transcript_contents : transcript_id (9, 12, 8), student_course_id (8, 76, 28982908)",
        "schema_without_content": "addresses : zip_postcode , line_3 , city , other_address_details , country , line_2 , line_1 , address_id , state_province_county  | courses : course_id , other_details , course_description , course_name  | departments : other_details , department_description , department_id , department_name  | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details  | sections : course_id , section_name , section_description , other_details , section_id  | semesters : semester_description , semester_name , other_details , semester_id  | students : last_name , student_id , permanent_address_id , cell_mobile_number 919-3594x3661\", \"246-7921\", \"246-7921\", date_first_registered , date_left , ssn , current_address_id , other_student_details , email_address , first_name  | students_middle_name : middle_name , student_id  | student_enrolment : student_enrolment_id , semester_id , student_id , degree_program_id , other_details  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_id , other_details , transcript_date  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select first_name, middle_name, last_name from students order by date_first_registered limit 1",
            "select first_name, last_name, middle_name from students order by date_first_registered limit 1",
            "select middle_name, first_name, last_name from students order by date_first_registered limit 1",
            "select middle_name, last_name, first_name from students order by date_first_registered limit 1",
            "select last_name, first_name, middle_name from students order by date_first_registered limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_first_registered",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_first_registered",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the first student to register?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "first",
            "student",
            "to",
            "register",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            41,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "split_map": {
            "students": "first_name"
        },
        "schema_with_content": "addresses : line_3 (None), address_id (13, 2, 13), other_address_details (None), zip_postcode (\"777\", \"839\", \"943\"), city (\"Port Chelsea\", \"Lake Careyberg\", \"Goodwinhaven\"), line_2 (\"Apt. 689\", \"Apt. 335\", \"Suite 383\"), state_province_county (\"Florida\", \"NorthCarolina\", \"Virginia\"), country (\"Norfolk Island\", \"Angola\", \"Angola\"), line_1 (\"858 Peggie Bypass Suite 212\", \"193 Marlin Brook\", \"9283 Schulist Falls Apt. 037\") | courses : course_id (6, 1, 2), course_description (\"c\", \"l\", \"n\"), other_details (None), course_name (\"math\", \"rs\", \"ai\") | departments : department_description (\"error\", \"in\", \"natus\"), other_details (None), department_id (12, 12, 9), department_name (\"geography\", \"art\", \"economics\") | degree_programs : department_id (15, 11, 15), degree_program_id (15, 7, 10), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"voluptas\", \"qui\", \"unde\") | sections : section_description (\"voluptatem\", \"non\", \"qui\"), section_id (12, 7, 12), section_name (\"c\", \"u\", \"d\"), course_id (5, 6, 7), other_details (None) | semesters : semester_name (\"spring 2012\", \"spring 2013\", \"fall 2018\"), semester_id (3, 12, 9), semester_description (\"c\", \"l\", \"l\"), other_details (None) | students : ssn (\"68095\", \"\", \"141072406\"), email_address (\"nbruen@example.org\", \"dell43@example.net\", \"nya.lesch@example.net\"), permanent_address_id (11, 8, 11), last_name (\"Christiansen\", \"Mohr\", \"Gleichner\"), other_student_details (\"omnis\", \"nesciunt\", \"et\"), cell_mobile_number (\"(605)919-3594x3661\", \"(507)365-8405\", \"677.401.9382\"), date_first_registered (\"1989-05-24 23:31:29\", \"2014-03-28 05:48:23\", \"2009-09-25 00:14:25\"), student_id (15, 13, 11), middle_name (\"Judd\", \"Aaliyah\", \"Neal\"), current_address_id (12, 14, 14), date_left (\"1999-08-24 00:07:10\", \"1975-10-09 00:49:27\", \"2017-07-09 21:38:43\") | students_first_name : first_name (\"Stanford\", \"Helga\", \"Gregg\"), student_id (15, 15, 12) | student_enrolment : other_details (None), degree_program_id (12, 3, 11), student_id (5, 4, 6), semester_id (4, 15, 2), student_enrolment_id (1, 13, 4) | student_enrolment_courses : student_enrolment_id (8, 13, 14), student_course_id (9860, 9860, 76), course_id (8, 13, 2) | transcripts : other_details (None), transcript_date (\"1988-04-30 01:19:47\", \"1990-03-05 11:59:41\", \"1988-04-30 01:19:47\"), transcript_id (11, 15, 1) | transcript_contents : transcript_id (4, 8, 9), student_course_id (28982908, 96, 70882679)",
        "schema_without_content": "addresses : line_3 , address_id , other_address_details , zip_postcode , city , line_2 , state_province_county , country , line_1  | courses : course_id , course_description , other_details , course_name  | departments : department_description , other_details , department_id , department_name  | degree_programs : department_id , degree_program_id , other_details , degree_summary_name , degree_summary_description  | sections : section_description , section_id , section_name , course_id , other_details  | semesters : semester_name , semester_id , semester_description , other_details  | students : ssn , email_address , permanent_address_id , last_name , other_student_details , cell_mobile_number 919-3594x3661\", \"365-8405\", \"677.401.9382\", date_first_registered , student_id , middle_name , current_address_id , date_left  | students_first_name : first_name , student_id  | student_enrolment : other_details , degree_program_id , student_id , semester_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select t1.first_name, t2.middle_name, t1.last_name from students_first_name as t1 join students as t2 on t1.student_id = t2.student_id order by t2.date_first_registered asc limit 1",
            "select t1.first_name, t2.middle_name, t2.last_name from students_first_name as t1 join students as t2 on t1.student_id = t2.student_id where t2.date_first_registered = (select min(date_first_registered) from students) limit 1",
            "select t2.first_name, t2.middle_name, t2.last_name from students as t2 where t2.date_first_registered = (select min(date_first_registered) from students) limit 1",
            "select t2.first_name, t2.middle_name, t2.last_name from students as t2 order by t2.date_first_registered asc limit 1",
            "select t1.first_name, t2.middle_name, t1.last_name from students_first_name as t1 join students as t2 on t1.student_id = t2.student_id where t2.date_first_registered = (select min(date_first_registered) from students) order by t2.date_first_registered limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_first_registered asc limit 1",
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "earliest",
            "graduate",
            "of",
            "the",
            "school",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "split_map": {
            "students": "last_name"
        },
        "schema_with_content": "addresses : line_1 (\"2294 Grant Square Apt. 235\", \"9283 Schulist Falls Apt. 037\", \"0643 Muller Vista\"), country (\"Kyrgyz Republic\", \"Norfolk Island\", \"New Caledonia\"), other_address_details (None), line_2 (\"Apt. 388\", \"Suite 239\", \"Suite 383\"), line_3 (None), state_province_county (\"Hawaii\", \"WestVirginia\", \"Florida\"), address_id (10, 4, 6), zip_postcode (\"446\", \"777\", \"902\"), city (\"Prohaskafort\", \"Herzoghaven\", \"New Clemensburgh\") | courses : course_id (15, 12, 11), other_details (None), course_description (\"b\", \"c\", \"n\"), course_name (\"oop\", \"os\", \"en\") | departments : department_description (\"ea\", \"natus\", \"nostrum\"), department_id (14, 3, 8), other_details (None), department_name (\"statistics\", \"management\", \"economics\") | degree_programs : other_details (None), department_id (13, 4, 14), degree_program_id (4, 12, 2), degree_summary_description (\"aut\", \"et\", \"architecto\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_id (3, 5, 10), section_description (\"ex\", \"qui\", \"facilis\"), section_name (\"o\", \"o\", \"u\"), course_id (14, 10, 5), other_details (None) | semesters : other_details (None), semester_description (\"f\", \"t\", \"x\"), semester_id (9, 15, 4), semester_name (\"fall 2010\", \"fall 2018\", \"spring 2014\") | students : ssn (\"965\", \"3\", \"3\"), cell_mobile_number (\"1-879-796-8987x164\", \"(096)889-8954x524\", \"877.549.9067x8723\"), current_address_id (12, 2, 2), student_id (15, 13, 5), date_left (\"2006-08-04 17:26:49\", \"1990-09-01 05:03:27\", \"2006-08-04 17:26:49\"), email_address (\"jillian26@example.net\", \"dell43@example.net\", \"erwin.zboncak@example.com\"), middle_name (\"Anna\", \"Golda\", \"Judd\"), other_student_details (\"autem\", \"qui\", \"dolorum\"), permanent_address_id (11, 9, 9), date_first_registered (\"1982-02-14 08:46:35\", \"1971-02-05 07:28:23\", \"2005-12-15 08:42:10\"), first_name (\"Warren\", \"Gregg\", \"Stanford\") | students_last_name : student_id (13, 11, 14), last_name (\"Schuppe\", \"Carroll\", \"Christiansen\") | student_enrolment : semester_id (13, 12, 6), student_enrolment_id (4, 7, 10), degree_program_id (4, 10, 4), student_id (7, 14, 9), other_details (None) | student_enrolment_courses : student_enrolment_id (6, 10, 4), student_course_id (604750, 604750, 70882679), course_id (14, 12, 6) | transcripts : transcript_date (\"1986-07-12 07:27:29\", \"2010-12-13 10:55:15\", \"1975-05-20 18:31:21\"), other_details (None), transcript_id (11, 12, 10) | transcript_contents : transcript_id (15, 4, 2), student_course_id (96, 28982908, 76)",
        "schema_without_content": "addresses : line_1 , country , other_address_details , line_2 , line_3 , state_province_county , address_id , zip_postcode , city  | courses : course_id , other_details , course_description , course_name  | departments : department_description , department_id , other_details , department_name  | degree_programs : other_details , department_id , degree_program_id , degree_summary_description , degree_summary_name  | sections : section_id , section_description , section_name , course_id , other_details  | semesters : other_details , semester_description , semester_id , semester_name  | students : ssn , cell_mobile_number 889-8954x524\", \"877.549.9067x8723\", current_address_id , student_id , date_left , email_address , middle_name , other_student_details , permanent_address_id , date_first_registered , first_name  | students_last_name : student_id , last_name  | student_enrolment : semester_id , student_enrolment_id , degree_program_id , student_id , other_details  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select first_name, middle_name, last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id join courses on student_enrolment_courses.course_id = courses.course_id order by student_enrolment_courses.student_course_id limit 1",
            "select first_name, middle_name, last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join student_enrolment_courses on student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id join courses on student_enrolment_courses.course_id = courses.course_id join transcripts on transcripts.transcript_id = student_enrolment_courses.student_course_id order by transcript_date limit 1",
            "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join courses as t4 on t3.course_id = t4.course_id order by t3.student_course_id limit 1",
            "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join courses as t4 on t3.course_id = t4.course_id join transcript_contents as t5 on t5.student_course_id = t3.student_course_id join transcripts as t6 on t5.transcript_id = t6.transcript_id order by t6.transcript_date limit 1",
            "select t1.first_name, t1.middle_name, t1.last_name from (select t1.student_id, min(t1.student_course_id) as first_course from student_enrolment_courses as t1 join courses as t2 on t1.course_id = t2.course_id group by t1.student_id) as t3 join students as t1 on t3.student_id = t1.student_id join student_enrolment_courses as t4 on t4.student_course_id = t3.first_course join courses as t5 on t4.course_id = t5.course_id"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "earliest",
            "graduate",
            "of",
            "the",
            "school",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "split_map": {
            "students": "middle_name"
        },
        "schema_with_content": "addresses : country (\"Haiti\", \"Croatia\", \"Gabon\"), address_id (8, 15, 2), state_province_county (\"Washington\", \"Delaware\", \"Florida\"), line_2 (\"Apt. 468\", \"Apt. 583\", \"Apt. 689\"), line_3 (None), line_1 (\"3999 Aufderhar Ways Suite 593\", \"9283 Schulist Falls Apt. 037\", \"979 Haag Shores Suite 656\"), other_address_details (None), city (\"Michelleburgh\", \"Mariliehaven\", \"New Clemensburgh\"), zip_postcode (\"068\", \"541\", \"943\") | courses : course_id (8, 13, 7), course_name (\"nlp\", \"ml\", \"pl\"), course_description (\"l\", \"p\", \"l\"), other_details (None) | departments : department_description (\"aliquam\", \"non\", \"doloribus\"), department_id (4, 10, 1), other_details (None), department_name (\"drama\", \"art\", \"math\") | degree_programs : other_details (None), department_id (15, 12, 15), degree_program_id (8, 6, 10), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"quam\", \"cumque\", \"assumenda\") | sections : section_description (\"quis\", \"voluptas\", \"voluptatem\"), section_name (\"e\", \"c\", \"g\"), course_id (9, 7, 6), other_details (None), section_id (14, 13, 2) | semesters : semester_description (\"c\", \"q\", \"y\"), other_details (None), semester_name (\"spring 2013\", \"summer 2010\", \"fall 2018\"), semester_id (7, 15, 11) | students : first_name (\"Jarvis\", \"Deon\", \"Deon\"), email_address (\"qo'kon@example.com\", \"baumbach.lucious@example.org\", \"nbruen@example.org\"), student_id (13, 9, 15), other_student_details (\"qui\", \"dolorum\", \"autem\"), date_left (\"2004-12-08 05:29:11\", \"2013-10-05 17:41:28\", \"2006-08-04 17:26:49\"), permanent_address_id (5, 9, 15), last_name (\"Kemmer\", \"Ward\", \"Weimann\"), ssn (\"3\", \"68095\", \"668\"), cell_mobile_number (\"03174364122\", \"03174364122\", \"09700166582\"), date_first_registered (\"2017-01-04 08:10:25\", \"2005-12-15 08:42:10\", \"1973-05-19 19:12:46\"), current_address_id (10, 9, 10) | students_middle_name : student_id (2, 1, 7), middle_name (\"Aaliyah\", \"Anna\", \"Mossie\") | student_enrolment : student_id (7, 6, 7), degree_program_id (4, 5, 8), semester_id (6, 5, 4), student_enrolment_id (10, 9, 8), other_details (None) | student_enrolment_courses : student_course_id (1, 438800, 438800), student_enrolment_id (2, 8, 10), course_id (6, 4, 2) | transcripts : other_details (None), transcript_date (\"1985-08-21 09:32:39\", \"1985-04-29 01:20:20\", \"2013-06-30 13:01:40\"), transcript_id (10, 11, 4) | transcript_contents : student_course_id (2, 0, 96), transcript_id (9, 2, 6)",
        "schema_without_content": "addresses : country , address_id , state_province_county , line_2 , line_3 , line_1 , other_address_details , city , zip_postcode  | courses : course_id , course_name , course_description , other_details  | departments : department_description , department_id , other_details , department_name  | degree_programs : other_details , department_id , degree_program_id , degree_summary_name , degree_summary_description  | sections : section_description , section_name , course_id , other_details , section_id  | semesters : semester_description , other_details , semester_name , semester_id  | students : first_name , email_address , student_id , other_student_details , date_left , permanent_address_id , last_name , ssn , cell_mobile_number , date_first_registered , current_address_id  | students_middle_name : student_id , middle_name  | student_enrolment : student_id , degree_program_id , semester_id , student_enrolment_id , other_details  | student_enrolment_courses : student_course_id , student_enrolment_id , course_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1",
            "select t1.first_name, t1.last_name, t2.middle_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1",
            "select t2.middle_name, t1.first_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1",
            "select t2.middle_name, t1.last_name, t1.first_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1",
            "select t1.last_name, t2.middle_name, t1.first_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered asc limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "value"
        ],
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "question_toks": [
            "Who",
            "is",
            "the",
            "earliest",
            "graduate",
            "of",
            "the",
            "school",
            "?",
            "List",
            "the",
            "first",
            "name",
            ",",
            "middle",
            "name",
            "and",
            "last",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "split_map": {
            "students": "first_name"
        },
        "schema_with_content": "addresses : other_address_details (None), state_province_county (\"Wyoming\", \"Washington\", \"Florida\"), line_2 (\"Apt. 406\", \"Suite 830\", \"Suite 830\"), city (\"Rutherfordtown\", \"Lake Laishafurt\", \"Port Elvisfurt\"), zip_postcode (\"943\", \"895\", \"386\"), country (\"Kyrgyz Republic\", \"Croatia\", \"New Caledonia\"), address_id (11, 9, 10), line_3 (None), line_1 (\"9283 Schulist Falls Apt. 037\", \"492 Wilkinson Route\", \"193 Marlin Brook\") | courses : course_description (\"p\", \"d\", \"q\"), course_id (12, 10, 7), other_details (None), course_name (\"ml\", \"ai\", \"ml\") | departments : department_name (\"biology\", \"medical\", \"management\"), department_description (\"non\", \"non\", \"natus\"), department_id (9, 11, 8), other_details (None) | degree_programs : department_id (7, 14, 3), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), degree_summary_description (\"quam\", \"unde\", \"architecto\"), degree_program_id (6, 1, 11) | sections : section_name (\"y\", \"f\", \"e\"), section_id (8, 7, 2), section_description (\"voluptatem\", \"et\", \"reprehenderit\"), other_details (None), course_id (14, 2, 12) | semesters : semester_name (\"spring 2014\", \"spring 2010\", \"spring 2017\"), semester_description (\"y\", \"f\", \"m\"), other_details (None), semester_id (10, 14, 9) | students : permanent_address_id (14, 15, 15), other_student_details (\"omnis\", \"dolorum\", \"voluptatem\"), middle_name (\"Alberta\", \"Judd\", \"Lorenz\"), date_left (\"2006-08-04 17:26:49\", \"2007-11-28 12:50:21\", \"2006-08-04 17:26:49\"), cell_mobile_number (\"171-642-5684\", \"171-642-5684\", \"1-879-796-8987x164\"), date_first_registered (\"2005-12-15 08:42:10\", \"1976-10-26 02:33:06\", \"1982-02-14 08:46:35\"), student_id (7, 4, 4), current_address_id (9, 15, 7), email_address (\"beth42@example.org\", \"erwin.zboncak@example.com\", \"gracie29@example.com\"), last_name (\"Jaskolski\", \"Huel\", \"Gleichner\"), ssn (\"141072406\", \"\", \"\") | students_first_name : first_name (\"Reva\", \"Jarvis\", \"Delaney\"), student_id (11, 14, 14) | student_enrolment : semester_id (5, 2, 15), student_id (4, 12, 14), student_enrolment_id (9, 12, 1), other_details (None), degree_program_id (9, 5, 12) | student_enrolment_courses : course_id (2, 12, 3), student_course_id (45105806, 7, 76), student_enrolment_id (9, 8, 8) | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1998-11-22 12:18:29\", \"1999-01-06 20:06:46\"), other_details (None), transcript_id (5, 4, 2) | transcript_contents : student_course_id (0, 2, 8), transcript_id (13, 2, 12)",
        "schema_without_content": "addresses : other_address_details , state_province_county , line_2 , city , zip_postcode , country , address_id , line_3 , line_1  | courses : course_description , course_id , other_details , course_name  | departments : department_name , department_description , department_id , other_details  | degree_programs : department_id , degree_summary_name , other_details , degree_summary_description , degree_program_id  | sections : section_name , section_id , section_description , other_details , course_id  | semesters : semester_name , semester_description , other_details , semester_id  | students : permanent_address_id , other_student_details , middle_name , date_left , cell_mobile_number , date_first_registered , student_id , current_address_id , email_address , last_name , ssn  | students_first_name : first_name , student_id  | student_enrolment : semester_id , student_id , student_enrolment_id , other_details , degree_program_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join transcripts as t4 on t3.student_course_id = t4.transcript_id order by t4.transcript_date limit 1",
            "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join transcripts as t4 on t3.student_course_id = t4.transcript_id where t4.transcript_date = (select min(transcript_date) from transcripts) limit 1",
            "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join transcripts as t4 on t3.student_course_id = t4.transcript_id where t4.transcript_date = (select min(transcript_date) from transcripts group by transcript_date order by transcript_date limit 1) limit 1",
            "select t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join transcripts as t4 on t3.student_course_id = t4.transcript_id where t4.transcript_id = (select min(transcript_id) from transcripts) limit 1",
            "select t1.first_name, t1.middle_name, t1.last_name from students_first_name as t1 join students as t2 on t1.student_id = t2.student_id join student_enrolment as t3 on t2.student_id = t3.student_id join student_enrolment_courses as t4 on t3.student_enrolment_id = t4.student_enrolment_id join transcripts as t5 on t4.course_id = t5.transcript_id where t5.transcript_date = (select min(t6.transcript_date) from transcripts as t6) limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "earliest",
            "school",
            "graduate",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "split_map": {
            "students": "last_name"
        },
        "schema_with_content": "addresses : line_2 (\"Suite 865\", \"Apt. 406\", \"Suite 674\"), line_1 (\"858 Peggie Bypass Suite 212\", \"74046 Metz Walk Apt. 113\", \"7081 Eda Center\"), state_province_county (\"Hawaii\", \"Wyoming\", \"Virginia\"), city (\"Prohaskafort\", \"Michelleburgh\", \"Herzoghaven\"), country (\"Cook Islands\", \"New Caledonia\", \"Gabon\"), address_id (13, 5, 15), other_address_details (None), line_3 (None), zip_postcode (\"902\", \"148\", \"902\") | courses : other_details (None), course_id (4, 7, 14), course_name (\"oop\", \"math\", \"la\"), course_description (\"p\", \"c\", \"q\") | departments : department_name (\"statistics\", \"management\", \"medical\"), department_id (5, 1, 14), department_description (\"non\", \"nostrum\", \"consequatur\"), other_details (None) | degree_programs : degree_program_id (4, 11, 10), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None), department_id (15, 8, 12), degree_summary_description (\"et\", \"unde\", \"cumque\") | sections : section_description (\"ad\", \"nesciunt\", \"reprehenderit\"), section_id (12, 12, 2), other_details (None), section_name (\"b\", \"g\", \"p\"), course_id (9, 2, 1) | semesters : semester_id (10, 8, 3), semester_name (\"spring 2016\", \"winter 2018\", \"winter 2018\"), semester_description (\"g\", \"y\", \"x\"), other_details (None) | students : date_left (\"2007-08-02 04:12:58\", \"1990-09-01 05:03:27\", \"2014-05-30 23:32:02\"), student_id (5, 10, 1), other_student_details (\"facilis\", \"quia\", \"voluptatem\"), email_address (\"mya88@example.org\", \"baumbach.lucious@example.org\", \"nbruen@example.org\"), middle_name (\"Brooklyn\", \"Osborne\", \"Aaliyah\"), current_address_id (15, 1, 15), ssn (\"39\", \"965\", \"248\"), permanent_address_id (15, 11, 9), first_name (\"Orrin\", \"Orrin\", \"Frida\"), date_first_registered (\"1986-02-24 21:12:23\", \"1973-05-19 19:12:46\", \"2018-03-13 09:56:22\"), cell_mobile_number (\"(507)365-8405\", \"(982)153-1469x1733\", \"07661787471\") | students_last_name : last_name (\"Weimann\", \"Balistreri\", \"Jaskolski\"), student_id (14, 3, 15) | student_enrolment : student_enrolment_id (1, 11, 11), student_id (7, 14, 4), degree_program_id (3, 3, 4), semester_id (12, 2, 12), other_details (None) | student_enrolment_courses : course_id (3, 3, 10), student_enrolment_id (10, 4, 2), student_course_id (438800, 8, 8) | transcripts : other_details (None), transcript_id (9, 2, 1), transcript_date (\"1984-01-18 23:07:07\", \"1986-07-12 07:27:29\", \"2013-06-30 13:01:40\") | transcript_contents : student_course_id (0, 96, 2), transcript_id (11, 12, 8)",
        "schema_without_content": "addresses : line_2 , line_1 , state_province_county , city , country , address_id , other_address_details , line_3 , zip_postcode  | courses : other_details , course_id , course_name , course_description  | departments : department_name , department_id , department_description , other_details  | degree_programs : degree_program_id , degree_summary_name , other_details , department_id , degree_summary_description  | sections : section_description , section_id , other_details , section_name , course_id  | semesters : semester_id , semester_name , semester_description , other_details  | students : date_left , student_id , other_student_details , email_address , middle_name , current_address_id , ssn , permanent_address_id , first_name , date_first_registered , cell_mobile_number 365-8405\", \"153-1469x1733\", \"07661787471\" | students_last_name : last_name , student_id  | student_enrolment : student_enrolment_id , student_id , degree_program_id , semester_id , other_details  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_id , transcript_date  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_first_registered limit 1",
            "select t1.first_name, t1.middle_name, t3.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join students_last_name as t3 on t1.student_id = t3.student_id join student_enrolment_courses as t4 on t2.student_enrolment_id = t4.student_enrolment_id join courses as t5 on t4.course_id = t5.course_id order by t1.date_first_registered asc limit 1",
            "select t1.first_name, t1.middle_name, t3.last_name from students as t1 join transcripts as t2 on t1.student_id = t2.transcript_id join transcript_contents as t3 on t2.transcript_id = t3.transcript_id join student_enrolment_courses as t4 on t3.student_course_id = t4.student_course_id join courses as t5 on t4.course_id = t5.course_id order by t1.date_first_registered asc limit 1",
            "select t1.first_name, t1.middle_name, t3.last_name from students as t1 join transcript_contents as t2 on t1.student_id = t2.student_course_id join student_enrolment_courses as t3 on t2.student_course_id = t3.student_course_id join courses as t4 on t3.course_id = t4.course_id join student_enrolment as t5 on t3.student_enrolment_id = t5.student_enrolment_id join students_last_name as t6 on t1.student_id = t6.student_id order by t1.date_first_registered asc limit 1",
            "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join courses as t4 on t3.course_id = t4.course_id join transcript_contents as t5 on t3.student_course_id = t5.student_course_id join transcripts as t6 on t5.transcript_id = t6.transcript_id order by t1.date_first_registered limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "query2": "select t1.first_name, t1.middle_name, t2.last_name from students as t1 join students_last_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "earliest",
            "school",
            "graduate",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "split_map": {
            "students": "middle_name"
        },
        "schema_with_content": "addresses : other_address_details (None), zip_postcode (\"638\", \"068\", \"777\"), line_2 (\"Suite 674\", \"Apt. 468\", \"Suite 865\"), country (\"Iceland\", \"Haiti\", \"Samoa\"), line_1 (\"2294 Grant Square Apt. 235\", \"492 Wilkinson Route\", \"979 Haag Shores Suite 656\"), city (\"South Palma\", \"New Clemensburgh\", \"Lake Laishafurt\"), line_3 (None), address_id (9, 13, 14), state_province_county (\"Idaho\", \"Washington\", \"Virginia\") | courses : course_description (\"b\", \"l\", \"n\"), other_details (None), course_name (\"pl\", \"en\", \"ml\"), course_id (8, 1, 11) | departments : department_name (\"economics\", \"dance\", \"art\"), department_id (5, 6, 9), department_description (\"nostrum\", \"autem\", \"in\"), other_details (None) | degree_programs : degree_program_id (5, 10, 8), department_id (7, 4, 7), degree_summary_description (\"placeat\", \"et\", \"esse\"), other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : course_id (12, 9, 7), other_details (None), section_id (1, 2, 2), section_description (\"quis\", \"quis\", \"doloremque\"), section_name (\"h\", \"e\", \"a\") | semesters : semester_description (\"o\", \"m\", \"y\"), other_details (None), semester_name (\"spring 2012\", \"fall 2018\", \"spring 2013\"), semester_id (10, 9, 10) | students : email_address (\"nbruen@example.org\", \"skassulke@example.net\", \"dell43@example.net\"), current_address_id (2, 2, 12), last_name (\"Balistreri\", \"Jaskolski\", \"Jaskolski\"), date_left (\"1975-10-09 00:49:27\", \"1999-08-24 00:07:10\", \"1999-08-24 00:07:10\"), permanent_address_id (14, 8, 5), student_id (6, 8, 9), other_student_details (\"autem\", \"laborum\", \"non\"), first_name (\"Reva\", \"Jarvis\", \"Warren\"), date_first_registered (\"2017-01-04 08:10:25\", \"2014-03-28 05:48:23\", \"1986-02-24 21:12:23\"), ssn (\"668\", \"43\", \"\"), cell_mobile_number (\"677.401.9382\", \"1-879-796-8987x164\", \"(213)445-0399x85208\") | students_middle_name : middle_name (\"Judd\", \"Neal\", \"Judd\"), student_id (3, 2, 12) | student_enrolment : student_enrolment_id (3, 5, 2), student_id (6, 4, 5), degree_program_id (9, 2, 3), semester_id (2, 4, 13), other_details (None) | student_enrolment_courses : student_course_id (9860, 8, 28982908), course_id (4, 2, 10), student_enrolment_id (8, 10, 5) | transcripts : transcript_date (\"1984-01-18 23:07:07\", \"1984-12-19 00:37:21\", \"2002-09-24 06:11:49\"), other_details (None), transcript_id (11, 2, 1) | transcript_contents : transcript_id (12, 6, 13), student_course_id (7, 8, 8)",
        "schema_without_content": "addresses : other_address_details , zip_postcode , line_2 , country , line_1 , city , line_3 , address_id , state_province_county  | courses : course_description , other_details , course_name , course_id  | departments : department_name , department_id , department_description , other_details  | degree_programs : degree_program_id , department_id , degree_summary_description , other_details , degree_summary_name  | sections : course_id , other_details , section_id , section_description , section_name  | semesters : semester_description , other_details , semester_name , semester_id  | students : email_address , current_address_id , last_name , date_left , permanent_address_id , student_id , other_student_details , first_name , date_first_registered , ssn , cell_mobile_number 445-0399x85208\" | students_middle_name : middle_name , student_id  | student_enrolment : student_enrolment_id , student_id , degree_program_id , semester_id , other_details  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : transcript_date , other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select t1.first_name, t3.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join transcripts as t3 on t2.student_enrolment_id = t3.transcript_id order by t3.transcript_date asc limit 1",
            "select t1.first_name, t3.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_enrolment_id = t3.student_enrolment_id join courses as t4 on t3.course_id = t4.course_id order by t4.course_name asc limit 1",
            "select t1.first_name, t3.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join courses as t3 on t2.degree_program_id = t3.course_id join transcripts as t4 on t2.semester_id = t4.transcript_id order by t4.transcript_date asc limit 1",
            "select t1.first_name, t3.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t2.student_id = t3.student_enrolment_id join courses as t4 on t3.student_enrolment_id = t4.course_id order by t3.student_course_id asc limit 1",
            "select t1.first_name, t3.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t1.student_id = t3.student_enrolment_id join transcripts as t4 on t2.student_enrolment_id = t4.transcript_id order by t4.transcript_date asc limit 1"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "query2": "select t1.first_name, t2.middle_name, t1.last_name from students as t1 join students_middle_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "FROM",
            "Students",
            "ORDER",
            "BY",
            "date_left",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "middle_name",
            ",",
            "last_name",
            "from",
            "students",
            "order",
            "by",
            "date_left",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "question_toks": [
            "What",
            "is",
            "the",
            "first",
            ",",
            "middle",
            ",",
            "and",
            "last",
            "name",
            "of",
            "the",
            "earliest",
            "school",
            "graduate",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            42,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                35,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "students": "student_id"
        },
        "orig_query": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "split_map": {
            "students": "first_name"
        },
        "schema_with_content": "addresses : city (\"Port Chelsea\", \"New Clemensburgh\", \"Goodwinhaven\"), line_3 (None), other_address_details (None), state_province_county (\"Kentucky\", \"Kentucky\", \"Wyoming\"), line_1 (\"0643 Muller Vista\", \"492 Wilkinson Route\", \"67942 Carlotta Ferry Apt. 686\"), address_id (6, 13, 9), country (\"Haiti\", \"Croatia\", \"New Caledonia\"), line_2 (\"Apt. 468\", \"Suite 703\", \"Suite 239\"), zip_postcode (\"386\", \"590\", \"847\") | courses : course_id (8, 9, 13), other_details (None), course_name (\"db\", \"dl\", \"pl\"), course_description (\"p\", \"d\", \"b\") | departments : department_description (\"nihil\", \"non\", \"doloribus\"), department_name (\"medical\", \"drama\", \"linguistic\"), other_details (None), department_id (7, 14, 4) | degree_programs : other_details (None), department_id (8, 14, 11), degree_program_id (13, 8, 7), degree_summary_description (\"qui\", \"earum\", \"officiis\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\") | sections : section_name (\"d\", \"g\", \"a\"), section_description (\"voluptatem\", \"doloremque\", \"ex\"), course_id (10, 1, 4), section_id (4, 12, 3), other_details (None) | semesters : other_details (None), semester_description (\"o\", \"o\", \"t\"), semester_name (\"winter 2018\", \"spring 2015\", \"fall 2018\"), semester_id (1, 1, 3) | students : last_name (\"Ward\", \"Gleichner\", \"Kemmer\"), student_id (15, 10, 3), permanent_address_id (11, 9, 8), middle_name (\"Alberta\", \"Alberta\", \"Aaliyah\"), other_student_details (\"voluptatem\", \"nesciunt\", \"facilis\"), date_left (\"2006-08-04 17:26:49\", \"2007-08-02 04:12:58\", \"2007-03-31 09:53:19\"), current_address_id (6, 9, 9), ssn (\"68095\", \"43\", \"494\"), cell_mobile_number (\"(507)365-8405\", \"03174364122\", \"09700166582\"), date_first_registered (\"2007-08-29 23:25:41\", \"1976-10-26 02:33:06\", \"1971-02-05 07:28:23\"), email_address (\"gracie29@example.com\", \"jhuel@example.com\", \"gracie29@example.com\") | students_first_name : first_name (\"Orrin\", \"Helga\", \"Jarvis\"), student_id (14, 13, 1) | student_enrolment : semester_id (4, 2, 9), other_details (None), student_enrolment_id (14, 11, 9), degree_program_id (9, 12, 9), student_id (12, 9, 12) | student_enrolment_courses : course_id (6, 13, 12), student_course_id (438800, 45105806, 70882679), student_enrolment_id (14, 14, 9) | transcripts : other_details (None), transcript_date (\"2002-09-24 06:11:49\", \"1975-05-20 18:31:21\", \"1990-03-05 11:59:41\"), transcript_id (5, 4, 8) | transcript_contents : student_course_id (70882679, 76, 0), transcript_id (4, 11, 12)",
        "schema_without_content": "addresses : city , line_3 , other_address_details , state_province_county , line_1 , address_id , country , line_2 , zip_postcode  | courses : course_id , other_details , course_name , course_description  | departments : department_description , department_name , other_details , department_id  | degree_programs : other_details , department_id , degree_program_id , degree_summary_description , degree_summary_name  | sections : section_name , section_description , course_id , section_id , other_details  | semesters : other_details , semester_description , semester_name , semester_id  | students : last_name , student_id , permanent_address_id , middle_name , other_student_details , date_left , current_address_id , ssn , cell_mobile_number 365-8405\", \"03174364122\", \"09700166582\", date_first_registered , email_address  | students_first_name : first_name , student_id  | student_enrolment : semester_id , other_details , student_enrolment_id , degree_program_id , student_id  | student_enrolment_courses : course_id , student_course_id , student_enrolment_id  | transcripts : other_details , transcript_date , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id join student_enrolment as t3 on t1.student_id = t3.student_id join student_enrolment_courses as t4 on t3.student_enrolment_id = t4.student_enrolment_id join courses as t5 on t4.course_id = t5.course_id join transcripts as t6 on t4.student_course_id = t6.transcript_id where t6.transcript_date = (select min(transcript_date) from transcripts)",
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id join student_enrolment as t3 on t1.student_id = t3.student_id join student_enrolment_courses as t4 on t3.student_enrolment_id = t4.student_enrolment_id join courses as t5 on t4.course_id = t5.course_id join transcript_contents as t6 on t4.student_course_id = t6.student_course_id join transcripts as t7 on t6.transcript_id = t7.transcript_id where t7.transcript_date = (select min(transcript_date) from transcripts)",
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t1.student_id = t3.student_id join courses as t4 on t3.course_id = t4.course_id join transcripts as t5 on t3.student_course_id = t5.transcript_id where t5.transcript_date = (select min(transcript_date) from transcripts)",
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id join student_enrolment_courses as t3 on t1.student_id = t3.student_id join courses as t4 on t3.course_id = t4.course_id join transcript_contents as t5 on t3.student_course_id = t5.student_course_id join transcripts as t6 on t5.transcript_id = t6.transcript_id where t6.transcript_date = (select min(transcript_date) from transcripts)",
            "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id join student_enrolment as t3 on t1.student_id = t3.student_id join student_enrolment_courses as t4 on t3.student_enrolment_id = t4.student_enrolment_id join sections as t5 on t4.course_id = t5.course_id join transcripts as t6 on t4.student_course_id = t6.transcript_id where t6.transcript_date = (select min(transcript_date) from transcripts)"
        ],
        "query1": "select first_name, middle_name, last_name from students order by date_left asc limit 1",
        "query2": "select t2.first_name, t1.middle_name, t1.last_name from students as t1 join students_first_name as t2 on t1.student_id = t2.student_id order by t1.date_left asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "transcript_date",
            ",",
            "other_details",
            "FROM",
            "Transcripts",
            "ORDER",
            "BY",
            "transcript_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "asc",
            "limit",
            "value"
        ],
        "question": "When is the first transcript released? List the date and details.",
        "question_toks": [
            "When",
            "is",
            "the",
            "first",
            "transcript",
            "released",
            "?",
            "List",
            "the",
            "date",
            "and",
            "details",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "transcripts": "transcript_id"
        },
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "split_map": {
            "transcripts": "other_details"
        },
        "schema_with_content": "addresses : line_3 (None), address_id (15, 2, 14), line_2 (\"Apt. 305\", \"Apt. 406\", \"Suite 674\"), zip_postcode (\"895\", \"638\", \"777\"), state_province_county (\"Hawaii\", \"Arkansas\", \"Delaware\"), country (\"New Caledonia\", \"Lesotho\", \"Bermuda\"), city (\"Herzoghaven\", \"Lake Careyberg\", \"Lake Careyberg\"), line_1 (\"186 Evan Motorway Apt. 409\", \"193 Marlin Brook\", \"67942 Carlotta Ferry Apt. 686\"), other_address_details (None) | courses : course_name (\"pl\", \"db\", \"oop\"), other_details (None), course_id (11, 11, 7), course_description (\"l\", \"c\", \"c\") | departments : department_name (\"linguistic\", \"geography\", \"law\"), other_details (None), department_id (4, 11, 11), department_description (\"ea\", \"nisi\", \"consequatur\") | degree_programs : other_details (None), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_program_id (2, 9, 12), degree_summary_description (\"et\", \"quam\", \"esse\"), department_id (15, 8, 7) | sections : section_name (\"j\", \"o\", \"k\"), section_id (11, 3, 2), course_id (10, 4, 2), other_details (None), section_description (\"doloremque\", \"quis\", \"voluptatem\") | semesters : semester_name (\"spring 2019\", \"spring 2018\", \"spring 2017\"), semester_id (4, 6, 3), other_details (None), semester_description (\"g\", \"m\", \"w\") | students : last_name (\"Gleichner\", \"Mohr\", \"Jaskolski\"), email_address (\"swift.kolby@example.com\", \"skassulke@example.net\", \"baumbach.lucious@example.org\"), permanent_address_id (15, 4, 3), first_name (\"Orrin\", \"Stanford\", \"Frida\"), cell_mobile_number (\"1-009-710-5151\", \"877.549.9067x8723\", \"03174364122\"), ssn (\"34458427\", \"\", \"\"), student_id (6, 6, 12), current_address_id (10, 2, 14), date_first_registered (\"1989-05-24 23:31:29\", \"1971-02-05 07:28:23\", \"1989-05-24 23:31:29\"), other_student_details (\"dolorum\", \"autem\", \"qui\"), middle_name (\"Judd\", \"Cleve\", \"Judd\"), date_left (\"1990-09-01 05:03:27\", \"2007-08-02 04:12:58\", \"2013-10-05 17:41:28\") | student_enrolment : other_details (None), student_enrolment_id (13, 12, 6), student_id (6, 14, 6), degree_program_id (5, 12, 2), semester_id (13, 2, 9) | student_enrolment_courses : student_course_id (2, 8, 28982908), course_id (13, 2, 4), student_enrolment_id (6, 4, 13) | transcripts : transcript_date (\"1975-05-06 12:04:47\", \"1985-04-29 01:20:20\", \"1985-08-21 09:32:39\"), transcript_id (3, 1, 6) | transcripts_other_details : transcript_id (11, 11, 11), other_details (None) | transcript_contents : transcript_id (13, 11, 2), student_course_id (2, 8, 8)",
        "schema_without_content": "addresses : line_3 , address_id , line_2 , zip_postcode , state_province_county , country , city , line_1 , other_address_details  | courses : course_name , other_details , course_id , course_description  | departments : department_name , other_details , department_id , department_description  | degree_programs : other_details , degree_summary_name , degree_program_id , degree_summary_description , department_id  | sections : section_name , section_id , course_id , other_details , section_description  | semesters : semester_name , semester_id , other_details , semester_description  | students : last_name , email_address , permanent_address_id , first_name , cell_mobile_number , ssn , student_id , current_address_id , date_first_registered , other_student_details , middle_name , date_left  | student_enrolment : other_details , student_enrolment_id , student_id , degree_program_id , semester_id  | student_enrolment_courses : student_course_id , course_id , student_enrolment_id  | transcripts : transcript_date , transcript_id  | transcripts_other_details : transcript_id , other_details  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select transcript_date, transcripts_other_details.other_details from transcripts join transcripts_other_details on transcripts.transcript_id = transcripts_other_details.transcript_id order by transcript_date asc limit 1",
            "select transcripts.transcript_date, transcripts_other_details.other_details from transcripts join transcripts_other_details on transcripts.transcript_id = transcripts_other_details.transcript_id order by transcripts.transcript_date asc limit 1",
            "select transcript_date, other_details from transcripts join transcripts_other_details on transcripts.transcript_id = transcripts_other_details.transcript_id order by transcript_date asc limit 1",
            "select transcripts.transcript_date, transcripts_other_details.other_details from transcripts join transcripts_other_details on transcripts.transcript_id = transcripts_other_details.transcript_id where transcript_date = (select min(transcript_date) from transcripts) limit 1",
            "select transcripts.transcript_date, transcripts_other_details.other_details from transcripts join transcripts_other_details on transcripts.transcript_id = transcripts_other_details.transcript_id where transcripts.transcript_date = (select min(transcript_date) from transcripts) limit 1"
        ],
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query2": "select t1.transcript_date, t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id order by t1.transcript_date asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "transcript_date",
            ",",
            "other_details",
            "FROM",
            "Transcripts",
            "ORDER",
            "BY",
            "transcript_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "asc",
            "limit",
            "value"
        ],
        "question": "When is the first transcript released? List the date and details.",
        "question_toks": [
            "When",
            "is",
            "the",
            "first",
            "transcript",
            "released",
            "?",
            "List",
            "the",
            "date",
            "and",
            "details",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "transcripts": "transcript_id"
        },
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "split_map": {
            "transcripts": "transcript_date"
        },
        "schema_with_content": "addresses : line_2 (\"Apt. 388\", \"Suite 865\", \"Suite 383\"), line_1 (\"202 Hessel Views Apt. 468\", \"67942 Carlotta Ferry Apt. 686\", \"202 Hessel Views Apt. 468\"), country (\"Gibraltar\", \"Cook Islands\", \"Norfolk Island\"), line_3 (None), zip_postcode (\"068\", \"839\", \"895\"), state_province_county (\"Wyoming\", \"Idaho\", \"Delaware\"), other_address_details (None), address_id (7, 8, 10), city (\"Port Evanston\", \"Port Elvisfurt\", \"Mariliehaven\") | courses : course_name (\"ml\", \"db\", \"nlp\"), course_description (\"n\", \"l\", \"v\"), course_id (15, 2, 11), other_details (None) | departments : other_details (None), department_description (\"in\", \"in\", \"nihil\"), department_id (12, 13, 4), department_name (\"geography\", \"dance\", \"engineer\") | degree_programs : department_id (3, 13, 15), degree_program_id (15, 12, 15), degree_summary_description (\"et\", \"officiis\", \"voluptas\"), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), other_details (None) | sections : course_id (9, 9, 7), section_id (11, 2, 2), section_name (\"f\", \"e\", \"g\"), section_description (\"ad\", \"voluptatem\", \"nesciunt\"), other_details (None) | semesters : semester_description (\"c\", \"y\", \"o\"), semester_id (8, 9, 11), other_details (None), semester_name (\"summer 2010\", \"spring 2019\", \"fall 2010\") | students : current_address_id (14, 12, 15), date_first_registered (\"1976-10-26 02:33:06\", \"1982-02-14 08:46:35\", \"1986-02-24 21:12:23\"), middle_name (\"Aaliyah\", \"Anna\", \"Cleve\"), email_address (\"baumbach.lucious@example.org\", \"baumbach.lucious@example.org\", \"skassulke@example.net\"), student_id (8, 11, 13), other_student_details (\"et\", \"omnis\", \"qui\"), ssn (\"402\", \"156\", \"248\"), last_name (\"Schuppe\", \"Balistreri\", \"Gleichner\"), cell_mobile_number (\"1-009-710-5151\", \"(213)445-0399x85208\", \"03174364122\"), first_name (\"Warren\", \"Jarvis\", \"Deon\"), date_left (\"2007-03-31 09:53:19\", \"2007-11-28 12:50:21\", \"2007-11-28 12:50:21\"), permanent_address_id (9, 9, 5) | student_enrolment : other_details (None), degree_program_id (12, 11, 5), student_enrolment_id (10, 13, 15), semester_id (4, 13, 9), student_id (5, 12, 7) | student_enrolment_courses : course_id (3, 10, 4), student_enrolment_id (14, 5, 14), student_course_id (8, 76, 604750) | transcripts : other_details (None), transcript_id (1, 13, 10) | transcripts_transcript_date : transcript_id (5, 10, 6), transcript_date (\"1986-07-12 07:27:29\", \"2002-09-24 06:11:49\", \"2013-06-30 13:01:40\") | transcript_contents : transcript_id (6, 12, 8), student_course_id (70882679, 96, 96)",
        "schema_without_content": "addresses : line_2 , line_1 , country , line_3 , zip_postcode , state_province_county , other_address_details , address_id , city  | courses : course_name , course_description , course_id , other_details  | departments : other_details , department_description , department_id , department_name  | degree_programs : department_id , degree_program_id , degree_summary_description , degree_summary_name , other_details  | sections : course_id , section_id , section_name , section_description , other_details  | semesters : semester_description , semester_id , other_details , semester_name  | students : current_address_id , date_first_registered , middle_name , email_address , student_id , other_student_details , ssn , last_name , cell_mobile_number 445-0399x85208\", \"03174364122\", first_name , date_left , permanent_address_id  | student_enrolment : other_details , degree_program_id , student_enrolment_id , semester_id , student_id  | student_enrolment_courses : course_id , student_enrolment_id , student_course_id  | transcripts : other_details , transcript_id  | transcripts_transcript_date : transcript_id , transcript_date  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date limit 1",
            "select t2.transcript_date, t1.other_details from transcripts_transcript_date as t2 join transcripts as t1 on t2.transcript_id = t1.transcript_id order by t2.transcript_date limit 1",
            "select t1.other_details, t2.transcript_date from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date limit 1",
            "select t1.other_details, t2.transcript_date from transcripts_transcript_date as t2 join transcripts as t1 on t2.transcript_id = t1.transcript_id order by t2.transcript_date limit 1",
            "select min(t2.transcript_date), t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id"
        ],
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query2": "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "transcript_date",
            ",",
            "other_details",
            "FROM",
            "Transcripts",
            "ORDER",
            "BY",
            "transcript_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "question_toks": [
            "What",
            "is",
            "the",
            "earliest",
            "date",
            "of",
            "a",
            "transcript",
            "release",
            ",",
            "and",
            "what",
            "details",
            "can",
            "you",
            "tell",
            "me",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "transcripts": "transcript_id"
        },
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "split_map": {
            "transcripts": "other_details"
        },
        "schema_with_content": "addresses : line_3 (None), line_2 (\"Suite 239\", \"Suite 674\", \"Apt. 468\"), address_id (15, 7, 4), zip_postcode (\"148\", \"638\", \"943\"), country (\"Norfolk Island\", \"Croatia\", \"Angola\"), city (\"Lake Laishafurt\", \"Port Elvisfurt\", \"Port Evanston\"), state_province_county (\"Washington\", \"Delaware\", \"Arkansas\"), line_1 (\"7081 Eda Center\", \"67942 Carlotta Ferry Apt. 686\", \"2294 Grant Square Apt. 235\"), other_address_details (None) | courses : other_details (None), course_description (\"w\", \"c\", \"p\"), course_id (13, 11, 6), course_name (\"fr\", \"db\", \"ml\") | departments : department_id (3, 7, 4), department_description (\"consequatur\", \"nostrum\", \"nihil\"), other_details (None), department_name (\"economics\", \"linguistic\", \"law\") | degree_programs : degree_program_id (1, 6, 1), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), department_id (15, 8, 3), degree_summary_description (\"qui\", \"aperiam\", \"cumque\"), other_details (None) | sections : other_details (None), section_name (\"u\", \"j\", \"k\"), course_id (5, 10, 2), section_id (8, 13, 8), section_description (\"voluptatem\", \"qui\", \"nesciunt\") | semesters : semester_name (\"spring 2014\", \"spring 2015\", \"spring 2013\"), semester_id (5, 3, 13), semester_description (\"q\", \"y\", \"o\"), other_details (None) | students : student_id (6, 11, 2), email_address (\"dell43@example.net\", \"gracie29@example.com\", \"qo'kon@example.com\"), last_name (\"Kemmer\", \"Osinski\", \"Weimann\"), date_left (\"2007-08-02 04:12:58\", \"2006-08-04 17:26:49\", \"2016-04-09 12:27:04\"), permanent_address_id (15, 3, 14), current_address_id (14, 15, 9), middle_name (\"Osborne\", \"Violet\", \"Alberta\"), first_name (\"Timmothy\", \"Warren\", \"Helga\"), cell_mobile_number (\"03174364122\", \"(982)153-1469x1733\", \"(982)153-1469x1733\"), other_student_details (\"non\", \"autem\", \"autem\"), ssn (\"156\", \"141072406\", \"668\"), date_first_registered (\"1982-02-14 08:46:35\", \"1989-05-24 23:31:29\", \"2007-08-29 23:25:41\") | student_enrolment : student_id (6, 6, 12), degree_program_id (3, 2, 8), student_enrolment_id (15, 8, 10), other_details (None), semester_id (6, 4, 5) | student_enrolment_courses : student_enrolment_id (4, 8, 5), student_course_id (438800, 2, 438800), course_id (6, 2, 8) | transcripts : transcript_date (\"1998-11-22 12:18:29\", \"1999-01-06 20:06:46\", \"1975-05-06 12:04:47\"), transcript_id (4, 6, 9) | transcripts_other_details : other_details (None), transcript_id (5, 10, 11) | transcript_contents : transcript_id (15, 9, 6), student_course_id (28982908, 45105806, 96)",
        "schema_without_content": "addresses : line_3 , line_2 , address_id , zip_postcode , country , city , state_province_county , line_1 , other_address_details  | courses : other_details , course_description , course_id , course_name  | departments : department_id , department_description , other_details , department_name  | degree_programs : degree_program_id , degree_summary_name , department_id , degree_summary_description , other_details  | sections : other_details , section_name , course_id , section_id , section_description  | semesters : semester_name , semester_id , semester_description , other_details  | students : student_id , email_address , last_name , date_left , permanent_address_id , current_address_id , middle_name , first_name , cell_mobile_number 153-1469x1733\", \"153-1469x1733\", other_student_details , ssn , date_first_registered  | student_enrolment : student_id , degree_program_id , student_enrolment_id , other_details , semester_id  | student_enrolment_courses : student_enrolment_id , student_course_id , course_id  | transcripts : transcript_date , transcript_id  | transcripts_other_details : other_details , transcript_id  | transcript_contents : transcript_id , student_course_id ",
        "chatgpt_out": [
            "select min(transcript_date), other_details from transcripts_other_details group by transcript_id order by transcript_date limit 1",
            "select transcript_date, other_details from transcripts_other_details where transcript_id in (select transcript_id from transcripts where transcript_date = (select min(transcript_date) from transcripts))",
            "select min(transcript_date), other_details from transcripts_other_details where transcript_id in (select transcript_id from student_enrolment_courses where student_enrolment_id in (select student_enrolment_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where department_id in (select department_id from departments where department_name = 'linguistic')))) group by transcript_id order by transcript_date limit 1",
            "select transcript_date, other_details from transcripts_other_details where transcript_id in (select transcript_id from student_enrolment_courses where student_enrolment_id in (select student_enrolment_id from student_enrolment where degree_program_id in (select degree_program_id from degree_programs where department_id in (select department_id from departments where department_name = 'linguistic')))) and transcript_date = (select min(transcript_date) from transcripts)",
            "select min(t1.transcript_date), t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id, t2.other_details order by t1.transcript_date limit 1"
        ],
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query2": "select t1.transcript_date, t2.other_details from transcripts as t1 join transcripts_other_details as t2 on t1.transcript_id = t2.transcript_id order by t1.transcript_date asc limit 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "query_toks": [
            "SELECT",
            "transcript_date",
            ",",
            "other_details",
            "FROM",
            "Transcripts",
            "ORDER",
            "BY",
            "transcript_date",
            "ASC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "transcript_date",
            ",",
            "other_details",
            "from",
            "transcripts",
            "order",
            "by",
            "transcript_date",
            "asc",
            "limit",
            "value"
        ],
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "question_toks": [
            "What",
            "is",
            "the",
            "earliest",
            "date",
            "of",
            "a",
            "transcript",
            "release",
            ",",
            "and",
            "what",
            "details",
            "can",
            "you",
            "tell",
            "me",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        9
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            53,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                53,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                54,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "transcripts": "transcript_id"
        },
        "orig_query": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "split_map": {
            "transcripts": "transcript_date"
        },
        "schema_with_content": "addresses : country (\"Samoa\", \"Kyrgyz Republic\", \"Kyrgyz Republic\"), state_province_county (\"Virginia\", \"Arkansas\", \"Delaware\"), line_3 (None), address_id (7, 7, 7), zip_postcode (\"902\", \"541\", \"068\"), line_2 (\"Suite 865\", \"Suite 239\", \"Apt. 406\"), other_address_details (None), line_1 (\"7081 Eda Center\", \"186 Evan Motorway Apt. 409\", \"9283 Schulist Falls Apt. 037\"), city (\"New Clemensburgh\", \"Port Evanston\", \"Prohaskafort\") | courses : course_name (\"nlp\", \"ai\", \"cal\"), other_details (None), course_id (15, 5, 8), course_description (\"k\", \"c\", \"q\") | departments : department_name (\"history\", \"management\", \"computer science\"), department_description (\"dolorem\", \"ea\", \"aliquam\"), other_details (None), department_id (8, 13, 5) | degree_programs : degree_program_id (1, 8, 7), other_details (None), department_id (14, 2, 4), degree_summary_name (\"Master\", \"Bachelor\", \"PHD\"), degree_summary_description (\"quam\", \"esse\", \"architecto\") | sections : course_id (9, 7, 2), section_description (\"ex\", \"provident\", \"ex\"), section_id (6, 2, 13), other_details (None), section_name (\"k\", \"y\", \"c\") | semesters : semester_id (4, 13, 14), semester_description (\"y\", \"q\", \"m\"), other_details (None), semester_name (\"fall 2018\", \"spring 2013\", \"spring 2016\") | students : last_name (\"Kemmer\", \"Mohr\", \"Ward\"), email_address (\"erwin.zboncak@example.com\", \"swift.kolby@example.com\", \"beth42@example.org\"), first_name (\"Jett\", \"Jett\", \"Orrin\"), other_student_details (\"facilis\", \"assumenda\", \"et\"), permanent_address_id (3, 11, 3), middle_name (\"Aaliyah\", \"Anna\", \"Neal\"), student_id (10, 8, 1), current_address_id (1, 12, 14), date_first_registered (\"1986-02-24 21:12:23\", \"1989-05-24 23:31:29\", \"1982-06-19 13:15:18\"), ssn (\"494\", \"6274274\", \"3\"), cell_mobile_number (\"(213)445-0399x85208\", \"1-879-796-8987x164\", \"(213)445-0399x85208\"), date_left (\"2004-12-08 05:29:11\", \"1982-06-11 00:25:39\", \"2013-10-05 17:41:28\") | student_enrolment : degree_program_id (10, 2, 2), semester_id (6, 12, 12), other_details (None), student_id (1, 5, 12), student_enrolment_id (13, 3, 6) | student_enrolment_courses : student_enrolment_id (4, 5, 13), course_id (4, 4, 11), student_course_id (8, 45105806, 45105806) | transcripts : transcript_id (8, 15, 5), other_details (None) | transcripts_transcript_date : transcript_date (\"1999-01-06 20:06:46\", \"2013-06-30 13:01:40\", \"1998-11-22 12:18:29\"), transcript_id (5, 13, 8) | transcript_contents : student_course_id (28982908, 45105806, 45105806), transcript_id (5, 4, 11)",
        "schema_without_content": "addresses : country , state_province_county , line_3 , address_id , zip_postcode , line_2 , other_address_details , line_1 , city  | courses : course_name , other_details , course_id , course_description  | departments : department_name , department_description , other_details , department_id  | degree_programs : degree_program_id , other_details , department_id , degree_summary_name , degree_summary_description  | sections : course_id , section_description , section_id , other_details , section_name  | semesters : semester_id , semester_description , other_details , semester_name  | students : last_name , email_address , first_name , other_student_details , permanent_address_id , middle_name , student_id , current_address_id , date_first_registered , ssn , cell_mobile_number 445-0399x85208\", \"1-879-796-8987x164\", \"445-0399x85208\", date_left  | student_enrolment : degree_program_id , semester_id , other_details , student_id , student_enrolment_id  | student_enrolment_courses : student_enrolment_id , course_id , student_course_id  | transcripts : transcript_id , other_details  | transcripts_transcript_date : transcript_date , transcript_id  | transcript_contents : student_course_id , transcript_id ",
        "chatgpt_out": [
            "select min(t2.transcript_date), t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id",
            "select t1.other_details, min(t2.transcript_date) from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id",
            "select min(t2.transcript_date), t1.* from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id",
            "select t1.*, min(t2.transcript_date) from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id",
            "select min(t2.transcript_date) as earliest_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id"
        ],
        "query1": "select transcript_date, other_details from transcripts order by transcript_date asc limit 1",
        "query2": "select t2.transcript_date, t1.other_details from transcripts as t1 join transcripts_transcript_date as t2 on t1.transcript_id = t2.transcript_id order by t2.transcript_date asc limit 1"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "Directed_by",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "Original_air_date"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date"
        ],
        "question": "list all cartoon titles and their directors ordered by their air date",
        "question_toks": [
            "list",
            "all",
            "cartoon",
            "titles",
            "and",
            "their",
            "directors",
            "ordered",
            "by",
            "their",
            "air",
            "date"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select title, directed_by from cartoon order by original_air_date",
        "split_map": {
            "cartoon": "title"
        },
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), id (\"705\", \"703\", \"714\"), pay_per_view_ppv (\"no\"), content (\"music\"), package_option (\"Option\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\"), series_name (\"Music Box Italia\", \"Radio Capital TiV\u00c3\u00b9\", \"MTV Hits\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\") | tv_series : air_date (\"November 5, 2007\", \"December 10, 2007\", \"November 5, 2007\"), episode (\"Friendly Skies\", \"The Legend of Dylan McCleen\", \"Friendly Skies\"), weekly_rank (70.0, 43.0, 61.0), channel (\"717\", \"719\", \"717\"), rating (\"3.8\", \"4.0\", \"3.7\"), id (9.0, 5.0, 1.0), 18_49_rating_share (\"2.7/7\", \"2.2/6\", \"1.5/4\"), viewers_m (\"6.94\", \"6.06\", \"4.24\"), share (7.0, 7.0, 7.0) | cartoon : id (4.0, 12.0, 8.0), original_air_date (\"February20,2009\", \"February6,2009\", \"January2,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (112.0, 104.0, 103.0), channel (\"703\", \"707\", \"705\"), written_by (\"James Krieg\", \"J. M. DeMatteis\", \"Michael Jelenic\") | cartoon_title : title (\"Deep Cover for Batman!\", \"Terror on Dinosaur Island!\", \"The Eyes of Despero!\"), id (5.0, 5.0, 4.0)",
        "schema_without_content": "tv_channel : hight_definition_tv , id , pay_per_view_ppv , content , package_option , series_name , pixel_aspect_ratio_par , country , language  | tv_series : air_date , episode , weekly_rank , channel , rating , id , 18_49_rating_share , viewers_m , share  | cartoon : id , original_air_date , directed_by , production_code , channel , written_by  | cartoon_title : title , id ",
        "chatgpt_out": [
            "select t4.title, t3.directed_by from cartoon_title as t4 join cartoon as t3 on t4.id = t3.id order by t3.original_air_date",
            "select t4.title, t3.directed_by from cartoon_title as t4 join cartoon as t3 on t4.id = t3.id order by t3.original_air_date asc",
            "select t4.title, t3.directed_by from cartoon_title as t4 join cartoon as t3 on t4.id = t3.id order by t3.original_air_date desc",
            "select cartoon_title.title, cartoon.directed_by from cartoon_title join cartoon on cartoon_title.id = cartoon.id order by cartoon.original_air_date",
            "select cartoon_title.title, cartoon.directed_by from cartoon_title join cartoon on cartoon_title.id = cartoon.id order by cartoon.original_air_date asc"
        ],
        "query1": "select title, directed_by from cartoon order by original_air_date",
        "query2": "select t2.title, t1.directed_by from cartoon as t1 join cartoon_title as t2 on t1.id = t2.id order by t1.original_air_date"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "Directed_by",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "Original_air_date"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date"
        ],
        "question": "list all cartoon titles and their directors ordered by their air date",
        "question_toks": [
            "list",
            "all",
            "cartoon",
            "titles",
            "and",
            "their",
            "directors",
            "ordered",
            "by",
            "their",
            "air",
            "date"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select title, directed_by from cartoon order by original_air_date",
        "split_map": {
            "cartoon": "directed_by"
        },
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), content (\"music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"Match Music\", \"MTV Music\", \"MTV Classic\"), pay_per_view_ppv (\"no\"), id (\"715\", \"709\", \"703\"), package_option (\"no ( FTV )\", \"Option\", \"Sky Famiglia\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : 18_49_rating_share (\"2.4/6\", \"3.5/9\", \"2.7/7\"), viewers_m (\"6.75\", \"5.61\", \"6.75\"), channel (\"714\", \"713\", \"714\"), air_date (\"December 17, 2007\", \"September 24, 2007\", \"October 29, 2007\"), episode (\"Emily\", \"Emily\", \"Blowback\"), rating (\"4.0\", \"4.4\", \"3.5\"), weekly_rank (72.0, 50.0, 68.0), share (5.0, 9.0, 9.0), id (1.0, 5.0, 12.0) | cartoon : production_code (111.0, 112.0, 101.0), id (1.0, 3.0, 10.0), channel (\"700\", \"701\", \"703\"), written_by (\"Joseph Kuhr\", \"James Krieg\", \"Adam Beechen\"), original_air_date (\"February20,2009\", \"February6,2009\", \"November21,2008\"), title (\"Invasion of the Secret Santas!\", \"Day of the Dark Knight!\", \"Return of the Fearsome Fangs!\") | cartoon_directed_by : id (2.0, 9.0, 12.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "schema_without_content": "tv_channel : hight_definition_tv , language , content , pixel_aspect_ratio_par , series_name , pay_per_view_ppv , id , package_option \", \"Option\", \"Sky Famiglia\", country  | tv_series : 18_49_rating_share , viewers_m , channel , air_date , episode , rating , weekly_rank , share , id  | cartoon : production_code , id , channel , written_by , original_air_date , title  | cartoon_directed_by : id , directed_by ",
        "chatgpt_out": [
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date",
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id group by t1.title, t2.directed_by order by t1.original_air_date",
            "select title, directed_by from (select t1.title, t2.directed_by, t1.original_air_date from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date) as temp",
            "select t1.title, t2.directed_by from cartoon as t1 inner join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date asc",
            "select title, directed_by from (select t1.title, t2.directed_by, t1.original_air_date from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date asc) as temp order by original_air_date"
        ],
        "query1": "select title, directed_by from cartoon order by original_air_date",
        "query2": "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "Directed_by",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "Original_air_date"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date"
        ],
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "directors",
            "of",
            "all",
            "the",
            "cartoons",
            "that",
            "are",
            "ordered",
            "by",
            "air",
            "date",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select title, directed_by from cartoon order by original_air_date",
        "split_map": {
            "cartoon": "title"
        },
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), series_name (\"Music Box Italia\", \"MTV Music\", \"Rock TV\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"no ( FTV )\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), id (\"703\", \"715\", \"704\") | tv_series : weekly_rank (80.0, 80.0, 43.0), channel (\"707\", \"728\", \"708\"), 18_49_rating_share (\"2.7/7\", \"2.4/6\", \"3.5/9\"), episode (\"A Love of a Lifetime\", \"The Hanged Man\", \"The Legend of Dylan McCleen\"), rating (\"3.0\", \"5.8\", \"3.8\"), viewers_m (\"4.24\", \"5.75\", \"5.28\"), id (5.0, 3.0, 3.0), share (6.0, 7.0, 6.0), air_date (\"November 26, 2007\", \"December 17, 2007\", \"November 26, 2007\") | cartoon : channel (\"707\", \"701\", \"703\"), written_by (\"James Krieg\", \"Todd Casey\", \"Michael Jelenic\"), id (9.0, 11.0, 10.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"November14,2008\", \"January30,2009\", \"January30,2009\"), production_code (106.0, 103.0, 103.0) | cartoon_title : id (1.0, 2.0, 11.0), title (\"Journey to the Center of the Bat!\", \"Journey to the Center of the Bat!\", \"Deep Cover for Batman!\")",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , country , hight_definition_tv , content , series_name , package_option \", \"Sky Famiglia\", \"no \", language , pay_per_view_ppv , id  | tv_series : weekly_rank , channel , 18_49_rating_share , episode , rating , viewers_m , id , share , air_date  | cartoon : channel , written_by , id , directed_by , original_air_date , production_code  | cartoon_title : id , title ",
        "chatgpt_out": [
            "select t1.* from cartoon_title as t1 join cartoon as t2 on t1.id = t2.id order by t2.original_air_date",
            "select t1.title, t2.directed_by from cartoon_title as t1 join cartoon as t2 on t1.id = t2.id order by t2.original_air_date",
            "select t1.* from cartoon as t1 join cartoon_title as t2 on t1.id = t2.id order by t1.original_air_date",
            "select t2.title, t1.directed_by from cartoon as t1 join cartoon_title as t2 on t1.id = t2.id order by t1.original_air_date",
            "select t2.title, t1.directed_by from cartoon as t1 join cartoon_title as t2 on t1.id = t2.id order by t1.original_air_date asc"
        ],
        "query1": "select title, directed_by from cartoon order by original_air_date",
        "query2": "select t2.title, t1.directed_by from cartoon as t1 join cartoon_title as t2 on t1.id = t2.id order by t1.original_air_date"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "title",
            ",",
            "Directed_by",
            "FROM",
            "Cartoon",
            "ORDER",
            "BY",
            "Original_air_date"
        ],
        "query_toks_no_value": [
            "select",
            "title",
            ",",
            "directed_by",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date"
        ],
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "question_toks": [
            "What",
            "is",
            "the",
            "name",
            "and",
            "directors",
            "of",
            "all",
            "the",
            "cartoons",
            "that",
            "are",
            "ordered",
            "by",
            "air",
            "date",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                21,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select title, directed_by from cartoon order by original_air_date",
        "split_map": {
            "cartoon": "directed_by"
        },
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\"), id (\"703\", \"704\", \"715\"), pay_per_view_ppv (\"no\"), content (\"music\"), language (\"Italian\", \"English\"), series_name (\"MTV Classic\", \"MTV Classic\", \"Hip Hop TV\") | tv_series : viewers_m (\"5.28\", \"6.05\", \"8.23\"), rating (\"3.7\", \"4.0\", \"4.4\"), 18_49_rating_share (\"2.7/7\", \"2.1/5\", \"2.2/6\"), id (4.0, 12.0, 10.0), weekly_rank (80.0, 62.0, 72.0), share (6.0, 7.0, 6.0), episode (\"The Legend of Dylan McCleen\", \"A Love of a Lifetime\", \"The Hanged Man\"), air_date (\"December 17, 2007\", \"November 26, 2007\", \"October 29, 2007\"), channel (\"714\", \"728\", \"714\") | cartoon : written_by (\"Matt Wayne\", \"Matt Wayne\", \"Steven Melching\"), title (\"Day of the Dark Knight!\", \"The Rise of the Blue Beetle!\", \"Day of the Dark Knight!\"), channel (\"707\", \"706\", \"708\"), id (2.0, 6.0, 1.0), original_air_date (\"November14,2008\", \"January30,2009\", \"February27,2009\"), production_code (112.0, 108.0, 101.0) | cartoon_directed_by : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (11.0, 11.0, 9.0)",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , country , hight_definition_tv , package_option , id , pay_per_view_ppv , content , language , series_name  | tv_series : viewers_m , rating , 18_49_rating_share , id , weekly_rank , share , episode , air_date , channel  | cartoon : written_by , title , channel , id , original_air_date , production_code  | cartoon_directed_by : directed_by , id ",
        "chatgpt_out": [
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date",
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date desc",
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.production_code",
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.id",
            "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.channel"
        ],
        "query1": "select title, directed_by from cartoon order by original_air_date",
        "query2": "select t1.title, t2.directed_by from cartoon as t1 join cartoon_directed_by as t2 on t1.id = t2.id order by t1.original_air_date"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "content",
            ")",
            "FROM",
            "TV_Channel",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "List the number of different series names and contents in the TV Channel table.",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "different",
            "series",
            "names",
            "and",
            "contents",
            "in",
            "the",
            "TV",
            "Channel",
            "table",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                true
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel",
        "split_map": {
            "tv_channel": "series_name"
        },
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"706\", \"700\", \"706\"), content (\"music\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\") | tv_channel_series_name : id (\"700\", \"713\", \"703\"), series_name (\"Music Box Italia\", \"Music Box Italia\", \"Sky Music\") | tv_series : air_date (\"October 1, 2007\", \"November 26, 2007\", \"September 24, 2007\"), rating (\"3.5\", \"3.0\", \"4.3\"), channel (\"708\", \"714\", \"714\"), id (6.0, 10.0, 5.0), weekly_rank (61.0, 67.0, 80.0), 18_49_rating_share (\"2.4/6\", \"3.5/9\", \"2.4/6\"), share (9.0, 5.0, 7.0), viewers_m (\"4.24\", \"5.75\", \"6.94\"), episode (\"Blowback\", \"Home By Another Way\", \"Keepers\") | cartoon : production_code (101.0, 110.0, 111.0), original_air_date (\"January30,2009\", \"December12,2008\", \"February27,2009\"), id (6.0, 5.0, 7.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"708\", \"703\", \"703\"), written_by (\"Joseph Kuhr\", \"Adam Beechen\", \"James Krieg\"), title (\"The Rise of the Blue Beetle!\", \"The Eyes of Despero!\", \"Journey to the Center of the Bat!\")",
        "schema_without_content": "tv_channel : hight_definition_tv , language , pixel_aspect_ratio_par , id , content , package_option , country , pay_per_view_ppv  | tv_channel_series_name : id , series_name  | tv_series : air_date , rating , channel , id , weekly_rank , 18_49_rating_share , share , viewers_m , episode  | cartoon : production_code , original_air_date , id , directed_by , channel , written_by , title ",
        "chatgpt_out": [
            "select count(distinct series_name), count(distinct content) from tv_channel_series_name",
            "select count(series_name), count(content) from tv_channel_series_name",
            "select count(distinct t1.series_name), count(distinct t2.content) from tv_channel_series_name as t1 join tv_channel as t2 on t1.id = t2.id",
            "select count(t1.series_name), count(t2.content) from tv_channel_series_name as t1 join tv_channel as t2 on t1.id = t2.id",
            "select count(distinct content), count(distinct series_name) from tv_channel"
        ],
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel",
        "query2": "select count(distinct t2.series_name), count(distinct t1.content) from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "content",
            ")",
            "FROM",
            "TV_Channel",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "List the number of different series names and contents in the TV Channel table.",
        "question_toks": [
            "List",
            "the",
            "number",
            "of",
            "different",
            "series",
            "names",
            "and",
            "contents",
            "in",
            "the",
            "TV",
            "Channel",
            "table",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                true
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel",
        "split_map": {
            "tv_channel": "content"
        },
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"714\", \"700\", \"706\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), package_option (\"Sky Famiglia + Sky HD\", \"no ( FTV )\", \"Option\"), pay_per_view_ppv (\"no\"), series_name (\"MTV Live HD\", \"Match Music\", \"MTV Classic\") | tv_channel_content : id (\"708\", \"715\", \"728\"), content (\"music\") | tv_series : episode (\"The Hanged Man\", \"Keepers\", \"Emily\"), rating (\"5.8\", \"4.4\", \"3.0\"), air_date (\"September 24, 2007\", \"December 17, 2007\", \"September 24, 2007\"), id (11.0, 12.0, 3.0), weekly_rank (65.0, 50.0, 65.0), viewers_m (\"5.28\", \"4.24\", \"8.23\"), share (7.0, 7.0, 6.0), 18_49_rating_share (\"1.7/5\", \"2.7/7\", \"1.7/5\"), channel (\"701\", \"728\", \"714\") | cartoon : title (\"Journey to the Center of the Bat!\", \"Invasion of the Secret Santas!\", \"Day of the Dark Knight!\"), id (9.0, 5.0, 2.0), channel (\"708\", \"701\", \"703\"), written_by (\"James Krieg\", \"Steven Melching\", \"Steven Melching\"), original_air_date (\"December5,2008\", \"January23,2009\", \"February20,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), production_code (107.0, 104.0, 102.0)",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , id , hight_definition_tv , country , language , package_option \", \"Option\", pay_per_view_ppv , series_name  | tv_channel_content : id , content  | tv_series : episode , rating , air_date , id , weekly_rank , viewers_m , share , 18_49_rating_share , channel  | cartoon : title , id , channel , written_by , original_air_date , directed_by , production_code ",
        "chatgpt_out": [
            "select count(distinct name) as num_series, count(distinct content) as num_contents from tv_channel",
            "select count(distinct name), count(distinct content) from tv_channel",
            "select count(distinct series_name), count(distinct content) from tv_channel",
            "select count(distinct series_name) as num_series, count(distinct tv_channel_content.content) as num_contents from tv_channel join tv_channel_content on tv_channel.id = tv_channel_content.id",
            "select count(distinct tv_channel.series_name) as num_series, count(distinct tv_channel_content.content) as num_contents from tv_channel join tv_channel_content on tv_channel.id = tv_channel_content.id"
        ],
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel",
        "query2": "select count(distinct t1.series_name), count(distinct t2.content) from tv_channel as t1 join tv_channel_content as t2 on t1.id = t2.id"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "content",
            ")",
            "FROM",
            "TV_Channel",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "How many different series and contents are listed in the TV Channel table?",
        "question_toks": [
            "How",
            "many",
            "different",
            "series",
            "and",
            "contents",
            "are",
            "listed",
            "in",
            "the",
            "TV",
            "Channel",
            "table",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                true
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel",
        "split_map": {
            "tv_channel": "series_name"
        },
        "schema_with_content": "tv_channel : id (\"703\", \"704\", \"705\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pay_per_view_ppv (\"no\"), package_option (\"Option\", \"no ( FTV )\", \"Sky Famiglia\"), hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), language (\"Italian\", \"English\") | tv_channel_series_name : series_name (\"Music Box Italia\", \"Sky Radio\", \"MTV Live HD\"), id (\"717\", \"706\", \"719\") | tv_series : episode (\"Friendly Skies\", \"Home By Another Way\", \"Home By Another Way\"), weekly_rank (65.0, 71.0, 62.0), 18_49_rating_share (\"2.4/6\", \"2.9/7\", \"2.2/6\"), air_date (\"October 1, 2007\", \"November 19, 2007\", \"October 1, 2007\"), viewers_m (\"6.06\", \"4.24\", \"5.75\"), share (9.0, 9.0, 7.0), id (8.0, 2.0, 6.0), channel (\"728\", \"719\", \"714\"), rating (\"5.8\", \"3.4\", \"4.0\") | cartoon : channel (\"705\", \"706\", \"708\"), written_by (\"Joseph Kuhr\", \"Adam Beechen\", \"Matt Wayne\"), original_air_date (\"January23,2009\", \"January30,2009\", \"February20,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"Return of the Fearsome Fangs!\", \"Deep Cover for Batman!\", \"Invasion of the Secret Santas!\"), production_code (103.0, 110.0, 111.0), id (4.0, 11.0, 3.0)",
        "schema_without_content": "tv_channel : id , country , pay_per_view_ppv , package_option \", \"Sky Famiglia\", hight_definition_tv , pixel_aspect_ratio_par , content , language  | tv_channel_series_name : series_name , id  | tv_series : episode , weekly_rank , 18_49_rating_share , air_date , viewers_m , share , id , channel , rating  | cartoon : channel , written_by , original_air_date , directed_by , title , production_code , id ",
        "chatgpt_out": [
            "select count(distinct series_name), count(distinct content) from tv_channel_series_name",
            "select count(distinct content), count(distinct series_name) from tv_channel_series_name",
            "select count(distinct series_name) as num_series, count(distinct content) as num_contents from tv_channel_series_name",
            "select count(distinct content) as num_contents, count(distinct series_name) as num_series from tv_channel_series_name",
            "select count(distinct t1.series_name), count(distinct t1.content) from tv_channel_series_name as t1 join tv_channel as t2 on t1.id = t2.id"
        ],
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel",
        "query2": "select count(distinct t2.series_name), count(distinct t1.content) from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "count",
            "(",
            "DISTINCT",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "DISTINCT",
            "content",
            ")",
            "FROM",
            "TV_Channel",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "count",
            "(",
            "distinct",
            "series_name",
            ")",
            ",",
            "count",
            "(",
            "distinct",
            "content",
            ")",
            "from",
            "tv_channel"
        ],
        "question": "How many different series and contents are listed in the TV Channel table?",
        "question_toks": [
            "How",
            "many",
            "different",
            "series",
            "and",
            "contents",
            "are",
            "listed",
            "in",
            "the",
            "TV",
            "Channel",
            "table",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                2,
                                true
                            ],
                            null
                        ]
                    ],
                    [
                        3,
                        [
                            0,
                            [
                                0,
                                5,
                                true
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select count(distinct series_name), count(distinct content) from tv_channel",
        "split_map": {
            "tv_channel": "content"
        },
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), id (\"713\", \"703\", \"706\"), pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), hight_definition_tv (\"no\", \"yes\"), series_name (\"Sky Radio\", \"MTV Music\", \"Classica\"), package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Option\") | tv_channel_content : id (\"707\", \"706\", \"713\"), content (\"music\") | tv_series : id (5.0, 8.0, 6.0), share (9.0, 9.0, 9.0), 18_49_rating_share (\"2.7/7\", \"2.4/6\", \"2.4/6\"), weekly_rank (43.0, 80.0, 43.0), channel (\"717\", \"728\", \"708\"), episode (\"A Love of a Lifetime\", \"The Hanged Man\", \"Blowback\"), rating (\"4.4\", \"4.0\", \"4.3\"), air_date (\"October 22, 2007\", \"October 29, 2007\", \"October 8, 2007\"), viewers_m (\"5.13\", \"5.13\", \"4.24\") | cartoon : title (\"Dawn of the Dead Man!\", \"Dawn of the Dead Man!\", \"Terror on Dinosaur Island!\"), original_air_date (\"November14,2008\", \"January16,2009\", \"January16,2009\"), id (6.0, 8.0, 12.0), channel (\"728\", \"701\", \"707\"), production_code (111.0, 107.0, 103.0), written_by (\"Adam Beechen\", \"Michael Jelenic\", \"James Krieg\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "schema_without_content": "tv_channel : language , id , pay_per_view_ppv , country , pixel_aspect_ratio_par , hight_definition_tv , series_name , package_option \", \"Sky Famiglia\", \"Option\" | tv_channel_content : id , content  | tv_series : id , share , 18_49_rating_share , weekly_rank , channel , episode , rating , air_date , viewers_m  | cartoon : title , original_air_date , id , channel , production_code , written_by , directed_by ",
        "chatgpt_out": [
            "select count(distinct series_name) as num_series, count(distinct tv_channel_content.content) as num_contents from tv_channel left join tv_channel_content on tv_channel.id = tv_channel_content.id",
            "select count(distinct tv_channel.series_name) as num_series, count(distinct tv_channel_content.content) as num_contents from tv_channel left join tv_channel_content on tv_channel.id = tv_channel_content.id",
            "select count(distinct series_name) as num_series, count(distinct content) as num_contents from tv_channel left join tv_channel_content on tv_channel.id = tv_channel_content.id",
            "select count(distinct tv_channel.series_name) as num_series, count(distinct tv_channel_content.content) as num_contents from tv_channel left join tv_channel_content on tv_channel.id = tv_channel_content.id group by tv_channel.id",
            "select count(distinct series_name) as num_series, count(distinct tv_channel_content.content) as num_contents from tv_channel_content right join tv_channel on tv_channel.id = tv_channel_content.id group by tv_channel.id"
        ],
        "query1": "select count(distinct series_name), count(distinct content) from tv_channel",
        "query2": "select count(distinct t1.series_name), count(distinct t2.content) from tv_channel as t1 join tv_channel_content as t2 on t1.id = t2.id"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Episode",
            ",",
            "Rating",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series",
            "order",
            "by",
            "rating",
            "desc",
            "limit",
            "value"
        ],
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "question_toks": [
            "List",
            "top",
            "3",
            "highest",
            "Rating",
            "TV",
            "series",
            ".",
            "List",
            "the",
            "TV",
            "series",
            "'s",
            "Episode",
            "and",
            "Rating",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_series": "id"
        },
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3",
        "split_map": {
            "tv_series": "rating"
        },
        "schema_with_content": "tv_channel : package_option (\"no ( FTV )\", \"Sky Famiglia\", \"Sky Famiglia\"), content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"Match Music\", \"Match Music\", \"Music Box Italia\"), id (\"719\", \"700\", \"708\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\") | tv_series : episode (\"Double Down\", \"The Legend of Dylan McCleen\", \"Double Down\"), 18_49_rating_share (\"2.9/7\", \"2.4/6\", \"1.7/5\"), weekly_rank (72.0, 43.0, 65.0), id (4.0, 1.0, 11.0), share (7.0, 5.0, 7.0), viewers_m (\"4.24\", \"4.24\", \"5.61\"), channel (\"700\", \"708\", \"717\"), air_date (\"November 26, 2007\", \"October 29, 2007\", \"September 24, 2007\") | tv_series_rating : rating (\"3.8\", \"3.8\", \"4.4\"), id (11.0, 1.0, 6.0) | cartoon : original_air_date (\"February27,2009\", \"January2,2009\", \"January30,2009\"), channel (\"707\", \"728\", \"701\"), production_code (102.0, 105.0, 103.0), id (10.0, 9.0, 10.0), written_by (\"Matt Wayne\", \"Adam Beechen\", \"Adam Beechen\"), title (\"Enter the Outsiders!\", \"Terror on Dinosaur Island!\", \"Return of the Fearsome Fangs!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "schema_without_content": "tv_channel : package_option \", \"Sky Famiglia\", \"Sky Famiglia\", content , country , series_name , id , pay_per_view_ppv , pixel_aspect_ratio_par , language , hight_definition_tv  | tv_series : episode , 18_49_rating_share , weekly_rank , id , share , viewers_m , channel , air_date  | tv_series_rating : rating , id  | cartoon : original_air_date , channel , production_code , id , written_by , title , directed_by ",
        "chatgpt_out": [
            "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id order by t2.rating desc limit 3",
            "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id where t2.rating in (select distinct rating from tv_series_rating order by rating desc limit 3)",
            "select episode, rating from tv_series where id in (select id from tv_series_rating order by rating desc limit 3)",
            "select t1.episode, t2.rating from tv_series as t1 inner join tv_series_rating as t2 on t1.id = t2.id where t2.rating in (select rating from tv_series_rating order by rating desc limit 3)",
            "select episode, rating from tv_series where id in (select id from tv_series_rating order by rating desc limit 3) order by rating desc"
        ],
        "query1": "select episode, rating from tv_series order by rating desc limit 3",
        "query2": "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id order by t2.rating desc limit 3"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Episode",
            ",",
            "Rating",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series",
            "order",
            "by",
            "rating",
            "desc",
            "limit",
            "value"
        ],
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "question_toks": [
            "List",
            "top",
            "3",
            "highest",
            "Rating",
            "TV",
            "series",
            ".",
            "List",
            "the",
            "TV",
            "series",
            "'s",
            "Episode",
            "and",
            "Rating",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_series": "id"
        },
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3",
        "split_map": {
            "tv_series": "episode"
        },
        "schema_with_content": "tv_channel : package_option (\"no ( FTV )\", \"Option\", \"Sky Famiglia + Sky HD\"), pay_per_view_ppv (\"no\"), id (\"715\", \"728\", \"715\"), hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), series_name (\"Hip Hop TV\", \"myDeejay\", \"Rock TV\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), content (\"music\") | tv_series : id (5.0, 8.0, 2.0), share (6.0, 7.0, 7.0), air_date (\"October 8, 2007\", \"October 29, 2007\", \"October 29, 2007\"), viewers_m (\"4.24\", \"6.05\", \"8.23\"), channel (\"717\", \"701\", \"700\"), weekly_rank (67.0, 43.0, 67.0), rating (\"3.0\", \"5.3\", \"3.4\"), 18_49_rating_share (\"1.7/5\", \"1.5/4\", \"1.5/4\") | tv_series_episode : episode (\"Keepers\", \"Double Down\", \"Double Down\"), id (1.0, 10.0, 5.0) | cartoon : channel (\"707\", \"703\", \"707\"), written_by (\"Steven Melching\", \"Adam Beechen\", \"Adam Beechen\"), original_air_date (\"February20,2009\", \"February20,2009\", \"February27,2009\"), production_code (102.0, 106.0, 110.0), id (7.0, 8.0, 4.0), title (\"Fall of the Blue Beetle!\", \"Evil Under the Sea!\", \"Enter the Outsiders!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "schema_without_content": "tv_channel : package_option \", \"Option\", \"Sky Famiglia + Sky HD\", pay_per_view_ppv , id , hight_definition_tv , pixel_aspect_ratio_par , series_name , country , language , content  | tv_series : id , share , air_date , viewers_m , channel , weekly_rank , rating , 18_49_rating_share  | tv_series_episode : episode , id  | cartoon : channel , written_by , original_air_date , production_code , id , title , directed_by ",
        "chatgpt_out": [
            "select t1.series_name, t2.rating, t3.episode from tv_series as t1 join tv_series as t2 on t1.id = t2.id join tv_series_episode as t3 on t2.id = t3.id order by t2.rating desc limit 3",
            "select t1.series_name, t2.rating, t3.episode from tv_series as t1 join tv_series as t2 on t1.id = t2.id join tv_series_episode as t3 on t2.id = t3.id where t2.rating in (select distinct rating from tv_series order by rating desc limit 3)",
            "select t1.series_name, t2.rating, t3.episode from tv_series as t1 join tv_series as t2 on t1.id = t2.id join tv_series_episode as t3 on t2.id = t3.id where t2.rating = (select max(rating) from tv_series) or t2.rating = (select max(rating) from tv_series where rating < (select max(rating) from tv_series)) or t2.rating = (select max(rating) from tv_series where rating < (select max(rating) from tv_series where rating < (select max(rating) from tv_series)))",
            "select t1.series_name, t2.rating, t3.episode from tv_series as t1 join tv_series as t2 on t1.id = t2.id join tv_series_episode as t3 on t2.id = t3.id where t2.rating in (select distinct rating from tv_series order by rating desc limit 3) order by t2.rating desc",
            "select t1.series_name, t2.rating, t3.episode from tv_series as t1 join tv_series as t2 on t1.id = t2.id join tv_series_episode as t3 on t2.id = t3.id where t2.rating = (select max(rating) from tv_series) or t2.rating = (select max(rating) from tv_series where rating < (select max(rating) from tv_series)) or t2.rating = (select max(rating) from tv_series where rating < (select max(rating) from tv_series where rating < (select max(rating) from tv_series))) order by t2.rating desc"
        ],
        "query1": "select episode, rating from tv_series order by rating desc limit 3",
        "query2": "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Episode",
            ",",
            "Rating",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series",
            "order",
            "by",
            "rating",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "question_toks": [
            "What",
            "are",
            "3",
            "most",
            "highly",
            "rated",
            "episodes",
            "in",
            "the",
            "TV",
            "series",
            "table",
            "and",
            "what",
            "were",
            "those",
            "ratings",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_series": "id"
        },
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3",
        "split_map": {
            "tv_series": "rating"
        },
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), content (\"music\"), package_option (\"Option\", \"Option\", \"Option\"), id (\"717\", \"704\", \"728\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"MTV Classic\", \"MTV Hits\", \"MTV Music\") | tv_series : id (1.0, 11.0, 12.0), weekly_rank (70.0, 70.0, 50.0), viewers_m (\"5.75\", \"4.24\", \"6.94\"), share (5.0, 6.0, 6.0), 18_49_rating_share (\"2.4/6\", \"3.5/9\", \"1.7/5\"), channel (\"728\", \"713\", \"728\"), episode (\"Winterland\", \"Keepers\", \"The Hanged Man\"), air_date (\"November 19, 2007\", \"October 22, 2007\", \"November 12, 2007\") | tv_series_rating : id (1.0, 12.0, 5.0), rating (\"3.8\", \"4.4\", \"5.8\") | cartoon : id (9.0, 1.0, 11.0), original_air_date (\"January2,2009\", \"January9,2009\", \"February27,2009\"), title (\"Deep Cover for Batman!\", \"Fall of the Blue Beetle!\", \"Fall of the Blue Beetle!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"707\", \"704\", \"704\"), production_code (101.0, 106.0, 103.0), written_by (\"James Krieg\", \"James Krieg\", \"James Krieg\")",
        "schema_without_content": "tv_channel : pay_per_view_ppv , pixel_aspect_ratio_par , hight_definition_tv , language , content , package_option , id , country , series_name  | tv_series : id , weekly_rank , viewers_m , share , 18_49_rating_share , channel , episode , air_date  | tv_series_rating : id , rating  | cartoon : id , original_air_date , title , directed_by , channel , production_code , written_by ",
        "chatgpt_out": [
            "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id order by t2.rating desc limit 3",
            "select t1.episode, t2.rating from tv_series_rating as t2 join tv_series as t1 on t1.id = t2.id order by t2.rating desc limit 3",
            "select episode, rating from (select * from tv_series_rating order by rating desc limit 3) as t1 join (select episode, id from tv_series) as t2 on t1.id = t2.id",
            "select episode, rating from (select * from tv_series join tv_series_rating on tv_series.id = tv_series_rating.id) as t1 order by rating desc limit 3",
            "select t1.episode, t2.rating from tv_series as t1, tv_series_rating as t2 where t1.id = t2.id order by t2.rating desc limit 3"
        ],
        "query1": "select episode, rating from tv_series order by rating desc limit 3",
        "query2": "select t1.episode, t2.rating from tv_series as t1 join tv_series_rating as t2 on t1.id = t2.id order by t2.rating desc limit 3"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Episode",
            ",",
            "Rating",
            "FROM",
            "TV_series",
            "ORDER",
            "BY",
            "Rating",
            "DESC",
            "LIMIT",
            "3",
            ";"
        ],
        "query_toks_no_value": [
            "select",
            "episode",
            ",",
            "rating",
            "from",
            "tv_series",
            "order",
            "by",
            "rating",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "question_toks": [
            "What",
            "are",
            "3",
            "most",
            "highly",
            "rated",
            "episodes",
            "in",
            "the",
            "TV",
            "series",
            "table",
            "and",
            "what",
            "were",
            "those",
            "ratings",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            13,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "tv_series": "id"
        },
        "orig_query": "select episode, rating from tv_series order by rating desc limit 3",
        "split_map": {
            "tv_series": "episode"
        },
        "schema_with_content": "tv_channel : content (\"music\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"Rock TV\", \"MTV Classic\", \"Match Music\"), id (\"706\", \"700\", \"708\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), package_option (\"Option\", \"Option\", \"Sky Famiglia + Sky HD\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\") | tv_series : channel (\"713\", \"700\", \"700\"), weekly_rank (43.0, 62.0, 67.0), 18_49_rating_share (\"2.4/6\", \"3.5/9\", \"2.7/7\"), id (7.0, 8.0, 12.0), share (6.0, 5.0, 6.0), rating (\"5.8\", \"3.8\", \"4.4\"), viewers_m (\"5.61\", \"4.24\", \"6.05\"), air_date (\"November 5, 2007\", \"November 26, 2007\", \"November 19, 2007\") | tv_series_episode : episode (\"The Legend of Dylan McCleen\", \"Friendly Skies\", \"Double Down\"), id (9.0, 11.0, 9.0) | cartoon : written_by (\"J. M. DeMatteis\", \"Adam Beechen\", \"Matt Wayne\"), title (\"Evil Under the Sea!\", \"Dawn of the Dead Man!\", \"The Rise of the Blue Beetle!\"), channel (\"703\", \"700\", \"701\"), production_code (109.0, 112.0, 101.0), id (6.0, 5.0, 4.0), original_air_date (\"January23,2009\", \"January30,2009\", \"January16,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\")",
        "schema_without_content": "tv_channel : content , country , series_name , id , pixel_aspect_ratio_par , language , package_option , pay_per_view_ppv , hight_definition_tv  | tv_series : channel , weekly_rank , 18_49_rating_share , id , share , rating , viewers_m , air_date  | tv_series_episode : episode , id  | cartoon : written_by , title , channel , production_code , id , original_air_date , directed_by ",
        "chatgpt_out": [
            "select t1.episode, t2.rating from tv_series_episode as t1 join tv_series as t2 on t1.id = t2.id order by t2.rating desc limit 3",
            "select t2.episode, t2.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3",
            "select t1.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3",
            "select t2.episode, t1.rating from tv_series_episode as t1 join tv_series as t2 on t1.id = t2.id order by t2.rating desc limit 3",
            "select t1.episode, t1.rating from tv_series_episode as t1 join tv_series as t2 on t1.id = t2.id order by t2.rating desc limit 3"
        ],
        "query1": "select episode, rating from tv_series order by rating desc limit 3",
        "query2": "select t2.episode, t1.rating from tv_series as t1 join tv_series_episode as t2 on t1.id = t2.id order by t1.rating desc limit 3"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "production_code",
            ",",
            "channel",
            "FROM",
            "cartoon",
            "ORDER",
            "BY",
            "original_air_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "value"
        ],
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "question_toks": [
            "Find",
            "the",
            "production",
            "code",
            "and",
            "channel",
            "of",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1",
        "split_map": {
            "cartoon": "production_code"
        },
        "schema_with_content": "tv_channel : series_name (\"Rock TV\", \"MTV Music\", \"Sky Music\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia\", \"Option\"), id (\"708\", \"708\", \"706\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), pay_per_view_ppv (\"no\") | tv_series : viewers_m (\"6.05\", \"6.06\", \"5.28\"), weekly_rank (61.0, 72.0, 62.0), 18_49_rating_share (\"2.1/5\", \"1.5/4\", \"2.2/6\"), rating (\"3.8\", \"4.0\", \"3.4\"), channel (\"714\", \"728\", \"717\"), air_date (\"December 17, 2007\", \"October 29, 2007\", \"October 1, 2007\"), episode (\"The Year of the Rabbit\", \"The Hanged Man\", \"The Legend of Dylan McCleen\"), share (9.0, 6.0, 5.0), id (2.0, 3.0, 9.0) | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"Journey to the Center of the Bat!\", \"Terror on Dinosaur Island!\", \"Terror on Dinosaur Island!\"), channel (\"728\", \"705\", \"706\"), id (7.0, 3.0, 10.0), written_by (\"J. M. DeMatteis\", \"Todd Casey\", \"Matt Wayne\"), original_air_date (\"November21,2008\", \"February6,2009\", \"November14,2008\") | cartoon_production_code : production_code (103.0, 101.0, 109.0), id (2.0, 5.0, 4.0)",
        "schema_without_content": "tv_channel : series_name , hight_definition_tv , package_option , id , country , language , pixel_aspect_ratio_par , content , pay_per_view_ppv  | tv_series : viewers_m , weekly_rank , 18_49_rating_share , rating , channel , air_date , episode , share , id  | cartoon : directed_by , title , channel , id , written_by , original_air_date  | cartoon_production_code : production_code , id ",
        "chatgpt_out": [
            "select t1.production_code, t2.channel from cartoon_production_code as t1 join cartoon as t2 on t1.id = t2.id order by t2.original_air_date desc limit 1",
            "select t1.production_code, t2.channel from cartoon_production_code as t1 join cartoon as t2 on t1.id = t2.id where t2.original_air_date = (select max(original_air_date) from cartoon) limit 1",
            "select t1.production_code, t2.channel from cartoon_production_code as t1 join cartoon as t2 on t1.id = t2.id where t2.original_air_date = (select max(original_air_date) from cartoon) order by t2.channel limit 1",
            "select t1.production_code, t2.channel from cartoon_production_code as t1 join cartoon as t2 on t1.id = t2.id where t2.original_air_date = (select max(original_air_date) from cartoon) order by t1.production_code desc limit 1",
            "select t1.production_code, t2.channel from cartoon_production_code as t1 join cartoon as t2 on t1.id = t2.id where t2.original_air_date = (select max(original_air_date) from cartoon) and t2.channel = (select max(channel) from cartoon where original_air_date=(select max(original_air_date) from cartoon))"
        ],
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1",
        "query2": "select t2.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "production_code",
            ",",
            "channel",
            "FROM",
            "cartoon",
            "ORDER",
            "BY",
            "original_air_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "value"
        ],
        "question": "Find the production code and channel of the most recently aired cartoon.",
        "question_toks": [
            "Find",
            "the",
            "production",
            "code",
            "and",
            "channel",
            "of",
            "the",
            "most",
            "recently",
            "aired",
            "cartoon",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1",
        "split_map": {
            "cartoon": "channel"
        },
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), package_option (\"Option\", \"Option\", \"Option\"), series_name (\"Match Music\", \"Rock TV\", \"Sky Music\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), id (\"709\", \"717\", \"707\") | tv_series : viewers_m (\"6.75\", \"6.05\", \"6.09\"), share (7.0, 9.0, 7.0), channel (\"707\", \"728\", \"714\"), air_date (\"November 19, 2007\", \"September 24, 2007\", \"October 15, 2007\"), 18_49_rating_share (\"1.5/4\", \"1.5/4\", \"2.2/6\"), rating (\"3.0\", \"5.8\", \"3.5\"), id (4.0, 5.0, 8.0), weekly_rank (68.0, 61.0, 67.0), episode (\"The Year of the Rabbit\", \"Friendly Skies\", \"Game Three\") | cartoon : title (\"The Eyes of Despero!\", \"Dawn of the Dead Man!\", \"Enter the Outsiders!\"), original_air_date (\"November21,2008\", \"January30,2009\", \"November14,2008\"), production_code (101.0, 111.0, 108.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (6.0, 8.0, 6.0), written_by (\"J. M. DeMatteis\", \"Michael Jelenic\", \"James Krieg\") | cartoon_channel : id (7.0, 11.0, 10.0), channel (\"706\", \"707\", \"701\")",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , country , package_option , series_name , language , pay_per_view_ppv , hight_definition_tv , content , id  | tv_series : viewers_m , share , channel , air_date , 18_49_rating_share , rating , id , weekly_rank , episode  | cartoon : title , original_air_date , production_code , directed_by , id , written_by  | cartoon_channel : id , channel ",
        "chatgpt_out": [
            "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id order by t1.original_air_date desc limit 1",
            "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id where t1.original_air_date = (select max(t3.original_air_date) from cartoon as t3) limit 1",
            "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id where t1.original_air_date = (select max(original_air_date) from cartoon) limit 1",
            "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id where t1.original_air_date = (select max(original_air_date) from cartoon where original_air_date is not null) limit 1",
            "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id where t1.original_air_date = (select max(original_air_date) from cartoon where original_air_date != '') limit 1"
        ],
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1",
        "query2": "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "production_code",
            ",",
            "channel",
            "FROM",
            "cartoon",
            "ORDER",
            "BY",
            "original_air_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "value"
        ],
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "question_toks": [
            "What",
            "is",
            "the",
            "produdction",
            "code",
            "and",
            "channel",
            "of",
            "the",
            "most",
            "recent",
            "cartoon",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1",
        "split_map": {
            "cartoon": "production_code"
        },
        "schema_with_content": "tv_channel : pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), content (\"music\"), series_name (\"Match Music\", \"Classica\", \"Classica\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), package_option (\"Sky Famiglia\", \"no ( FTV )\", \"Sky Famiglia + Sky HD\"), id (\"707\", \"700\", \"717\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\") | tv_series : rating (\"3.0\", \"5.8\", \"3.8\"), episode (\"The Year of the Rabbit\", \"Emily\", \"Emily\"), id (8.0, 12.0, 3.0), weekly_rank (62.0, 50.0, 66.0), viewers_m (\"5.13\", \"6.09\", \"5.13\"), air_date (\"October 8, 2007\", \"October 29, 2007\", \"October 1, 2007\"), 18_49_rating_share (\"1.5/4\", \"3.5/9\", \"3.5/9\"), share (5.0, 6.0, 5.0), channel (\"728\", \"719\", \"707\") | cartoon : channel (\"706\", \"705\", \"708\"), title (\"The Rise of the Blue Beetle!\", \"Day of the Dark Knight!\", \"The Eyes of Despero!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (10.0, 7.0, 4.0), original_air_date (\"February20,2009\", \"January2,2009\", \"January9,2009\"), written_by (\"Steven Melching\", \"Adam Beechen\", \"Joseph Kuhr\") | cartoon_production_code : id (12.0, 8.0, 12.0), production_code (103.0, 108.0, 109.0)",
        "schema_without_content": "tv_channel : pay_per_view_ppv , hight_definition_tv , content , series_name , pixel_aspect_ratio_par , package_option \", \"Sky Famiglia + Sky HD\", id , country , language  | tv_series : rating , episode , id , weekly_rank , viewers_m , air_date , 18_49_rating_share , share , channel  | cartoon : channel , title , directed_by , id , original_air_date , written_by  | cartoon_production_code : id , production_code ",
        "chatgpt_out": [
            "select t1.id, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date desc limit 1",
            "select t1.channel, t2.production_code from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id where t1.original_air_date = (select max(original_air_date) from cartoon) limit 1",
            "select t1.production_code, t1.channel from cartoon_production_code as t1 join cartoon as t2 on t1.id = t2.id where t2.original_air_date = (select max(original_air_date) from cartoon) limit 1",
            "select t1.channel, t2.id from cartoon as t1 join (select id from cartoon order by original_air_date desc limit 1) as t2 on t1.id = t2.id join cartoon_production_code as t3 on t1.id = t3.id",
            "select t3.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t3 on t1.id = t3.id where t1.original_air_date = (select max(original_air_date) from cartoon) limit 1"
        ],
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1",
        "query2": "select t2.production_code, t1.channel from cartoon as t1 join cartoon_production_code as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "production_code",
            ",",
            "channel",
            "FROM",
            "cartoon",
            "ORDER",
            "BY",
            "original_air_date",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "production_code",
            ",",
            "channel",
            "from",
            "cartoon",
            "order",
            "by",
            "original_air_date",
            "limit",
            "value"
        ],
        "question": "What is the produdction code and channel of the most recent cartoon?",
        "question_toks": [
            "What",
            "is",
            "the",
            "produdction",
            "code",
            "and",
            "channel",
            "of",
            "the",
            "most",
            "recent",
            "cartoon",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            23,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "cartoon": "id"
        },
        "orig_query": "select production_code, channel from cartoon order by original_air_date limit 1",
        "split_map": {
            "cartoon": "channel"
        },
        "schema_with_content": "tv_channel : id (\"708\", \"715\", \"717\"), series_name (\"MTV Music\", \"MTV Music\", \"MTV Live HD\"), hight_definition_tv (\"no\", \"yes\"), pay_per_view_ppv (\"no\"), package_option (\"Option\", \"Option\", \"no ( FTV )\"), language (\"Italian\", \"English\"), content (\"music\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : air_date (\"October 15, 2007\", \"October 29, 2007\", \"November 12, 2007\"), id (4.0, 4.0, 11.0), viewers_m (\"5.75\", \"9.16\", \"6.06\"), weekly_rank (70.0, 80.0, 50.0), episode (\"The Hanged Man\", \"Game Three\", \"A Love of a Lifetime\"), channel (\"707\", \"728\", \"714\"), 18_49_rating_share (\"2.2/6\", \"3.2/8\", \"3.5/9\"), rating (\"4.4\", \"4.3\", \"4.0\"), share (7.0, 5.0, 6.0) | cartoon : id (8.0, 10.0, 3.0), original_air_date (\"January23,2009\", \"November14,2008\", \"January30,2009\"), production_code (104.0, 104.0, 111.0), title (\"Journey to the Center of the Bat!\", \"Deep Cover for Batman!\", \"Fall of the Blue Beetle!\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), written_by (\"Adam Beechen\", \"Steven Melching\", \"Matt Wayne\") | cartoon_channel : channel (\"703\", \"700\", \"704\"), id (11.0, 6.0, 9.0)",
        "schema_without_content": "tv_channel : id , series_name , hight_definition_tv , pay_per_view_ppv , package_option \", language , content , pixel_aspect_ratio_par , country  | tv_series : air_date , id , viewers_m , weekly_rank , episode , channel , 18_49_rating_share , rating , share  | cartoon : id , original_air_date , production_code , title , directed_by , written_by  | cartoon_channel : channel , id ",
        "chatgpt_out": [
            "select id, channel from cartoon where original_air_date = (select max(original_air_date) from cartoon)",
            "select id, channel from cartoon where original_air_date = (select max(original_air_date) from cartoon_channel)",
            "select production_code, channel from cartoon where original_air_date = (select max(original_air_date) from cartoon)",
            "select production_code, channel from cartoon where original_air_date = (select max(original_air_date) from cartoon_channel)",
            "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id where t1.original_air_date = (select max(original_air_date) from cartoon)"
        ],
        "query1": "select production_code, channel from cartoon order by original_air_date limit 1",
        "query2": "select t1.production_code, t2.channel from cartoon as t1 join cartoon_channel as t2 on t1.id = t2.id order by t1.original_air_date limit 1"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "package_option",
            ",",
            "series_name",
            "FROM",
            "TV_Channel",
            "WHERE",
            "hight_definition_TV",
            "=",
            "``",
            "yes",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "value"
        ],
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "question_toks": [
            "Find",
            "the",
            "package",
            "choice",
            "and",
            "series",
            "name",
            "of",
            "the",
            "TV",
            "channel",
            "that",
            "has",
            "high",
            "definition",
            "TV",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"yes\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "split_map": {
            "tv_channel": "series_name"
        },
        "schema_with_content": "tv_channel : hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), language (\"Italian\", \"English\"), content (\"music\"), id (\"714\", \"707\", \"715\"), package_option (\"Option\", \"Sky Famiglia\", \"Option\"), pay_per_view_ppv (\"no\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | tv_channel_series_name : id (\"701\", \"719\", \"708\"), series_name (\"Rock TV\", \"Radio Capital TiV\u00c3\u00b9\", \"MTV Classic\") | tv_series : viewers_m (\"4.24\", \"4.24\", \"6.05\"), air_date (\"October 1, 2007\", \"October 8, 2007\", \"November 26, 2007\"), id (1.0, 12.0, 4.0), rating (\"3.5\", \"4.4\", \"5.3\"), channel (\"700\", \"719\", \"713\"), share (5.0, 7.0, 5.0), episode (\"Winterland\", \"Home By Another Way\", \"The Hanged Man\"), 18_49_rating_share (\"2.1/5\", \"2.7/7\", \"2.9/7\"), weekly_rank (71.0, 72.0, 66.0) | cartoon : id (4.0, 8.0, 7.0), original_air_date (\"November21,2008\", \"January30,2009\", \"January23,2009\"), title (\"Journey to the Center of the Bat!\", \"Return of the Fearsome Fangs!\", \"Evil Under the Sea!\"), written_by (\"Michael Jelenic\", \"Todd Casey\", \"Adam Beechen\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"708\", \"705\", \"703\"), production_code (112.0, 111.0, 102.0)",
        "schema_without_content": "tv_channel : hight_definition_tv , country , language , content , id , package_option , pay_per_view_ppv , pixel_aspect_ratio_par  | tv_channel_series_name : id , series_name  | tv_series : viewers_m , air_date , id , rating , channel , share , episode , 18_49_rating_share , weekly_rank  | cartoon : id , original_air_date , title , written_by , directed_by , channel , production_code ",
        "chatgpt_out": [
            "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t1.package_option, t2.series_name from tv_channel_series_name as t2 join tv_channel as t1 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t2.series_name, t1.package_option from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t2.series_name, t1.package_option from tv_channel_series_name as t2 join tv_channel as t1 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t1.package_option, t2.series_name from tv_channel as t1, tv_channel_series_name as t2 where t1.id = t2.id and t1.hight_definition_tv = 'yes'"
        ],
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "query2": "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\""
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "package_option",
            ",",
            "series_name",
            "FROM",
            "TV_Channel",
            "WHERE",
            "hight_definition_TV",
            "=",
            "``",
            "yes",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "value"
        ],
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "question_toks": [
            "Find",
            "the",
            "package",
            "choice",
            "and",
            "series",
            "name",
            "of",
            "the",
            "TV",
            "channel",
            "that",
            "has",
            "high",
            "definition",
            "TV",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"yes\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "split_map": {
            "tv_channel": "package_option"
        },
        "schema_with_content": "tv_channel : country (\"Italy\", \"United Kingdom\", \"Poland\"), series_name (\"Music Box Italia\", \"MTV Dance\", \"Rock TV\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), content (\"music\"), hight_definition_tv (\"no\", \"yes\"), id (\"713\", \"717\", \"707\"), pay_per_view_ppv (\"no\") | tv_channel_package_option : package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia + Sky HD\", \"Sky Famiglia\"), id (\"708\", \"709\", \"700\") | tv_series : channel (\"719\", \"728\", \"728\"), id (1.0, 4.0, 4.0), episode (\"Winterland\", \"Keepers\", \"Game Three\"), rating (\"3.8\", \"5.8\", \"3.4\"), viewers_m (\"5.28\", \"6.75\", \"9.16\"), share (6.0, 9.0, 5.0), weekly_rank (70.0, 61.0, 71.0), air_date (\"September 24, 2007\", \"November 19, 2007\", \"November 26, 2007\"), 18_49_rating_share (\"2.7/7\", \"3.2/8\", \"1.5/4\") | cartoon : title (\"Day of the Dark Knight!\", \"Return of the Fearsome Fangs!\", \"Enter the Outsiders!\"), written_by (\"J. M. DeMatteis\", \"Todd Casey\", \"Steven Melching\"), id (1.0, 6.0, 3.0), original_air_date (\"November14,2008\", \"January2,2009\", \"February27,2009\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), channel (\"704\", \"728\", \"701\"), production_code (111.0, 106.0, 101.0)",
        "schema_without_content": "tv_channel : country , series_name , pixel_aspect_ratio_par , language , content , hight_definition_tv , id , pay_per_view_ppv  | tv_channel_package_option : package_option , id  | tv_series : channel , id , episode , rating , viewers_m , share , weekly_rank , air_date , 18_49_rating_share  | cartoon : title , written_by , id , original_air_date , directed_by , channel , production_code ",
        "chatgpt_out": [
            "select t1.package_option, t2.series_name from tv_channel_package_option as t1 join tv_channel as t2 on t1.id = t2.id where t2.hight_definition_tv = 'yes'",
            "select t2.series_name, t1.package_option from tv_channel_package_option as t1 join tv_channel as t2 on t1.id = t2.id where t2.hight_definition_tv = 'yes'",
            "select t1.package_option, t2.series_name from tv_channel as t2 join tv_channel_package_option as t1 on t2.id = t1.id where t2.hight_definition_tv = 'yes'",
            "select t2.series_name, t1.package_option from tv_channel as t2 join tv_channel_package_option as t1 on t2.id = t1.id where t2.hight_definition_tv = 'yes'",
            "select t1.package_option, t2.series_name from tv_channel_package_option as t1 inner join tv_channel as t2 on t1.id = t2.id where t2.hight_definition_tv = 'yes'"
        ],
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "query2": "select t2.package_option, t1.series_name from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\""
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "package_option",
            ",",
            "series_name",
            "FROM",
            "TV_Channel",
            "WHERE",
            "hight_definition_TV",
            "=",
            "``",
            "yes",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "value"
        ],
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "question_toks": [
            "What",
            "are",
            "the",
            "package",
            "options",
            "and",
            "the",
            "name",
            "of",
            "the",
            "series",
            "for",
            "the",
            "TV",
            "Channel",
            "that",
            "supports",
            "high",
            "definition",
            "TV",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"yes\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "split_map": {
            "tv_channel": "series_name"
        },
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), id (\"703\", \"707\", \"704\"), package_option (\"Option\", \"Option\", \"Option\"), content (\"music\"), pay_per_view_ppv (\"no\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_channel_series_name : series_name (\"Match Music\", \"myDeejay\", \"Rock TV\"), id (\"701\", \"717\", \"715\") | tv_series : viewers_m (\"6.05\", \"8.23\", \"6.09\"), id (10.0, 4.0, 7.0), rating (\"5.3\", \"5.8\", \"4.3\"), weekly_rank (72.0, 67.0, 72.0), 18_49_rating_share (\"2.4/6\", \"1.7/5\", \"2.9/7\"), air_date (\"December 10, 2007\", \"December 17, 2007\", \"November 12, 2007\"), episode (\"Blowback\", \"The Legend of Dylan McCleen\", \"Home By Another Way\"), share (9.0, 9.0, 6.0), channel (\"717\", \"707\", \"700\") | cartoon : production_code (104.0, 106.0, 108.0), written_by (\"Matt Wayne\", \"J. M. DeMatteis\", \"Adam Beechen\"), id (11.0, 12.0, 4.0), channel (\"704\", \"708\", \"707\"), original_air_date (\"November14,2008\", \"January23,2009\", \"November14,2008\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), title (\"Invasion of the Secret Santas!\", \"Fall of the Blue Beetle!\", \"Journey to the Center of the Bat!\")",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , language , id , package_option , content , pay_per_view_ppv , hight_definition_tv , country  | tv_channel_series_name : series_name , id  | tv_series : viewers_m , id , rating , weekly_rank , 18_49_rating_share , air_date , episode , share , channel  | cartoon : production_code , written_by , id , channel , original_air_date , directed_by , title ",
        "chatgpt_out": [
            "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t2.series_name, t1.package_option from tv_channel_series_name as t2 join tv_channel as t1 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t1.package_option, t3.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel join tv_channel_series_name as t3 on t1.id = t3.id where t1.hight_definition_tv = 'yes'",
            "select t3.series_name, t1.package_option from tv_channel_series_name as t3 join tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.hight_definition_tv = 'yes'",
            "select t1.package_option, t4.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel join tv_channel_series_name as t3 on t1.id = t3.id join tv_series as t4 on t1.id = t4.channel where t1.hight_definition_tv = 'yes'"
        ],
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "query2": "select t1.package_option, t2.series_name from tv_channel as t1 join tv_channel_series_name as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\""
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "package_option",
            ",",
            "series_name",
            "FROM",
            "TV_Channel",
            "WHERE",
            "hight_definition_TV",
            "=",
            "``",
            "yes",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "package_option",
            ",",
            "series_name",
            "from",
            "tv_channel",
            "where",
            "hight_definition_tv",
            "=",
            "value"
        ],
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "question_toks": [
            "What",
            "are",
            "the",
            "package",
            "options",
            "and",
            "the",
            "name",
            "of",
            "the",
            "series",
            "for",
            "the",
            "TV",
            "Channel",
            "that",
            "supports",
            "high",
            "definition",
            "TV",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            7,
                            false
                        ],
                        null
                    ],
                    "\"yes\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "split_map": {
            "tv_channel": "package_option"
        },
        "schema_with_content": "tv_channel : language (\"Italian\", \"English\"), id (\"700\", \"709\", \"706\"), series_name (\"MTV Hits\", \"MTV Live HD\", \"Hip Hop TV\"), content (\"music\"), hight_definition_tv (\"no\", \"yes\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_channel_package_option : package_option (\"Option\", \"Sky Famiglia\", \"no ( FTV )\"), id (\"714\", \"701\", \"706\") | tv_series : air_date (\"November 19, 2007\", \"October 29, 2007\", \"November 19, 2007\"), channel (\"701\", \"700\", \"714\"), id (3.0, 3.0, 5.0), 18_49_rating_share (\"3.2/8\", \"2.7/7\", \"2.2/6\"), rating (\"4.4\", \"4.0\", \"3.0\"), weekly_rank (80.0, 62.0, 62.0), share (5.0, 9.0, 9.0), viewers_m (\"6.94\", \"4.24\", \"5.75\"), episode (\"Double Down\", \"Emily\", \"A Love of a Lifetime\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), original_air_date (\"November21,2008\", \"February27,2009\", \"January16,2009\"), production_code (104.0, 111.0, 105.0), written_by (\"Adam Beechen\", \"Steven Melching\", \"Michael Jelenic\"), id (7.0, 12.0, 7.0), title (\"Evil Under the Sea!\", \"Fall of the Blue Beetle!\", \"Evil Under the Sea!\"), channel (\"700\", \"728\", \"700\")",
        "schema_without_content": "tv_channel : language , id , series_name , content , hight_definition_tv , pixel_aspect_ratio_par , pay_per_view_ppv , country  | tv_channel_package_option : package_option \", id  | tv_series : air_date , channel , id , 18_49_rating_share , rating , weekly_rank , share , viewers_m , episode  | cartoon : directed_by , original_air_date , production_code , written_by , id , title , channel ",
        "chatgpt_out": [
            "select t2.package_option, t1.series_name from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t2.package_option, t1.series_name from tv_channel_package_option as t2 join tv_channel as t1 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t1.series_name, t2.package_option from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t1.series_name, t2.package_option from tv_channel_package_option as t2 join tv_channel as t1 on t1.id = t2.id where t1.hight_definition_tv = 'yes'",
            "select t2.package_option, t1.series_name from tv_channel_package_option as t2 join tv_channel as t1 on t1.id = t2.id where t1.hight_definition_tv = 'yes'"
        ],
        "query1": "select package_option, series_name from tv_channel where hight_definition_tv = \"yes\"",
        "query2": "select t2.package_option, t1.series_name from tv_channel as t1 join tv_channel_package_option as t2 on t1.id = t2.id where t1.hight_definition_tv = \"yes\""
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "country",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "question_toks": [
            "find",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "nation",
            "of",
            "the",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "split_map": {
            "tv_channel": "pixel_aspect_ratio_par"
        },
        "schema_with_content": "tv_channel : package_option (\"no ( FTV )\", \"no ( FTV )\", \"no ( FTV )\"), content (\"music\"), language (\"Italian\", \"English\"), pay_per_view_ppv (\"no\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"707\", \"701\", \"708\"), series_name (\"Sky Music\", \"MTV Classic\", \"Sky Music\"), hight_definition_tv (\"no\", \"yes\") | tv_channel_pixel_aspect_ratio_par : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), id (\"705\", \"713\", \"705\") | tv_series : 18_49_rating_share (\"1.7/5\", \"2.7/7\", \"2.4/6\"), weekly_rank (43.0, 61.0, 70.0), id (11.0, 6.0, 11.0), episode (\"The Legend of Dylan McCleen\", \"Winterland\", \"Winterland\"), share (9.0, 5.0, 5.0), channel (\"708\", \"708\", \"701\"), air_date (\"November 19, 2007\", \"October 22, 2007\", \"November 19, 2007\"), rating (\"3.7\", \"5.3\", \"3.8\"), viewers_m (\"8.23\", \"5.61\", \"9.16\") | cartoon : production_code (108.0, 103.0, 106.0), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (6.0, 1.0, 3.0), original_air_date (\"January30,2009\", \"January23,2009\", \"January23,2009\"), written_by (\"Steven Melching\", \"J. M. DeMatteis\", \"Adam Beechen\"), channel (\"705\", \"728\", \"703\"), title (\"The Rise of the Blue Beetle!\", \"Journey to the Center of the Bat!\", \"Day of the Dark Knight!\")",
        "schema_without_content": "tv_channel : package_option \", \"no \", \"no \", content , language , pay_per_view_ppv , country , id , series_name , hight_definition_tv  | tv_channel_pixel_aspect_ratio_par : pixel_aspect_ratio_par , id  | tv_series : 18_49_rating_share , weekly_rank , id , episode , share , channel , air_date , rating , viewers_m  | cartoon : production_code , directed_by , id , original_air_date , written_by , channel , title ",
        "chatgpt_out": [
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id = t2.id where t1.language != 'English'",
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel_pixel_aspect_ratio_par as t2 join tv_channel as t1 on t2.id = t1.id where t1.language <> 'English'",
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel_pixel_aspect_ratio_par as t2, tv_channel as t1 where t1.id = t2.id and t1.language not like '%English%'",
            "select t1.id, t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id=t2.id where t1.language not in ('English')",
            "select t1.id, t2.pixel_aspect_ratio_par, t1.country from tv_channel_pixel_aspect_ratio_par as t2 join tv_channel as t1 on t1.id=t2.id where t1.language not in ('English')"
        ],
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "query2": "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id = t2.id where t1.language != 'English'"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "country",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "question_toks": [
            "find",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "nation",
            "of",
            "the",
            "tv",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "split_map": {
            "tv_channel": "country"
        },
        "schema_with_content": "tv_channel : id (\"703\", \"705\", \"708\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), package_option (\"Sky Famiglia + Sky HD\", \"Sky Famiglia\", \"Sky Famiglia + Sky HD\"), content (\"music\"), pay_per_view_ppv (\"no\"), series_name (\"MTV Rocks\", \"Rock TV\", \"Classica\") | tv_channel_country : id (\"708\", \"706\", \"717\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : weekly_rank (67.0, 50.0, 66.0), episode (\"Winterland\", \"The Year of the Rabbit\", \"The Year of the Rabbit\"), id (7.0, 10.0, 6.0), viewers_m (\"6.05\", \"6.06\", \"5.75\"), channel (\"713\", \"708\", \"728\"), air_date (\"November 19, 2007\", \"October 29, 2007\", \"October 1, 2007\"), 18_49_rating_share (\"2.1/5\", \"1.7/5\", \"2.9/7\"), rating (\"4.3\", \"3.5\", \"5.8\"), share (6.0, 5.0, 6.0) | cartoon : written_by (\"Todd Casey\", \"J. M. DeMatteis\", \"Michael Jelenic\"), title (\"Day of the Dark Knight!\", \"Deep Cover for Batman!\", \"The Eyes of Despero!\"), production_code (110.0, 107.0, 103.0), original_air_date (\"February20,2009\", \"January23,2009\", \"January9,2009\"), channel (\"705\", \"706\", \"708\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (6.0, 11.0, 4.0)",
        "schema_without_content": "tv_channel : id , pixel_aspect_ratio_par , language , hight_definition_tv , package_option , content , pay_per_view_ppv , series_name  | tv_channel_country : id , country  | tv_series : weekly_rank , episode , id , viewers_m , channel , air_date , 18_49_rating_share , rating , share  | cartoon : written_by , title , production_code , original_air_date , channel , directed_by , id ",
        "chatgpt_out": [
            "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'",
            "select t1.id, t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'",
            "select t1.language, t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'",
            "select t1.pixel_aspect_ratio_par, t2.country from tv_series as t1 join tv_channel_country as t2 on t1.channel = t2.id join tv_channel as t3 on t1.channel = t3.id where t3.language != 'English'",
            "select t2.country, t3.pixel_aspect_ratio_par from tv_series as t1 join tv_channel_country as t2 on t1.channel = t2.id join tv_channel as t3 on t1.channel = t3.id where t3.language != 'English'"
        ],
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "query2": "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "country",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "question_toks": [
            "What",
            "is",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "country",
            "of",
            "origin",
            "for",
            "all",
            "TV",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "split_map": {
            "tv_channel": "pixel_aspect_ratio_par"
        },
        "schema_with_content": "tv_channel : content (\"music\"), pay_per_view_ppv (\"no\"), package_option (\"Sky Famiglia + Sky HD\", \"Option\", \"no ( FTV )\"), series_name (\"myDeejay\", \"Hip Hop TV\", \"MTV Dance\"), language (\"Italian\", \"English\"), hight_definition_tv (\"no\", \"yes\"), country (\"Italy\", \"United Kingdom\", \"Poland\"), id (\"709\", \"715\", \"703\") | tv_channel_pixel_aspect_ratio_par : id (\"707\", \"728\", \"714\"), pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\") | tv_series : rating (\"5.3\", \"3.8\", \"5.8\"), episode (\"Game Three\", \"A Love of a Lifetime\", \"Home By Another Way\"), channel (\"728\", \"728\", \"707\"), air_date (\"September 24, 2007\", \"November 19, 2007\", \"November 5, 2007\"), id (2.0, 8.0, 9.0), weekly_rank (61.0, 68.0, 71.0), 18_49_rating_share (\"3.5/9\", \"2.4/6\", \"2.1/5\"), share (6.0, 5.0, 6.0), viewers_m (\"5.75\", \"8.23\", \"5.61\") | cartoon : channel (\"701\", \"707\", \"701\"), directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (6.0, 10.0, 3.0), production_code (107.0, 106.0, 101.0), title (\"The Rise of the Blue Beetle!\", \"Journey to the Center of the Bat!\", \"Enter the Outsiders!\"), original_air_date (\"November14,2008\", \"December12,2008\", \"January16,2009\"), written_by (\"James Krieg\", \"Michael Jelenic\", \"Steven Melching\")",
        "schema_without_content": "tv_channel : content , pay_per_view_ppv , package_option \", series_name , language , hight_definition_tv , country , id  | tv_channel_pixel_aspect_ratio_par : id , pixel_aspect_ratio_par  | tv_series : rating , episode , channel , air_date , id , weekly_rank , 18_49_rating_share , share , viewers_m  | cartoon : channel , directed_by , id , production_code , title , original_air_date , written_by ",
        "chatgpt_out": [
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id = t2.id where t1.language != 'English'",
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel_pixel_aspect_ratio_par as t2 join tv_channel as t1 on t2.id = t1.id where t1.language != 'English'",
            "select pixel_aspect_ratio_par, country from tv_channel, tv_channel_pixel_aspect_ratio_par where tv_channel.id = tv_channel_pixel_aspect_ratio_par.id and tv_channel.language != 'English'",
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1, tv_channel_pixel_aspect_ratio_par as t2 where t1.language != 'English' and t1.id = t2.id",
            "select t2.pixel_aspect_ratio_par, t1.country from tv_channel_pixel_aspect_ratio_par as t2, tv_channel as t1 where t1.language != 'English' and t1.id = t2.id"
        ],
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "query2": "select t2.pixel_aspect_ratio_par, t1.country from tv_channel as t1 join tv_channel_pixel_aspect_ratio_par as t2 on t1.id = t2.id where t1.language != 'English'"
    },
    {
        "db_id": "tvshow",
        "query_toks": [
            "SELECT",
            "Pixel_aspect_ratio_PAR",
            ",",
            "country",
            "FROM",
            "tv_channel",
            "WHERE",
            "LANGUAGE",
            "!",
            "=",
            "'English",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "pixel_aspect_ratio_par",
            ",",
            "country",
            "from",
            "tv_channel",
            "where",
            "language",
            "!",
            "=",
            "value"
        ],
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "question_toks": [
            "What",
            "is",
            "the",
            "pixel",
            "aspect",
            "ratio",
            "and",
            "country",
            "of",
            "origin",
            "for",
            "all",
            "TV",
            "channels",
            "that",
            "do",
            "not",
            "use",
            "English",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    7,
                    [
                        0,
                        [
                            0,
                            4,
                            false
                        ],
                        null
                    ],
                    "\"English\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "tv_channel": "id"
        },
        "orig_query": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "split_map": {
            "tv_channel": "country"
        },
        "schema_with_content": "tv_channel : pixel_aspect_ratio_par (\"4:3\", \"4:3 / 16:9\", \"16:9\"), content (\"music\"), id (\"705\", \"705\", \"701\"), hight_definition_tv (\"no\", \"yes\"), language (\"Italian\", \"English\"), package_option (\"no ( FTV )\", \"Sky Famiglia + Sky HD\", \"Option\"), series_name (\"Classica\", \"MTV Rocks\", \"Match Music\"), pay_per_view_ppv (\"no\") | tv_channel_country : id (\"707\", \"707\", \"706\"), country (\"Italy\", \"United Kingdom\", \"Poland\") | tv_series : 18_49_rating_share (\"2.2/6\", \"2.7/7\", \"2.7/7\"), weekly_rank (68.0, 80.0, 61.0), viewers_m (\"6.06\", \"5.61\", \"9.16\"), rating (\"3.0\", \"3.5\", \"3.5\"), channel (\"701\", \"719\", \"713\"), id (3.0, 8.0, 5.0), share (7.0, 5.0, 9.0), episode (\"The Hanged Man\", \"The Year of the Rabbit\", \"Blowback\"), air_date (\"November 5, 2007\", \"October 15, 2007\", \"October 1, 2007\") | cartoon : directed_by (\"Ben Jones\", \"Brandon Vietti\", \"Michael Chang\"), id (4.0, 2.0, 5.0), title (\"Invasion of the Secret Santas!\", \"Dawn of the Dead Man!\", \"Day of the Dark Knight!\"), channel (\"704\", \"706\", \"708\"), written_by (\"Todd Casey\", \"Matt Wayne\", \"Steven Melching\"), production_code (101.0, 111.0, 101.0), original_air_date (\"January2,2009\", \"December12,2008\", \"November14,2008\")",
        "schema_without_content": "tv_channel : pixel_aspect_ratio_par , content , id , hight_definition_tv , language , package_option \", \"Sky Famiglia + Sky HD\", \"Option\", series_name , pay_per_view_ppv  | tv_channel_country : id , country  | tv_series : 18_49_rating_share , weekly_rank , viewers_m , rating , channel , id , share , episode , air_date  | cartoon : directed_by , id , title , channel , written_by , production_code , original_air_date ",
        "chatgpt_out": [
            "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'",
            "select t1.pixel_aspect_ratio_par, t2.country from tv_channel_country as t2 join tv_channel as t1 on t2.id = t1.id where t1.language != 'English'",
            "select pixel_aspect_ratio_par, country from tv_channel_country join tv_channel on tv_channel_country.id = tv_channel.id where language != 'English'",
            "select pixel_aspect_ratio_par, country from tv_channel join tv_channel_country on tv_channel.id = tv_channel_country.id where language != 'English'",
            "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 inner join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'"
        ],
        "query1": "select pixel_aspect_ratio_par, country from tv_channel where language != 'English'",
        "query2": "select t1.pixel_aspect_ratio_par, t2.country from tv_channel as t1 join tv_channel_country as t2 on t1.id = t2.id where t1.language != 'English'"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "List the final tables made and the best finishes of poker players.",
        "question_toks": [
            "List",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "the",
            "best",
            "finishes",
            "of",
            "poker",
            "players",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "poker_player": "poker_player_id"
        },
        "orig_query": "select final_table_made, best_finish from poker_player",
        "split_map": {
            "poker_player": "final_table_made"
        },
        "schema_with_content": "poker_player : people_id (5, 7, 7), poker_player_id (5, 1, 3), money_rank (68.0, 58.0, 141.0), earnings (189233.0, 104871.0, 476090.0), best_finish (1.0, 2.0, 3.0) | poker_player_final_table_made : final_table_made (26.0, 42.0, 10.0), poker_player_id (4, 2, 1) | people : height (187.0, 187.0, 182.0), people_id (7, 6, 3), nationality (\"Russia\", \"Bulgaria\"), name (\"Aleksey Ostapenko\", \"Semen Poltavskiy\", \"Aleksey Ostapenko\"), birth_date (\"January 22, 1987\", \"August 8, 1986\", \"August 8, 1986\")",
        "schema_without_content": "poker_player : people_id , poker_player_id , money_rank , earnings , best_finish  | poker_player_final_table_made : final_table_made , poker_player_id  | people : height , people_id , nationality , name , birth_date ",
        "chatgpt_out": [
            "select final_table_made, best_finish from poker_player_final_table_made",
            "select best_finish, final_table_made from poker_player_final_table_made",
            "select t1.final_table_made, t2.best_finish from poker_player_final_table_made as t1 join poker_player as t2 on t1.poker_player_id = t2.poker_player_id",
            "select t2.best_finish, t1.final_table_made from poker_player_final_table_made as t1 join poker_player as t2 on t1.poker_player_id = t2.poker_player_id",
            "select final_table_made, best_finish from poker_player_final_table_made join poker_player on poker_player.poker_player_id = poker_player_final_table_made.poker_player_id"
        ],
        "query1": "select final_table_made, best_finish from poker_player",
        "query2": "select t2.final_table_made, t1.best_finish from poker_player as t1 join poker_player_final_table_made as t2 on t1.poker_player_id = t2.poker_player_id"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "List the final tables made and the best finishes of poker players.",
        "question_toks": [
            "List",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "the",
            "best",
            "finishes",
            "of",
            "poker",
            "players",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "poker_player": "poker_player_id"
        },
        "orig_query": "select final_table_made, best_finish from poker_player",
        "split_map": {
            "poker_player": "best_finish"
        },
        "schema_with_content": "poker_player : earnings (596462.0, 476090.0, 142800.0), money_rank (154.0, 58.0, 58.0), poker_player_id (3, 5, 1), people_id (2, 6, 5), final_table_made (42.0, 10.0, 42.0) | poker_player_best_finish : poker_player_id (4, 3, 5), best_finish (1.0, 2.0, 3.0) | people : height (187.0, 194.0, 193.0), nationality (\"Russia\", \"Bulgaria\"), birth_date (\"April 17, 1987\", \"May 26, 1986\", \"May 26, 1986\"), people_id (4, 7, 4), name (\"Sergey Grankin\", \"Semen Poltavskiy\", \"Roman Bragin\")",
        "schema_without_content": "poker_player : earnings , money_rank , poker_player_id , people_id , final_table_made  | poker_player_best_finish : poker_player_id , best_finish  | people : height , nationality , birth_date , people_id , name ",
        "chatgpt_out": [
            "select final_table_made, best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id",
            "select best_finish, final_table_made from poker_player_best_finish as t1 join poker_player as t2 on t1.poker_player_id = t2.poker_player_id",
            "select final_table_made, best_finish from poker_player where poker_player_id in (select distinct poker_player_id from poker_player_best_finish)",
            "select best_finish, final_table_made from poker_player_best_finish where poker_player_id in (select distinct poker_player_id from poker_player)",
            "select final_table_made, best_finish from poker_player where final_table_made is not null and best_finish is not null"
        ],
        "query1": "select final_table_made, best_finish from poker_player",
        "query2": "select t1.final_table_made, t2.best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "What are the final tables made and best finishes for all poker players?",
        "question_toks": [
            "What",
            "are",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "best",
            "finishes",
            "for",
            "all",
            "poker",
            "players",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "poker_player": "poker_player_id"
        },
        "orig_query": "select final_table_made, best_finish from poker_player",
        "split_map": {
            "poker_player": "final_table_made"
        },
        "schema_with_content": "poker_player : money_rank (68.0, 68.0, 58.0), best_finish (1.0, 2.0, 3.0), people_id (5, 1, 6), earnings (596462.0, 142800.0, 104871.0), poker_player_id (3, 5, 3) | poker_player_final_table_made : poker_player_id (3, 2, 5), final_table_made (42.0, 19.0, 10.0) | people : people_id (6, 5, 4), height (194.0, 193.0, 205.0), name (\"Maksim Botin\", \"Maksim Botin\", \"Yevgeni Sivozhelez\"), birth_date (\"April 17, 1987\", \"April 17, 1987\", \"May 26, 1986\"), nationality (\"Russia\", \"Bulgaria\")",
        "schema_without_content": "poker_player : money_rank , best_finish , people_id , earnings , poker_player_id  | poker_player_final_table_made : poker_player_id , final_table_made  | people : people_id , height , name , birth_date , nationality ",
        "chatgpt_out": [
            "select t1.final_table_made, t2.best_finish from poker_player_final_table_made as t1 join poker_player as t2 on t1.poker_player_id = t2.poker_player_id",
            "select t2.best_finish, t1.final_table_made from poker_player_final_table_made as t1 join poker_player as t2 on t1.poker_player_id = t2.poker_player_id",
            "select final_table_made, best_finish from poker_player_final_table_made natural join poker_player",
            "select best_finish, final_table_made from poker_player natural join poker_player_final_table_made",
            "select t2.final_table_made, t1.best_finish from poker_player as t1 join poker_player_final_table_made as t2 on t1.poker_player_id = t2.poker_player_id"
        ],
        "query1": "select final_table_made, best_finish from poker_player",
        "query2": "select t2.final_table_made, t1.best_finish from poker_player as t1 join poker_player_final_table_made as t2 on t1.poker_player_id = t2.poker_player_id"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Final_Table_Made",
            ",",
            "Best_Finish",
            "FROM",
            "poker_player"
        ],
        "query_toks_no_value": [
            "select",
            "final_table_made",
            ",",
            "best_finish",
            "from",
            "poker_player"
        ],
        "question": "What are the final tables made and best finishes for all poker players?",
        "question_toks": [
            "What",
            "are",
            "the",
            "final",
            "tables",
            "made",
            "and",
            "best",
            "finishes",
            "for",
            "all",
            "poker",
            "players",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "poker_player": "poker_player_id"
        },
        "orig_query": "select final_table_made, best_finish from poker_player",
        "split_map": {
            "poker_player": "best_finish"
        },
        "schema_with_content": "poker_player : people_id (6, 7, 2), earnings (476090.0, 189233.0, 596462.0), poker_player_id (1, 2, 1), final_table_made (42.0, 42.0, 19.0), money_rank (166.0, 68.0, 141.0) | poker_player_best_finish : best_finish (1.0, 2.0, 3.0), poker_player_id (3, 2, 4) | people : nationality (\"Russia\", \"Bulgaria\"), height (205.0, 207.0, 193.0), birth_date (\"January 22, 1987\", \"July 14, 1983\", \"May 26, 1986\"), people_id (1, 5, 6), name (\"Teodor Salparov\", \"Teodor Salparov\", \"Semen Poltavskiy\")",
        "schema_without_content": "poker_player : people_id , earnings , poker_player_id , final_table_made , money_rank  | poker_player_best_finish : best_finish , poker_player_id  | people : nationality , height , birth_date , people_id , name ",
        "chatgpt_out": [
            "select final_table_made, best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id",
            "select best_finish, final_table_made from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id",
            "select t1.final_table_made, t2.best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id",
            "select t2.best_finish, t1.final_table_made from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id",
            "select final_table_made, best_finish from poker_player_best_finish as t1 join poker_player as t2 on t1.poker_player_id = t2.poker_player_id"
        ],
        "query1": "select final_table_made, best_finish from poker_player",
        "query2": "select t1.final_table_made, t2.best_finish from poker_player as t1 join poker_player_best_finish as t2 on t1.poker_player_id = t2.poker_player_id"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Birth_Date",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people",
            "order",
            "by",
            "name",
            "asc"
        ],
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "question_toks": [
            "List",
            "the",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "people",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "people": "people_id"
        },
        "orig_query": "select name, birth_date from people order by name asc",
        "split_map": {
            "people": "birth_date"
        },
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), earnings (596462.0, 142800.0, 189233.0), money_rank (154.0, 166.0, 154.0), final_table_made (21.0, 10.0, 10.0), people_id (5, 1, 1), poker_player_id (3, 4, 3) | people : height (193.0, 207.0, 193.0), nationality (\"Russia\", \"Bulgaria\"), name (\"Aleksey Ostapenko\", \"Teodor Salparov\", \"Semen Poltavskiy\"), people_id (3, 3, 4) | people_birth_date : people_id (6, 4, 1), birth_date (\"July 14, 1983\", \"April 17, 1987\", \"July 14, 1983\")",
        "schema_without_content": "poker_player : best_finish , earnings , money_rank , final_table_made , people_id , poker_player_id  | people : height , nationality , name , people_id  | people_birth_date : people_id , birth_date ",
        "chatgpt_out": [
            "select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc",
            "select t2.birth_date, t1.name from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc",
            "select t1.name, t2.birth_date from people_birth_date as t2 join people as t1 on t1.people_id = t2.people_id order by t1.name asc",
            "select t2.birth_date, t1.name from people_birth_date as t2 join people as t1 on t1.people_id = t2.people_id order by t1.name asc",
            "select name, birth_date from (select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc) as t3"
        ],
        "query1": "select name, birth_date from people order by name asc",
        "query2": "select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Birth_Date",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people",
            "order",
            "by",
            "name",
            "asc"
        ],
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "question_toks": [
            "List",
            "the",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "people",
            "in",
            "ascending",
            "alphabetical",
            "order",
            "of",
            "name",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "people": "people_id"
        },
        "orig_query": "select name, birth_date from people order by name asc",
        "split_map": {
            "people": "name"
        },
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), poker_player_id (5, 3, 2), money_rank (154.0, 68.0, 58.0), people_id (7, 7, 2), earnings (596462.0, 142800.0, 142800.0), final_table_made (42.0, 21.0, 19.0) | people : people_id (6, 7, 1), birth_date (\"January 22, 1987\", \"August 16, 1982\", \"August 8, 1986\"), height (187.0, 182.0, 194.0), nationality (\"Russia\", \"Bulgaria\") | people_name : people_id (6, 5, 2), name (\"Teodor Salparov\", \"Aleksey Ostapenko\", \"Roman Bragin\")",
        "schema_without_content": "poker_player : best_finish , poker_player_id , money_rank , people_id , earnings , final_table_made  | people : people_id , birth_date , height , nationality  | people_name : people_id , name ",
        "chatgpt_out": [
            "select t1.name, t2.birth_date from people_name as t1 join people as t2 on t1.people_id = t2.people_id order by t1.name asc",
            "select t2.birth_date, t1.name from people_name as t1 join people as t2 on t1.people_id = t2.people_id order by t1.name asc",
            "select name, birth_date from people order by name asc",
            "select birth_date, name from people order by name asc",
            "select t2.name, t2.birth_date from poker_player as t1 join people_name as t2 on t1.people_id = t2.people_id join people as t3 on t2.people_id = t3.people_id order by t2.name asc"
        ],
        "query1": "select name, birth_date from people order by name asc",
        "query2": "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Birth_Date",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people",
            "order",
            "by",
            "name",
            "asc"
        ],
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "people",
            ",",
            "ordered",
            "by",
            "their",
            "names",
            "in",
            "alphabetical",
            "order",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "people": "people_id"
        },
        "orig_query": "select name, birth_date from people order by name asc",
        "split_map": {
            "people": "birth_date"
        },
        "schema_with_content": "poker_player : final_table_made (21.0, 10.0, 19.0), best_finish (1.0, 2.0, 3.0), people_id (1, 7, 7), earnings (142800.0, 476090.0, 104871.0), money_rank (154.0, 166.0, 68.0), poker_player_id (3, 4, 4) | people : nationality (\"Russia\", \"Bulgaria\"), people_id (1, 6, 1), height (187.0, 196.0, 187.0), name (\"Maksim Botin\", \"Maksim Botin\", \"Semen Poltavskiy\") | people_birth_date : people_id (7, 3, 6), birth_date (\"April 17, 1987\", \"May 26, 1986\", \"February 8, 1981\")",
        "schema_without_content": "poker_player : final_table_made , best_finish , people_id , earnings , money_rank , poker_player_id  | people : nationality , people_id , height , name  | people_birth_date : people_id , birth_date ",
        "chatgpt_out": [
            "select name, birth_date from people_birth_date join people on people_birth_date.people_id = people.people_id order by name asc",
            "select birth_date, name from people_birth_date join people on people_birth_date.people_id = people.people_id order by name asc",
            "select name, birth_date from people join people_birth_date on people.people_id = people_birth_date.people_id order by name asc",
            "select birth_date, name from people join people_birth_date on people.people_id = people_birth_date.people_id order by name asc",
            "select t2.name, t1.birth_date from people_birth_date as t1 join people as t2 on t1.people_id = t2.people_id order by t2.name asc"
        ],
        "query1": "select name, birth_date from people order by name asc",
        "query2": "select t1.name, t2.birth_date from people as t1 join people_birth_date as t2 on t1.people_id = t2.people_id order by t1.name asc"
    },
    {
        "db_id": "poker_player",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Birth_Date",
            "FROM",
            "people",
            "ORDER",
            "BY",
            "Name",
            "ASC"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "birth_date",
            "from",
            "people",
            "order",
            "by",
            "name",
            "asc"
        ],
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "birth",
            "dates",
            "of",
            "people",
            ",",
            "ordered",
            "by",
            "their",
            "names",
            "in",
            "alphabetical",
            "order",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "people": "people_id"
        },
        "orig_query": "select name, birth_date from people order by name asc",
        "split_map": {
            "people": "name"
        },
        "schema_with_content": "poker_player : best_finish (1.0, 2.0, 3.0), poker_player_id (2, 1, 4), earnings (476090.0, 104871.0, 142800.0), final_table_made (42.0, 26.0, 10.0), people_id (6, 6, 1), money_rank (141.0, 58.0, 58.0) | people : birth_date (\"August 8, 1986\", \"August 16, 1982\", \"February 8, 1981\"), people_id (1, 5, 6), nationality (\"Russia\", \"Bulgaria\"), height (187.0, 187.0, 205.0) | people_name : people_id (7, 3, 4), name (\"Semen Poltavskiy\", \"Maksim Botin\", \"Maksim Botin\")",
        "schema_without_content": "poker_player : best_finish , poker_player_id , earnings , final_table_made , people_id , money_rank  | people : birth_date , people_id , nationality , height  | people_name : people_id , name ",
        "chatgpt_out": [
            "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc",
            "select t2.name, t1.birth_date from people_name as t2 join people as t1 on t2.people_id = t1.people_id order by t2.name asc",
            "select name, birth_date from people order by name asc",
            "select birth_date, name from people order by name asc",
            "select t2.name, t1.birth_date from people as t1 join (select * from people_name order by name) as t2 on t1.people_id = t2.people_id"
        ],
        "query1": "select name, birth_date from people order by name asc",
        "query2": "select t2.name, t1.birth_date from people as t1 join people_name as t2 on t1.people_id = t2.people_id order by t2.name asc"
    },
    {
        "db_id": "voter_1",
        "query_toks": [
            "SELECT",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "FROM",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "from",
            "votes"
        ],
        "question": "List the vote ids, phone numbers and states of all votes.",
        "question_toks": [
            "List",
            "the",
            "vote",
            "ids",
            ",",
            "phone",
            "numbers",
            "and",
            "states",
            "of",
            "all",
            "votes",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "votes": "vote_id"
        },
        "orig_query": "select vote_id, phone_number, state from votes",
        "split_map": {
            "votes": "state"
        },
        "schema_with_content": "area_code_state : state (\"KS\", \"MO\", \"SD\"), area_code (307, 509, 959) | contestants : contestant_number (9, 8, 1), contestant_name (\"Kelly Clauss\", \"Kelly Clauss\", \"Edwina Burnam\") | votes : created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:39\", \"2018-03-09 19:03:39\"), phone_number (7182887233, 7148407040, 7148407040), contestant_number (2, 3, 5), vote_id (5, 2, 1) | votes_state : vote_id (5, 2, 2), state (\"NY\", \"CA\", \"NJ\n\")",
        "schema_without_content": "area_code_state : state , area_code  | contestants : contestant_number , contestant_name  | votes : created , phone_number , contestant_number , vote_id  | votes_state : vote_id , state ",
        "chatgpt_out": [
            "select vote_id, phone_number, state from votes join votes_state using (vote_id)",
            "select vote_id, state, phone_number from votes join votes_state using (vote_id)",
            "select phone_number, state, vote_id from votes join votes_state using (vote_id)",
            "select phone_number, vote_id, state from votes join votes_state using (vote_id)",
            "select state, phone_number, vote_id from votes_state join votes using (vote_id)"
        ],
        "query1": "select vote_id, phone_number, state from votes",
        "query2": "select t1.vote_id, t1.phone_number, t2.state from votes as t1 join votes_state as t2 on t1.vote_id = t2.vote_id"
    },
    {
        "db_id": "voter_1",
        "query_toks": [
            "SELECT",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "FROM",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "vote_id",
            ",",
            "phone_number",
            ",",
            "state",
            "from",
            "votes"
        ],
        "question": "List the vote ids, phone numbers and states of all votes.",
        "question_toks": [
            "List",
            "the",
            "vote",
            "ids",
            ",",
            "phone",
            "numbers",
            "and",
            "states",
            "of",
            "all",
            "votes",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                6,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "votes": "vote_id"
        },
        "orig_query": "select vote_id, phone_number, state from votes",
        "split_map": {
            "votes": "phone_number"
        },
        "schema_with_content": "area_code_state : state (\"NM\", \"DC\", \"MT\"), area_code (605, 541, 715) | contestants : contestant_number (11, 10, 8), contestant_name (\"Alana Bregman\", \"Kelly Clauss\", \"Jessie Eichman\") | votes : created (\"2018-03-09 19:03:36\", \"2018-03-09 19:03:36\", \"2018-03-09 19:03:21\"), state (\"NY\", \"CA\", \"NJ\n\"), contestant_number (2, 3, 5), vote_id (5, 2, 5) | votes_phone_number : vote_id (5, 5, 2), phone_number (7182887233, 5112677315, 6209222712)",
        "schema_without_content": "area_code_state : state , area_code  | contestants : contestant_number , contestant_name  | votes : created , state , contestant_number , vote_id  | votes_phone_number : vote_id , phone_number ",
        "chatgpt_out": [
            "select vote_id, phone_number, state from votes_phone_number join votes on votes_phone_number.vote_id = votes.vote_id",
            "select votes.vote_id, votes_phone_number.phone_number, votes.state from votes_phone_number join votes on votes_phone_number.vote_id = votes.vote_id",
            "select v1.vote_id, v2.phone_number, v1.state from votes v1, votes_phone_number v2 where v1.vote_id = v2.vote_id",
            "select vote_id, phone_number, state from votes_phone_number, votes where votes_phone_number.vote_id = votes.vote_id",
            "select v1.vote_id, v2.phone_number, v1.state from votes v1 join votes_phone_number v2 on v1.vote_id = v2.vote_id"
        ],
        "query1": "select vote_id, phone_number, state from votes",
        "query2": "select t1.vote_id, t2.phone_number, t1.state from votes as t1 join votes_phone_number as t2 on t1.vote_id = t2.vote_id"
    },
    {
        "db_id": "voter_1",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "state",
            ",",
            "created",
            "FROM",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "state",
            ",",
            "created",
            "from",
            "votes"
        ],
        "question": "What are the distinct states and create time of all votes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "distinct",
            "states",
            "and",
            "create",
            "time",
            "of",
            "all",
            "votes",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "votes": "vote_id"
        },
        "orig_query": "select distinct state, created from votes",
        "split_map": {
            "votes": "created"
        },
        "schema_with_content": "area_code_state : area_code (914, 304, 386), state (\"MD\", \"PA\", \"SC\") | contestants : contestant_number (11, 7, 10), contestant_name (\"Tabatha Gehling\", \"Jessie Alloway\", \"Edwina Burnam\") | votes : contestant_number (2, 3, 5), state (\"NY\", \"CA\", \"NJ\n\"), phone_number (6209222712, 5112677315, 7148407040), vote_id (3, 2, 5) | votes_created : created (\"2018-03-09 19:03:21\", \"2018-03-09 19:03:39\", \"2018-03-09 19:03:40\"), vote_id (3, 2, 3)",
        "schema_without_content": "area_code_state : area_code , state  | contestants : contestant_number , contestant_name  | votes : contestant_number , state , phone_number , vote_id  | votes_created : created , vote_id ",
        "chatgpt_out": [
            "select distinct state, created from votes_created join votes on votes_created.vote_id = votes.vote_id",
            "select created, distinct state from votes_created join votes on votes_created.vote_id = votes.vote_id",
            "select distinct state, created from votes_created, votes where votes_created.vote_id = votes.vote_id",
            "select created, distinct state from votes_created, votes where votes_created.vote_id = votes.vote_id",
            "select distinct votes.state, votes_created.created from votes join votes_created on votes.vote_id = votes_created.vote_id"
        ],
        "query1": "select distinct state, created from votes",
        "query2": "select distinct t1.state, t2.created from votes as t1 join votes_created as t2 on t1.vote_id = t2.vote_id"
    },
    {
        "db_id": "voter_1",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "state",
            ",",
            "created",
            "FROM",
            "votes"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "state",
            ",",
            "created",
            "from",
            "votes"
        ],
        "question": "What are the distinct states and create time of all votes?",
        "question_toks": [
            "What",
            "are",
            "the",
            "distinct",
            "states",
            "and",
            "create",
            "time",
            "of",
            "all",
            "votes",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                7,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "votes": "vote_id"
        },
        "orig_query": "select distinct state, created from votes",
        "split_map": {
            "votes": "state"
        },
        "schema_with_content": "area_code_state : state (\"MS\", \"AZ\", \"NH\"), area_code (731, 435, 207) | contestants : contestant_number (10, 3, 7), contestant_name (\"Nita Coster\", \"Edwina Burnam\", \"Tabatha Gehling\") | votes : phone_number (6209222712, 7148407040, 7182887233), created (\"2018-03-09 19:03:39\", \"2018-03-09 19:03:39\", \"2018-03-09 19:03:36\"), contestant_number (2, 3, 5), vote_id (3, 1, 2) | votes_state : state (\"NY\", \"CA\", \"NJ\n\"), vote_id (1, 2, 1)",
        "schema_without_content": "area_code_state : state , area_code  | contestants : contestant_number , contestant_name  | votes : phone_number , created , contestant_number , vote_id  | votes_state : state , vote_id ",
        "chatgpt_out": [
            "select distinct votes_state.state, votes.created from votes_state join votes on votes_state.vote_id = votes.vote_id",
            "select votes_state.state, distinct votes.created from votes_state join votes on votes_state.vote_id = votes.vote_id",
            "select distinct votes_state.state, votes.created from votes join votes_state on votes_state.vote_id = votes.vote_id",
            "select votes_state.state, distinct votes.created from votes join votes_state on votes_state.vote_id = votes.vote_id",
            "select distinct votes_state.state, votes.created from votes_state join votes on votes_state.vote_id = votes.vote_id group by votes_state.state, votes.created"
        ],
        "query1": "select distinct state, created from votes",
        "query2": "select distinct t2.state, t1.created from votes as t1 join votes_state as t2 on t1.vote_id = t2.vote_id"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Brazil",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the population and life expectancies in Brazil?",
        "question_toks": [
            "What",
            "are",
            "the",
            "population",
            "and",
            "life",
            "expectancies",
            "in",
            "Brazil",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : countrycode (\"SWE\", \"ISL\", \"BMU\"), id (1552, 2290, 3480), district (\"Haifa\", \"Slaskie\", \"Maranh\u00c3\u00a3o\"), population (593321, 376662, 226419), name (\"Miaoli\", \"Jaranwala\", \"Kampala\") | sqlite_sequence : name (\"city\"), seq (4079) | country : lifeexpectancy (73.3, 67.2, 50.5), gnpold (1392448.0, 781.0, 1102.0), governmentform (\"Constitutional Monarchy, Federation\", \"Constitutional Monarchy (Emirate)\", \"Socialistic State\"), headofstate (\"Josefa Iloilo\", \"Mamadou Tandja\", \"Juan Carlos I\"), indepyear (1847, 1918, 1821), code2 (\"NP\", \"MC\", \"TC\"), code (\"IRN\", \"LBY\", \"CHN\"), region (\"North America\", \"Western Europe\", \"Antarctica\"), capital (1859, 937, 2511), continent (\"Africa\", \"Europe\", \"Asia\"), localname (\"Uganda\", \"Madagasikara/Madagascar\", \"Ghana\"), surfacearea (199900.0, 449964.0, 147181.0), gnp (97.0, 351182.0, 38158.0), name (\"Denmark\", \"New Caledonia\", \"Botswana\") | country_population : code (\"CUB\", \"CAF\", \"LSO\"), population (21607000, 6097000, 3850000) | countrylanguage : percentage (92.1, 5.6, 14.2), isofficial (\"T\", \"F\"), language (\"Tripuri\", \"Comorian-Arabic\", \"Saame\"), countrycode (\"ROM\", \"ESH\", \"SYR\")",
        "schema_without_content": "city : countrycode , id , district , population , name  | sqlite_sequence : name , seq  | country : lifeexpectancy , gnpold , governmentform \", \"Socialistic State\", headofstate , indepyear , code2 , code , region , capital , continent , localname , surfacearea , gnp , name  | country_population : code , population  | countrylanguage : percentage , isofficial , language , countrycode ",
        "chatgpt_out": [
            "select population, lifeexpectancy from country where name = 'Brazil'",
            "select lifeexpectancy, population from country where name = 'Brazil'",
            "select population, lifeexpectancy from country where code = 'BRA'",
            "select lifeexpectancy, population from country where code = 'BRA'",
            "select t1.population, t2.lifeexpectancy from country_population as t1 join country as t2 on t1.code = t2.code where t2.name = 'Brazil'"
        ],
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "query2": "select t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Brazil\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Brazil",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the population and life expectancies in Brazil?",
        "question_toks": [
            "What",
            "are",
            "the",
            "population",
            "and",
            "life",
            "expectancies",
            "in",
            "Brazil",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "split_map": {
            "country": "lifeexpectancy"
        },
        "schema_with_content": "city : id (714, 1856, 664), countrycode (\"AND\", \"LSO\", \"ALB\"), name (\"Hidalgo del Parral\", \"Nakhon Pathom\", \"T\u00c3\u00a9touan\"), district (\"Sisilia\", \"Markazi\", \"Fukuoka\"), population (524500, 226419, 141000) | sqlite_sequence : name (\"city\"), seq (4079) | country : localname (\"Martinique\", \"Belgi\u00c3\u00ab/Belgique\", \"Pakistan\"), surfacearea (70273.0, 751.0, 36125.0), indepyear (1970, 1974, 1979), capital (3791, 2484, 3173), gnp (63.2, 116416.0, 264478.0), governmentform (\"Occupied by Marocco\", \"Federation\", \"Overseas Department of France\"), code2 (\"VU\", \"VN\", \"LA\"), region (\"Eastern Asia\", \"Southern and Central Asia\", \"Eastern Africa\"), headofstate (\"Abdullah II\", \"Vernon Shaw\", \"Charles Taylor\"), code (\"NFK\", \"VUT\", \"PLW\"), population (10545700, 23115000, 62565000), name (\"Russian Federation\", \"Oman\", \"Eritrea\"), continent (\"Asia\", \"South America\", \"South America\"), gnpold (4542.0, 1186.0, 7988.0) | country_lifeexpectancy : lifeexpectancy (45.2, 69.5, 67.9), code (\"USA\", \"GUY\", \"WLF\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Kekch\u00c3\u00ad\", \"Northsotho\", \"Mari\"), countrycode (\"SUR\", \"BRA\", \"FRO\"), percentage (37.2, 87.5, 90.0)",
        "schema_without_content": "city : id , countrycode , name , district , population  | sqlite_sequence : name , seq  | country : localname , surfacearea , indepyear , capital , gnp , governmentform , code2 , region , headofstate , code , population , name , continent , gnpold  | country_lifeexpectancy : lifeexpectancy , code  | countrylanguage : isofficial , language , countrycode , percentage ",
        "chatgpt_out": [
            "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code join countrylanguage as t3 on t1.code = t3.countrycode where t1.name = 'Brazil' and t3.isofficial = 'T'",
            "select t1.population, t3.lifeexpectancy from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join country_lifeexpectancy as t3 on t1.code = t3.code where t1.name = 'Brazil' and t2.isofficial = 'T'",
            "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.name = 'Brazil'",
            "select t1.population, t3.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code join countrylanguage as t3 on t1.code = t3.countrycode where t1.name = 'Brazil' and t3.language = 'Portuguese' and t3.isofficial = 'T'",
            "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code join countrylanguage as t3 on t1.code = t3.countrycode where t1.name = 'Brazil' and t3.language = 'Portuguese'"
        ],
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "query2": "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.name = \"Brazil\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Brazil",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "question_toks": [
            "Give",
            "me",
            "Brazil\u2019s",
            "population",
            "and",
            "life",
            "expectancies",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : population (116246, 159103, 342595), countrycode (\"NER\", \"ZMB\", \"TKM\"), district (\"S\u00c3\u00a3o Tiago\", \"Shaba\", \"Kadiogo\"), id (2187, 342, 1807), name (\"P\u00c3\u00a1nuco\", \"Christchurch\", \"Barakaldo\") | sqlite_sequence : seq (4079), name (\"city\") | country : code (\"MCO\", \"JAM\", \"RWA\"), lifeexpectancy (76.5, 63.7, 73.1), localname (\"Cameroun/Cameroon\", \"Portugal\", \"Dhivehi Raajje/Maldives\"), capital (2807, 554, 3206), name (\"Taiwan\", \"Albania\", \"Grenada\"), gnpold (206025.0, 1863.0, 58549.0), headofstate (\"Malietoa Tanumafili II\", \"Arnoldo Alem\u00c3\u00a1n Lacayo\", \"Blaise Compaor\u00c3\u00a9\"), gnp (11863.0, 8571.0, 318.0), continent (\"South America\", \"Asia\", \"Oceania\"), code2 (\"AQ\", \"RE\", \"HK\"), indepyear (1978, 1968, 1581), region (\"Southern and Central Asia\", \"Nordic Countries\", \"Eastern Asia\"), surfacearea (112622.0, 9970610.0, 650.0), governmentform (\"Constitutional Monarchy\", \"Autonomous Area\", \"Nonmetropolitan Territory of The Netherlands\") | country_population : code (\"VGB\", \"ZWE\", \"COK\"), population (18112000, 6097000, 2500) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"CPV\", \"GUM\", \"BRN\"), language (\"Azerbaijani\", \"Carolinian\", \"Circassian\"), percentage (94.2, 2.1, 11.1)",
        "schema_without_content": "city : population , countrycode , district , id , name  | sqlite_sequence : seq , name  | country : code , lifeexpectancy , localname , capital , name , gnpold , headofstate , gnp , continent , code2 , indepyear , region , surfacearea , governmentform  | country_population : code , population  | countrylanguage : isofficial , countrycode , language , percentage ",
        "chatgpt_out": [
            "select t1.lifeexpectancy, t2.population from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Brazil'",
            "select t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Brazil'",
            "select lifeexpectancy, population from country where name = 'Brazil' union select population, lifeexpectancy from country_population where code = 'BRA'",
            "select population, lifeexpectancy from country where name = 'Brazil' union select lifeexpectancy, population from country_population where code = 'BRA'",
            "select t1.lifeexpectancy, t2.population from country as t1, country_population as t2 where t1.code = t2.code and t1.name = 'Brazil'"
        ],
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "query2": "select t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Brazil\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Brazil",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "question_toks": [
            "Give",
            "me",
            "Brazil\u2019s",
            "population",
            "and",
            "life",
            "expectancies",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Brazil\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "split_map": {
            "country": "lifeexpectancy"
        },
        "schema_with_content": "city : countrycode (\"KOR\", \"NIU\", \"MAR\"), population (202451, 145150, 618477), district (\"Kaluga\", \"\u00c3\u0085rhus\", \"Attika\"), id (268, 181, 2520), name (\"Resende\", \"Santa Luzia\", \"Jinhua\") | sqlite_sequence : seq (4079), name (\"city\") | country : name (\"Netherlands Antilles\", \"Tajikistan\", \"Vietnam\"), localname (\"Slovensko\", \"S\u00c3\u00a3o Tom\u00c3\u00a9 e Pr\u00c3\u00adncipe\", \"Bolivia\"), gnp (1208.0, 320.0, 650.0), headofstate (\"Ricardo Lagos Escobar\", \"Eduard \u00c5\u00a0evardnadze\", \"Alfonso Portillo Cabrera\"), continent (\"Europe\", \"Africa\", \"North America\"), capital (62, 2430, 3236), code2 (\"SM\", \"LC\", \"MS\"), indepyear (1905, 1976, 1978), surfacearea (96.0, 1904569.0, 964.0), code (\"MSR\", \"HMD\", \"MDG\"), region (\"Australia and New Zealand\", \"Micronesia\", \"Eastern Africa\"), governmentform (\"Occupied by Marocco\", \"Republic\", \"Republic\"), population (62565000, 18886000, 77000), gnpold (1056.0, 96318.0, 18898.0) | country_lifeexpectancy : code (\"KHM\", \"UZB\", \"IND\"), lifeexpectancy (60.8, 38.3, 73.8) | countrylanguage : language (\"Hausa\", \"Trukese\", \"Duala\"), countrycode (\"PYF\", \"TON\", \"VGB\"), percentage (9.5, 6.0, 13.9), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : countrycode , population , district , id , name  | sqlite_sequence : seq , name  | country : name , localname , gnp , headofstate , continent , capital , code2 , indepyear , surfacearea , code , region , governmentform , population , gnpold  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : language , countrycode , percentage , isofficial ",
        "chatgpt_out": [
            "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.name = 'Brazil'",
            "select t1.population, t2.lifeexpectancy from country as t1, country_lifeexpectancy as t2 where t1.code = t2.code and t1.name = 'Brazil'",
            "select population, lifeexpectancy from country where name = 'Brazil'",
            "select lifeexpectancy, population from country where name = 'Brazil'",
            "select t1.population, t2.lifeexpectancy from country t1 join countrylanguage t2 on t1.code = t2.countrycode where t1.name = 'Brazil' and t2.language = 'Portuguese'"
        ],
        "query1": "select population, lifeexpectancy from country where name = \"Brazil\"",
        "query2": "select t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.name = \"Brazil\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "Region",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Angola",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the region and population of Angola?",
        "question_toks": [
            "What",
            "are",
            "the",
            "region",
            "and",
            "population",
            "of",
            "Angola",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Angola\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, region from country where name = \"Angola\"",
        "split_map": {
            "country": "region"
        },
        "schema_with_content": "city : district (\"Pinar del R\u00c3\u00ado\", \"Bulawayo\", \"Catamarca\"), id (3563, 3059, 902), name (\"Iida\", \"Aparecida de Goi\u00c3\u00a2nia\", \"Nakhon Ratchasima\"), population (102178, 90327, 172562), countrycode (\"ESP\", \"UZB\", \"GEO\") | sqlite_sequence : seq (4079), name (\"city\") | country : headofstate (\"Eduard \u00c5\u00a0evardnadze\", \"Ange-F\u00c3\u00a9lix Patass\u00c3\u00a9\", \"Mohammed VI\"), code2 (\"MP\", \"GF\", \"AS\"), governmentform (\"Nonmetropolitan Territory of France\", \"Parlementary Monarchy\", \"Parlementary Monarchy\"), lifeexpectancy (50.8, 49.2, 64.1), capital (608, 584, 904), name (\"R\u00c3\u00a9union\", \"Spain\", \"Haiti\"), localname (\"New Zealand/Aotearoa\", \"Angola\", \"Amerika Samoa\"), indepyear (800, None, 836), gnp (9333.0, 340238.0, 828.0), continent (\"Asia\", \"Asia\", \"Europe\"), code (\"PNG\", \"LBN\", \"MOZ\"), population (27000, 4854000, 8190900), surfacearea (359.0, 33851.0, 373.0), gnpold (616.0, 153907.0, 616.0) | country_region : code (\"NAM\", \"SDN\", \"BOL\"), region (\"Southeast Asia\", \"Western Africa\", \"Antarctica\") | countrylanguage : percentage (83.2, 31.6, 72.1), language (\"Garifuna\", \"Santhali\", \"Monegasque\"), countrycode (\"NIU\", \"PRK\", \"AFG\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : district , id , name , population , countrycode  | sqlite_sequence : seq , name  | country : headofstate , code2 , governmentform , lifeexpectancy , capital , name , localname , indepyear , gnp , continent , code , population , surfacearea , gnpold  | country_region : code , region  | countrylanguage : percentage , language , countrycode , isofficial ",
        "chatgpt_out": [
            "select t1.region, t1.population from country as t1 where t1.name = 'Angola'",
            "select region, population from country where name = 'Angola'",
            "select t1.region, t2.population from country_region as t1 join country as t2 on t1.code = t2.code where t2.name = 'Angola'",
            "select region, population from country_region as t1 join country as t2 on t1.code = t2.code where t2.name = 'Angola'",
            "select region, t2.population from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.name = 'Angola'"
        ],
        "query1": "select population, region from country where name = \"Angola\"",
        "query2": "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = \"Angola\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "Region",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Angola",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What are the region and population of Angola?",
        "question_toks": [
            "What",
            "are",
            "the",
            "region",
            "and",
            "population",
            "of",
            "Angola",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Angola\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, region from country where name = \"Angola\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : district (\"Fars\", \"Thessalia\", \"Samarkand\"), name (\"Nyeri\", \"Kasugai\", \"Amersfoort\"), population (163351, 127949, 105100), id (660, 1958, 2499), countrycode (\"GNQ\", \"ASM\", \"FIN\") | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Middle East\", \"Southern and Central Asia\", \"Western Africa\"), code (\"LCA\", \"MUS\", \"GUM\"), headofstate (\"Thomas Klestil\", \"Aljaksandr Luka\u00c5\u00a1enka\", \"Maaouiya Ould Sid\u00c2\u00b4Ahmad Taya\"), capital (456, 901, 3014), code2 (\"NL\", \"AT\", \"SZ\"), gnp (2357.0, 6871.0, 6041.0), gnpold (8920.0, 743.0, 542.0), name (\"Guinea-Bissau\", \"Bangladesh\", \"South Africa\"), governmentform (\"Dependent Territory of the US\", \"Part of Denmark\", \"Monarchy (Sultanate)\"), continent (\"Africa\", \"North America\", \"Europe\"), localname (\"R\u00c3\u00a9union\", \"Lao\", \"Jamaica\"), indepyear (1906, 1994, 1977), lifeexpectancy (57.8, 73.7, 44.0), surfacearea (0.4, 47000.0, 455.0) | country_population : population (4807000, 4023000, 10925000), code (\"FRO\", \"NPL\", \"NOR\") | countrylanguage : language (\"Tikar\", \"Ukrainian\", \"Fang\"), isofficial (\"T\", \"F\"), countrycode (\"POL\", \"ARE\", \"TON\"), percentage (67.2, 29.7, 2.8)",
        "schema_without_content": "city : district , name , population , id , countrycode  | sqlite_sequence : seq , name  | country : region , code , headofstate , capital , code2 , gnp , gnpold , name , governmentform \", continent , localname , indepyear , lifeexpectancy , surfacearea  | country_population : population , code  | countrylanguage : language , isofficial , countrycode , percentage ",
        "chatgpt_out": [
            "select t1.region, t2.population from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Angola'",
            "select t1.population, t2.region from country_population as t1 join country as t2 on t1.code = t2.code where t2.name = 'Angola'",
            "select t1.region, t2.population from country as t1 join (select * from country_population where code = 'AGO') as t2 on t1.code = t2.code",
            "select t1.population, t2.region from country_population as t1 join (select * from country where name = 'Angola') as t2 on t1.code = t2.code",
            "select t1.region, t2.population from country as t1, country_population as t2 where t1.code = t2.code and t1.name = 'Angola'"
        ],
        "query1": "select population, region from country where name = \"Angola\"",
        "query2": "select t2.population, t1.region from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Angola\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "Region",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Angola",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What region does Angola belong to and what is its population?",
        "question_toks": [
            "What",
            "region",
            "does",
            "Angola",
            "belong",
            "to",
            "and",
            "what",
            "is",
            "its",
            "population",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Angola\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, region from country where name = \"Angola\"",
        "split_map": {
            "country": "region"
        },
        "schema_with_content": "city : district (\"Islamabad\", \"Andalusia\", \"Iwate\"), name (\"Musashino\", \"Mahabad\", \"Siirt\"), id (3514, 562, 539), population (534694, 149222, 104986), countrycode (\"BEN\", \"OMN\", \"TMP\") | sqlite_sequence : seq (4079), name (\"city\") | country : code (\"ATF\", \"ZAF\", \"THA\"), lifeexpectancy (79.8, 51.0, 63.4), gnpold (625626.0, 160151.0, 16153.0), gnp (120724.0, 256254.0, 8571.0), surfacearea (449964.0, 245857.0, 1284000.0), code2 (\"NO\", \"HT\", \"LS\"), name (\"Croatia\", \"Northern Mariana Islands\", \"Jamaica\"), localname (\"Belau/Palau\", \"Guyane fran\u00c3\u00a7aise\", \"Schweiz/Suisse/Svizzera/Svizra\"), governmentform (\"Commonwealth of the US\", \"Dependent Territory of Norway\", \"Co-administrated\"), population (46844000, 435700, 11669000), capital (927, 62, 2482), indepyear (1923, 1973, 1847), continent (\"Asia\", \"North America\", \"North America\"), headofstate (\"Hip\u00c3\u00b3lito Mej\u00c3\u00ada Dom\u00c3\u00adnguez\", \"Harald V\", \"Albert II\") | country_region : code (\"ZMB\", \"GAB\", \"LIE\"), region (\"Eastern Africa\", \"Southern Africa\", \"Micronesia/Caribbean\") | countrylanguage : percentage (4.3, 88.9, 3.4), isofficial (\"T\", \"F\"), countrycode (\"BIH\", \"TJK\", \"CRI\"), language (\"Kpelle\", \"Goajiro\", \"Makua\")",
        "schema_without_content": "city : district , name , id , population , countrycode  | sqlite_sequence : seq , name  | country : code , lifeexpectancy , gnpold , gnp , surfacearea , code2 , name , localname , governmentform , population , capital , indepyear , continent , headofstate  | country_region : code , region  | countrylanguage : percentage , isofficial , countrycode , language ",
        "chatgpt_out": [
            "select t1.region, t2.population from country_region as t1 join country as t2 on t1.code = t2.code where t2.name = 'Angola'",
            "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = 'Angola'",
            "select t1.region, t2.population from country_region as t1 join country as t2 on t1.code = t2.code where t2.name like '%Angola%'",
            "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name like '%Angola%'",
            "select t2.region, t2.population from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = 'Angola'"
        ],
        "query1": "select population, region from country where name = \"Angola\"",
        "query2": "select t1.population, t2.region from country as t1 join country_region as t2 on t1.code = t2.code where t1.name = \"Angola\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Population",
            ",",
            "Region",
            "FROM",
            "country",
            "WHERE",
            "Name",
            "=",
            "``",
            "Angola",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "population",
            ",",
            "region",
            "from",
            "country",
            "where",
            "name",
            "=",
            "value"
        ],
        "question": "What region does Angola belong to and what is its population?",
        "question_toks": [
            "What",
            "region",
            "does",
            "Angola",
            "belong",
            "to",
            "and",
            "what",
            "is",
            "its",
            "population",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            9,
                            false
                        ],
                        null
                    ],
                    "\"Angola\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select population, region from country where name = \"Angola\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : id (686, 984, 3273), countrycode (\"KAZ\", \"FRO\", \"LKA\"), population (224044, 147000, 178748), district (\"Haskovo\", \"Miranda\", \"Balikesir\"), name (\"Lakewood\", \"Obninsk\", \"Bose\") | sqlite_sequence : seq (4079), name (\"city\") | country : capital (2484, 192, 3306), governmentform (\"Monarchy (Sultanate)\", \"Monarchy (Sultanate)\", \"Special Administrative Region of China\"), indepyear (1769, 1908, 1769), region (\"Southeast Asia\", \"Eastern Asia\", \"South America\"), gnp (4988.0, 1988.0, 249704.0), continent (\"North America\", \"Oceania\", \"Asia\"), headofstate (\"Saddam Hussein al-Takriti\", \"Vladimir Voronin\", \"Ferenc M\u00c3\u00a1dl\"), code2 (\"PL\", \"EG\", \"CM\"), name (\"San Marino\", \"Comoros\", \"Dominican Republic\"), lifeexpectancy (77.4, 45.6, 70.7), code (\"TKM\", \"CHN\", \"DJI\"), surfacearea (702.0, 309500.0, 618.0), gnpold (2190.0, 2201.0, 5639.0), localname (\"Suomi\", \"Djibouti/Jibuti\", \"Dhivehi Raajje/Maldives\") | country_population : population (861000, 42321000, 10925000), code (\"ANT\", \"MAR\", \"ESH\") | countrylanguage : countrycode (\"PCN\", \"DJI\", \"NIU\"), isofficial (\"T\", \"F\"), percentage (23.8, 0.1, 75.2), language (\"Chewa\", \"Turkana\", \"Kalenjin\")",
        "schema_without_content": "city : id , countrycode , population , district , name  | sqlite_sequence : seq , name  | country : capital , governmentform \", \"Monarchy \", \"Special Administrative Region of China\", indepyear , region , gnp , continent , headofstate , code2 , name , lifeexpectancy , code , surfacearea , gnpold , localname  | country_population : population , code  | countrylanguage : countrycode , isofficial , percentage , language ",
        "chatgpt_out": [
            "select t1.region, t2.population from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = 'Angola'",
            "select t1.population, t2.region from country_population as t1 join country as t2 on t1.code = t2.code where t2.name = 'Angola'",
            "select t1.region, t2.population from country as t1 join (select * from country_population where code = 'AGO') as t2 on t1.code = t2.code",
            "select t2.population, t1.region from (select * from country_population where code = 'AGO') as t2 join country as t1 on t1.code = t2.code",
            "select region, population from country where name = 'Angola'"
        ],
        "query1": "select population, region from country where name = \"Angola\"",
        "query2": "select t2.population, t1.region from country as t1 join country_population as t2 on t1.code = t2.code where t1.name = \"Angola\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "max",
            "(",
            "GNP",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "What is the total population and maximum GNP in Asia?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "population",
            "and",
            "maximum",
            "GNP",
            "in",
            "Asia",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : district (\"Hanti-Mansia\", \"Penza\", \"Cayo\"), name (\"Elektrostal\", \"Tieling\", \"Ilam\"), population (532200, 98464, 137070), countrycode (\"MEX\", \"TCD\", \"MTQ\"), id (2708, 2115, 2065) | sqlite_sequence : name (\"city\"), seq (4079) | country : indepyear (1953, 1948, 1990), lifeexpectancy (54.8, 48.8, 67.8), gnp (7526.0, 37966.0, 141.0), gnpold (33514.0, 96318.0, 2141.0), governmentform (\"Constitutional Monarchy\", \"Occupied by Marocco\", \"Socialistic State\"), name (\"Gabon\", \"Uganda\", \"Cook Islands\"), surfacearea (238391.0, 71740.0, 236.0), code (\"GUM\", \"ARG\", \"FLK\"), code2 (\"AW\", \"LV\", \"PA\"), localname (\"Ireland/\u00c3\u0089ire\", \"T\u00c3\u00bcrkmenostan\", \"Panam\u00c3\u00a1\"), region (\"Caribbean\", \"Southern and Central Asia\", \"Eastern Asia\"), headofstate (\"Glafkos Klerides\", \"Harald V\", \"Vaira Vike-Freiberga\"), capital (2437, 56, 2508), continent (\"Oceania\", \"Antarctica\", \"Europe\") | country_population : population (38000, 8000, 1008000), code (\"ECU\", \"NER\", \"POL\") | countrylanguage : countrycode (\"CYP\", \"EST\", \"PYF\"), percentage (47.5, 98.1, 94.3), isofficial (\"T\", \"F\"), language (\"Hadjarai\", \"Shona\", \"Ndebele\")",
        "schema_without_content": "city : district , name , population , countrycode , id  | sqlite_sequence : name , seq  | country : indepyear , lifeexpectancy , gnp , gnpold , governmentform , name , surfacearea , code , code2 , localname , region , headofstate , capital , continent  | country_population : population , code  | countrylanguage : countrycode , percentage , isofficial , language ",
        "chatgpt_out": [
            "select sum(t1.population), max(t2.gnp) from country as t1, city as t2 where t1.code = t2.countrycode and t1.continent = 'Asia'",
            "select sum(t1.population), max(t1.gnp) from country as t1 join city as t2 on t1.code = t2.countrycode where t1.continent = 'Asia'",
            "select sum(t1.population), max(t1.gnp) from country as t1 inner join city as t2 on t1.code = t2.countrycode where t1.continent = 'Asia'",
            "select sum(t1.population), (select max(gnp) from country where continent = 'Asia') from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = 'Asia'",
            "select sum(t1.population), (select max(gnp) from country where continent = 'Asia') from city as t1, country as t2 where t1.countrycode = t2.code and t2.continent = 'Asia'"
        ],
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "query2": "select sum(t2.population), max(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "max",
            "(",
            "GNP",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "What is the total population and maximum GNP in Asia?",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "population",
            "and",
            "maximum",
            "GNP",
            "in",
            "Asia",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "split_map": {
            "country": "gnp"
        },
        "schema_with_content": "city : district (\"Tochigi\", \"Bulawayo\", \"Toamasina\"), id (1091, 1861, 777), population (259579, 136216, 194300), countrycode (\"CXR\", \"GUM\", \"GTM\"), name (\"Damascus\", \"South Dum Dum\", \"Uvira\") | sqlite_sequence : seq (4079), name (\"city\") | country : gnpold (6887.0, 3545.0, 65186.0), headofstate (\"Tarja Halonen\", \"\u00c5\u00a0tipe Mesic\", \"Nursultan Nazarbajev\"), name (\"Sudan\", \"Croatia\", \"Hong Kong\"), code2 (\"PK\", \"MH\", \"TD\"), region (\"Southern and Central Asia\", \"Australia and New Zealand\", \"Western Africa\"), population (8495000, 24170000, 33517000), continent (\"South America\", \"Oceania\", \"Asia\"), localname (\"Tanzania\", \"The Cook Islands\", \"Suriya\"), capital (3063, 1532, 3172), lifeexpectancy (63.7, 60.9, 69.9), code (\"TWN\", \"CCK\", \"COK\"), governmentform (\"Dependent Territory of the US\", \"People'sRepublic\", \"Nonmetropolitan Territory of The Netherlands\"), indepyear (1966, 1903, 1844), surfacearea (242.0, 69700.0, 2510.0) | country_gnp : gnp (1990.0, 5332.0, 146.0), code (\"BMU\", \"ASM\", \"CYM\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Japanese\", \"Dagara\", \"Herero\"), percentage (9.7, 18.6, 1.1), countrycode (\"EGY\", \"BEL\", \"SLV\")",
        "schema_without_content": "city : district , id , population , countrycode , name  | sqlite_sequence : seq , name  | country : gnpold , headofstate , name , code2 , region , population , continent , localname , capital , lifeexpectancy , code , governmentform , indepyear , surfacearea  | country_gnp : gnp , code  | countrylanguage : isofficial , language , percentage , countrycode ",
        "chatgpt_out": [
            "select sum(population), max(gnpold) from country where continent = 'Asia'",
            "select max(gnpold), sum(population) from country where continent = 'Asia'",
            "select sum(population) as total_population, max(gnpold) as maximum_gnp from country where continent = 'Asia'",
            "select max(gnpold) as maximum_gnp, sum(population) as total_population from country where continent = 'Asia'",
            "select sum(t1.population) as total_population, max(t2.gnpold) as maximum_gnp from country as t1, country as t2 where t1.continent = 'Asia' and t2.continent = 'Asia'"
        ],
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "query2": "select sum(t1.population), max(t2.gnp) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.continent = \"Asia\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "max",
            "(",
            "GNP",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "question_toks": [
            "How",
            "many",
            "people",
            "live",
            "in",
            "Asia",
            ",",
            "and",
            "what",
            "is",
            "the",
            "largest",
            "GNP",
            "among",
            "them",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : countrycode (\"SVK\", \"NLD\", \"GTM\"), population (108017, 368993, 222884), district (\"Qu\u00c3\u00a9bec\", \"Vilna\", \"Podravska\"), name (\"Marawi\", \"Mishan\", \"Mor\u00c3\u00b3n\"), id (429, 2041, 3645) | sqlite_sequence : seq (4079), name (\"city\") | country : gnpold (32100.0, 73132.0, 8596.0), capital (2440, 3065, 3813), indepyear (1991, 1806, -660), continent (\"Asia\", \"Europe\", \"North America\"), surfacearea (694.0, 64589.0, 90000.0), name (\"Djibouti\", \"Venezuela\", \"South Georgia and the South Sandwich Islands\"), code2 (\"TM\", \"VG\", \"BZ\"), code (\"QAT\", \"LVA\", \"SAU\"), gnp (199.0, 15706.0, 211860.0), headofstate (\"Olusegun Obasanjo\", \"Mohammed VI\", \"France-Albert Ren\u00c3\u00a9\"), lifeexpectancy (78.0, 70.4, 45.3), localname (\"Belarus\", \"K\u00c3\u00a2mpuch\u00c3\u00a9a\", \"Guyane fran\u00c3\u00a7aise\"), region (\"Western Africa\", \"Western Africa\", \"Central America\"), governmentform (\"Constitutional Monarchy, Federation\", \"Monarchy (Emirate)\", \"Islamic Emirate\") | country_population : population (11168000, 11669000, 1277558000), code (\"BVT\", \"MEX\", \"LBY\") | countrylanguage : language (\"Chamorro\", \"Galecian\", \"Dinka\"), percentage (89.7, 50.0, 11.7), isofficial (\"T\", \"F\"), countrycode (\"USA\", \"GIN\", \"BHR\")",
        "schema_without_content": "city : countrycode , population , district , name , id  | sqlite_sequence : seq , name  | country : gnpold , capital , indepyear , continent , surfacearea , name , code2 , code , gnp , headofstate , lifeexpectancy , localname , region , governmentform \", \"Islamic Emirate\" | country_population : population , code  | countrylanguage : language , percentage , isofficial , countrycode ",
        "chatgpt_out": [
            "select sum(t1.population), max(t2.gnp) from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = 'Asia'",
            "select max(t2.gnp), sum(t1.population) from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = 'Asia'",
            "select max(t2.gnp), sum(t1.population) from country as t2 join city as t1 on t2.code = t1.countrycode where t2.continent = 'Asia'",
            "select sum(t1.population), max(t2.gnp) from country_population as t1 join country as t2 on t1.code = t2.code where t2.continent = 'Asia'",
            "select max(t2.gnp), sum(t1.population) from country_population as t1 join country as t2 on t1.code = t2.code where t2.continent = 'Asia'"
        ],
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "query2": "select sum(t2.population), max(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "max",
            "(",
            "GNP",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "max",
            "(",
            "gnp",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value"
        ],
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "question_toks": [
            "How",
            "many",
            "people",
            "live",
            "in",
            "Asia",
            ",",
            "and",
            "what",
            "is",
            "the",
            "largest",
            "GNP",
            "among",
            "them",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "split_map": {
            "country": "gnp"
        },
        "schema_with_content": "city : population (93994, 125841, 142173), countrycode (\"ESH\", \"PRT\", \"SYC\"), district (\"Maekel\", \"Pennsylvania\", \"Port Said\"), name (\"Baoji\", \"Pu\u00c5\u00a1kin\", \"Bida\"), id (2619, 2435, 378) | sqlite_sequence : name (\"city\"), seq (4079) | country : headofstate (\"Salahuddin Abdul Aziz Shah Alhaj\", \"Mohammad Rafiq Tarar\", \"Ion Iliescu\"), name (\"Paraguay\", \"North Korea\", \"Anguilla\"), lifeexpectancy (79.5, 69.5, 63.3), surfacearea (175016.0, 676578.0, 824292.0), continent (\"Antarctica\", \"Antarctica\", \"South America\"), localname (\"\u00c2\u00b4Uman\", \"Samoa\", \"Micronesia\"), code (\"SYC\", \"MDG\", \"NCL\"), gnpold (1400.0, 1627.0, 3384.0), indepyear (1810, 1908, 1991), region (\"Australia and New Zealand\", \"Melanesia\", \"Caribbean\"), population (6188000, 78000, 98881000), capital (2726, 3068, 3423), governmentform (\"Dependent Territory of Norway\", \"Administrated by the UN\", \"Dependent Territory of Norway\"), code2 (\"AO\", \"KM\", \"CG\") | country_gnp : gnp (48267.0, 2642.0, 10226.0), code (\"BWA\", \"GBR\", \"PRI\") | countrylanguage : countrycode (\"CYM\", \"COG\", \"DZA\"), language (\"Javanese\", \"Catalan\", \"Trukese\"), isofficial (\"T\", \"F\"), percentage (11.1, 63.1, 2.9)",
        "schema_without_content": "city : population , countrycode , district , name , id  | sqlite_sequence : name , seq  | country : headofstate , name , lifeexpectancy , surfacearea , continent , localname , code , gnpold , indepyear , region , population , capital , governmentform , code2  | country_gnp : gnp , code  | countrylanguage : countrycode , language , isofficial , percentage ",
        "chatgpt_out": [
            "select sum(t1.population) as total_population, max(t2.gnp) as largest_gnp from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.continent = 'Asia'",
            "select max(t2.gnp) as largest_gnp, sum(t1.population) as total_population from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.continent = 'Asia'",
            "select max(t2.gnp) as largest_gnp, sum(t1.population) as total_population from country_gnp as t2 join country as t1 on t1.code = t2.code where t1.continent = 'Asia'",
            "select sum(t1.population) as total_population, max(t2.gnp) as largest_gnp from country_gnp as t2 join country as t1 on t1.code = t2.code where t1.continent = 'Asia'",
            "select sum(t1.population) as total_population, max(t2.gnp) as largest_gnp from country as t1, country_gnp as t2 where t1.continent = 'Asia' and t1.code = t2.code"
        ],
        "query1": "select sum(population), max(gnp) from country where continent = \"Asia\"",
        "query2": "select sum(t1.population), max(t2.gnp) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.continent = \"Asia\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "GNP",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "``",
            "US",
            "Territory",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "GNP",
            "and",
            "total",
            "population",
            "in",
            "all",
            "nations",
            "whose",
            "government",
            "is",
            "US",
            "territory",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"US Territory\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : name (\"Barnaul\", \"Meixian\", \"Fianarantsoa\"), id (2330, 739, 1502), district (\"Nampo-si\", \"Quang Nam-Da Nang\", \"Quetzaltenango\"), countrycode (\"NPL\", \"IRQ\", \"KHM\"), population (146514, 170904, 126872) | sqlite_sequence : name (\"city\"), seq (4079) | country : name (\"Rwanda\", \"Samoa\", \"New Zealand\"), gnp (1813.0, 6871.0, 3563.0), headofstate (\"Letsie III\", \"kenraali Than Shwe\", \"Omar Hassan Ahmad al-Bashir\"), region (\"Eastern Europe\", \"Caribbean\", \"Micronesia\"), localname (\"Norfolk Island\", \"S\u00c3\u00a3o Tom\u00c3\u00a9 e Pr\u00c3\u00adncipe\", \"Papua New Guinea/Papua Niugini\"), governmentform (\"Special Administrative Region of China\", \"Administrated by the UN\", \"Co-administrated\"), capital (905, 2432, 185), code2 (\"MC\", \"DZ\", \"CF\"), indepyear (1962, 1903, 1581), continent (\"Africa\", \"Europe\", \"Antarctica\"), surfacearea (464.0, 266000.0, 1221037.0), lifeexpectancy (67.9, 68.5, 50.8), gnpold (2559.0, 7988.0, 442544.0), code (\"MHL\", \"IND\", \"SYC\") | country_population : population (64000, 12646000, 3154000), code (\"IRL\", \"ATG\", \"MKD\") | countrylanguage : percentage (1.4, 10.1, 16.4), isofficial (\"T\", \"F\"), language (\"Kuranko\", \"Haya\", \"Southern Slavic Languages\"), countrycode (\"PRY\", \"COK\", \"VIR\")",
        "schema_without_content": "city : name , id , district , countrycode , population  | sqlite_sequence : name , seq  | country : name , gnp , headofstate , region , localname , governmentform , capital , code2 , indepyear , continent , surfacearea , lifeexpectancy , gnpold , code  | country_population : population , code  | countrylanguage : percentage , isofficial , language , countrycode ",
        "chatgpt_out": [
            "select avg(t1.gnp), sum(t2.population) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform like '%US territory%'",
            "select sum(t2.population), avg(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform like '%US territory%'",
            "select avg(t1.gnp), sum(t2.population) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform like '%US%'",
            "select sum(t2.population), avg(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform like '%United States%'",
            "select sum(t2.population), avg(t1.gnp) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform like '%administered by the US%'"
        ],
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "query2": "select avg(t1.gnp), sum(t2.population) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "GNP",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "``",
            "US",
            "Territory",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "question_toks": [
            "What",
            "is",
            "the",
            "average",
            "GNP",
            "and",
            "total",
            "population",
            "in",
            "all",
            "nations",
            "whose",
            "government",
            "is",
            "US",
            "territory",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"US Territory\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "split_map": {
            "country": "gnp"
        },
        "schema_with_content": "city : countrycode (\"COD\", \"MNG\", \"MYT\"), district (\"Antofagasta\", \"Loja\", \"Littoral\"), id (3130, 2770, 1237), name (\"Ferraz de Vasconcelos\", \"Oradea\", \"Mashhad\"), population (143726, 178784, 224821) | sqlite_sequence : name (\"city\"), seq (4079) | country : gnpold (15091.0, 2453.0, 7967.0), code2 (\"BV\", \"HM\", \"BH\"), headofstate (\"\u00c5\u00a0tipe Mesic\", \"Teodoro Obiang Nguema Mbasogo\", \"Rudolf Schuster\"), continent (\"Antarctica\", \"Oceania\", \"Europe\"), indepyear (1816, 1143, 1980), capital (3173, 3066, 538), region (\"Eastern Europe\", \"Nordic Countries\", \"South America\"), code (\"KIR\", \"LUX\", \"SYR\"), population (93000, 7733000, 50456000), name (\"Saint Pierre and Miquelon\", \"Central African Republic\", \"Mozambique\"), lifeexpectancy (68.7, 59.5, 74.9), localname (\"Costa Rica\", \"Kalaallit Nunaat/Gr\u00c3\u00b8nland\", \"Polska\"), surfacearea (130000.0, 2381741.0, 513115.0), governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Federal Republic\", \"Socialistic Republic\") | country_gnp : code (\"WSM\", \"CCK\", \"DJI\"), gnp (870.0, 3205.0, 571.0) | countrylanguage : isofficial (\"T\", \"F\"), language (\"Tagalog\", \"Tamang\", \"Gujarati\"), percentage (20.1, 19.7, 16.1), countrycode (\"LBR\", \"MKD\", \"OMN\")",
        "schema_without_content": "city : countrycode , district , id , name , population  | sqlite_sequence : name , seq  | country : gnpold , code2 , headofstate , continent , indepyear , capital , region , code , population , name , lifeexpectancy , localname , surfacearea , governmentform  | country_gnp : code , gnp  | countrylanguage : isofficial , language , percentage , countrycode ",
        "chatgpt_out": [
            "select avg(t2.gnp), sum(t2.population) from country as t1 join country_gnp as t2 on t1.code = t2.code join sqlite_sequence as t3 on t3.name = 'city' where t1.governmentform like '%US territory'",
            "select sum(t2.population), avg(t2.gnp) from country as t1 join country_gnp as t2 on t1.code = t2.code join sqlite_sequence as t3 on t3.name = 'city' where t1.governmentform like '%US territory'",
            "select avg(t2.gnp), sum(t1.population) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.governmentform like '%US territory'",
            "select sum(t1.population), avg(t2.gnp) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.governmentform like '%US territory'",
            "select avg(t2.gnp), sum(t1.population) from country as t1 join sqlite_sequence as t2 on t2.name = 'city' where t1.governmentform like '%US territory'"
        ],
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "query2": "select avg(t2.gnp), sum(t1.population) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "GNP",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "``",
            "US",
            "Territory",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "question_toks": [
            "Give",
            "the",
            "mean",
            "GNP",
            "and",
            "total",
            "population",
            "of",
            "nations",
            "which",
            "are",
            "considered",
            "US",
            "territory",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"US Territory\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : name (\"Taitung\", \"Burhanpur\", \"Vit\u00c3\u00b3ria\"), countrycode (\"BRN\", \"LSO\", \"MHL\"), id (3701, 879, 1311), population (151806, 311932, 379520), district (\"Bani Suwayf\", \"Murcia\", \"Yamoussoukro\") | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"GF\", \"TO\", \"YE\"), gnp (137635.0, 5333.0, 3787042.0), surfacearea (801590.0, 1648195.0, 2040.0), headofstate (\"Abdiqassim Salad Hassan\", \"\u00c5\u00a0tipe Mesic\", \"Jos\u00c3\u00a9 Alexandre Gusm\u00c3\u00a3o\"), gnpold (2711.0, 7388.0, 73132.0), capital (3066, None, 1791), name (\"Canada\", \"Dominica\", \"Heard Island and McDonald Islands\"), governmentform (\"Islamic Republic\", \"Parliamentary Coprincipality\", \"Dependent Territory of the UK\"), region (\"Central America\", \"Northern Africa\", \"Southern and Central Asia\"), lifeexpectancy (37.8, 60.2, 40.4), continent (\"South America\", \"North America\", \"Africa\"), localname (\"Micronesia\", \"K\u00c3\u00a2mpuch\u00c3\u00a9a\", \"Belarus\"), indepyear (1918, 1964, 1769), code (\"TUN\", \"ATA\", \"BMU\") | country_population : code (\"BTN\", \"YUG\", \"FRO\"), population (4478500, 444000, 7734000) | countrylanguage : countrycode (\"PER\", \"TUR\", \"TON\"), isofficial (\"T\", \"F\"), language (\"Silesiana\", \"Zenaga\", \"Chibcha\"), percentage (40.7, 8.3, 87.9)",
        "schema_without_content": "city : name , countrycode , id , population , district  | sqlite_sequence : seq , name  | country : code2 , gnp , surfacearea , headofstate , gnpold , capital , name , governmentform , region , lifeexpectancy , continent , localname , indepyear , code  | country_population : code , population  | countrylanguage : countrycode , isofficial , language , percentage ",
        "chatgpt_out": [
            "select avg(t1.gnp), sum(t1.population) from country as t1 where t1.name = 'American Samoa' or t1.name = 'Guam' or t1.name = 'Northern Mariana Islands' or t1.name = 'Puerto Rico' or t1.name = 'U.S. Virgin Islands'",
            "select sum(t1.population), avg(t1.gnp) from country as t1 where t1.name = 'American Samoa' or t1.name = 'Guam' or t1.name = 'Northern Mariana Islands' or t1.name = 'Puerto Rico' or t1.name = 'U.S. Virgin Islands'",
            "select avg(t1.gnp), sum(t1.population) from country_population as t1 join country as t2 on t1.code = t2.code where t2.name = 'American Samoa' or t2.name = 'Guam' or t2.name = 'Northern Mariana Islands' or t2.name = 'Puerto Rico' or t2.name = 'U.S. Virgin Islands'",
            "select sum(t1.population), avg(t1.gnp) from country_population as t1 join country as t2 on t1.code = t2.code where t2.name = 'American Samoa' or t2.name = 'Guam' or t2.name = 'Northern Mariana Islands' or t2.name = 'Puerto Rico' or t2.name = 'U.S. Virgin Islands'",
            "select avg(t2.gnp), sum(t2.population) from city as t1 join country as t2 on t1.countrycode = t2.code where t2.name = 'American Samoa' or t2.name = 'Guam' or t2.name = 'Northern Mariana Islands' or t2.name = 'Puerto Rico' or t2.name = 'U.S. Virgin Islands'"
        ],
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "query2": "select avg(t1.gnp), sum(t2.population) from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "avg",
            "(",
            "GNP",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "FROM",
            "country",
            "WHERE",
            "GovernmentForm",
            "=",
            "``",
            "US",
            "Territory",
            "''"
        ],
        "query_toks_no_value": [
            "select",
            "avg",
            "(",
            "gnp",
            ")",
            ",",
            "sum",
            "(",
            "population",
            ")",
            "from",
            "country",
            "where",
            "governmentform",
            "=",
            "value"
        ],
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "question_toks": [
            "Give",
            "the",
            "mean",
            "GNP",
            "and",
            "total",
            "population",
            "of",
            "nations",
            "which",
            "are",
            "considered",
            "US",
            "territory",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                16,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            19,
                            false
                        ],
                        null
                    ],
                    "\"US Territory\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "split_map": {
            "country": "gnp"
        },
        "schema_with_content": "city : countrycode (\"MDG\", \"MRT\", \"GNB\"), name (\"R\u00c3\u00a2mnicu V\u00c3\u00a2lcea\", \"Kert\u00c5\u00a1\", \"Batna\"), district (\"Grand Cayman\", \"Nova Scotia\", \"Galicia\"), population (209235, 197595, 123100), id (2476, 3676, 3709) | sqlite_sequence : seq (4079), name (\"city\") | country : continent (\"Asia\", \"Africa\", \"Europe\"), name (\"Lesotho\", \"Moldova\", \"Guinea\"), population (39441700, 9169000, 2500), localname (\"Kenya\", \"Dominica\", \"Suomi\"), code2 (\"MT\", \"VA\", \"BB\"), governmentform (\"Occupied by Marocco\", \"Nonmetropolitan Territory of The Netherlands\", \"Part of Denmark\"), region (\"British Islands\", \"Antarctica\", \"Southern Europe\"), lifeexpectancy (77.8, 67.8, 79.6), gnpold (2527.0, 129092.0, 1872.0), indepyear (1821, 1971, 1907), code (\"MRT\", \"AFG\", \"CPV\"), capital (1786, 3067, 2689), headofstate (\"Fahd ibn Abdul-Aziz al-Sa\u00c2\u00b4ud\", \"Norodom Sihanouk\", \"Negasso Gidada\"), surfacearea (147181.0, 238533.0, 59.0) | country_gnp : code (\"GMB\", \"FJI\", \"MEX\"), gnp (1378330.0, 9.0, 1054.0) | countrylanguage : percentage (81.0, 16.1, 2.3), language (\"Dariganga\", \"Bislama\", \"Akan\"), isofficial (\"T\", \"F\"), countrycode (\"ALB\", \"CPV\", \"BRB\")",
        "schema_without_content": "city : countrycode , name , district , population , id  | sqlite_sequence : seq , name  | country : continent , name , population , localname , code2 , governmentform , region , lifeexpectancy , gnpold , indepyear , code , capital , headofstate , surfacearea  | country_gnp : code , gnp  | countrylanguage : percentage , language , isofficial , countrycode ",
        "chatgpt_out": [
            "select avg(t1.gnp), sum(t2.population) from country as t1 join city as t2 on t1.code = t2.countrycode where t1.governmentform like '%US Territory%'",
            "select sum(t2.population), avg(t1.gnp) from country as t1 join city as t2 on t1.code = t2.countrycode where t1.governmentform like '%US Territory%'",
            "select avg(t1.gnp), sum(t2.population) from country_gnp as t1 join city as t2 on t1.code = t2.countrycode join country as t3 on t1.code = t3.code where t3.governmentform like '%US Territory%'",
            "select avg(t1.gnp), sum(t2.population) from country_gnp as t1 join countrylanguage as t2 on t1.code = t2.countrycode join country as t3 on t1.code = t3.code where t3.governmentform like '%US Territory%'",
            "select sum(t2.population), avg(t1.gnp) from country_gnp as t1 join city as t2 on t1.code = t2.countrycode join country as t3 on t1.code = t3.code where t3.governmentform like '%US Territory%'"
        ],
        "query1": "select avg(gnp), sum(population) from country where governmentform = \"US Territory\"",
        "query2": "select avg(t2.gnp), sum(t1.population) from country as t1 join country_gnp as t2 on t1.code = t2.code where t1.governmentform = \"US Territory\""
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "question_toks": [
            "Find",
            "the",
            "name",
            ",",
            "population",
            "and",
            "expected",
            "life",
            "length",
            "of",
            "asian",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : countrycode (\"SUR\", \"CXR\", \"BDI\"), district (\"Aqt\u00c3\u00b6be\", \"\u00e2\u0080\u0093\", \"Alberta\"), name (\"Haarlemmermeer\", \"Mishan\", \"Pri\u00c5\u00a1tina\"), population (208815, 139417, 111100), id (3801, 2360, 3848) | sqlite_sequence : seq (4079), name (\"city\") | country : governmentform (\"Monarchy (Sultanate)\", \"Parlementary Monarchy\", \"Overseas Department of France\"), indepyear (1919, 1902, 1830), population (241000, 4478500, 68470000), localname (\"Ireland/\u00c3\u0089ire\", \"Ghana\", \"Solomon Islands\"), surfacearea (359.0, 13878.0, 199900.0), lifeexpectancy (49.0, 79.5, 77.6), code (\"DOM\", \"LVA\", \"TUN\"), continent (\"South America\", \"Asia\", \"Antarctica\"), code2 (\"FM\", \"TV\", \"MW\"), capital (2821, 1380, 539), gnpold (15076.0, 15129.0, 33514.0), region (\"Western Europe\", \"Australia and New Zealand\", \"Eastern Africa\"), headofstate (\"Carlos Roberto Flores Facuss\u00c3\u00a9\", \"Abdiqassim Salad Hassan\", \"Yoweri Museveni\"), gnp (97.0, 6366.0, 276608.0) | country_name : code (\"MNP\", \"CRI\", \"ARE\"), name (\"Somalia\", \"Cayman Islands\", \"Singapore\") | countrylanguage : countrycode (\"WLF\", \"SLE\", \"SUR\"), percentage (6.4, 2.9, 82.2), language (\"Haiti Creole\", \"Bemba\", \"Comorian-French\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : countrycode , district , name , population , id  | sqlite_sequence : seq , name  | country : governmentform \", \"Parlementary Monarchy\", \"Overseas Department of France\", indepyear , population , localname , surfacearea , lifeexpectancy , code , continent , code2 , capital , gnpold , region , headofstate , gnp  | country_name : code , name  | countrylanguage : countrycode , percentage , language , isofficial ",
        "chatgpt_out": [
            "select t1.name, t1.population, t1.lifeexpectancy from country as t1 where t1.continent = 'Asia' and t1.surfacearea = (select max(t2.surfacearea) from country as t2 where t2.continent = 'Asia')",
            "select t1.population, t1.name, t1.lifeexpectancy from country as t1 where t1.continent = 'Asia' and t1.surfacearea = (select max(t2.surfacearea) from country as t2 where t2.continent = 'Asia')",
            "select t1.name, t1.lifeexpectancy, t1.population from country as t1 where t1.surfacearea = (select max(t2.surfacearea) from country as t2 where t2.continent = 'Asia') and t1.continent = 'Asia'",
            "select t1.population, t1.lifeexpectancy, t1.name from country as t1 where t1.surfacearea = (select max(t2.surfacearea) from country as t2 where t2.continent = 'Asia') and t1.continent = 'Asia'",
            "select t1.name, t1.population, t1.lifeexpectancy from country as t1 where t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia') and t1.continent = 'Asia'"
        ],
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "query2": "select t2.name, t1.population, t1.lifeexpectancy from country as t1 join country_name as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "question_toks": [
            "Find",
            "the",
            "name",
            ",",
            "population",
            "and",
            "expected",
            "life",
            "length",
            "of",
            "asian",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : district (\"Las Tunas\", \"Horad Minsk\", \"Nara\"), population (189959, 117737, 186291), countrycode (\"TMP\", \"ALB\", \"IRQ\"), id (2463, 3449, 3928), name (\"Chalco\", \"Hartlepool\", \"Moreno\") | sqlite_sequence : name (\"city\"), seq (4079) | country : name (\"Virgin Islands, U.S.\", \"Luxembourg\", \"Paraguay\"), indepyear (1948, 1821, 1971), governmentform (\"Independent Church State\", \"Part of Denmark\", \"Constitutional Monarchy\"), code (\"HUN\", \"PSE\", \"CZE\"), surfacearea (347.0, 468.0, 200.0), continent (\"Antarctica\", \"Africa\", \"Asia\"), gnpold (2102826.0, 360478.0, 8700.0), capital (3349, 3493, 2430), code2 (\"CR\", \"VE\", \"SK\"), gnp (351182.0, 5749.0, 870.0), lifeexpectancy (60.0, 66.2, 57.8), region (\"Micronesia/Caribbean\", \"Southern Europe\", \"Eastern Africa\"), headofstate (\"Hugo B\u00c3\u00a1nzer Su\u00c3\u00a1rez\", \"Rexhep Mejdani\", \"Kim Jong-il\"), localname (\"San Marino\", \"Brunei Darussalam\", \"Yisra\u00e2\u0080\u0099el/Isra\u00e2\u0080\u0099il\") | country_population : population (5398700, 37032000, 66591000), code (\"VUT\", \"TUR\", \"ZAF\") | countrylanguage : language (\"Ngala and Bangi\", \"Miskito\", \"Mant\u00c5\u00a1u\"), countrycode (\"NPL\", \"EGY\", \"BHS\"), percentage (90.6, 11.7, 35.8), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : district , population , countrycode , id , name  | sqlite_sequence : name , seq  | country : name , indepyear , governmentform , code , surfacearea , continent , gnpold , capital , code2 , gnp , lifeexpectancy , region , headofstate , localname  | country_population : population , code  | countrylanguage : language , countrycode , percentage , isofficial ",
        "chatgpt_out": [
            "select t1.name, t1.population, t1.lifeexpectancy from country as t1 where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select t1.population, t1.name, t1.lifeexpectancy from country as t1 where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select t1.name, t1.lifeexpectancy, t1.population from country as t1 where t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia') and t1.continent = 'Asia'",
            "select t1.population, t1.lifeexpectancy, t1.name from country as t1 where t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia') and t1.continent = 'Asia'",
            "select t1.name, t1.lifeexpectancy, t1.population from country as t1 join (select max(surfacearea) as max_area from country where continent = 'Asia') as t2 on t1.surfacearea = t2.max_area where t1.continent = 'Asia'"
        ],
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "query2": "select t1.name, t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "question_toks": [
            "Find",
            "the",
            "name",
            ",",
            "population",
            "and",
            "expected",
            "life",
            "length",
            "of",
            "asian",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "split_map": {
            "country": "lifeexpectancy"
        },
        "schema_with_content": "city : district (\"Andijon\", \"Satu Mare\", \"Shefa\"), id (500, 43, 1229), population (136613, 131831, 224336), countrycode (\"LUX\", \"JOR\", \"UKR\"), name (\"Soacha\", \"Seattle\", \"Agadir\") | sqlite_sequence : seq (4079), name (\"city\") | country : headofstate (\"Hugo Ch\u00c3\u00a1vez Fr\u00c3\u00adas\", \"Josefa Iloilo\", \"Rainier III\"), name (\"Bermuda\", \"China\", \"Cameroon\"), population (21000, 168000, 10640000), region (\"Eastern Africa\", \"Southeast Asia\", \"Central America\"), gnpold (23383.0, 146171.0, 153907.0), indepyear (1907, 1776, 1878), continent (\"South America\", \"Oceania\", \"Africa\"), capital (608, 3244, 3172), surfacearea (323250.0, 801590.0, 4000.0), localname (\"Tonga\", \"Chile\", \"Naoero/Nauru\"), gnp (10162.0, 3205.0, 4401.0), code (\"KWT\", \"UKR\", \"IDN\"), code2 (\"RU\", \"HT\", \"BE\"), governmentform (\"Independent Church State\", \"Socialistic Republic\", \"Parlementary Monarchy\") | country_lifeexpectancy : code (\"LKA\", \"VCT\", \"ETH\"), lifeexpectancy (71.0, 63.2, 75.1) | countrylanguage : percentage (19.0, 87.7, 20.0), language (\"Haiti Creole\", \"Orija\", \"Seselwa\"), isofficial (\"T\", \"F\"), countrycode (\"REU\", \"FRA\", \"SOM\")",
        "schema_without_content": "city : district , id , population , countrycode , name  | sqlite_sequence : seq , name  | country : headofstate , name , population , region , gnpold , indepyear , continent , capital , surfacearea , localname , gnp , code , code2 , governmentform  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : percentage , language , isofficial , countrycode ",
        "chatgpt_out": [
            "select name, population, lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join (select code, lifeexpectancy from country_lifeexpectancy) as t2 on t1.code = t2.code where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select name, population, lifeexpectancy from country inner join country_lifeexpectancy on country.code = country_lifeexpectancy.code where continent = 'Asia' and surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1, country_lifeexpectancy as t2 where t1.code = t2.code and t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country where continent = 'Asia')"
        ],
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "query2": "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "life",
            "expectancy",
            "of",
            "the",
            "largest",
            "Asian",
            "country",
            "by",
            "land",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : id (2351, 2452, 3837), name (\"Baton Rouge\", \"Kampala\", \"Fuxin\"), population (111425, 119166, 364096), countrycode (\"FLK\", \"RWA\", \"NER\"), district (\"Bratislava\", \"Huanuco\", \"Dili\") | sqlite_sequence : seq (4079), name (\"city\") | country : gnpold (171028.0, 3107.0, 215002.0), code (\"BWA\", \"AFG\", \"ETH\"), continent (\"Europe\", \"South America\", \"North America\"), gnp (40.7, 32852.0, 145895.0), lifeexpectancy (77.4, 64.0, 72.7), region (\"Middle East\", \"Caribbean\", \"Northern Africa\"), surfacearea (449964.0, 1104300.0, 75517.0), indepyear (1975, 1961, 1947), localname (\"Angola\", \"Cocos (Keeling) Islands\", \"Al-Jaza\u00e2\u0080\u0099ir/Alg\u00c3\u00a9rie\"), code2 (\"AG\", \"LY\", \"RE\"), population (456000, 24170000, 6782000), headofstate (\"Leo A. Falcam\", \"John Bani\", \"Robert G. Mugabe\"), governmentform (\"Nonmetropolitan Territory of New Zealand\", \"Monarchy (Sultanate)\", \"Nonmetropolitan Territory of The Netherlands\"), capital (69, 3419, 3536) | country_name : name (\"Ireland\", \"Zimbabwe\", \"Estonia\"), code (\"KIR\", \"JPN\", \"DEU\") | countrylanguage : countrycode (\"CYP\", \"CAN\", \"FSM\"), isofficial (\"T\", \"F\"), percentage (2.6, 16.4, 16.8), language (\"Malenasian Languages\", \"Bajan\", \"Fur\")",
        "schema_without_content": "city : id , name , population , countrycode , district  | sqlite_sequence : seq , name  | country : gnpold , code , continent , gnp , lifeexpectancy , region , surfacearea , indepyear , localname  Islands\", \"Al-Jaza\u00e2\u0080\u0099ir/Alg\u00c3\u00a9rie\", code2 , population , headofstate , governmentform \", \"Nonmetropolitan Territory of The Netherlands\", capital  | country_name : name , code  | countrylanguage : countrycode , isofficial , percentage , language ",
        "chatgpt_out": [
            "select c1.name, c1.population, c1.lifeexpectancy from country as c1 join (select code, surfacearea from country where continent = 'Asia' order by surfacearea desc limit 1) as c2 on c1.code = c2.code join city as c3 on c3.countrycode = c1.code order by c1.surfacearea desc limit 1",
            "select c1.name, c1.population, c1.lifeexpectancy from country as c1 join (select code, surfacearea from country where continent = 'Asia' order by surfacearea desc limit 1) as c2 on c1.code = c2.code join city as c3 on c3.countrycode = c1.code order by c1.patch_area desc limit 1",
            "select c1.name, c1.population, c1.lifeexpectancy from country as c1 join (select code, surfacearea from country where continent = 'Asia' order by surfacearea desc limit 1) as c2 on c1.code = c2.code join city as c3 on c3.countrycode = c1.code order by c1.total_area desc limit 1",
            "select c1.name, c1.population, c1.lifeexpectancy from country as c1 join (select code from country where continent = 'Asia' order by surfacearea desc limit 1) as c2 on c1.code = c2.code join city as c3 on c3.countrycode = c1.code order by c1.surfacearea desc limit 1",
            "select c1.name, c1.population, c1.lifeexpectancy from country as c1 join (select code from country where continent = 'Asia' order by surfacearea desc limit 1) as c2 on c1.code = c2.code join city as c3 on c3.countrycode = c1.code order by c1.patch_area desc limit 1"
        ],
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "query2": "select t2.name, t1.population, t1.lifeexpectancy from country as t1 join country_name as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "life",
            "expectancy",
            "of",
            "the",
            "largest",
            "Asian",
            "country",
            "by",
            "land",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : name (\"Mahat\u00c5\u00a1kala\", \"El Fuerte\", \"Jund\u00c3\u00ada\u00c3\u00ad\"), district (\"Rajshahi\", \"Mato Grosso\", \"Jubbada Hoose\"), id (1585, 3477, 3178), population (123359, 2876710, 360000), countrycode (\"CZE\", \"MHL\", \"BHS\") | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"BM\", \"DZ\", \"PS\"), name (\"Bosnia and Herzegovina\", \"Austria\", \"Kenya\"), code (\"SVK\", \"LKA\", \"MDA\"), governmentform (\"US Territory\", \"Federation\", \"Constitutional Monarchy, Federation\"), lifeexpectancy (74.8, 70.9, 76.9), gnpold (5867.0, 392911.0, 220.0), surfacearea (266000.0, 694.0, 2586.0), headofstate (\"Pierre Buyoya\", \"Jabir al-Ahmad al-Jabir al-Sabah\", \"Andr\u00c3\u00a9s Pastrana Arango\"), continent (\"North America\", \"Antarctica\", \"South America\"), localname (\"France\", \"El Salvador\", \"As-Sahrawiya\"), indepyear (1980, 1974, 1811), region (\"Australia and New Zealand\", \"Western Africa\", \"Eastern Europe\"), capital (1380, 2452, 1792), gnp (55017.0, 1292.0, 6366.0) | country_population : code (\"RUS\", \"TUR\", \"LBY\"), population (11201000, 2542000, 11234000) | countrylanguage : language (\"Fang\", \"Zapotec\", \"Creole English\"), isofficial (\"T\", \"F\"), percentage (39.4, 75.2, 4.3), countrycode (\"VAT\", \"POL\", \"RWA\")",
        "schema_without_content": "city : name , district , id , population , countrycode  | sqlite_sequence : seq , name  | country : code2 , name , code , governmentform , lifeexpectancy , gnpold , surfacearea , headofstate , continent , localname , indepyear , region , capital , gnp  | country_population : code , population  | countrylanguage : language , isofficial , percentage , countrycode ",
        "chatgpt_out": [
            "select t1.name, t1.population, t1.lifeexpectancy from country as t1 where t1.continent = 'Asia' order by t1.surfacearea desc limit 1",
            "select t1.name, t1.lifeexpectancy, t1.population from country as t1 where t1.continent = 'Asia' order by t1.surfacearea desc limit 1",
            "select name, population, lifeexpectancy from country where continent = 'Asia' and surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select name, lifeexpectancy, population from country where continent = 'Asia' and surfacearea = (select max(surfacearea) from country where continent = 'Asia')",
            "select t1.name, t1.population, t1.lifeexpectancy from country as t1 join (select max(surfacearea) as max_area from country where continent = 'Asia') as t2 on t1.surfacearea = t2.max_area"
        ],
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "query2": "select t1.name, t2.population, t1.lifeexpectancy from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "Population",
            ",",
            "LifeExpectancy",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "Asia",
            "''",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "lifeexpectancy",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "life",
            "expectancy",
            "of",
            "the",
            "largest",
            "Asian",
            "country",
            "by",
            "land",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"Asia\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "split_map": {
            "country": "lifeexpectancy"
        },
        "schema_with_content": "city : population (178683, 520801, 181805), name (\"Eugene\", \"El Cajon\", \"Gorz\u00c3\u00b3w Wielkopolski\"), district (\"Port-Louis\", \"Krasnodar\", \"Katsina\"), id (3011, 1879, 2565), countrycode (\"SYC\", \"CCK\", \"VCT\") | sqlite_sequence : name (\"city\"), seq (4079) | country : governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Federation\", \"Federal Republic\"), capital (3208, 2515, 3169), gnp (4397.0, 3101.0, 1263.0), indepyear (1776, 1951, 1847), continent (\"South America\", \"South America\", \"Asia\"), name (\"American Samoa\", \"Netherlands\", \"Taiwan\"), surfacearea (48511.0, 475442.0, 3287263.0), gnpold (58549.0, 18862.0, 98577.0), localname (\"Jamaica\", \"Guin\u00c3\u00a9e\", \"Virgin Islands of the United States\"), region (\"North America\", \"Eastern Africa\", \"Australia and New Zealand\"), code2 (\"KW\", \"LC\", \"CG\"), headofstate (\"Hugo Ch\u00c3\u00a1vez Fr\u00c3\u00adas\", \"Heyd\u00c3\u00a4r \u00c3\u0084liyev\", \"Valentin Paniagua Corazao\"), code (\"SEN\", \"EST\", \"CYP\"), population (20000, 32300, 22455500) | country_lifeexpectancy : code (\"FRA\", \"SYC\", \"DJI\"), lifeexpectancy (41.3, 63.4, 72.7) | countrylanguage : countrycode (\"PAK\", \"PAK\", \"ZWE\"), isofficial (\"T\", \"F\"), percentage (98.9, 95.8, 97.7), language (\"Puyi\", \"Serer\", \"Uighur\")",
        "schema_without_content": "city : population , name , district , id , countrycode  | sqlite_sequence : name , seq  | country : governmentform , capital , gnp , indepyear , continent , name , surfacearea , gnpold , localname , region , code2 , headofstate , code , population  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : countrycode , isofficial , percentage , language ",
        "chatgpt_out": [
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' order by t1.surfacearea desc limit 1",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country where continent ='Asia')",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from country as t3 where t3.continent ='Asia')",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = 'Asia' and t1.surfacearea = (select max(surfacearea) from (select t3.surfacearea from country as t3 where t3.continent ='Asia') as t4)",
            "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join (select * from country_lifeexpectancy where code in (select code from country where continent = 'Asia')) as t2 on t1.code = t2.code where t1.surfacearea = (select max(surfacearea) from country where continent ='Asia')"
        ],
        "query1": "select name, population, lifeexpectancy from country where continent = \"Asia\" order by surfacearea desc limit 1",
        "query2": "select t1.name, t1.population, t2.lifeexpectancy from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t1.continent = \"Asia\" order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            ",",
            "IndepYear",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country",
            "order",
            "by",
            "population",
            "limit",
            "value"
        ],
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "independence",
            "year",
            ",",
            "and",
            "surface",
            "area",
            "of",
            "the",
            "country",
            "with",
            "the",
            "smallest",
            "population",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : population (237460, 103931, 97400), name (\"Hyesan\", \"Papantla\", \"Oaxaca de Ju\u00c3\u00a1rez\"), countrycode (\"SEN\", \"MSR\", \"HKG\"), id (2790, 2677, 1164), district (\"Kaesong-si\", \"Bujumbura\", \"Nyanza\") | sqlite_sequence : seq (4079), name (\"city\") | country : governmentform (\"Overseas Department of France\", \"Occupied by Marocco\", \"Nonmetropolitan Territory of New Zealand\"), headofstate (\"Letsie III\", \"Aljaksandr Luka\u00c5\u00a1enka\", \"Eduard \u00c5\u00a0evardnadze\"), indepyear (1844, 1968, 1956), population (1013662000, 278357000, 154000), region (\"Western Africa\", \"Micronesia\", \"Antarctica\"), localname (\"Kenya\", \"\u00c2\u00b8esko\", \"Papua New Guinea/Papua Niugini\"), gnpold (1392448.0, 4186.0, 360478.0), capital (2509, 3244, 3499), surfacearea (26338.0, 41526.0, 28051.0), code (\"NGA\", \"BRA\", \"MAC\"), gnp (180375.0, 870.0, 3501.0), continent (\"Oceania\", \"Asia\", \"North America\"), lifeexpectancy (78.9, 60.9, 42.9), code2 (\"PL\", \"NC\", \"SE\") | country_name : name (\"Sri Lanka\", \"Haiti\", \"Guatemala\"), code (\"COD\", \"SLE\", \"NGA\") | countrylanguage : percentage (57.5, 0.5, 34.8), countrycode (\"ESH\", \"GHA\", \"GEO\"), language (\"Ket\u00c5\u00a1ua\", \"Kekch\u00c3\u00ad\", \"Senufo and Minianka\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : population , name , countrycode , id , district  | sqlite_sequence : seq , name  | country : governmentform , headofstate , indepyear , population , region , localname , gnpold , capital , surfacearea , code , gnp , continent , lifeexpectancy , code2  | country_name : name , code  | countrylanguage : percentage , countrycode , language , isofficial ",
        "chatgpt_out": [
            "select t1.name, t1.indepyear, t1.surfacearea from country as t1 join (select min(population) as pop from city) as t2 on t1.population = t2.pop",
            "select t1.surfacearea, t1.indepyear, t1.name from country as t1 join (select min(population) as pop from city) as t2 on t1.population = t2.pop",
            "select t1.name, t1.surfacearea, t1.indepyear from country as t1 join (select min(population) as pop from city) as t2 on t1.population = t2.pop",
            "select t1.indepyear, t1.surfacearea, t1.name from country as t1 join (select min(population) as pop from city) as t2 on t1.population = t2.pop",
            "select t1.surfacearea, t1.indepyear, t1.name from country as t1 where t1.population = (select min(population) from city)"
        ],
        "query1": "select name, surfacearea, indepyear from country order by population limit 1",
        "query2": "select t2.name, t1.surfacearea, t1.indepyear from country as t1 join country_name as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            ",",
            "IndepYear",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country",
            "order",
            "by",
            "population",
            "limit",
            "value"
        ],
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "independence",
            "year",
            ",",
            "and",
            "surface",
            "area",
            "of",
            "the",
            "country",
            "with",
            "the",
            "smallest",
            "population",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1",
        "split_map": {
            "country": "surfacearea"
        },
        "schema_with_content": "city : id (2713, 3288, 3067), countrycode (\"AGO\", \"MHL\", \"PRT\"), population (105643, 169603, 3276207), name (\"Mwanza\", \"Gonbad-e Qabus\", \"Meihekou\"), district (\"Surkhondaryo\", \"Bujumbura\", \"Lara\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnpold (33514.0, 5729.0, 1136.0), governmentform (\"People'sRepublic\", \"Commonwealth of the US\", \"Monarchy (Sultanate)\"), code (\"SYC\", \"TKL\", \"SGS\"), name (\"Puerto Rico\", \"Mauritius\", \"Yugoslavia\"), continent (\"Asia\", \"Africa\", \"North America\"), localname (\"United States\", \"Ell\u00c3\u00a1da\", \"Suriya\"), gnp (137635.0, 121914.0, 2731.0), population (94000, 40377000, 1726000), region (\"Western Europe\", \"Polynesia\", \"Central Africa\"), indepyear (1981, 1806, 1958), headofstate (\"Andr\u00c3\u00a9s Pastrana Arango\", \"Mohammad Omar\", \"Ricardo Lagos Escobar\"), code2 (\"JO\", \"BY\", \"ZM\"), lifeexpectancy (75.7, 60.9, 71.1), capital (2726, 2429, 905) | country_surfacearea : surfacearea (2344858.0, 4033.0, 10990.0), code (\"BHS\", \"CIV\", \"DOM\") | countrylanguage : percentage (100.0, 28.8, 10.7), language (\"Oromo\", \"Yao\", \"Tujia\"), countrycode (\"ISL\", \"SGP\", \"DOM\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : id , countrycode , population , name , district  | sqlite_sequence : name , seq  | country : gnpold , governmentform \", code , name , continent , localname , gnp , population , region , indepyear , headofstate , code2 , lifeexpectancy , capital  | country_surfacearea : surfacearea , code  | countrylanguage : percentage , language , countrycode , isofficial ",
        "chatgpt_out": [
            "select t1.name, t1.indepyear, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code join (select min(population) as min_pop from country) as t3 on t1.population = t3.min_pop",
            "select t1.indepyear, t2.surfacearea, t1.name from country as t1 join country_surfacearea as t2 on t1.code = t2.code join (select min(population) as min_pop from country) as t3 on t1.population = t3.min_pop",
            "select t1.name, t2.surfacearea, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code join (select min(population) as min_pop from country) as t3 on t1.population = t3.min_pop",
            "select t1.indepyear, t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code join (select min(population) as min_pop from country) as t3 on t1.population = t3.min_pop",
            "select t2.surfacearea, t1.name, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code join (select min(population) as min_pop from country) as t3 on t1.population = t3.min_pop"
        ],
        "query1": "select name, surfacearea, indepyear from country order by population limit 1",
        "query2": "select t1.name, t2.surfacearea, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            ",",
            "IndepYear",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country",
            "order",
            "by",
            "population",
            "limit",
            "value"
        ],
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "question_toks": [
            "What",
            "are",
            "the",
            "name",
            ",",
            "independence",
            "year",
            ",",
            "and",
            "surface",
            "area",
            "of",
            "the",
            "country",
            "with",
            "the",
            "smallest",
            "population",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1",
        "split_map": {
            "country": "indepyear"
        },
        "schema_with_content": "city : population (308195, 258103, 109738), id (3328, 3153, 505), district (\"Munster\", \"Minas Gerais\", \"Pichincha\"), countrycode (\"CIV\", \"BRB\", \"COL\"), name (\"Miraj\", \"Yulin\", \"Sorsogon\") | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Nordic Countries\", \"Nordic Countries\", \"Micronesia/Caribbean\"), code (\"UGA\", \"MKD\", \"SUR\"), gnpold (1627.0, 119946.0, 584.0), localname (\"To\u00c3\u00a7ikiston\", \"Misr\", \"Puerto Rico\"), headofstate (\"Mary McAleese\", \"Abdoulaye Wade\", \"Beatrix\"), surfacearea (130000.0, 10990.0, 110861.0), population (114000, 9586000, 8329000), name (\"Madagascar\", \"Cambodia\", \"R\u00c3\u00a9union\"), lifeexpectancy (75.6, 53.1, 73.2), governmentform (\"Territorial Collectivity of France\", \"Territory of Australia\", \"Republic\"), continent (\"Asia\", \"Oceania\", \"Africa\"), code2 (\"GU\", \"NC\", \"BF\"), capital (2726, 538, 585), gnp (82710.0, 1706.0, 105.0) | country_indepyear : indepyear (1964, 1978, 1811), code (\"JOR\", \"ATF\", \"WSM\") | countrylanguage : countrycode (\"THA\", \"LBN\", \"TJK\"), percentage (14.6, 0.9, 75.2), language (\"T\u00c5\u00a1am\", \"Mandjia\", \"Tibetan\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : population , id , district , countrycode , name  | sqlite_sequence : seq , name  | country : region , code , gnpold , localname , headofstate , surfacearea , population , name , lifeexpectancy , governmentform , continent , code2 , capital , gnp  | country_indepyear : indepyear , code  | countrylanguage : countrycode , percentage , language , isofficial ",
        "chatgpt_out": [
            "select t1.name, t2.indepyear, t2.surfacearea from city as t1 join country as t2 on t1.countrycode = t2.code where t1.population = (select min(population) from city)",
            "select t2.name, t3.indepyear, t3.surfacearea from (select countrycode from city where population = (select min(population) from city)) as t1 join country as t2 on t1.countrycode = t2.code join country_indepyear as t3 on t2.code = t3.code",
            "select t2.name, t2.indepyear, t2.surfacearea from (select countrycode from city where population = (select min(population) from city)) as t1 join country as t2 on t1.countrycode = t2.code",
            "select t2.name, t3.indepyear, t2.surfacearea from (select countrycode from city where population = (select min(population) from city)) as t1 join country as t2 on t1.countrycode = t2.code join country_indepyear as t3 on t2.code = t3.code where t1.population = (select min(population) from city)",
            "select t1.name, t2.indepyear, t2.surfacearea from country as t2 join (select countrycode from city where population = (select min(population) from city)) as t1 on t1.countrycode = t2.code"
        ],
        "query1": "select name, surfacearea, indepyear from country order by population limit 1",
        "query2": "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            ",",
            "IndepYear",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country",
            "order",
            "by",
            "population",
            "limit",
            "value"
        ],
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "year",
            "of",
            "independence",
            ",",
            "and",
            "surface",
            "area",
            "of",
            "the",
            "country",
            "that",
            "has",
            "the",
            "lowest",
            "population",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : countrycode (\"BGR\", \"CCK\", \"LTU\"), name (\"Palangka Raya\", \"Kirikkale\", \"Olsztyn\"), id (3921, 3086, 2850), population (126328, 390007, 217000), district (\"Pomorskie\", \"Carolina\", \"Quer\u00c3\u00a9taro\") | sqlite_sequence : name (\"city\"), seq (4079) | country : capital (2464, 194, 3423), population (2542000, 12878000, 126714000), lifeexpectancy (71.3, 62.2, 79.6), continent (\"Africa\", \"Africa\", \"Africa\"), localname (\"Cabo Verde\", \"Saint Helena\", \"Anguilla\"), surfacearea (2166090.0, 41284.0, 21.0), gnp (447114.0, 211860.0, 20026.0), governmentform (\"Federation\", \"Constitutional Monarchy (Emirate)\", \"Islamic Republic\"), region (\"Micronesia\", \"Western Africa\", \"Melanesia\"), gnpold (19300.0, 804108.0, 1102.0), headofstate (\"Nursultan Nazarbajev\", \"Hamad ibn Isa al-Khalifa\", \"Margrethe II\"), code (\"ZWE\", \"SUR\", \"QAT\"), indepyear (1993, 1581, 1804), code2 (\"DJ\", \"LU\", \"EE\") | country_name : name (\"Spain\", \"South Georgia and the South Sandwich Islands\", \"Jamaica\"), code (\"BLR\", \"ARE\", \"GIN\") | countrylanguage : countrycode (\"MYS\", \"SOM\", \"CAF\"), isofficial (\"T\", \"F\"), language (\"Marshallese\", \"Wolof\", \"Masai\"), percentage (5.1, 3.3, 95.6)",
        "schema_without_content": "city : countrycode , name , id , population , district  | sqlite_sequence : name , seq  | country : capital , population , lifeexpectancy , continent , localname , surfacearea , gnp , governmentform \", \"Islamic Republic\", region , gnpold , headofstate , code , indepyear , code2  | country_name : name , code  | countrylanguage : countrycode , isofficial , language , percentage ",
        "chatgpt_out": [
            "select t1.name, t1.indepyear, t1.surfacearea from country as t1 join (select min(population) as min_pop from city) as t2 on t1.population = t2.min_pop",
            "select t1.name, t1.indepyear, t1.surfacearea from country as t1 where t1.population = (select min(population) from city)",
            "select t1.name, t1.indepyear, t1.surfacearea from country as t1 where t1.population = (select min(population) from city) limit 1",
            "select t1.name, t1.indepyear, t1.surfacearea from country as t1 join city as t2 on t1.code = t2.countrycode where t2.population = (select min(population) from city)",
            "select t1.name, t1.indepyear, t1.surfacearea from country as t1 join (select countrycode, min(population) as min_pop from city group by countrycode) as t2 on t1.code = t2.countrycode where t1.population = t2.min_pop"
        ],
        "query1": "select name, surfacearea, indepyear from country order by population limit 1",
        "query2": "select t2.name, t1.surfacearea, t1.indepyear from country as t1 join country_name as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            ",",
            "IndepYear",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country",
            "order",
            "by",
            "population",
            "limit",
            "value"
        ],
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "year",
            "of",
            "independence",
            ",",
            "and",
            "surface",
            "area",
            "of",
            "the",
            "country",
            "that",
            "has",
            "the",
            "lowest",
            "population",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1",
        "split_map": {
            "country": "surfacearea"
        },
        "schema_with_content": "city : district (\"Asturia\", \"Chaco\", \"Okayama\"), name (\"Ramat Gan\", \"East Los Angeles\", \"El-Aai\u00c3\u00ban\"), population (93342, 188101, 300850), id (4015, 109, 82), countrycode (\"MLI\", \"LBN\", \"COL\") | sqlite_sequence : seq (4079), name (\"city\") | country : capital (3320, 552, 653), lifeexpectancy (79.6, 49.2, 76.4), population (190000, 67702000, 180000), region (\"Eastern Europe\", \"British Islands\", \"Nordic Countries\"), gnp (9472.0, 65707.0, 776739.0), gnpold (2500.0, 173610.0, 1161.0), indepyear (1867, 1991, 1838), name (\"Fiji Islands\", \"Switzerland\", \"Antarctica\"), localname (\"Argentina\", \"Burundi/Uburundi\", \"Saint Vincent and the Grenadines\"), continent (\"Antarctica\", \"Europe\", \"Antarctica\"), code2 (\"EE\", \"KP\", \"BV\"), code (\"TJK\", \"KHM\", \"BHS\"), governmentform (\"Monarchy (Emirate)\", \"Independent Church State\", \"Republic\"), headofstate (\"Juan Carlos I\", \"Bernard Dowiyogo\", \"Mohammad Omar\") | country_surfacearea : surfacearea (86600.0, 147181.0, 12173.0), code (\"GRD\", \"NOR\", \"NIC\") | countrylanguage : percentage (94.3, 5.3, 62.2), isofficial (\"T\", \"F\"), language (\"Nepali\", \"Comorian-madagassi\", \"Khoekhoe\"), countrycode (\"BDI\", \"UKR\", \"RUS\")",
        "schema_without_content": "city : district , name , population , id , countrycode  | sqlite_sequence : seq , name  | country : capital , lifeexpectancy , population , region , gnp , gnpold , indepyear , name , localname , continent , code2 , code , governmentform \", \"Independent Church State\", \"Republic\", headofstate  | country_surfacearea : surfacearea , code  | countrylanguage : percentage , isofficial , language , countrycode ",
        "chatgpt_out": [
            "select t1.name, t1.indepyear, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.population = (select min(population) from country)",
            "select t1.indepyear, t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.population = (select min(population) from country)",
            "select t1.name, t1.indepyear, t2.surfacearea from country_surfacearea as t2 join country as t1 on t2.code = t1.code where t1.population = (select min(population) from country)",
            "select t1.indepyear, t1.name, t2.surfacearea from country_surfacearea as t2 join country as t1 on t2.code = t1.code where t1.population = (select min(population) from country)",
            "select t2.surfacearea, t1.name, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.population = (select min(population) from country)"
        ],
        "query1": "select name, surfacearea, indepyear from country order by population limit 1",
        "query2": "select t1.name, t2.surfacearea, t1.indepyear from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            ",",
            "IndepYear",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "Population",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            ",",
            "indepyear",
            "from",
            "country",
            "order",
            "by",
            "population",
            "limit",
            "value"
        ],
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "year",
            "of",
            "independence",
            ",",
            "and",
            "surface",
            "area",
            "of",
            "the",
            "country",
            "that",
            "has",
            "the",
            "lowest",
            "population",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "asc",
                [
                    [
                        0,
                        [
                            0,
                            14,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                13,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea, indepyear from country order by population limit 1",
        "split_map": {
            "country": "indepyear"
        },
        "schema_with_content": "city : population (183836, 140495, 135501), district (\"British Colombia\", \"Kyoto\", \"Guant\u00c3\u00a1namo\"), name (\"Petare\", \"Tierra Blanca\", \"Tychy\"), id (3155, 379, 34), countrycode (\"ETH\", \"KEN\", \"URY\") | sqlite_sequence : seq (4079), name (\"city\") | country : governmentform (\"Parliamentary Coprincipality\", \"Territory of Australia\", \"Parlementary Monarchy\"), region (\"Antarctica\", \"Caribbean\", \"Melanesia\"), population (32300, 11234000, 147000), code2 (\"LK\", \"CF\", \"SD\"), lifeexpectancy (53.2, 46.0, 55.0), name (\"United Arab Emirates\", \"Holy See (Vatican City State)\", \"Puerto Rico\"), gnp (20026.0, 5493.0, 571.0), code (\"CHN\", \"KWT\", \"COD\"), gnpold (373.0, 7988.0, 9585.0), continent (\"North America\", \"North America\", \"Europe\"), capital (2484, 3208, 2441), headofstate (\"Mireya Elisa Moscoso Rodr\u00c3\u00adguez\", \"Leonid Kut\u00c5\u00a1ma\", \"Abdelaziz Bouteflika\"), localname (\"South Georgia and the South Sandwich Islands\", \"Togo\", \"Nederlandse Antillen\"), surfacearea (6.0, 5765.0, 175016.0) | country_indepyear : code (\"GBR\", \"COM\", \"CRI\"), indepyear (1966, 1951, 1984) | countrylanguage : percentage (88.9, 18.4, 49.4), countrycode (\"MWI\", \"MDA\", \"MAR\"), language (\"Pilipino\", \"Mpongwe\", \"Saho\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : population , district , name , id , countrycode  | sqlite_sequence : seq , name  | country : governmentform , region , population , code2 , lifeexpectancy , name \", \"Puerto Rico\", gnp , code , gnpold , continent , capital , headofstate , localname , surfacearea  | country_indepyear : code , indepyear  | countrylanguage : percentage , countrycode , language , isofficial ",
        "chatgpt_out": [
            "select t1.name, t2.indepyear, t1.surfacearea from country as t1 join country_indepyear as t2 on t1.code = t2.code where t1.population = (select min(population) from country)",
            "select t1.name, t2.indepyear, t1.surfacearea from country as t1, country_indepyear as t2 where t1.code = t2.code and t1.population = (select min(population) from country)",
            "select name, indepyear, surfacearea from (select t1.name, t2.indepyear, t1.surfacearea, t1.population from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1) as t3",
            "select t1.name, t2.indepyear, t1.surfacearea from country as t1 join (select code, indepyear from country_indepyear) as t2 on t1.code = t2.code where t1.population = (select min(population) from country)",
            "select t1.name, t2.indepyear, t1.surfacearea from country as t1 join (select code, indepyear from country_indepyear) as t2 using (code) where t1.population = (select min(population) from country)"
        ],
        "query1": "select name, surfacearea, indepyear from country order by population limit 1",
        "query2": "select t1.name, t1.surfacearea, t2.indepyear from country as t1 join country_indepyear as t2 on t1.code = t2.code order by t1.population limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "population",
            ",",
            "HeadOfState",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the population, name and leader of the country with the largest area?",
        "question_toks": [
            "What",
            "are",
            "the",
            "population",
            ",",
            "name",
            "and",
            "leader",
            "of",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : population (142576, 182241, 126055), id (2462, 3791, 3125), district (\"Latakia\", \"Rhode Island\", \"Arizona\"), countrycode (\"MNP\", \"BEL\", \"ZAF\"), name (\"Chungju\", \"Eskisehir\", \"Ilawe-Ekiti\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"SYR\", \"GMB\", \"FRO\"), gnp (86503.0, 40.7, 2642.0), population (599000, 473000, 22256000), indepyear (885, 1143, -660), code2 (\"KR\", \"IR\", \"CF\"), headofstate (\"Joseph Kabila\", \"Sam Nujoma\", \"Qabus ibn Sa\u00c2\u00b4id\"), continent (\"Antarctica\", \"Antarctica\", \"Europe\"), governmentform (\"Parlementary Monarchy\", \"Constitutional Monarchy\", \"Islamic Republic\"), capital (917, 3537, 3161), lifeexpectancy (45.3, 64.1, 37.6), surfacearea (468.0, 331689.0, 1399.0), localname (\"Naoero/Nauru\", \"YeItyop\u00c2\u00b4iya\", \"\u00e2\u0080\u0093\"), gnpold (153907.0, 7388.0, 243948.0), region (\"Southern Africa\", \"Western Europe\", \"Southern and Central Asia\") | country_name : name (\"Turkmenistan\", \"South Georgia and the South Sandwich Islands\", \"Yemen\"), code (\"LBY\", \"IRQ\", \"ANT\") | countrylanguage : countrycode (\"YEM\", \"BRB\", \"TON\"), language (\"Gurma\", \"Nyamwesi\", \"Bullom-sherbro\"), isofficial (\"T\", \"F\"), percentage (38.6, 45.5, 3.7)",
        "schema_without_content": "city : population , id , district , countrycode , name  | sqlite_sequence : name , seq  | country : code , gnp , population , indepyear , code2 , headofstate , continent , governmentform , capital , lifeexpectancy , surfacearea , localname , gnpold , region  | country_name : name , code  | countrylanguage : countrycode , language , isofficial , percentage ",
        "chatgpt_out": [
            "select t1.population, t1.name, t1.headofstate from country as t1 where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.population, t1.name, t1.headofstate from country as t1 order by t1.surfacearea desc limit 1",
            "select t1.name, t1.population, t1.headofstate from country as t1 join (select max(surfacearea) as max_surfacearea from country) as t2 on t1.surfacearea = t2.max_surfacearea",
            "select t1.name, t1.population, t1.headofstate from country as t1 where t1.surfacearea = (select max(surfacearea) from country) limit 1",
            "select t1.population, t1.name, t1.headofstate from country as t1 where t1.surfacearea = (select max(surfacearea) from country) fetch first row only"
        ],
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "query2": "select t2.name, t1.population, t1.headofstate from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "population",
            ",",
            "HeadOfState",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the population, name and leader of the country with the largest area?",
        "question_toks": [
            "What",
            "are",
            "the",
            "population",
            ",",
            "name",
            "and",
            "leader",
            "of",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : countrycode (\"TTO\", \"USA\", \"ZWE\"), population (410775, 107847, 98600), name (\"Aix-en-Provence\", \"Bucuresti\", \"Joetsu\"), id (1971, 1234, 1347), district (\"Sumatera Utara\", \"Port Said\", \"Hhohho\") | sqlite_sequence : seq (4079), name (\"city\") | country : gnp (8287.0, 32852.0, 1378330.0), name (\"Cuba\", \"Poland\", \"Swaziland\"), code (\"VCT\", \"CYP\", \"BGD\"), gnpold (2149.0, 2711.0, 1746.0), code2 (\"DZ\", \"WF\", \"PG\"), continent (\"North America\", \"Africa\", \"Africa\"), indepyear (1957, 1962, 1919), surfacearea (120538.0, 103000.0, 16.0), governmentform (\"Special Administrative Region of China\", \"Independent Church State\", \"Constitutional Monarchy (Emirate)\"), region (\"South America\", \"Northern Africa\", \"Southern Africa\"), headofstate (\"Robert G. Mugabe\", \"John Bani\", \"Jos\u00c3\u00a9 Eduardo dos Santos\"), lifeexpectancy (68.4, 77.7, 70.5), capital (938, 910, 2455), localname (\"Jugoslavija\", \"YeItyop\u00c2\u00b4iya\", \"Ukrajina\") | country_population : population (27000, 2124000, 7000), code (\"PRK\", \"MRT\", \"ESH\") | countrylanguage : language (\"Nauru\", \"Rakhine\", \"Oromo\"), percentage (0.6, 77.1, 61.9), countrycode (\"JOR\", \"MOZ\", \"SYC\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : countrycode , population , name , id , district  | sqlite_sequence : seq , name  | country : gnp , name , code , gnpold , code2 , continent , indepyear , surfacearea , governmentform \", region , headofstate , lifeexpectancy , capital , localname  | country_population : population , code  | countrylanguage : language , percentage , countrycode , isofficial ",
        "chatgpt_out": [
            "select t1.population, t1.name, t1.headofstate from country as t1 where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.name, t1.population, t1.headofstate from country as t1 where t1.surfacearea = (select max(t2.surfacearea) from country as t2)",
            "select name, population, headofstate from country where surfacearea = (select max(surfacearea) from country)",
            "select name, headofstate, population from country order by surfacearea desc limit 1",
            "select name, population, headofstate from country where surfacearea = (select max(surfacearea) from country)"
        ],
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "query2": "select t1.name, t2.population, t1.headofstate from country as t1 join country_population as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "population",
            ",",
            "HeadOfState",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the population, name and leader of the country with the largest area?",
        "question_toks": [
            "What",
            "are",
            "the",
            "population",
            ",",
            "name",
            "and",
            "leader",
            "of",
            "the",
            "country",
            "with",
            "the",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "split_map": {
            "country": "headofstate"
        },
        "schema_with_content": "city : population (203296, 315415, 410102), district (\"Souss Massa-Dra\u00c3\u00a2\", \"East Azerbaidzan\", \"al-Bahr al-Abyad\"), countrycode (\"BGD\", \"NIU\", \"BRN\"), name (\"Khanewal\", \"Cochabamba\", \"Hami\"), id (4017, 1506, 168) | sqlite_sequence : name (\"city\"), seq (4079) | country : localname (\"Xianggang/Hong Kong\", \"Cabo Verde\", \"Druk-Yul\"), region (\"Australia and New Zealand\", \"Micronesia/Caribbean\", \"Southern and Central Asia\"), surfacearea (883749.0, 23200.0, 64589.0), code2 (\"BV\", \"GA\", \"BW\"), gnp (120724.0, 6232.0, 5332.0), capital (3016, 4067, 904), continent (\"Africa\", \"Asia\", \"Oceania\"), lifeexpectancy (73.7, 69.7, 75.2), gnpold (2287.0, 119833.0, 8920.0), code (\"SOM\", \"SPM\", \"BMU\"), governmentform (\"Socialistic Republic\", \"Emirate Federation\", \"Republic\"), name (\"Brazil\", \"Ireland\", \"Monaco\"), indepyear (1828, 1978, 1878), population (5433000, 11385000, 6217000) | country_headofstate : headofstate (\"Thabo Mbeki\", \"Sam Nujoma\", \"Adolf Ogi\"), code (\"GRL\", \"SLB\", \"HTI\") | countrylanguage : language (\"Lugbara\", \"Mant\u00c5\u00a1u\", \"Kotokoli\"), isofficial (\"T\", \"F\"), percentage (55.1, 13.7, 19.0), countrycode (\"NER\", \"CCK\", \"LTU\")",
        "schema_without_content": "city : population , district , countrycode , name , id  | sqlite_sequence : name , seq  | country : localname , region , surfacearea , code2 , gnp , capital , continent , lifeexpectancy , gnpold , code , governmentform , name , indepyear , population  | country_headofstate : headofstate , code  | countrylanguage : language , isofficial , percentage , countrycode ",
        "chatgpt_out": [
            "select t1.population, t1.name, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.population, t2.headofstate, t1.name from country as t1 join country_headofstate as t2 on t1.code = t2.code where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.name, t2.headofstate, t1.population from country as t1 join country_headofstate as t2 on t1.code = t2.code where t1.surfacearea = (select max(surfacearea) from country)",
            "select t2.headofstate, t1.name, t1.population from country as t1 join country_headofstate as t2 on t1.code = t2.code where t1.surfacearea = (select max(surfacearea) from country)"
        ],
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "query2": "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "population",
            ",",
            "HeadOfState",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "head",
            "of",
            "state",
            "for",
            "the",
            "country",
            "that",
            "has",
            "the",
            "largest",
            "area",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : district (\"Sumatera Utara\", \"B\u00c3\u00adob\u00c3\u00ado\", \"Bahia\"), countrycode (\"JPN\", \"MWI\", \"KWT\"), name (\"Chisinau\", \"al-Najaf\", \"Scarborough\"), id (3930, 3309, 2340), population (101320, 137946, 123285) | sqlite_sequence : seq (4079), name (\"city\") | country : continent (\"Oceania\", \"Oceania\", \"Oceania\"), lifeexpectancy (51.1, 54.9, 73.4), localname (\"K\u00c3\u00a2mpuch\u00c3\u00a9a\", \"Norfolk Island\", \"Centrafrique/B\u00c3\u00aa-Afr\u00c3\u00aeka\"), governmentform (\"People'sRepublic\", \"Special Administrative Region of China\", \"Monarchy (Emirate)\"), gnp (3501.0, 722.0, 5121.0), code (\"WSM\", \"ANT\", \"IRN\"), surfacearea (29800.0, 28896.0, 274000.0), headofstate (\"Ahmet Necdet Sezer\", \"Kim Dae-jung\", \"Carlos Roberto Flores Facuss\u00c3\u00a9\"), code2 (\"AU\", \"YT\", \"AE\"), capital (915, 2454, 2429), region (\"Nordic Countries\", \"Northern Africa\", \"Northern Africa\"), population (10545700, 38000, 2441000), gnpold (75780.0, 96318.0, 7967.0), indepyear (1993, 836, 1960) | country_name : code (\"MAC\", \"KAZ\", \"NZL\"), name (\"Gibraltar\", \"R\u00c3\u00a9union\", \"Lithuania\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Tibetan\", \"Sena\", \"Mordva\"), percentage (3.3, 76.8, 64.7), countrycode (\"TMP\", \"NCL\", \"CMR\")",
        "schema_without_content": "city : district , countrycode , name , id , population  | sqlite_sequence : seq , name  | country : continent , lifeexpectancy , localname , governmentform \", gnp , code , surfacearea , headofstate , code2 , capital , region , population , gnpold , indepyear  | country_name : code , name  | countrylanguage : isofficial , language , percentage , countrycode ",
        "chatgpt_out": [
            "select name, population, headofstate from country order by surfacearea desc limit 1",
            "select name, headofstate, population from country where surfacearea = (select max(surfacearea) from country)",
            "select name, headofstate, population from country where surfacearea = (select surfacearea from country order by surfacearea desc limit 1)",
            "select name, population, headofstate from country where surfacearea = (select max(surfacearea) from country)",
            "select name, population, headofstate from country where surfacearea = (select surfacearea from (select surfacearea from country order by surfacearea desc limit 1))"
        ],
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "query2": "select t2.name, t1.population, t1.headofstate from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "population",
            ",",
            "HeadOfState",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "head",
            "of",
            "state",
            "for",
            "the",
            "country",
            "that",
            "has",
            "the",
            "largest",
            "area",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : name (\"Ikoma\", \"Huancayo\", \"Chifeng\"), countrycode (\"SHN\", \"HUN\", \"FIN\"), population (9500, 111645, 229212), district (\"Zuid-Holland\", \"Sokoto & Kebbi & Zam\", \"Gab\u00c3\u00a8s\"), id (1001, 530, 1098) | sqlite_sequence : name (\"city\"), seq (4079) | country : code2 (\"KG\", \"DE\", \"BT\"), region (\"Southeast Asia\", \"Central Africa\", \"Western Europe\"), indepyear (1867, 1968, 1906), gnp (258.0, 3527.0, 372.0), code (\"FIN\", \"ZMB\", \"SUR\"), gnpold (3338.0, 2453.0, 17797.0), name (\"Brazil\", \"Somalia\", \"Luxembourg\"), capital (1791, 2317, 608), governmentform (\"Independent Church State\", \"Territory of Australia\", \"Part of Denmark\"), lifeexpectancy (37.6, 65.3, 45.9), headofstate (\"Gustavo Noboa Bejarano\", \"Luis \u00c3\u0081ngel Gonz\u00c3\u00a1lez Macchi\", \"Valentin Paniagua Corazao\"), localname (\"Bosna i Hercegovina\", \"Malaysia\", \"Singapore/Singapura/Xinjiapo/Singapur\"), continent (\"South America\", \"Europe\", \"Asia\"), surfacearea (752618.0, 264.0, 112622.0) | country_population : code (\"LAO\", \"GUY\", \"GRL\"), population (18886000, 19000, 77000) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"NRU\", \"QAT\", \"ZAF\"), percentage (0.1, 18.0, 92.0), language (\"Hadjarai\", \"Senufo and Minianka\", \"Eskimo Languages\")",
        "schema_without_content": "city : name , countrycode , population , district , id  | sqlite_sequence : name , seq  | country : code2 , region , indepyear , gnp , code , gnpold , name , capital , governmentform , lifeexpectancy , headofstate , localname , continent , surfacearea  | country_population : code , population  | countrylanguage : isofficial , countrycode , percentage , language ",
        "chatgpt_out": [
            "select t1.name, t1.population,t1.headofstate from country as t1 where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.population,t1.name, t1.headofstate from country as t1 where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.name, t1.headofstate, t1.population from country as t1 join (select max(surfacearea) as max_surface from country) as t2 on t1.surfacearea = t2.max_surface",
            "select t1.population, t1.name, t1.headofstate from country as t1 join (select max(surfacearea) as max_surface from country) as t2 on t1.surfacearea = t2.max_surface",
            "select t1.name,t1.headofstate,t1.population from country as t1 order by t1.surfacearea desc limit 1"
        ],
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "query2": "select t1.name, t2.population, t1.headofstate from country as t1 join country_population as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "population",
            ",",
            "HeadOfState",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "population",
            ",",
            "headofstate",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "question_toks": [
            "Give",
            "the",
            "name",
            ",",
            "population",
            ",",
            "and",
            "head",
            "of",
            "state",
            "for",
            "the",
            "country",
            "that",
            "has",
            "the",
            "largest",
            "area",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                20,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "split_map": {
            "country": "headofstate"
        },
        "schema_with_content": "city : countrycode (\"VEN\", \"MLI\", \"DEU\"), id (805, 3654, 840), population (114948, 182639, 131719), name (\"Toyokawa\", \"Zhucheng\", \"Xiantao\"), district (\"Tamaulipas\", \"B\u00c3\u00a9ja\u00c3\u00afa\", \"Mayag\u00c3\u00bcez\") | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Eastern Asia\", \"Polynesia\", \"Southern and Central Asia\"), name (\"Sierra Leone\", \"Congo\", \"Albania\"), lifeexpectancy (54.7, 72.4, 73.6), population (1000, 444000, 4629000), continent (\"Asia\", \"South America\", \"South America\"), gnp (1161755.0, 72949.0, 54669.0), code2 (\"OM\", \"ET\", \"MG\"), indepyear (1956, 1929, 1906), surfacearea (406752.0, 1862.0, 25713.0), governmentform (\"Independent Church State\", \"Dependent Territory of Norway\", \"Part of Denmark\"), localname (\"\u00c3\u0096sterreich\", \"T\u00e2\u0080\u0099ai-wan\", \"Cameroun/Cameroon\"), capital (63, 3425, 2464), gnpold (3545.0, 917719.0, 373.0), code (\"ZWE\", \"CAN\", \"COK\") | country_headofstate : code (\"NIU\", \"WLF\", \"GNQ\"), headofstate (\"Joaqu\u00c3\u00adm A. Chissano\", \"Teodoro Obiang Nguema Mbasogo\", \"Saparmurad Nijazov\") | countrylanguage : percentage (74.1, 72.1, 69.9), countrycode (\"TJK\", \"ZMB\", \"AGO\"), language (\"Herero\", \"Tigrinja\", \"Chuabo\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : countrycode , id , population , name , district  | sqlite_sequence : seq , name  | country : region , name , lifeexpectancy , population , continent , gnp , code2 , indepyear , surfacearea , governmentform , localname , capital , gnpold , code  | country_headofstate : code , headofstate  | countrylanguage : percentage , countrycode , language , isofficial ",
        "chatgpt_out": [
            "select t1.name, t1.population, t3.headofstate from country as t1 join (select code from country order by surfacearea desc limit 1) as t2 on t1.code = t2.code join country_headofstate as t3 on t1.code = t3.code",
            "select t1.name, t1.population, t3.headofstate from country as t1 join (select code, max(surfacearea) as max_surfacearea from country) as t2 on t1.code = t2.code join country_headofstate as t3 on t1.code = t3.code where t1.surfacearea = t2.max_surfacearea",
            "select t1.name, t1.population, t3.headofstate from country as t1 join country_headofstate as t3 on t1.code = t3.code where t1.surfacearea = (select max(surfacearea) from country)",
            "select t1.name, t1.population, t3.headofstate from country as t1 join (select code, max(surfacearea) as max_surfacearea from country) as t2 on t1.code = t2.code and t1.surfacearea = t2.max_surfacearea join country_headofstate as t3 on t1.code = t3.code",
            "select t1.name, t1.population, t3.headofstate from country as t1 join country_headofstate as t3 on t1.code = t3.code where t1.surfacearea = (select max(surfacearea) from country) limit 1"
        ],
        "query1": "select name, population, headofstate from country order by surfacearea desc limit 1",
        "query2": "select t1.name, t1.population, t2.headofstate from country as t1 join country_headofstate as t2 on t1.code = t2.code order by t1.surfacearea desc limit 1"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "GovernmentForm",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "GovernmentForm",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "question_toks": [
            "Find",
            "the",
            "government",
            "form",
            "name",
            "and",
            "total",
            "population",
            "for",
            "each",
            "government",
            "form",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : countrycode (\"USA\", \"PHL\", \"FRA\"), population (102153, 89881, 98329), name (\"Mandaluyong\", \"Fuling\", \"Mbour\"), id (3695, 804, 3303), district (\"Santa F\u00c3\u00a9\", \"Ankara\", \"Kermanshah\") | sqlite_sequence : seq (4079), name (\"city\") | country : governmentform (\"Occupied by Marocco\", \"Administrated by the UN\", \"Dependent Territory of the US\"), name (\"Uruguay\", \"Uganda\", \"Sudan\"), capital (2482, 926, 1881), indepyear (843, 1981, 1955), surfacearea (388.0, 1221037.0, 26338.0), code (\"ATF\", \"BMU\", \"ASM\"), lifeexpectancy (59.8, 78.7, 69.7), continent (\"Europe\", \"Antarctica\", \"Oceania\"), gnp (21929.0, 174099.0, 935.0), region (\"Nordic Countries\", \"Caribbean\", \"Middle East\"), localname (\"United States Minor Outlying Islands\", \"El Salvador\", \"The Cook Islands\"), headofstate (\"Jiang Zemin\", \"Arthur N. R. Robinson\", \"Francisco Guillermo Flores P\u00c3\u00a9rez\"), gnpold (75780.0, 5639.0, 160151.0), code2 (\"AR\", \"CM\", \"SV\") | country_population : population (8190900, 31147000, 34000), code (\"HND\", \"MCO\", \"GHA\") | countrylanguage : countrycode (\"SWZ\", \"NIC\", \"NLD\"), percentage (52.4, 2.3, 87.6), language (\"Fijian\", \"Telugu\", \"Gorane\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : countrycode , population , name , id , district  | sqlite_sequence : seq , name  | country : governmentform , name , capital , indepyear , surfacearea , code , lifeexpectancy , continent , gnp , region , localname , headofstate , gnpold , code2  | country_population : population , code  | countrylanguage : countrycode , percentage , language , isofficial ",
        "chatgpt_out": [
            "select t1.governmentform, sum(t2.population) as total_population from country as t1 join country_population as t2 on t1.code = t2.code group by t1.governmentform having avg(t1.lifeexpectancy) > 72",
            "select t1.governmentform, sum(t2.population) as total_population from country as t1 join country_population as t2 on t1.code = t2.code where t1.lifeexpectancy > 72 group by t1.governmentform",
            "select t1.governmentform, sum(t2.population) as total_population from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform in (select distinct governmentform from country where lifeexpectancy > 72) group by t1.governmentform",
            "select t1.governmentform, sum(t2.population) as total_population from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform = any (select distinct governmentform from country where lifeexpectancy > 72) group by t1.governmentform",
            "select t1.governmentform, sum(t2.population) as total_population from country as t1 join country_population as t2 on t1.code = t2.code where t1.governmentform = any (select governmentform from country where lifeexpectancy > 72 group by governmentform) group by t1.governmentform"
        ],
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "query2": "select sum(t2.population), t1.governmentform from country as t1 join country_population as t2 on t1.code = t2.code group by t1.governmentform having avg(t1.lifeexpectancy) > 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "GovernmentForm",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "GovernmentForm",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "question_toks": [
            "Find",
            "the",
            "government",
            "form",
            "name",
            "and",
            "total",
            "population",
            "for",
            "each",
            "government",
            "form",
            "whose",
            "average",
            "life",
            "expectancy",
            "is",
            "longer",
            "than",
            "72",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "split_map": {
            "country": "governmentform"
        },
        "schema_with_content": "city : population (288100, 237206, 3386667), name (\"Damanhur\", \"Plovdiv\", \"Lagos\"), countrycode (\"SAU\", \"CYP\", \"TJK\"), id (509, 1844, 934), district (\"Arusha\", \"Nghe An\", \"al-Gharbiya\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnp (285.0, 19770.0, 1061.0), indepyear (1962, 1965, 1960), lifeexpectancy (70.3, 74.9, 76.5), headofstate (\"Lennart Meri\", \"Johannes Paavali II\", \"Carl XVI Gustaf\"), population (3972000, 17000, 4478500), region (\"Eastern Asia\", \"Eastern Asia\", \"Nordic Countries\"), name (\"Antarctica\", \"Hong Kong\", \"France\"), continent (\"Oceania\", \"Antarctica\", \"Antarctica\"), code (\"GMB\", \"TWN\", \"LCA\"), gnpold (58623.0, 10241.0, 584.0), capital (905, 549, 2689), localname (\"Afganistan/Afqanestan\", \"Muritaniya/Mauritanie\", \"Iran\"), surfacearea (36125.0, 199.0, 266000.0), code2 (\"TM\", \"NG\", \"NI\") | country_governmentform : code (\"SVN\", \"PHL\", \"POL\"), governmentform (\"Part of Denmark\", \"Dependent Territory of the US\", \"Socialistic Republic\") | countrylanguage : language (\"Ket\u00c5\u00a1ua\", \"Japanese\", \"Kikuyu\"), countrycode (\"CRI\", \"LCA\", \"HTI\"), percentage (59.7, 2.2, 50.8), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : population , name , countrycode , id , district  | sqlite_sequence : name , seq  | country : gnp , indepyear , lifeexpectancy , headofstate , population , region , name , continent , code , gnpold , capital , localname , surfacearea , code2  | country_governmentform : code , governmentform  | countrylanguage : language , countrycode , percentage , isofficial ",
        "chatgpt_out": [
            "select t1.governmentform, sum(t2.population) as total_population from country_governmentform as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform",
            "select t1.governmentform, sum(t2.population) as total_population from country as t2 join country_governmentform as t1 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform",
            "select t1.governmentform, sum(t2.population) as total_population from country as t2 join (select code, governmentform from country_governmentform) as t1 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform",
            "select t1.governmentform, sum(t2.population) as total_population from country_governmentform as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform having avg(t2.lifeexpectancy) > 72",
            "select t1.governmentform, sum(t2.population) as total_population from country as t2 join country_governmentform as t1 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform having avg(t2.lifeexpectancy) > 72"
        ],
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "query2": "select sum(t1.population), t2.governmentform from country as t1 join country_governmentform as t2 on t1.code = t2.code group by t2.governmentform having avg(t1.lifeexpectancy) > 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "GovernmentForm",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "GovernmentForm",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "government",
            "forms",
            "and",
            "what",
            "is",
            "the",
            "total",
            "population",
            "of",
            "each",
            "for",
            "government",
            "forms",
            "that",
            "have",
            "an",
            "average",
            "life",
            "expectancy",
            "greater",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : countrycode (\"LIE\", \"GUM\", \"MYS\"), district (\"Vrancea\", \"Karab\u00c3\u00bck\", \"Yamoussoukro\"), population (128037, 190905, 503600), id (314, 651, 1770), name (\"Malolos\", \"Radom\", \"Huaiyin\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"EGY\", \"IRN\", \"ESP\"), indepyear (1804, 1994, 1906), lifeexpectancy (71.8, 66.4, 77.9), capital (3244, 63, 3017), name (\"Marshall Islands\", \"Niger\", \"Saudi Arabia\"), gnp (27037.0, 935.0, 4127.0), continent (\"North America\", \"Africa\", \"Africa\"), surfacearea (1102.0, 11000.0, 2166090.0), gnpold (46966.0, 2102826.0, 33514.0), headofstate (\"Sellapan Rama Nathan\", \"\", \"Frederick Chiluba\"), region (\"South America\", \"Antarctica\", \"Eastern Asia\"), governmentform (\"Co-administrated\", \"Federation\", \"Territorial Collectivity of France\"), localname (\"Bangladesh\", \"Marshall Islands/Majol\", \"Suriya\"), code2 (\"CL\", \"MO\", \"PS\") | country_population : population (8861400, 20212000, 7160400), code (\"ABW\", \"ETH\", \"PRK\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (3.9, 3.3, 23.5), language (\"Sumo\", \"Tiv\", \"Garo\"), countrycode (\"SOM\", \"MRT\", \"VCT\")",
        "schema_without_content": "city : countrycode , district , population , id , name  | sqlite_sequence : name , seq  | country : code , indepyear , lifeexpectancy , capital , name , gnp , continent , surfacearea , gnpold , headofstate , region , governmentform , localname , code2  | country_population : population , code  | countrylanguage : isofficial , percentage , language , countrycode ",
        "chatgpt_out": [
            "select t1.governmentform, sum(t2.population) as total_population from country as t1 join country_population as t2 on t1.code = t2.code where t1.lifeexpectancy > 72 group by t1.governmentform",
            "select t1.governmentform, t2.population as total_population from country as t1 join (select code, sum(population) as population from country_population group by code) as t2 on t1.code = t2.code where t1.lifeexpectancy > 72",
            "select t1.governmentform, t2.total_population from country as t1 join (select code, sum(population) as total_population from country_population group by code) as t2 on t1.code = t2.code where t1.lifeexpectancy > 72",
            "select governmentform, sum(population) as total_population from country join country_population on code=countrycode where lifeexpectancy>72 group by governmentform",
            "select t1.governmentform, sum(t2.population) as total_population from country as t1 join (select code, population from country_population) as t2 on t1.code = t2.code where t1.lifeexpectancy > 72 group by t1.governmentform"
        ],
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "query2": "select sum(t2.population), t1.governmentform from country as t1 join country_population as t2 on t1.code = t2.code group by t1.governmentform having avg(t1.lifeexpectancy) > 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "GovernmentForm",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "GovernmentForm",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ">",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "governmentform",
            "from",
            "country",
            "group",
            "by",
            "governmentform",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ">",
            "value"
        ],
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "government",
            "forms",
            "and",
            "what",
            "is",
            "the",
            "total",
            "population",
            "of",
            "each",
            "for",
            "government",
            "forms",
            "that",
            "have",
            "an",
            "average",
            "life",
            "expectancy",
            "greater",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    19,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    3,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                19,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "split_map": {
            "country": "governmentform"
        },
        "schema_with_content": "city : name (\"Viransehir\", \"Sorsogon\", \"Saqqez\"), id (3550, 1587, 3627), population (169336, 50100, 120793), countrycode (\"HKG\", \"RWA\", \"DZA\"), district (\"Buhoro\", \"Rio de Janeiro\", \"Szabolcs-Szatm\u00c3\u00a1r-Ber\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"CYM\", \"KIR\", \"IRN\"), region (\"Eastern Europe\", \"Eastern Africa\", \"Antarctica\"), gnpold (243948.0, 2527.0, 917719.0), continent (\"South America\", \"North America\", \"Oceania\"), lifeexpectancy (77.1, 49.8, 78.4), indepyear (-660, 1973, 1974), population (7734000, 8190900, 147000), headofstate (\"Omar Hassan Ahmad al-Bashir\", None, \"Benjamin William Mkapa\"), surfacearea (56785.0, 1246700.0, 151.0), localname (\"Venezuela\", \"Danmark\", \"Suomi\"), capital (129, 549, 69), name (\"Sudan\", \"Bosnia and Herzegovina\", \"Cook Islands\"), gnp (141.0, 414972.0, 65107.0), code2 (\"YU\", \"BZ\", \"VN\") | country_governmentform : governmentform (\"Islamic Republic\", \"Nonmetropolitan Territory of The Netherlands\", \"Territorial Collectivity of France\"), code (\"YUG\", \"ATA\", \"GUF\") | countrylanguage : language (\"Slovene\", \"Fukien\", \"Masai\"), countrycode (\"SWE\", \"SHN\", \"BRA\"), isofficial (\"T\", \"F\"), percentage (58.4, 13.5, 32.5)",
        "schema_without_content": "city : name , id , population , countrycode , district  | sqlite_sequence : name , seq  | country : code , region , gnpold , continent , lifeexpectancy , indepyear , population , headofstate , surfacearea , localname , capital , name , gnp , code2  | country_governmentform : governmentform , code  | countrylanguage : language , countrycode , isofficial , percentage ",
        "chatgpt_out": [
            "select t1.governmentform, sum(t2.population) from country_governmentform as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform",
            "select t1.governmentform, total_population from (select t1.governmentform, sum(t2.population) as total_population from country_governmentform as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform) as t1",
            "select t1.governmentform, sum(t2.population) as total_population from country_governmentform as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform",
            "select t1.governmentform, t2.total_population from country_governmentform as t1 join (select t1.governmentform, sum(t2.population) as total_population from country_governmentform as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform) as t2 on t1.governmentform = t2.governmentform",
            "select t1.governmentform, t2.total_population from country_governmentform as t1 join (select t1.governmentform, sum(t2.population) as total_population from country_governmentform as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy > 72 group by t1.governmentform) as t2 using (governmentform)"
        ],
        "query1": "select sum(population), governmentform from country group by governmentform having avg(lifeexpectancy) > 72",
        "query2": "select sum(t1.population), t2.governmentform from country as t1 join country_governmentform as t2 on t1.code = t2.code group by t2.governmentform having avg(t1.lifeexpectancy) > 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "question_toks": [
            "Find",
            "the",
            "average",
            "life",
            "expectancy",
            "and",
            "total",
            "population",
            "for",
            "each",
            "continent",
            "where",
            "the",
            "average",
            "life",
            "expectancy",
            "is",
            "shorter",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "split_map": {
            "country": "continent"
        },
        "schema_with_content": "city : id (1436, 3033, 3800), district (\"Crete\", \"Gifu\", \"Kostroma\"), name (\"Hsichuh\", \"Barakaldo\", \"Rio de Janeiro\"), population (324720, 2256000, 4802), countrycode (\"TJK\", \"IND\", \"MDG\") | sqlite_sequence : name (\"city\"), seq (4079) | country : governmentform (\"Nonmetropolitan Territory of The Netherlands\", \"Administrated by the UN\", \"Constitutional Monarchy, Federation\"), headofstate (\"Mathieu K\u00c3\u00a9r\u00c3\u00a9kou\", \"Qabus ibn Sa\u00c2\u00b4id\", \"Jabir al-Ahmad al-Jabir al-Sabah\"), name (\"Virgin Islands, U.S.\", \"Micronesia, Federated States of\", \"Montserrat\"), population (754700, 417000, 10043200), gnp (96.0, 10692.0, 11705.0), code2 (\"AF\", \"SH\", \"ZA\"), surfacearea (45227.0, 505992.0, 27834.0), code (\"POL\", \"ITA\", \"TWN\"), indepyear (1917, 1932, 1957), localname (\"Falkland Islands\", \"Mauritius\", \"Saint Kitts and Nevis\"), gnpold (160151.0, 706.0, 206025.0), capital (2401, 126, 552), lifeexpectancy (68.6, 77.4, 78.8), region (\"Caribbean\", \"Australia and New Zealand\", \"Southern Africa\") | country_continent : code (\"BEL\", \"STP\", \"AFG\"), continent (\"Africa\", \"South America\", \"South America\") | countrylanguage : percentage (5.4, 95.1, 60.4), language (\"Fukien\", \"Punu\", \"Irish\"), countrycode (\"UGA\", \"CYP\", \"FSM\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : id , district , name , population , countrycode  | sqlite_sequence : name , seq  | country : governmentform , headofstate , name , population , gnp , code2 , surfacearea , code , indepyear , localname , gnpold , capital , lifeexpectancy , region  | country_continent : code , continent  | countrylanguage : percentage , language , countrycode , isofficial ",
        "chatgpt_out": [
            "select country_continent.continent, avg(country.lifeexpectancy), sum(country.population) from country_continent join country on country_continent.code = country.code where country.lifeexpectancy < 72 group by country_continent.continent",
            "select country_continent.continent, sum(country.population), avg(country.lifeexpectancy) from country_continent join country on country_continent.code = country.code where country.lifeexpectancy < 72 group by country_continent.continent",
            "select country_continent.continent, avg(lifeexpectancy), sum(population) from country_continent join country on country_continent.code = country.code where lifeexpectancy < 72 group by country_continent.continent",
            "select country_continent.continent, sum(population), avg(lifeexpectancy) from country_continent join country on country_continent.code = country.code where lifeexpectancy < 72 group by country_continent.continent",
            "select t1.continent, avg(t2.lifeexpectancy), sum(t2.population) from country_continent as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent"
        ],
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "query2": "select sum(t1.population), avg(t1.lifeexpectancy), t2.continent from country as t1 join country_continent as t2 on t1.code = t2.code group by t2.continent having avg(t1.lifeexpectancy) < 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "question_toks": [
            "Find",
            "the",
            "average",
            "life",
            "expectancy",
            "and",
            "total",
            "population",
            "for",
            "each",
            "continent",
            "where",
            "the",
            "average",
            "life",
            "expectancy",
            "is",
            "shorter",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : id (1854, 1170, 1847), countrycode (\"DMA\", \"WLF\", \"VUT\"), population (91470, 105199, 226864), name (\"Ocosingo\", \"Ikerre\", \"Chongjin\"), district (\"Niigata\", \"Maramures\", \"Kadiogo\") | sqlite_sequence : seq (4079), name (\"city\") | country : localname (\"Lao\", \"Monaco\", \"S\u00c3\u00a9n\u00c3\u00a9gal/Sounougal\"), gnp (3750.0, 998.0, 27037.0), code2 (\"CM\", \"PF\", \"NA\"), region (\"Antarctica\", \"Eastern Africa\", \"Central America\"), indepyear (1350, 1821, 1806), name (\"Morocco\", \"Nigeria\", \"United States Minor Outlying Islands\"), lifeexpectancy (68.6, 55.0, 79.0), governmentform (\"Parliamentary Coprincipality\", \"Socialistic Republic\", \"Dependent Territory of the US\"), capital (191, 3419, 904), surfacearea (8547403.0, 13120000.0, 702.0), headofstate (\"Rudolf Schuster\", \"Miguel \u00c3\u0081ngel Rodr\u00c3\u00adguez Echeverr\u00c3\u00ada\", \"Jean-Bertrand Aristide\"), continent (\"South America\", \"North America\", \"South America\"), gnpold (5940.0, 804108.0, 3347.0), code (\"BIH\", \"PRT\", \"DMA\") | country_population : population (4699000, 1972000, 22256000), code (\"CIV\", \"GRD\", \"IRQ\") | countrylanguage : percentage (81.0, 81.2, 19.6), language (\"Tsonga\", \"Bhojpuri\", \"Ibo\"), countrycode (\"BIH\", \"SLV\", \"COL\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : id , countrycode , population , name , district  | sqlite_sequence : seq , name  | country : localname , gnp , code2 , region , indepyear , name , lifeexpectancy , governmentform , capital , surfacearea , headofstate , continent , gnpold , code  | country_population : population , code  | countrylanguage : percentage , language , countrycode , isofficial ",
        "chatgpt_out": [
            "select t1.continent, avg(t2.lifeexpectancy), sum(t3.population) from country as t1 join country as t2 on t1.continent = t2.continent join country_population as t3 on t2.code = t3.code where t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t2.population), avg(t3.lifeexpectancy) from country as t1 join country_population as t2 on t1.code = t2.code join country as t3 on t1.continent = t3.continent where t3.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t2.population), avg(t3.lifeexpectancy) from country_population as t1 join country as t2 on t1.code = t2.code join country as t3 on t1.code = t3.code where t3.lifeexpectancy < 72 group by t2.continent",
            "select t1.continent, avg(t2.lifeexpectancy), sum(t3.population) from country as t1 join country_population as t3 on t1.code = t3.code join country as t2 on t1.continent = t2.continent where t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t2.population), avg(t3.lifeexpectancy) from country_language as t1 join country as t2 on t1.countrycode = t2.code join country as t3 on t1.countrycode = t3.code where t3.lifeexpectancy < 72 group by t2.continent"
        ],
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "query2": "select sum(t2.population), avg(t1.lifeexpectancy), t1.continent from country as t1 join country_population as t2 on t1.code = t2.code group by t1.continent having avg(t1.lifeexpectancy) < 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "question_toks": [
            "Find",
            "the",
            "average",
            "life",
            "expectancy",
            "and",
            "total",
            "population",
            "for",
            "each",
            "continent",
            "where",
            "the",
            "average",
            "life",
            "expectancy",
            "is",
            "shorter",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "split_map": {
            "country": "lifeexpectancy"
        },
        "schema_with_content": "city : name (\"Garut\", \"Bojnurd\", \"Bamenda\"), countrycode (\"EST\", \"JOR\", \"MUS\"), id (1508, 2353, 3089), population (112195, 196086, 354757), district (\"Schleswig-Holstein\", \"Andhra Pradesh\", \"Coahuila de Zaragoza\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code2 (\"SY\", \"TZ\", \"CL\"), gnp (197.0, 2352.0, 84982.0), localname (\"The Cook Islands\", \"Taehan Min\u00e2\u0080\u0099guk (Namhan)\", \"The Bahamas\"), capital (2882, 3332, 2295), gnpold (982.0, 542.0, 5639.0), headofstate (\"Bhumibol Adulyadej\", \"Mohammad Rafiq Tarar\", \"Bashar al-Assad\"), indepyear (1804, 1917, 1923), continent (\"South America\", \"Oceania\", \"North America\"), governmentform (\"Nonmetropolitan Territory of France\", \"Territory of Australia\", \"Occupied by Marocco\"), region (\"Polynesia\", \"Baltic Countries\", \"Central America\"), surfacearea (29800.0, 406752.0, 53.0), population (453000, 3862000, 154000), code (\"BGD\", \"SJM\", \"SLE\"), name (\"Zambia\", \"Italy\", \"Uganda\") | country_lifeexpectancy : code (\"ATA\", \"VUT\", \"KEN\"), lifeexpectancy (51.1, 62.9, 59.5) | countrylanguage : countrycode (\"AUT\", \"MEX\", \"TGO\"), percentage (1.3, 5.7, 26.9), language (\"Malay-English\", \"Dong\", \"Faroese\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : name , countrycode , id , population , district  | sqlite_sequence : name , seq  | country : code2 , gnp , localname \", \"The Bahamas\", capital , gnpold , headofstate , indepyear , continent , governmentform , region , surfacearea , population , code , name  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : countrycode , percentage , language , isofficial ",
        "chatgpt_out": [
            "select t1.continent, avg(t2.lifeexpectancy), sum(t1.population) from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t1.population), avg(t2.lifeexpectancy) from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t1.population), average(t2.lifeexpectancy) from country as t1, country_lifeexpectancy as t2 where t1.code = t2.code and t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, total(t1.population), average(t2.lifeexpectancy) from country as t1, country_lifeexpectancy as t2 where t1.code = t2.code and t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t1.population), avg(t2.lifeexpectancy) from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.countrycode where t2.lifeexpectancy < 72 group by t1.continent"
        ],
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "query2": "select sum(t1.population), avg(t2.lifeexpectancy), t1.continent from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code group by t1.continent having avg(t2.lifeexpectancy) < 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "continents",
            "and",
            "the",
            "total",
            "popuation",
            "and",
            "average",
            "life",
            "expectancy",
            "corresponding",
            "to",
            "each",
            ",",
            "for",
            "continents",
            "that",
            "have",
            "an",
            "average",
            "life",
            "expectancy",
            "less",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "split_map": {
            "country": "continent"
        },
        "schema_with_content": "city : name (\"al-Kut\", \"Grenoble\", \"Waru\"), population (189258, 115913, 1619115), id (2111, 3592, 3885), countrycode (\"TMP\", \"MSR\", \"NIC\"), district (\"Kitaa\", \"Gaziantep\", \"Tainan\") | sqlite_sequence : name (\"city\"), seq (4079) | country : code (\"PHL\", \"BGD\", \"VGB\"), indepyear (1878, 1955, 1917), name (\"French Guiana\", \"Tokelau\", \"Armenia\"), governmentform (\"Dependent Territory of the UK\", \"US Territory\", \"Nonmetropolitan Territory of New Zealand\"), lifeexpectancy (64.0, 49.0, 76.2), population (67702000, 93000, 6485000), gnp (12178.0, 9.0, 650.0), capital (3068, 144, 3016), localname (\"To\u00c3\u00a7ikiston\", \"Danmark\", \"Ertra\"), headofstate (\"Fidel Castro Ruz\", \"Omar Hassan Ahmad al-Bashir\", \"Bhumibol Adulyadej\"), surfacearea (99434.0, 1104300.0, 1.5), gnpold (64960.0, 6884.0, 2453.0), code2 (\"TJ\", \"AW\", \"SY\"), region (\"Eastern Africa\", \"British Islands\", \"Western Africa\") | country_continent : continent (\"Africa\", \"Antarctica\", \"Antarctica\"), code (\"SYR\", \"SEN\", \"PNG\") | countrylanguage : countrycode (\"TUN\", \"BGR\", \"WLF\"), language (\"Nyika\", \"Temne\", \"Cakchiquel\"), isofficial (\"T\", \"F\"), percentage (47.5, 32.6, 6.5)",
        "schema_without_content": "city : name , population , id , countrycode , district  | sqlite_sequence : name , seq  | country : code , indepyear , name , governmentform , lifeexpectancy , population , gnp , capital , localname , headofstate , surfacearea , gnpold , code2 , region  | country_continent : continent , code  | countrylanguage : countrycode , language , isofficial , percentage ",
        "chatgpt_out": [
            "select t1.continent, sum(t2.population), avg(t2.lifeexpectancy) from country_continent as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, avg(t2.lifeexpectancy), sum(t2.population) from country_continent as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t2.population), avg(t2.lifeexpectancy) from country_continent as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent order by sum(t2.population)",
            "select t1.continent, avg(t2.lifeexpectancy), sum(t2.population) from country_continent as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent order by avg(t2.lifeexpectancy)",
            "select t1.continent, sum(t2.population), avg(t2.lifeexpectancy) from country_continent as t1 join country as t2 on t1.code = t2.code where t2.lifeexpectancy < 72 group by t1.continent having sum(t2.population) > 500000000"
        ],
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "query2": "select sum(t1.population), avg(t1.lifeexpectancy), t2.continent from country as t1 join country_continent as t2 on t1.code = t2.code group by t2.continent having avg(t1.lifeexpectancy) < 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "continents",
            "and",
            "the",
            "total",
            "popuation",
            "and",
            "average",
            "life",
            "expectancy",
            "corresponding",
            "to",
            "each",
            ",",
            "for",
            "continents",
            "that",
            "have",
            "an",
            "average",
            "life",
            "expectancy",
            "less",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : name (\"Izmajil\", \"San Juan del Monte\", \"Kediri\"), district (\"Latium\", \"Golestan\", \"Kang-won\"), population (111500, 209086, 218391), countrycode (\"DEU\", \"SYR\", \"GNB\"), id (141, 199, 2253) | sqlite_sequence : seq (4079), name (\"city\") | country : gnp (182.0, 15846.0, 3101.0), region (\"South America\", \"Micronesia/Caribbean\", \"Southern Europe\"), gnpold (1056.0, 23383.0, 2287.0), code2 (\"DM\", \"AQ\", \"SB\"), governmentform (\"Dependent Territory of the US\", \"Parlementary Monarchy\", \"Autonomous Area\"), localname (\"Honduras\", \"Dhivehi Raajje/Maldives\", \"Terres australes fran\u00c3\u00a7aises\"), surfacearea (1246700.0, 1138914.0, 923768.0), code (\"RWA\", \"KWT\", \"CRI\"), continent (\"Antarctica\", \"North America\", \"Oceania\"), indepyear (1769, 1776, 1769), capital (2881, 3426, 2726), headofstate (\"Teburoro Tito\", \"Vladimir Putin\", \"Jigme Singye Wangchuk\"), lifeexpectancy (75.2, 49.2, 62.9), name (\"Togo\", \"Cook Islands\", \"Cayman Islands\") | country_population : code (\"ITA\", \"CHE\", \"GNB\"), population (10640000, 5083000, 62565000) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"JPN\", \"COL\", \"UZB\"), language (\"Brahui\", \"Canton Chinese\", \"Mandjia\"), percentage (92.1, 63.1, 11.8)",
        "schema_without_content": "city : name , district , population , countrycode , id  | sqlite_sequence : seq , name  | country : gnp , region , gnpold , code2 , governmentform , localname , surfacearea , code , continent , indepyear , capital , headofstate , lifeexpectancy , name  | country_population : code , population  | countrylanguage : isofficial , countrycode , language , percentage ",
        "chatgpt_out": [
            "select t1.continent, sum(t2.population), avg(t1.lifeexpectancy) from country as t1 join city as t2 on t1.code = t2.countrycode where t1.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, avg(t1.lifeexpectancy), sum(t2.population) from country as t1 join city as t2 on t1.code = t2.countrycode where t1.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t2.population), avg(t1.lifeexpectancy) from city as t2 join country as t1 on t2.countrycode = t1.code where t1.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, avg(t1.lifeexpectancy), sum(t2.population) from city as t2 join country as t1 on t2.countrycode = t1.code where t1.lifeexpectancy < 72 group by t1.continent",
            "select t1.continent, sum(t2.population), avg(t1.lifeexpectancy) from country as t1 join country_population as t2 on t1.code = t2.code where t1.lifeexpectancy < 72 group by t1.continent"
        ],
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "query2": "select sum(t2.population), avg(t1.lifeexpectancy), t1.continent from country as t1 join country_population as t2 on t1.code = t2.code group by t1.continent having avg(t1.lifeexpectancy) < 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            ",",
            "Continent",
            "FROM",
            "country",
            "GROUP",
            "BY",
            "Continent",
            "HAVING",
            "avg",
            "(",
            "LifeExpectancy",
            ")",
            "<",
            "72"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            ",",
            "continent",
            "from",
            "country",
            "group",
            "by",
            "continent",
            "having",
            "avg",
            "(",
            "lifeexpectancy",
            ")",
            "<",
            "value"
        ],
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "question_toks": [
            "What",
            "are",
            "the",
            "different",
            "continents",
            "and",
            "the",
            "total",
            "popuation",
            "and",
            "average",
            "life",
            "expectancy",
            "corresponding",
            "to",
            "each",
            ",",
            "for",
            "continents",
            "that",
            "have",
            "an",
            "average",
            "life",
            "expectancy",
            "less",
            "than",
            "72",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    10,
                    false
                ]
            ],
            "having": [
                [
                    false,
                    4,
                    [
                        0,
                        [
                            5,
                            15,
                            false
                        ],
                        null
                    ],
                    72.0,
                    null
                ]
            ],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                15,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                10,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "split_map": {
            "country": "lifeexpectancy"
        },
        "schema_with_content": "city : population (1975294, 309010, 170125), district (\"Noord-Brabant\", \"Astana\", \"Latium\"), name (\"Irkutsk\", \"Engels\", \"Igboho\"), countrycode (\"VNM\", \"RUS\", \"NOR\"), id (1203, 1398, 2349) | sqlite_sequence : seq (4079), name (\"city\") | country : gnp (2036.0, 2223.0, 151697.0), surfacearea (5765.0, 131626.0, 1075.0), capital (35, 3336, 5), indepyear (1994, 1990, 1961), governmentform (\"Federal Republic\", \"Dependent Territory of the UK\", \"Parliamentary Coprincipality\"), population (9169000, 18112000, 5330000), gnpold (75780.0, 706.0, 4192638.0), continent (\"Antarctica\", \"Oceania\", \"North America\"), code2 (\"TK\", \"MW\", \"TO\"), name (\"Ireland\", \"East Timor\", \"French Guiana\"), localname (\"\u00c3\u0096sterreich\", \"Saint Vincent and the Grenadines\", \"Honduras\"), region (\"Polynesia\", \"Caribbean\", \"Nordic Countries\"), headofstate (\"Salahuddin Abdul Aziz Shah Alhaj\", \"Jacques Chirac\", \"Mohammed VI\"), code (\"MSR\", \"ALB\", \"MNP\") | country_lifeexpectancy : code (\"PLW\", \"KEN\", \"SLB\"), lifeexpectancy (49.2, 80.1, 53.6) | countrylanguage : language (\"Tigrinja\", \"Garifuna\", \"Bulgariana\"), percentage (81.0, 11.9, 4.4), countrycode (\"YEM\", \"ITA\", \"PRK\"), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : population , district , name , countrycode , id  | sqlite_sequence : seq , name  | country : gnp , surfacearea , capital , indepyear , governmentform , population , gnpold , continent , code2 , name , localname , region , headofstate , code  | country_lifeexpectancy : code , lifeexpectancy  | countrylanguage : language , percentage , countrycode , isofficial ",
        "chatgpt_out": [
            "select c.continent, sum(c.population), avg(cl.lifeexpectancy) from country as c join country_lifeexpectancy as cl on c.code = cl.code group by c.continent having avg(cl.lifeexpectancy) < 72",
            "select c.continent, avg(cl.lifeexpectancy), sum(c.population) from country as c join country_lifeexpectancy as cl on c.code = cl.code group by c.continent having avg(cl.lifeexpectancy) < 72",
            "select c.continent, sum(c.population), avg(cle.lifeexpectancy) from country as c join (select code, lifeexpectancy from country_lifeexpectancy where lifeexpectancy < 72) as cle on c.code = cle.code group by c.continent",
            "select c.continent, avg(cle.lifeexpectancy), sum(c.population) from country as c join (select code, lifeexpectancy from country_lifeexpectancy where lifeexpectancy < 72) as cle on c.code = cle.code group by c.continent",
            "select c.continent, sum(c.population), avg(lifeexpectancy) from (select code, lifeexpectancy from country_lifeexpectancy where lifeexpectancy < 72) as cle join country as c on cle.code = c.code group by c.continent"
        ],
        "query1": "select sum(population), avg(lifeexpectancy), continent from country group by continent having avg(lifeexpectancy) < 72",
        "query2": "select sum(t1.population), avg(t2.lifeexpectancy), t1.continent from country as t1 join country_lifeexpectancy as t2 on t1.code = t2.code group by t1.continent having avg(t2.lifeexpectancy) < 72"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "areas",
            "of",
            "countries",
            "with",
            "the",
            "top",
            "5",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 5,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : name (\"Alanya\", \"Bridgetown\", \"Proddatur\"), id (4034, 925, 3811), population (95305, 619680, 703324), district (\"D\u00c3\u00a2mbovita\", \"Plateau & Nassarawa\", \"North Kivu\"), countrycode (\"ARG\", \"ISR\", \"CAN\") | sqlite_sequence : seq (4079), name (\"city\") | country : population (20212000, 57680000, 12000), governmentform (\"Territorial Collectivity of France\", \"Dependent Territory of Norway\", \"Special Administrative Region of China\"), localname (\"Anguilla\", \"Latvija\", \"Pilipinas\"), gnpold (2186.0, 7984.0, 5940.0), capital (3337, 2486, 652), headofstate (\"Harald V\", \"Hamad ibn Isa al-Khalifa\", \"Kim Jong-il\"), lifeexpectancy (59.8, 54.9, 77.0), indepyear (1811, 843, 1957), continent (\"Oceania\", \"Oceania\", \"Oceania\"), code2 (\"MD\", \"WF\", \"LU\"), code (\"LSO\", \"GAB\", \"ARG\"), region (\"Micronesia\", \"Central Africa\", \"British Islands\"), gnp (9217.0, 1424285.0, 261.0), surfacearea (49.0, 603700.0, 59.0) | country_name : name (\"Pitcairn\", \"Nigeria\", \"French Polynesia\"), code (\"FJI\", \"OMN\", \"HRV\") | countrylanguage : countrycode (\"CAN\", \"BRN\", \"MAR\"), isofficial (\"T\", \"F\"), language (\"Tamang\", \"Mossi\", \"Basque\"), percentage (96.0, 21.6, 0.5)",
        "schema_without_content": "city : name , id , population , district , countrycode  | sqlite_sequence : seq , name  | country : population , governmentform , localname , gnpold , capital , headofstate , lifeexpectancy , indepyear , continent , code2 , code , region , gnp , surfacearea  | country_name : name , code  | countrylanguage : countrycode , isofficial , language , percentage ",
        "chatgpt_out": [
            "select name, surfacearea from country order by surfacearea desc limit 5",
            "select surfacearea, name from country order by surfacearea desc limit 5",
            "select name, surfacearea from country where surfacearea in (select surfacearea from country order by surfacearea desc limit 5)",
            "select surfacearea, name from country where surfacearea in (select surfacearea from country order by surfacearea desc limit 5)",
            "select t1.name, t1.surfacearea from country as t1 join (select surfacearea from country order by surfacearea desc limit 5) as t2 on t1.surfacearea = t2.surfacearea"
        ],
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5",
        "query2": "select t2.name, t1.surfacearea from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 5"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "areas",
            "of",
            "countries",
            "with",
            "the",
            "top",
            "5",
            "largest",
            "area",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 5,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5",
        "split_map": {
            "country": "surfacearea"
        },
        "schema_with_content": "city : countrycode (\"BOL\", \"CHE\", \"UGA\"), name (\"Valparai\", \"Santa Ana\", \"Carson\"), district (\"Languedoc-Roussillon\", \"Van\", \"Balikesir\"), population (219100, 137080, 322685), id (1668, 1114, 1896) | sqlite_sequence : name (\"city\"), seq (4079) | country : lifeexpectancy (75.8, 74.1, 46.7), population (2943000, 2856000, 10925000), gnp (4397.0, 256.0, 95023.0), governmentform (\"Socialistic State\", \"Parlementary Monarchy\", \"Republic\"), indepyear (1907, 1978, -1523), continent (\"Europe\", \"Oceania\", \"North America\"), localname (\"Puerto Rico\", \"Ukrajina\", \"Guyane fran\u00c3\u00a7aise\"), capital (2884, 2754, 3064), gnpold (573.0, 12460.0, 706.0), headofstate (\"Taufa'ahau Tupou IV\", \"Leonid Kut\u00c5\u00a1ma\", \"Muammar al-Qadhafi\"), region (\"Micronesia\", \"Eastern Asia\", \"Southern Africa\"), code (\"PYF\", \"HND\", \"LKA\"), name (\"Ukraine\", \"Estonia\", \"Laos\"), code2 (\"WS\", \"DM\", \"NE\") | country_surfacearea : surfacearea (14874.0, 270534.0, 1285216.0), code (\"TMP\", \"AZE\", \"SGP\") | countrylanguage : percentage (10.6, 0.1, 98.8), isofficial (\"T\", \"F\"), countrycode (\"TKM\", \"CYP\", \"VNM\"), language (\"Creole French\", \"Mboshi\", \"Pashto\")",
        "schema_without_content": "city : countrycode , name , district , population , id  | sqlite_sequence : name , seq  | country : lifeexpectancy , population , gnp , governmentform , indepyear , continent , localname , capital , gnpold , headofstate , region , code , name , code2  | country_surfacearea : surfacearea , code  | countrylanguage : percentage , isofficial , countrycode , language ",
        "chatgpt_out": [
            "select name, surfacearea from country_surfacearea order by surfacearea desc limit 5",
            "select name, surfacearea from country join country_surfacearea on country.code = country_surfacearea.code order by surfacearea desc limit 5",
            "select name, surfacearea from country_surfacearea where code in (select code from country order by surfacearea desc limit 5)",
            "select name, surfacearea from country where code in (select code from country_surfacearea order by surfacearea desc limit 5)",
            "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t2.surfacearea in (select distinct surfacearea from country_surfacearea order by surfacearea desc limit 5)"
        ],
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5",
        "query2": "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t2.surfacearea desc limit 5"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Return the names and surface areas of the 5 largest countries.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "and",
            "surface",
            "areas",
            "of",
            "the",
            "5",
            "largest",
            "countries",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 5,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5",
        "split_map": {
            "country": "name"
        },
        "schema_with_content": "city : district (\"Khuzestan\", \"Dac Lac\", \"Guangdong\"), id (2753, 986, 3848), population (206300, 102313, 181400), name (\"Pagadian\", \"Oyama\", \"Ramagundam\"), countrycode (\"GMB\", \"MLI\", \"HND\") | sqlite_sequence : name (\"city\"), seq (4079) | country : population (638000, 34000, 93000), indepyear (1978, 1811, 1350), gnpold (3384.0, 9585.0, 625626.0), continent (\"Asia\", \"Africa\", \"North America\"), localname (\"Virgin Islands of the United States\", \"Bolivia\", \"Tokelau\"), governmentform (\"Federation\", \"Territory of Australia\", \"Constitutional Monarchy\"), gnp (1043.0, 3501.0, 571.0), lifeexpectancy (77.9, 73.4, 53.6), capital (1780, 1792, 5), headofstate (\"Ronald Venetiaan\", \"Jacques Chirac\", \"Kim Dae-jung\"), region (\"British Islands\", \"Eastern Europe\", \"Nordic Countries\"), code (\"WSM\", \"MNG\", \"AUT\"), code2 (\"PF\", \"AL\", \"PW\"), surfacearea (13120000.0, 110861.0, 1240192.0) | country_name : code (\"PLW\", \"NIC\", \"ARM\"), name (\"Northern Mariana Islands\", \"Equatorial Guinea\", \"India\") | countrylanguage : isofficial (\"T\", \"F\"), percentage (51.3, 97.6, 1.1), countrycode (\"ECU\", \"THA\", \"CMR\"), language (\"Hungarian\", \"Rundi\", \"Tandjile\")",
        "schema_without_content": "city : district , id , population , name , countrycode  | sqlite_sequence : name , seq  | country : population , indepyear , gnpold , continent , localname , governmentform , gnp , lifeexpectancy , capital , headofstate , region , code , code2 , surfacearea  | country_name : code , name  | countrylanguage : isofficial , percentage , countrycode , language ",
        "chatgpt_out": [
            "select name, surfacearea from country order by surfacearea desc limit 5",
            "select surfacearea, name from country order by surfacearea desc limit 5",
            "select name, surfacearea from country_name join country on country_name.code = country.code order by surfacearea desc limit 5",
            "select surfacearea, name from country join country_name on country.code = country_name.code order by surfacearea desc limit 5",
            "select t1.name, t1.surfacearea from country as t1 join (select distinct(surfacearea) from country order by surfacearea desc limit 5) as t2 on t1.surfacearea = t2.surfacearea order by t1.surfacearea desc"
        ],
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5",
        "query2": "select t2.name, t1.surfacearea from country as t1 join country_name as t2 on t1.code = t2.code order by t1.surfacearea desc limit 5"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "Name",
            ",",
            "SurfaceArea",
            "FROM",
            "country",
            "ORDER",
            "BY",
            "SurfaceArea",
            "DESC",
            "LIMIT",
            "5"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "surfacearea",
            "from",
            "country",
            "order",
            "by",
            "surfacearea",
            "desc",
            "limit",
            "value"
        ],
        "question": "Return the names and surface areas of the 5 largest countries.",
        "question_toks": [
            "Return",
            "the",
            "names",
            "and",
            "surface",
            "areas",
            "of",
            "the",
            "5",
            "largest",
            "countries",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 5,
            "orderBy": [
                "desc",
                [
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ]
                ]
            ],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                9,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select name, surfacearea from country order by surfacearea desc limit 5",
        "split_map": {
            "country": "surfacearea"
        },
        "schema_with_content": "city : id (520, 1538, 3062), population (121578, 540600, 216950), countrycode (\"KEN\", \"GNQ\", \"NER\"), district (\"Potos\u00c3\u00ad\", \"Streymoyar\", \"Tete\"), name (\"Petropavlovsk-Kamt\u00c5\u00a1atski\", \"Des Moines\", \"Nizni Tagil\") | sqlite_sequence : seq (4079), name (\"city\") | country : region (\"Southern Africa\", \"Central Africa\", \"Antarctica\"), headofstate (\"Hugo B\u00c3\u00a1nzer Su\u00c3\u00a1rez\", \"Denis Sassou-Nguesso\", \"Fernando de la R\u00c3\u00baa\"), continent (\"South America\", \"Europe\", \"Africa\"), indepyear (1992, 1811, 1963), gnpold (97884.0, 119946.0, 88434.0), governmentform (\"Nonmetropolitan Territory of France\", \"Dependent Territory of the US\", \"Nonmetropolitan Territory of France\"), code2 (\"SZ\", \"GP\", \"AT\"), code (\"NFK\", \"NRU\", \"CMR\"), capital (3065, 2884, 3813), lifeexpectancy (69.1, 66.0, 53.1), name (\"Jordan\", \"United Arab Emirates\", \"Haiti\"), population (20000, 11669000, 600), gnp (174099.0, 141.0, 182.0), localname (\"Congo\", \"Falkland Islands\", \"K\u00c3\u00a2mpuch\u00c3\u00a9a\") | country_surfacearea : surfacearea (135.0, 694.0, 36125.0), code (\"UMI\", \"SWE\", \"SGP\") | countrylanguage : language (\"Tukulor\", \"Arawakan\", \"Songhai-zerma\"), isofficial (\"T\", \"F\"), countrycode (\"TCD\", \"GIN\", \"KGZ\"), percentage (5.1, 0.1, 85.0)",
        "schema_without_content": "city : id , population , countrycode , district , name  | sqlite_sequence : seq , name  | country : region , headofstate , continent , indepyear , gnpold , governmentform , code2 , code , capital , lifeexpectancy , name , population , gnp , localname  | country_surfacearea : surfacearea , code  | countrylanguage : language , isofficial , countrycode , percentage ",
        "chatgpt_out": [
            "select name, surfacearea from country_surfacearea order by surfacearea desc limit 5",
            "select name, surfacearea from country order by surfacearea desc limit 5",
            "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t2.surfacearea desc limit 5",
            "select t1.name, t1.surfacearea from (select * from country_surfacearea order by surfacearea desc limit 5) as t2 join country as t1 on t1.code = t2.code",
            "select t1.name, t2.surfacearea from (select * from country order by surfacearea desc limit 5) as t1 join country_surfacearea as t2 on t1.code = t2.code"
        ],
        "query1": "select name, surfacearea from country order by surfacearea desc limit 5",
        "query2": "select t1.name, t2.surfacearea from country as t1 join country_surfacearea as t2 on t1.code = t2.code order by t2.surfacearea desc limit 5"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "North",
            "America",
            "''",
            "AND",
            "SurfaceArea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            ">",
            "value"
        ],
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "population",
            "and",
            "average",
            "area",
            "of",
            "countries",
            "in",
            "the",
            "continent",
            "of",
            "North",
            "America",
            "whose",
            "area",
            "is",
            "bigger",
            "than",
            "3000\uff1f"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"North America\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : name (\"Norrk\u00c3\u00b6ping\", \"Ipoh\", \"Blumenau\"), id (2868, 580, 2125), population (143353, 132000, 141800), district (\"San Miguelito\", \"Hanti-Mansia\", \"Pyongan P\"), countrycode (\"NAM\", \"DOM\", \"MWI\") | sqlite_sequence : name (\"city\"), seq (4079) | country : surfacearea (342000.0, 549.0, 143100.0), headofstate (\"Glafkos Klerides\", \"Joaqu\u00c3\u00adm A. Chissano\", \"Rudolf Schuster\"), name (\"Malaysia\", \"Djibouti\", \"Bermuda\"), code2 (\"FJ\", \"GW\", \"GL\"), gnp (6366.0, 6313.0, 20594.0), continent (\"Asia\", \"Europe\", \"South America\"), governmentform (\"Independent Church State\", \"Territory of Australia\", \"Dependent Territory of Norway\"), lifeexpectancy (69.9, 50.2, 76.4), gnpold (58549.0, 8596.0, 420.0), localname (\"T\u00c3\u00bcrkiye\", \"Naoero/Nauru\", \"Taehan Min\u00e2\u0080\u0099guk (Namhan)\"), capital (2318, 3018, 608), indepyear (1921, 1957, 1965), code (\"BEL\", \"VCT\", \"AUS\"), region (\"Northern Africa\", \"Micronesia\", \"Polynesia\") | country_population : code (\"GAB\", \"BLR\", \"IND\"), population (9997600, 9481000, 10925000) | countrylanguage : language (\"Mandjia\", \"Maka\", \"Wolof\"), percentage (3.8, 17.1, 3.6), isofficial (\"T\", \"F\"), countrycode (\"GUM\", \"NZL\", \"GUM\")",
        "schema_without_content": "city : name , id , population , district , countrycode  | sqlite_sequence : name , seq  | country : surfacearea , headofstate , name , code2 , gnp , continent , governmentform , lifeexpectancy , gnpold , localname \", capital , indepyear , code , region  | country_population : code , population  | countrylanguage : language , percentage , isofficial , countrycode ",
        "chatgpt_out": [
            "select sum(t1.surfacearea) as total_area, avg(t1.population) as average_population from country as t1 where t1.continent = 'North America' and t1.surfacearea > 3000",
            "select avg(t1.population) as average_population, sum(t1.surfacearea) as total_area from country as t1 where t1.continent = 'North America' and t1.surfacearea > 3000",
            "select sum(surfacearea) as total_area, avg(population) as average_population from country where continent = 'North America' and surfacearea > 3000",
            "select avg(population) as average_population, sum(surfacearea) as total_area from country where continent = 'North America' and surfacearea > 3000",
            "select sum(t1.surfacearea) as total_area, avg(t1.population) as average_population from country as t1 where t1.continent like '%America' and t1.surfacearea > 3000"
        ],
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "query2": "select sum(t2.population), avg(t1.surfacearea) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"North America\" and t1.surfacearea > 3000"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "North",
            "America",
            "''",
            "AND",
            "SurfaceArea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            ">",
            "value"
        ],
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000\uff1f",
        "question_toks": [
            "What",
            "is",
            "the",
            "total",
            "population",
            "and",
            "average",
            "area",
            "of",
            "countries",
            "in",
            "the",
            "continent",
            "of",
            "North",
            "America",
            "whose",
            "area",
            "is",
            "bigger",
            "than",
            "3000\uff1f"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"North America\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "split_map": {
            "country": "surfacearea"
        },
        "schema_with_content": "city : population (140583, 185154, 123383), id (453, 3329, 668), countrycode (\"PNG\", \"KGZ\", \"CCK\"), district (\"Dili\", \"Kalimantan Timur\", \"Northern Mindanao\"), name (\"Vit\u00c3\u00b3ria da Conquista\", \"Carrefour\", \"Candelaria\") | sqlite_sequence : name (\"city\"), seq (4079) | country : gnpold (8596.0, 40562.0, 5940.0), name (\"Guyana\", \"Mongolia\", \"Lebanon\"), code2 (\"AZ\", \"MV\", \"BB\"), lifeexpectancy (69.3, 67.8, 75.1), gnp (4251.0, 11705.0, 9333.0), population (50, 71000, 1000), governmentform (\"Independent Church State\", \"Islamic Emirate\", \"Parliamentary Coprincipality\"), localname (\"Tunis/Tunisie\", \"Sesel/Seychelles\", \"Australia\"), code (\"STP\", \"LAO\", \"SJM\"), region (\"Southern and Central Asia\", \"Nordic Countries\", \"Micronesia\"), capital (766, 3537, 2695), continent (\"Africa\", \"Oceania\", \"Antarctica\"), indepyear (1861, 1816, 1971), headofstate (\"Margrethe II\", \"Yoweri Museveni\", \"Denis Sassou-Nguesso\") | country_surfacearea : surfacearea (49.0, 309500.0, 6257.0), code (\"BFA\", \"JOR\", \"PRI\") | countrylanguage : isofficial (\"T\", \"F\"), language (\"Ambo\", \"Asami\", \"Busansi\"), percentage (39.8, 8.7, 77.1), countrycode (\"MTQ\", \"PRY\", \"KEN\")",
        "schema_without_content": "city : population , id , countrycode , district , name  | sqlite_sequence : name , seq  | country : gnpold , name , code2 , lifeexpectancy , gnp , population , governmentform , localname , code , region , capital , continent , indepyear , headofstate  | country_surfacearea : surfacearea , code  | countrylanguage : isofficial , language , percentage , countrycode ",
        "chatgpt_out": [
            "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = 'North America' and t2.surfacearea > 3000",
            "select avg(t2.surfacearea), sum(t1.population) from country_surfacearea as t2 join country as t1 on t1.code = t2.code where t1.continent = 'North America' and t2.surfacearea > 3000",
            "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t2.surfacearea > 3000 and t1.continent = 'North America'",
            "select avg(t2.surfacearea), sum(t1.population) from country_surfacearea as t2 join country as t1 on t1.code = t2.code where t2.surfacearea > 3000 and t1.continent = 'North America'",
            "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t2.surfacearea > 3000 and t1.continent like '%North America%'"
        ],
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "query2": "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = \"North America\" and t2.surfacearea > 3000"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "North",
            "America",
            "''",
            "AND",
            "SurfaceArea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            ">",
            "value"
        ],
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "question_toks": [
            "Give",
            "the",
            "total",
            "population",
            "and",
            "average",
            "surface",
            "area",
            "corresponding",
            "to",
            "countries",
            "in",
            "Noth",
            "America",
            "that",
            "have",
            "a",
            "surface",
            "area",
            "greater",
            "than",
            "3000",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"North America\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "split_map": {
            "country": "population"
        },
        "schema_with_content": "city : name (\"Kolpino\", \"Rufisque\", \"Le-Cap-Ha\u00c3\u00aftien\"), district (\"Guangdong\", \"Los Lagos\", \"Pennsylvania\"), population (265000, 350043, 98186), countrycode (\"SOM\", \"CCK\", \"BIH\"), id (3594, 2712, 1909) | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1970, 1977, 1499), governmentform (\"Nonmetropolitan Territory of France\", \"Territorial Collectivity of France\", \"Constitutional Monarchy, Federation\"), surfacearea (93030.0, 78.0, 2344858.0), capital (201, 2401, 185), code (\"MKD\", \"MCO\", \"THA\"), localname (\"Pilipinas\", \"Amerika Samoa\", \"Espa\u00c3\u00b1a\"), gnpold (73132.0, 7474.0, 7474.0), headofstate (\"France-Albert Ren\u00c3\u00a9\", \"Islam Karimov\", \"Ali Abdallah Salih\"), code2 (\"WS\", \"ZW\", \"BI\"), region (\"British Islands\", \"Micronesia/Caribbean\", \"Southeast Asia\"), continent (\"Antarctica\", \"Antarctica\", \"South America\"), lifeexpectancy (48.8, 60.8, 76.8), gnp (5951.0, 96.0, 6232.0), name (\"Trinidad and Tobago\", \"Portugal\", \"Tuvalu\") | country_population : code (\"EST\", \"ECU\", \"SUR\"), population (4478500, 16125000, 817000) | countrylanguage : percentage (10.3, 39.4, 95.8), isofficial (\"T\", \"F\"), countrycode (\"LUX\", \"NOR\", \"TGO\"), language (\"Tagalog\", \"Mbete\", \"Tadzhik\")",
        "schema_without_content": "city : name , district , population , countrycode , id  | sqlite_sequence : seq , name  | country : indepyear , governmentform , surfacearea , capital , code , localname , gnpold , headofstate , code2 , region , continent , lifeexpectancy , gnp , name  | country_population : code , population  | countrylanguage : percentage , isofficial , countrycode , language ",
        "chatgpt_out": [
            "select sum(t1.population), avg(t1.surfacearea) from country as t1 where t1.continent = 'North America' and t1.surfacearea > 3000",
            "select sum(t1.population), avg(t1.surfacearea) from country t1 where t1.continent = 'North America' and t1.surfacearea > 3000",
            "select avg(surfacearea), sum(population) from country where continent = 'North America' and surfacearea > 3000",
            "select avg(t1.surfacearea), sum(t1.population) from country t1 where t1.continent = 'North America' and t1.surfacearea > 3000",
            "select sum(surfacearea) as total_surfacearea, avg(population) as average_population from country where continent = 'North America' and surfacearea > 3000"
        ],
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "query2": "select sum(t2.population), avg(t1.surfacearea) from country as t1 join country_population as t2 on t1.code = t2.code where t1.continent = \"North America\" and t1.surfacearea > 3000"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "sum",
            "(",
            "Population",
            ")",
            ",",
            "avg",
            "(",
            "SurfaceArea",
            ")",
            "FROM",
            "country",
            "WHERE",
            "Continent",
            "=",
            "``",
            "North",
            "America",
            "''",
            "AND",
            "SurfaceArea",
            ">",
            "3000"
        ],
        "query_toks_no_value": [
            "select",
            "sum",
            "(",
            "population",
            ")",
            ",",
            "avg",
            "(",
            "surfacearea",
            ")",
            "from",
            "country",
            "where",
            "continent",
            "=",
            "value",
            "and",
            "surfacearea",
            ">",
            "value"
        ],
        "question": "Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.",
        "question_toks": [
            "Give",
            "the",
            "total",
            "population",
            "and",
            "average",
            "surface",
            "area",
            "corresponding",
            "to",
            "countries",
            "in",
            "Noth",
            "America",
            "that",
            "have",
            "a",
            "surface",
            "area",
            "greater",
            "than",
            "3000",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        2
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        4,
                        [
                            0,
                            [
                                0,
                                14,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        5,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            10,
                            false
                        ],
                        null
                    ],
                    "\"North America\"",
                    null
                ],
                "and",
                [
                    false,
                    3,
                    [
                        0,
                        [
                            0,
                            12,
                            false
                        ],
                        null
                    ],
                    3000.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "country": "code"
        },
        "orig_query": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "split_map": {
            "country": "surfacearea"
        },
        "schema_with_content": "city : population (1016376, 275807, 149634), district (\"Kinshasa\", \"Manicaland\", \"Chollanam\"), name (\"Taldyqorghan\", \"Downey\", \"Kyongsan\"), id (1938, 3085, 3829), countrycode (\"MSR\", \"UGA\", \"JPN\") | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"EG\", \"LY\", \"NC\"), code (\"PRY\", \"MWI\", \"GHA\"), lifeexpectancy (53.2, 74.4, 73.2), indepyear (1907, 1958, 1922), gnp (105.0, 1687.0, 414972.0), gnpold (373.0, 3107.0, 45914.0), localname (\"United States\", \"France\", \"Tanzania\"), capital (2754, 3214, 1450), continent (\"North America\", \"Oceania\", \"Asia\"), region (\"Antarctica\", \"Central Africa\", \"Eastern Asia\"), headofstate (\"Bernard Dowiyogo\", \"Kocheril Raman Narayanan\", \"Zine al-Abidine Ben Ali\"), name (\"Bahamas\", \"Madagascar\", \"French Guiana\"), population (5605000, 50, 21000), governmentform (\"US Territory\", \"Socialistic Republic\", \"Dependent Territory of the US\") | country_surfacearea : surfacearea (2780400.0, 200.0, 274000.0), code (\"COM\", \"BDI\", \"GNQ\") | countrylanguage : language (\"Tagalog\", \"Lao-Soung\", \"Mbete\"), countrycode (\"NIU\", \"MLI\", \"HRV\"), percentage (7.9, 0.4, 94.1), isofficial (\"T\", \"F\")",
        "schema_without_content": "city : population , district , name , id , countrycode  | sqlite_sequence : seq , name  | country : code2 , code , lifeexpectancy , indepyear , gnp , gnpold , localname , capital , continent , region , headofstate , name , population , governmentform  | country_surfacearea : surfacearea , code  | countrylanguage : language , countrycode , percentage , isofficial ",
        "chatgpt_out": [
            "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = 'North America' and t2.surfacearea > 3000",
            "select avg(t2.surfacearea), sum(t1.population) from country_surfacearea as t2 join country as t1 on t2.code = t1.code where t1.continent = 'North America' and t2.surfacearea > 3000",
            "select total_population, avg_surface_area from (select sum(t1.population) as total_population, avg(t2.surfacearea) as avg_surface_area from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = 'North America' and t2.surfacearea > 3000) as t",
            "select avg_surface_area, total_population from (select avg(t2.surfacearea) as avg_surface_area, sum(t1.population) as total_population from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = 'North America' and t2.surfacearea > 3000) as t",
            "select sum(t1.population), avg(t2.surfacearea) from country_surfacearea as t2 join country as t1 on t2.code = t1.code where t1.continent = 'North America' and t2.surfacearea > 3000"
        ],
        "query1": "select sum(population), avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000",
        "query2": "select sum(t1.population), avg(t2.surfacearea) from country as t1 join country_surfacearea as t2 on t1.code = t2.code where t1.continent = \"North America\" and t2.surfacearea > 3000"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            ",",
            "CountryCode",
            ",",
            "max",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "CountryCode"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode"
        ],
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "question_toks": [
            "What",
            "is",
            "the",
            "language",
            "spoken",
            "by",
            "the",
            "largest",
            "percentage",
            "of",
            "people",
            "in",
            "each",
            "country",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "countrylanguage": "countrycode"
        },
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "split_map": {
            "countrylanguage": "language"
        },
        "schema_with_content": "city : population (95165, 700200, 109247), id (3459, 1918, 3385), countrycode (\"WSM\", \"PAN\", \"COD\"), district (\"Bourgogne\", \"Korhogo\", \"Kaohsiung\"), name (\"Mirzapur-cum-Vindhyachal\", \"Nadiad\", \"Corpus Christi\") | sqlite_sequence : seq (4079), name (\"city\") | country : code2 (\"TD\", \"PN\", \"SH\"), lifeexpectancy (79.6, 69.5, 70.7), localname (\"kaNgwane\", \"Dominica\", \"Qatar\"), headofstate (\"Taufa'ahau Tupou IV\", \"Petar Stojanov\", \"Adolf Ogi\"), population (6097000, 617000, 170115000), indepyear (843, 1901, 800), code (\"TUN\", \"ARM\", \"BWA\"), governmentform (\"Special Administrative Region of China\", \"Administrated by the UN\", \"Territorial Collectivity of France\"), capital (148, 2438, 3068), name (\"Lesotho\", \"Paraguay\", \"Christmas Island\"), continent (\"North America\", \"North America\", \"Europe\"), gnpold (31966.0, 993.0, 1767.0), gnp (36124.0, 2223.0, 6313.0), surfacearea (36188.0, 22696.0, 23200.0), region (\"North America\", \"Melanesia\", \"Southern and Central Asia\") | countrylanguage : percentage (97.9, 2.3, 72.1), isofficial (\"T\", \"F\"), countrycode (\"JOR\", \"NPL\", \"AGO\") | countrylanguage_language : language (\"Swazi\", \"Chuvash\", \"Joruba\"), countrycode (\"MTQ\", \"TGO\", \"TUN\")",
        "schema_without_content": "city : population , id , countrycode , district , name  | sqlite_sequence : seq , name  | country : code2 , lifeexpectancy , localname , headofstate , population , indepyear , code , governmentform , capital , name , continent , gnpold , gnp , surfacearea , region  | countrylanguage : percentage , isofficial , countrycode  | countrylanguage_language : language , countrycode ",
        "chatgpt_out": [
            "select t3.name, t2.language from countrylanguage as t1 join countrylanguage_language as t2 on t1.language = t2.language join country as t3 on t1.countrycode = t3.code where t1.isofficial = 'T' and t1.percentage = (select max(percentage) from countrylanguage where countrycode = t1.countrycode)",
            "select t3.name, t2.language from countrylanguage as t1 join countrylanguage_language as t2 on t1.language = t2.language join country as t3 on t1.countrycode = t3.code where t1.isofficial = 'T' group by t3.name having percentage = max(percentage)",
            "select t3.name, t2.language from countrylanguage as t1 join countrylanguage_language as t2 on t1.language = t2.language join country as t3 on t1.countrycode = t3.code where t1.isofficial = 'T' and percentage = (select max(percentage) from countrylanguage where countrycode = t1.countrycode) group by t3.name",
            "select t3.name, t2.language from countrylanguage as t1 join countrylanguage_language as t2 on t1.language = t2.language join country as t3 on t1.countrycode = t3.code where t1.isofficial = 'T' and percentage = (select max(percentage) from countrylanguage where countrycode = t1.countrycode) order by t3.name",
            "select t3.name, t2.language from countrylanguage as t1 join countrylanguage_language as t2 on t1.language = t2.language join country as t3 on t1.countrycode = t3.code where t1.isofficial = 'T' and percentage = (select max(percentage) from countrylanguage where countrycode = t1.countrycode)"
        ],
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "query2": "select t2.language, t1.countrycode, max(t1.percentage) from countrylanguage as t1 join countrylanguage_language as t2 on t1.countrycode = t2.countrycode group by t1.countrycode"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            ",",
            "CountryCode",
            ",",
            "max",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "CountryCode"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode"
        ],
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "question_toks": [
            "What",
            "is",
            "the",
            "language",
            "spoken",
            "by",
            "the",
            "largest",
            "percentage",
            "of",
            "people",
            "in",
            "each",
            "country",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "countrylanguage": "countrycode"
        },
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "split_map": {
            "countrylanguage": "percentage"
        },
        "schema_with_content": "city : district (\"Qashqadaryo\", \"Niedersachsen\", \"Hlavn\u00c3\u00ad mesto Praha\"), name (\"Walbrzych\", \"Matsudo\", \"Rajapalaiyam\"), population (118805, 441242, 16243), id (217, 1593, 591), countrycode (\"MNG\", \"ZAF\", \"GUM\") | sqlite_sequence : name (\"city\"), seq (4079) | country : surfacearea (338145.0, 131626.0, 261.0), code2 (\"QA\", \"SO\", \"CC\"), population (2000, 22256000, 34000), lifeexpectancy (70.3, 72.3, 57.4), region (\"Middle East\", \"Western Europe\", \"South America\"), continent (\"South America\", \"Oceania\", \"South America\"), headofstate (\"Abdullah II\", \"Vernon Shaw\", \"Jos\u00c3\u00a9 Eduardo dos Santos\"), localname (\"The Cook Islands\", \"Micronesia\", \"Jugoslavija\"), indepyear (1861, None, 1901), gnpold (160151.0, 2383.0, 7051.0), name (\"Paraguay\", \"Greece\", \"Gibraltar\"), gnp (69213.0, 116416.0, 249704.0), governmentform (\"Dependent Territory of the UK\", \"Monarchy (Sultanate)\", \"Occupied by Marocco\"), code (\"ZAF\", \"REU\", \"HRV\"), capital (3339, 3212, 2508) | countrylanguage : isofficial (\"T\", \"F\"), language (\"Sara\", \"Bulgariana\", \"Chichewa\"), countrycode (\"MAC\", \"UKR\", \"BGD\") | countrylanguage_percentage : percentage (49.4, 4.0, 21.2), countrycode (\"LIE\", \"CYM\", \"SOM\")",
        "schema_without_content": "city : district , name , population , id , countrycode  | sqlite_sequence : name , seq  | country : surfacearea , code2 , population , lifeexpectancy , region , continent , headofstate , localname , indepyear , gnpold , name , gnp , governmentform \", \"Occupied by Marocco\", code , capital  | countrylanguage : isofficial , language , countrycode  | countrylanguage_percentage : percentage , countrycode ",
        "chatgpt_out": [
            "select t1.name, t2.language from country as t1 join countrylanguage_percentage as t3 on t1.code = t3.countrycode join countrylanguage as t2 on t1.code = t2.countrycode where t3.percentage = (select max(percentage) from countrylanguage_percentage where countrycode = t1.code)",
            "select t1.name, t2.language from country as t1 join countrylanguage_percentage as t3 on t1.code = t3.countrycode join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name having t3.percentage = max(t3.percentage)",
            "select t1.name, t2.language from country as t1 join (select countrycode, language from countrylanguage where isofficial = 'T') as t2 on t1.code = t2.countrycode join (select countrycode, max(percentage) as percentage from countrylanguage_percentage group by countrycode) as t3 on t1.code = t3.countrycode and t2.language = (select language from countrylanguage where isofficial = 'T' and countrycode = t1.code) and t3.percentage = (select max(percentage) from countrylanguage_percentage where countrycode = t1.code)",
            "select t1.name, t2.language from country as t1 join countrylanguage_percentage as t3 on t1.code = t3.countrycode join countrylanguage as t2 on t1.code = t2.countrycode where t3.percentage >= all (select percentage from countrylanguage_percentage where countrycode = t1.code) group by t1.name",
            "select t1.name, t2.language from country as t1 join (select countrycode, language from countrylanguage where isofficial = 'T') as t2 on t1.code = t2.countrycode join (select countrycode, max(percentage) as percentage from countrylanguage_percentage group by countrycode) as t3 on t1.code = t3.countrycode and t2.language = (select language from countrylanguage where isofficial = 'T' and countrycode = t1.code) and t3.percentage >= all (select percentage from countrylanguage_percentage where countrycode = t1.code) group by t1.name"
        ],
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "query2": "select t1.language, t1.countrycode, max(t2.percentage) from countrylanguage as t1 join countrylanguage_percentage as t2 on t1.countrycode = t2.countrycode group by t1.countrycode"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            ",",
            "CountryCode",
            ",",
            "max",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "CountryCode"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode"
        ],
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "question_toks": [
            "What",
            "are",
            "the",
            "country",
            "codes",
            "of",
            "the",
            "different",
            "countries",
            ",",
            "and",
            "what",
            "are",
            "the",
            "languages",
            "spoken",
            "by",
            "the",
            "greatest",
            "percentage",
            "of",
            "people",
            "for",
            "each",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "countrylanguage": "countrycode"
        },
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "split_map": {
            "countrylanguage": "language"
        },
        "schema_with_content": "city : countrycode (\"VAT\", \"ITA\", \"GLP\"), name (\"Madison\", \"Chingola\", \"Montgomery\"), district (\"Anambra & Enugu & Eb\", \"Latakia\", \"Esp\u00c3\u00adrito Santo\"), id (2616, 2922, 779), population (1317000, 174933, 800110) | sqlite_sequence : name (\"city\"), seq (4079) | country : population (27000, 1726000, 16223000), code (\"ISL\", \"JAM\", \"CUB\"), headofstate (\"Bernard Dowiyogo\", \"Luis \u00c3\u0081ngel Gonz\u00c3\u00a1lez Macchi\", \"Ronald Venetiaan\"), code2 (\"BJ\", \"CK\", \"NP\"), indepyear (1918, 1960, 1910), surfacearea (30518.0, 1221037.0, 16.0), gnp (2223.0, 3563.0, 0.0), name (\"Tonga\", \"Panama\", \"Suriname\"), capital (3538, 3337, 549), localname (\"Martinique\", \"Samoa\", \"Niger\"), gnpold (169264.0, 392911.0, 7051.0), governmentform (\"Occupied by Marocco\", \"Socialistic Republic\", \"Commonwealth of the US\"), continent (\"South America\", \"Oceania\", \"North America\"), lifeexpectancy (69.7, 80.7, 62.9), region (\"Nordic Countries\", \"Southeast Asia\", \"Eastern Africa\") | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"PER\", \"PER\", \"ITA\"), percentage (13.0, 92.1, 75.5) | countrylanguage_language : language (\"Hakka\", \"[South]Mande\", \"Naudemba\"), countrycode (\"USA\", \"VAT\", \"GIB\")",
        "schema_without_content": "city : countrycode , name , district , id , population  | sqlite_sequence : name , seq  | country : population , code , headofstate , code2 , indepyear , surfacearea , gnp , name , capital , localname , gnpold , governmentform , continent , lifeexpectancy , region  | countrylanguage : isofficial , countrycode , percentage  | countrylanguage_language : language , countrycode ",
        "chatgpt_out": [
            "select t1.code, t3.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join countrylanguage_language as t3 on t2.countrycode = t3.countrycode and t2.percentage = (select max(percentage) from countrylanguage where countrycode = t2.countrycode) group by t1.code",
            "select t1.code, t3.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join countrylanguage_language as t3 on t2.countrycode = t3.countrycode and t2.percentage = (select max(percentage) from countrylanguage where countrycode = t2.countrycode) order by t1.code",
            "select t1.code, t3.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join (select countrycode, language, max(percentage) as percentage from countrylanguage group by countrycode) as t3 on t2.countrycode = t3.countrycode and t2.percentage = t3.percentage",
            "select t1.code, t3.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode join (select countrycode, language, max(percentage) as percentage from countrylanguage group by countrycode) as t3 on t2.countrycode = t3.countrycode and t2.percentage = t3.percentage order by t1.code",
            "select t1.code, t4.language from country as t1 join (select countrycode, language, percentage from countrylanguage except select countrycode, language, percentage from countrylanguage as t2 where exists (select 1 from countrylanguage where countrycode = t2.countrycode and percentage > t2.percentage)) as t4 on t1.code = t4.countrycode order by t1.code"
        ],
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "query2": "select t2.language, t1.countrycode, max(t1.percentage) from countrylanguage as t1 join countrylanguage_language as t2 on t1.countrycode = t2.countrycode group by t1.countrycode"
    },
    {
        "db_id": "world_1",
        "query_toks": [
            "SELECT",
            "LANGUAGE",
            ",",
            "CountryCode",
            ",",
            "max",
            "(",
            "Percentage",
            ")",
            "FROM",
            "countrylanguage",
            "GROUP",
            "BY",
            "CountryCode"
        ],
        "query_toks_no_value": [
            "select",
            "language",
            ",",
            "countrycode",
            ",",
            "max",
            "(",
            "percentage",
            ")",
            "from",
            "countrylanguage",
            "group",
            "by",
            "countrycode"
        ],
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "question_toks": [
            "What",
            "are",
            "the",
            "country",
            "codes",
            "of",
            "the",
            "different",
            "countries",
            ",",
            "and",
            "what",
            "are",
            "the",
            "languages",
            "spoken",
            "by",
            "the",
            "greatest",
            "percentage",
            "of",
            "people",
            "for",
            "each",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        3
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    23,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "countrylanguage": "countrycode"
        },
        "orig_query": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "split_map": {
            "countrylanguage": "percentage"
        },
        "schema_with_content": "city : id (383, 2963, 2708), name (\"Gujrat\", \"Uhta\", \"Nashville-Davidson\"), district (\"Guizhou\", \"Bahr al-Jabal\", \"Yanggang\"), countrycode (\"PAN\", \"PHL\", \"GBR\"), population (115532, 303447, 107006) | sqlite_sequence : seq (4079), name (\"city\") | country : indepyear (1806, 1922, 1923), localname (\"C\u00c3\u00b4te d\u00e2\u0080\u0099Ivoire\", \"Burundi/Uburundi\", \"Mongol Uls\"), gnp (1990.0, 8005.0, 8510700.0), code2 (\"PR\", \"BA\", \"MR\"), continent (\"Asia\", \"North America\", \"North America\"), surfacearea (587041.0, 587041.0, 69700.0), capital (2890, 2463, 2438), headofstate (\"Fernando de la R\u00c3\u00baa\", \"Zine al-Abidine Ben Ali\", \"Moshe Katzav\"), code (\"UGA\", \"PRY\", \"CCK\"), governmentform (\"Co-administrated\", \"People'sRepublic\", \"Federation\"), lifeexpectancy (71.4, 77.4, 78.0), population (1226000, 617000, 75967000), region (\"Melanesia\", \"Southern and Central Asia\", \"South America\"), name (\"Falkland Islands\", \"Saint Kitts and Nevis\", \"Malawi\"), gnpold (5729.0, 573.0, 625626.0) | countrylanguage : isofficial (\"T\", \"F\"), countrycode (\"PLW\", \"CIV\", \"RUS\"), language (\"Chin\", \"Chin\", \"Khmer\") | countrylanguage_percentage : percentage (78.1, 12.1, 26.9), countrycode (\"LSO\", \"ANT\", \"TCA\")",
        "schema_without_content": "city : id , name , district , countrycode , population  | sqlite_sequence : seq , name  | country : indepyear , localname , gnp , code2 , continent , surfacearea , capital , headofstate , code , governmentform , lifeexpectancy , population , region , name , gnpold  | countrylanguage : isofficial , countrycode , language  | countrylanguage_percentage : percentage , countrycode ",
        "chatgpt_out": [
            "select t1.code, t3.language from country as t1 join countrylanguage_percentage as t2 on t1.code = t2.countrycode join countrylanguage as t3 on t1.code = t3.countrycode where t2.percentage = (select max(percentage) from countrylanguage_percentage where countrycode = t1.code)",
            "select t1.code, t3.language from country as t1 join countrylanguage_percentage as t2 on t1.code = t2.countrycode join countrylanguage as t3 on t1.code = t3.countrycode where t2.percentage = (select max(percentage) from countrylanguage_percentage where countrycode = t1.code) group by t1.code",
            "select t1.code, t3.language from country as t1, countrylanguage_percentage as t2, countrylanguage as t3 where t1.code = t2.countrycode and t1.code = t3.countrycode and t2.percentage = (select max(percentage) from countrylanguage_percentage where countrycode = t1.code)",
            "select t1.code, t3.language from country as t1, countrylanguage_percentage as t2, countrylanguage as t3 where t1.code = t2.countrycode and t1.code = t3.countrycode and t2.percentage = (select max(percentage) from countrylanguage_percentage where countrycode = t1.code) group by t1.code",
            "select t1.code, t3.language from country as t1 inner join countrylanguage_percentage as t2 on t1.code = t2.countrycode inner join countrylanguage as t3 on t1.code = t3.countrycode where t2.percentage = (select max(percentage) from countrylanguage_percentage where countrycode = t1.code)"
        ],
        "query1": "select language, countrycode, max(percentage) from countrylanguage group by countrycode",
        "query2": "select t1.language, t1.countrycode, max(t2.percentage) from countrylanguage as t1 join countrylanguage_percentage as t2 on t1.countrycode = t2.countrycode group by t1.countrycode"
    },
    {
        "db_id": "network_1",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Show the names and grades of each high schooler.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "and",
            "grades",
            "of",
            "each",
            "high",
            "schooler",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "highschooler": "id"
        },
        "orig_query": "select name, grade from highschooler",
        "split_map": {
            "highschooler": "name"
        },
        "schema_with_content": "highschooler : grade (10, 12, 12), id (1709, 1689, 1641) | highschooler_name : name (\"Austin\", \"Tiffany\", \"Alexis\"), id (1247, 1468, 1101) | friend : friend_id (1782, 1709, 1468), student_id (1247, 1510, 1934) | likes : liked_id (1709, 1689, 1689), student_id (1641, 1782, 1025)",
        "schema_without_content": "highschooler : grade , id  | highschooler_name : name , id  | friend : friend_id , student_id  | likes : liked_id , student_id ",
        "chatgpt_out": [
            "select name, grade from highschooler_name join highschooler on highschooler_name.id = highschooler.id",
            "select grade, name from highschooler join highschooler_name on highschooler.id = highschooler_name.id",
            "select h.name, h.grade from highschooler as h",
            "select grade, name from highschooler",
            "select highschooler_name.name, highschooler.grade from highschooler join highschooler_name on highschooler.id = highschooler_name.id"
        ],
        "query1": "select name, grade from highschooler",
        "query2": "select t2.name, t1.grade from highschooler as t1 join highschooler_name as t2 on t1.id = t2.id"
    },
    {
        "db_id": "network_1",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "Show the names and grades of each high schooler.",
        "question_toks": [
            "Show",
            "the",
            "names",
            "and",
            "grades",
            "of",
            "each",
            "high",
            "schooler",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "highschooler": "id"
        },
        "orig_query": "select name, grade from highschooler",
        "split_map": {
            "highschooler": "grade"
        },
        "schema_with_content": "highschooler : name (\"Brittany\", \"Kris\", \"Austin\"), id (1911, 1101, 1934) | highschooler_grade : id (1316, 1501, 1689), grade (9, 10, 11) | friend : student_id (1381, 1689, 1501), friend_id (1661, 1247, 1101) | likes : student_id (1934, 1934, 1641), liked_id (1709, 1709, 1101)",
        "schema_without_content": "highschooler : name , id  | highschooler_grade : id , grade  | friend : student_id , friend_id  | likes : student_id , liked_id ",
        "chatgpt_out": [
            "select name, id from highschooler",
            "select id, name from highschooler",
            "select name, grade from highschooler join highschooler_grade on highschooler.id = highschooler_grade.id",
            "select grade, name from highschooler join highschooler_grade on highschooler.id = highschooler_grade.id",
            "select t1.name, t2.grade from highschooler as t1 join highschooler_grade as t2 on t1.id = t2.id"
        ],
        "query1": "select name, grade from highschooler",
        "query2": "select t1.name, t2.grade from highschooler as t1 join highschooler_grade as t2 on t1.id = t2.id"
    },
    {
        "db_id": "network_1",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "What are the names and grades for each high schooler?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "grades",
            "for",
            "each",
            "high",
            "schooler",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "highschooler": "id"
        },
        "orig_query": "select name, grade from highschooler",
        "split_map": {
            "highschooler": "name"
        },
        "schema_with_content": "highschooler : grade (9, 9, 10), id (1782, 1934, 1304) | highschooler_name : id (1510, 1381, 1316), name (\"Jordan\", \"Haley\", \"Tiffany\") | friend : friend_id (1025, 1381, 1316), student_id (1934, 1468, 1101) | likes : student_id (1641, 1934, 1641), liked_id (1304, 1709, 1689)",
        "schema_without_content": "highschooler : grade , id  | highschooler_name : id , name  | friend : friend_id , student_id  | likes : student_id , liked_id ",
        "chatgpt_out": [
            "select name, grade from highschooler_name join highschooler on highschooler_name.id = highschooler.id",
            "select grade, name from highschooler_name join highschooler on highschooler_name.id = highschooler.id",
            "select h.name, h.grade from (select * from highschooler_name) as h join highschooler on h.id = highschooler.id",
            "select h.grade, h.name from (select * from highschooler_name) as h join highschooler on h.id = highschooler.id",
            "select name, grade from highschooler natural join highschooler_name"
        ],
        "query1": "select name, grade from highschooler",
        "query2": "select t2.name, t1.grade from highschooler as t1 join highschooler_name as t2 on t1.id = t2.id"
    },
    {
        "db_id": "network_1",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "grade",
            "FROM",
            "Highschooler"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "grade",
            "from",
            "highschooler"
        ],
        "question": "What are the names and grades for each high schooler?",
        "question_toks": [
            "What",
            "are",
            "the",
            "names",
            "and",
            "grades",
            "for",
            "each",
            "high",
            "schooler",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                2,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "highschooler": "id"
        },
        "orig_query": "select name, grade from highschooler",
        "split_map": {
            "highschooler": "grade"
        },
        "schema_with_content": "highschooler : name (\"Kris\", \"Logan\", \"Tiffany\"), id (1101, 1641, 1709) | highschooler_grade : id (1641, 1101, 1709), grade (10, 12, 9) | friend : student_id (1101, 1689, 1709), friend_id (1247, 1247, 1661) | likes : student_id (1316, 1782, 1316), liked_id (1468, 1304, 1689)",
        "schema_without_content": "highschooler : name , id  | highschooler_grade : id , grade  | friend : student_id , friend_id  | likes : student_id , liked_id ",
        "chatgpt_out": [
            "select name, grade from highschooler join highschooler_grade on highschooler.id = highschooler_grade.id",
            "select grade, name from highschooler join highschooler_grade on highschooler.id = highschooler_grade.id",
            "select name, grade from highschooler_grade join highschooler on highschooler_grade.id = highschooler.id",
            "select grade, name from highschooler_grade join highschooler on highschooler_grade.id = highschooler.id",
            "select t1.name, t2.grade from highschooler as t1 join highschooler_grade as t2 on t1.id = t2.id"
        ],
        "query1": "select name, grade from highschooler",
        "query2": "select t1.name, t2.grade from highschooler as t1 join highschooler_grade as t2 on t1.id = t2.id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "date_arrived",
            ",",
            "date_departed",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "What are the arriving date and the departing date of all the dogs?",
        "question_toks": [
            "What",
            "are",
            "the",
            "arriving",
            "date",
            "and",
            "the",
            "departing",
            "date",
            "of",
            "all",
            "the",
            "dogs",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select date_arrived, date_departed from dogs",
        "split_map": {
            "dogs": "date_departed"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : cell_number (\"1-739-421-2225x38148\", \"633.455.3045x85484\", \"+00(2)4323592985\"), first_name (\"Orlando\", \"Cindy\", \"Johann\"), email_address (\"christy49@example.org\", \"christy49@example.org\", \"ybergstrom@example.com\"), city (\"South Afton\", \"New Margaretteborough\", \"South Afton\"), last_name (\"Feil\", \"Fisher\", \"Ondricka\"), zip_code (\"87304\", \"45244\", \"93165\"), owner_id (11, 13, 9), state (\"Indiana\", \"Arkansas\", \"Wisconsin\"), home_phone (\"1-346-655-5842x768\", \"893-862-5295x61709\", \"01802479758\"), street (\"0647 Hintz Village Apt. 024\", \"1858 Jan Park\", \"1858 Jan Park\") | dogs : date_adopted (\"2018-02-25 23:45:30\", \"2018-03-23 16:02:04\", \"2018-03-14 08:05:18\"), owner_id (3, 2, 14), name (\"Houston\", \"George\", \"Kacey\"), weight (\"9.8\", \"7.57\", \"5.16\"), date_of_birth (\"2017-09-19 05:39:09\", \"2018-03-17 04:05:12\", \"2017-09-19 05:39:09\"), abandoned_yn (\"1\", \"0\"), dog_id (5, 13, 12), gender (\"1\", \"0\"), date_arrived (\"2017-12-22 05:02:02\", \"2017-04-15 09:25:31\", \"2017-10-25 00:55:34\"), age (\"2\", \"4\", \"6\"), size_code (\"LGE\", \"MED\", \"SML\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | dogs_date_departed : date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 04:50:22\", \"2018-03-25 06:29:10\"), dog_id (7, 9, 3) | professionals : cell_number (\"889-940-2676\", \"00230569697\", \"1-185-137-1945x409\"), professional_id (9, 4, 13), city (\"Raynorfort\", \"North Adelberttown\", \"East Ila\"), state (\"Connecticut\", \"Montana\", \"Mississippi\"), email_address (\"lourdes.lowe@example.net\", \"west.eula@example.net\", \"delphine29@example.com\"), first_name (\"Domenica\", \"Monte\", \"Sigurd\"), last_name (\"Considine\", \"Jacobs\", \"Watsica\"), role_code (\"Employee\", \"Veterenarian\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), zip_code (\"33020\", \"06646\", \"02281\"), home_phone (\"1-138-287-3775\", \"022.529.0550x1319\", \"325-155-0801x7005\") | treatments : cost_of_treatment (681, 668, 139), treatment_id (2, 5, 4), professional_id (4, 8, 4), dog_id (4, 10, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-16 10:27:36\", \"2018-03-16 10:27:36\", \"2018-03-01 04:14:46\")",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : cell_number 4323592985\", first_name , email_address , city , last_name , zip_code , owner_id , state , home_phone , street  | dogs : date_adopted , owner_id , name , weight , date_of_birth , abandoned_yn , dog_id , gender , date_arrived , age , size_code , breed_code  | dogs_date_departed : date_departed , dog_id  | professionals : cell_number , professional_id , city , state , email_address , first_name , last_name , role_code , street , zip_code , home_phone  | treatments : cost_of_treatment , treatment_id , professional_id , dog_id , treatment_type_code , date_of_treatment ",
        "chatgpt_out": [
            "select date_arrived, date_departed from dogs join dogs_date_departed on dogs.dog_id = dogs_date_departed.dog_id",
            "select date_departed, date_arrived from dogs_date_departed join dogs on dogs.dog_id = dogs_date_departed.dog_id",
            "select dogs.date_arrived, dogs_date_departed.date_departed from dogs join dogs_date_departed on dogs.dog_id = dogs_date_departed.dog_id",
            "select dogs_date_departed.date_departed, dogs.date_arrived from dogs_date_departed join dogs on dogs.dog_id = dogs_date_departed.dog_id",
            "select date_arrived, date_departed from dogs_date_departed, dogs where dogs.dog_id = dogs_date_departed.dog_id"
        ],
        "query1": "select date_arrived, date_departed from dogs",
        "query2": "select t1.date_arrived, t2.date_departed from dogs as t1 join dogs_date_departed as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "date_arrived",
            ",",
            "date_departed",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "What are the arriving date and the departing date of all the dogs?",
        "question_toks": [
            "What",
            "are",
            "the",
            "arriving",
            "date",
            "and",
            "the",
            "departing",
            "date",
            "of",
            "all",
            "the",
            "dogs",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select date_arrived, date_departed from dogs",
        "split_map": {
            "dogs": "date_arrived"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : home_phone (\"01802479758\", \"066.264.7885\", \"(058)997-7627\"), first_name (\"Adelle\", \"Emelie\", \"Jaclyn\"), owner_id (15, 13, 6), email_address (\"lynn81@example.org\", \"zboncak.madonna@example.net\", \"margaretta.runte@example.net\"), city (\"West Leonard\", \"Lake Tia\", \"West Leonard\"), cell_number (\"+00(2)4323592985\", \"633.455.3045x85484\", \"481-483-9083x37986\"), street (\"692 Jaskolski Forges\", \"15828 Spencer Extensions\", \"9212 Rosenbaum Lights\"), zip_code (\"02647\", \"22731\", \"92406\"), last_name (\"Rippin\", \"Rippin\", \"Prohaska\"), state (\"Washington\", \"NorthDakota\", \"Florida\") | dogs : gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"3.52\", \"8.95\", \"7.57\"), name (\"Evangeline\", \"Lyric\", \"Troy\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-25 08:12:51\", \"2018-03-08 15:03:00\"), date_departed (\"2018-03-25 13:07:04\", \"2018-03-25 05:07:47\", \"2018-03-25 02:11:32\"), owner_id (13, 3, 8), date_of_birth (\"2012-01-27 05:11:53\", \"2012-01-27 05:11:53\", \"2012-07-11 17:15:10\"), age (\"8\", \"1\", \"6\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (4, 2, 2) | dogs_date_arrived : date_arrived (\"2017-10-16 20:06:21\", \"2017-10-24 04:45:13\", \"2017-10-24 04:45:13\"), dog_id (4, 13, 9) | professionals : state (\"NorthCarolina\", \"Indiana\", \"Indiana\"), first_name (\"Winfield\", \"Winfield\", \"Monte\"), home_phone (\"1-138-287-3775\", \"1-609-566-2752x25197\", \"891.475.2256\"), zip_code (\"67980\", \"77129\", \"80775\"), email_address (\"lucile.shanahan@example.org\", \"mekhi.little@example.org\", \"goyette.roosevelt@example.net\"), street (\"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), role_code (\"Employee\", \"Veterenarian\"), professional_id (8, 3, 13), cell_number (\"962-983-8109x3509\", \"(369)908-7311x065\", \"461-801-2600\"), last_name (\"Kshlerin\", \"Considine\", \"Jacobs\"), city (\"Raynorfort\", \"Jaceton\", \"Kirastad\") | treatments : professional_id (14, 8, 8), treatment_id (6, 8, 14), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-02-26 09:08:53\", \"2018-03-11 04:23:15\"), dog_id (1, 12, 14), cost_of_treatment (656, 313, 656), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : home_phone 997-7627\", first_name , owner_id , email_address , city , cell_number 4323592985\", \"633.455.3045x85484\", \"481-483-9083x37986\", street , zip_code , last_name , state  | dogs : gender , size_code , weight , name , date_adopted , date_departed , owner_id , date_of_birth , age , abandoned_yn , breed_code , dog_id  | dogs_date_arrived : date_arrived , dog_id  | professionals : state , first_name , home_phone , zip_code , email_address , street , role_code , professional_id , cell_number 908-7311x065\", \"461-801-2600\", last_name , city  | treatments : professional_id , treatment_id , date_of_treatment , dog_id , cost_of_treatment , treatment_type_code ",
        "chatgpt_out": [
            "select date_arrived, date_departed from dogs_date_arrived",
            "select date_departed, date_arrived from dogs_date_arrived",
            "select date_arrived, date_departed from dogs",
            "select date_departed, date_arrived from dogs",
            "select t1.date_arrived, t2.date_departed from dogs_date_arrived as t1 join dogs as t2 on t1.dog_id = t2.dog_id"
        ],
        "query1": "select date_arrived, date_departed from dogs",
        "query2": "select t2.date_arrived, t1.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "date_arrived",
            ",",
            "date_departed",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "List the arrival date and the departure date for all the dogs.",
        "question_toks": [
            "List",
            "the",
            "arrival",
            "date",
            "and",
            "the",
            "departure",
            "date",
            "for",
            "all",
            "the",
            "dogs",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select date_arrived, date_departed from dogs",
        "split_map": {
            "dogs": "date_departed"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : last_name (\"Mertz\", \"Nicolas\", \"Price\"), state (\"Vermont\", \"Arizona\", \"Washington\"), cell_number (\"(257)399-3116\", \"739-136-7202\", \"341.667.8085\"), first_name (\"Emelie\", \"Melisa\", \"Emelie\"), zip_code (\"92406\", \"25609\", \"00589\"), home_phone (\"(094)747-5094x8134\", \"(544)034-1670\", \"363.948.1090\"), street (\"89011 Kertzmann Spring Suite 642\", \"60352 Kayleigh Crossing Suite 700\", \"2417 Keara Stravenue Apt. 146\"), owner_id (6, 5, 5), city (\"South Daisyfurt\", \"East Hillardberg\", \"West Leonard\"), email_address (\"marks.gail@example.org\", \"ybergstrom@example.com\", \"ybergstrom@example.com\") | dogs : name (\"Bessie\", \"Mavis\", \"Houston\"), age (\"9\", \"3\", \"6\"), date_arrived (\"2017-10-24 04:45:13\", \"2017-12-29 06:08:26\", \"2017-10-24 04:45:13\"), date_adopted (\"2018-02-25 23:45:30\", \"2018-03-08 15:03:00\", \"2018-03-06 16:32:11\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"4.01\", \"8.96\", \"9.48\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (10, 6, 12), date_of_birth (\"2012-01-27 05:11:53\", \"2012-01-27 05:11:53\", \"2012-01-27 05:11:53\"), gender (\"1\", \"0\"), dog_id (10, 15, 14) | dogs_date_departed : date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 02:47:40\", \"2018-03-25 06:46:07\"), dog_id (8, 12, 12) | professionals : zip_code (\"43129\", \"43129\", \"43129\"), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), home_phone (\"+43(5)1132733868\", \"312.216.3352\", \"+43(5)1132733868\"), email_address (\"mekhi.little@example.org\", \"schneider.kathryne@example.org\", \"uboehm@example.org\"), city (\"East Ila\", \"Baileymouth\", \"McLaughlinfort\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Taryn\", \"Sigurd\", \"Ericka\"), professional_id (13, 11, 1), state (\"Mississippi\", \"Montana\", \"Hawaii\"), last_name (\"Jacobs\", \"Kshlerin\", \"Ullrich\"), cell_number (\"(369)908-7311x065\", \"609-405-2990\", \"1-185-137-1945x409\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (12, 10, 7), treatment_id (3, 8, 11), cost_of_treatment (266, 349, 147), professional_id (9, 7, 5), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-13 12:22:58\", \"2018-03-24 22:25:58\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : last_name , state , cell_number 399-3116\", \"739-136-7202\", \"341.667.8085\", first_name , zip_code , home_phone 747-5094x8134\", \"034-1670\", \"363.948.1090\", street , owner_id , city , email_address  | dogs : name , age , date_arrived , date_adopted , size_code , weight , abandoned_yn , breed_code , owner_id , date_of_birth , gender , dog_id  | dogs_date_departed : date_departed , dog_id  | professionals : zip_code , street , home_phone 1132733868\", \"312.216.3352\", \"+431132733868\", email_address , city , role_code , first_name , professional_id , state , last_name , cell_number 908-7311x065\", \"609-405-2990\", \"1-185-137-1945x409\" | treatments : treatment_type_code , dog_id , treatment_id , cost_of_treatment , professional_id , date_of_treatment ",
        "chatgpt_out": [
            "select date_arrived, date_departed from dogs left join dogs_date_departed on dogs.dog_id = dogs_date_departed.dog_id",
            "select date_arrived, date_departed from dogs_date_departed right join dogs on dogs_date_departed.dog_id = dogs.dog_id",
            "select date_arrived, date_departed from dogs natural join dogs_date_departed",
            "select date_arrived, date_departed from dogs_date_departed join dogs on dogs_date_departed.dog_id = dogs.dog_id",
            "select dogs.date_arrived, dogs_date_departed.date_departed from dogs, dogs_date_departed where dogs.dog_id = dogs_date_departed.dog_id"
        ],
        "query1": "select date_arrived, date_departed from dogs",
        "query2": "select t1.date_arrived, t2.date_departed from dogs as t1 join dogs_date_departed as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "date_arrived",
            ",",
            "date_departed",
            "FROM",
            "Dogs"
        ],
        "query_toks_no_value": [
            "select",
            "date_arrived",
            ",",
            "date_departed",
            "from",
            "dogs"
        ],
        "question": "List the arrival date and the departure date for all the dogs.",
        "question_toks": [
            "List",
            "the",
            "arrival",
            "date",
            "and",
            "the",
            "departure",
            "date",
            "for",
            "all",
            "the",
            "dogs",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                30,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                32,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select date_arrived, date_departed from dogs",
        "split_map": {
            "dogs": "date_arrived"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : zip_code (\"86010\", \"00589\", \"93165\"), owner_id (8, 3, 2), last_name (\"Feil\", \"Stoltenberg\", \"Rippin\"), state (\"Arizona\", \"NewYork\", \"Vermont\"), home_phone (\"(058)997-7627\", \"893-862-5295x61709\", \"1-346-655-5842x768\"), email_address (\"ykris@example.com\", \"zboncak.madonna@example.net\", \"ybergstrom@example.com\"), city (\"South Daisyfurt\", \"East Hillardberg\", \"New Margaretteborough\"), street (\"2417 Keara Stravenue Apt. 146\", \"2635 Caitlyn Plains\", \"1204 Mae Highway Apt. 107\"), first_name (\"Cindy\", \"Cindy\", \"Lorenz\"), cell_number (\"762.589.6117x1328\", \"+70(4)9217952551\", \"341.667.8085\") | dogs : dog_id (2, 9, 14), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.96\", \"3.52\", \"4.36\"), name (\"Merritt\", \"Jesus\", \"Mavis\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 04:50:22\", \"2018-03-25 15:05:16\"), age (\"1\", \"3\", \"3\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2008-05-30 12:51:34\", \"2013-02-13 05:15:21\", \"2012-07-11 17:15:10\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-21 10:41:18\", \"2018-03-25 08:12:51\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (3, 2, 13) | dogs_date_arrived : date_arrived (\"2017-07-25 15:19:07\", \"2018-01-17 11:44:16\", \"2017-10-25 00:55:34\"), dog_id (15, 6, 3) | professionals : city (\"Juddton\", \"Borisside\", \"Borisside\"), state (\"Wisconsin\", \"Alabama\", \"Wisconsin\"), zip_code (\"77129\", \"41215\", \"84515\"), street (\"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), professional_id (4, 11, 14), last_name (\"Jacobs\", \"Christiansen\", \"Kshlerin\"), cell_number (\"609-405-2990\", \"1-181-670-9466\", \"(369)908-7311x065\"), first_name (\"Winfield\", \"Ericka\", \"Lesly\"), email_address (\"west.eula@example.net\", \"jeichmann@example.com\", \"jacynthe.mclaughlin@example.net\"), home_phone (\"1-138-287-3775\", \"891.475.2256\", \"320-508-6023\"), role_code (\"Employee\", \"Veterenarian\") | treatments : dog_id (12, 7, 1), professional_id (8, 7, 10), cost_of_treatment (266, 514, 681), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (3, 13, 3), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-03-14 19:10:40\", \"2018-02-28 17:09:43\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : zip_code , owner_id , last_name , state , home_phone 997-7627\", \"893-862-5295x61709\", \"1-346-655-5842x768\", email_address , city , street , first_name , cell_number 9217952551\", \"341.667.8085\" | dogs : dog_id , size_code , weight , name , gender , date_departed , age , abandoned_yn , date_of_birth , date_adopted , breed_code , owner_id  | dogs_date_arrived : date_arrived , dog_id  | professionals : city , state , zip_code , street , professional_id , last_name , cell_number 908-7311x065\", first_name , email_address , home_phone , role_code  | treatments : dog_id , professional_id , cost_of_treatment , treatment_type_code , treatment_id , date_of_treatment ",
        "chatgpt_out": [
            "select t1.date_arrived, t2.date_departed from dogs_date_arrived as t1 join dogs as t2 on t1.dog_id = t2.dog_id",
            "select t2.date_departed, t1.date_arrived from dogs_date_arrived as t1 join dogs as t2 on t1.dog_id = t2.dog_id",
            "select date_arrived, date_departed from dogs",
            "select date_departed, date_arrived from dogs",
            "select t1.date_arrived, t2.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id"
        ],
        "query1": "select date_arrived, date_departed from dogs",
        "query2": "select t2.date_arrived, t1.date_departed from dogs as t1 join dogs_date_arrived as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "question_toks": [
            "Which",
            "professionals",
            "live",
            "in",
            "a",
            "city",
            "containing",
            "the",
            "substring",
            "'West",
            "'",
            "?",
            "List",
            "his",
            "or",
            "her",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "city"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : first_name (\"Nora\", \"Adelle\", \"Gay\"), state (\"Florida\", \"Washington\", \"Virginia\"), cell_number (\"1-626-264-7659x1697\", \"+70(4)9217952551\", \"559.874.3011x989\"), street (\"68118 Daniel Row\", \"1204 Mae Highway Apt. 107\", \"6950 Katherine Forges Apt. 630\"), last_name (\"Rippin\", \"Ondricka\", \"Schmitt\"), home_phone (\"(094)747-5094x8134\", \"085.557.0379x84348\", \"(094)747-5094x8134\"), owner_id (7, 9, 14), email_address (\"christy49@example.org\", \"kturner@example.net\", \"edythe62@example.org\"), zip_code (\"86010\", \"22693\", \"87304\"), city (\"Brakusfurt\", \"Lake Tia\", \"East Maribelbury\") | dogs : date_arrived (\"2017-04-20 00:58:55\", \"2018-01-17 11:44:16\", \"2017-12-29 23:24:13\"), owner_id (13, 13, 10), name (\"Holden\", \"Mavis\", \"Lyric\"), age (\"1\", \"3\", \"8\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-02-27 11:54:35\", \"2018-02-27 11:54:35\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 06:46:07\", \"2018-03-25 05:07:47\", \"2018-03-25 04:50:22\"), weight (\"9.48\", \"4.36\", \"8.04\"), gender (\"1\", \"0\"), date_of_birth (\"2018-03-17 04:05:12\", \"2015-02-26 21:31:22\", \"2008-10-09 22:38:53\"), dog_id (5, 14, 8), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\") | professionals : email_address (\"jeichmann@example.com\", \"goyette.roosevelt@example.net\", \"lourdes.lowe@example.net\"), cell_number (\"1-181-670-9466\", \"1-181-670-9466\", \"609-405-2990\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Danny\", \"Velva\", \"Jayson\"), street (\"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), home_phone (\"(230)338-3342x585\", \"1-138-287-3775\", \"1-138-287-3775\"), professional_id (15, 13, 5), zip_code (\"54312\", \"17902\", \"98844\"), state (\"Wisconsin\", \"California\", \"Montana\"), last_name (\"O'Reilly\", \"Hayes\", \"Hayes\") | professionals_city : professional_id (8, 2, 2), city (\"Domenickton\", \"Kirastad\", \"Domenickton\") | treatments : cost_of_treatment (147, 407, 266), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (7, 14, 4), date_of_treatment (\"2018-03-15 20:25:34\", \"2018-03-15 19:10:02\", \"2018-03-08 05:26:23\"), dog_id (15, 10, 12), treatment_id (14, 5, 3)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_type , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : first_name , state , cell_number 9217952551\", \"559.874.3011x989\", street , last_name , home_phone 747-5094x8134\", \"085.557.0379x84348\", \"747-5094x8134\", owner_id , email_address , zip_code , city  | dogs : date_arrived , owner_id , name , age , date_adopted , breed_code , date_departed , weight , gender , date_of_birth , dog_id , size_code , abandoned_yn  | professionals : email_address , cell_number , role_code , first_name , street , home_phone 338-3342x585\", \"1-138-287-3775\", \"1-138-287-3775\", professional_id , zip_code , state , last_name  | professionals_city : professional_id , city  | treatments : cost_of_treatment , treatment_type_code , professional_id , date_of_treatment , dog_id , treatment_id ",
        "chatgpt_out": [
            "select t1.role_code, t1.street, t1.city, t1.state from professionals as t1 inner join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t1.role_code, t1.street, t1.city, t1.state from professionals as t1 where t1.city like '%West%'",
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 inner join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "question_toks": [
            "Which",
            "professionals",
            "live",
            "in",
            "a",
            "city",
            "containing",
            "the",
            "substring",
            "'West",
            "'",
            "?",
            "List",
            "his",
            "or",
            "her",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "role_code"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (4, 13, 6), first_name (\"Johann\", \"Johann\", \"Gay\"), city (\"East Maribelbury\", \"Port Reannamouth\", \"East Hillardberg\"), email_address (\"edythe62@example.org\", \"ykris@example.com\", \"margaretta.runte@example.net\"), last_name (\"Price\", \"Funk\", \"Rippin\"), state (\"Wisconsin\", \"Virginia\", \"NewYork\"), zip_code (\"35747\", \"22731\", \"00589\"), home_phone (\"(094)747-5094x8134\", \"893-862-5295x61709\", \"363.948.1090\"), street (\"2635 Caitlyn Plains\", \"15828 Spencer Extensions\", \"57382 Yost Ridges\"), cell_number (\"559.874.3011x989\", \"478.978.0729\", \"(722)768-5439x484\") | dogs : date_of_birth (\"2015-02-26 21:31:22\", \"2010-11-11 07:11:53\", \"2008-05-30 12:51:34\"), date_arrived (\"2017-10-25 00:55:34\", \"2017-12-29 23:24:13\", \"2018-01-17 11:44:16\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 14:15:41\", \"2018-03-25 15:05:16\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (1, 2, 11), name (\"Merritt\", \"Evangeline\", \"Betty\"), date_adopted (\"2018-02-25 23:45:30\", \"2018-03-06 16:32:11\", \"2018-03-10 15:06:43\"), dog_id (14, 4, 5), weight (\"8.96\", \"5.16\", \"8.96\"), age (\"4\", \"1\", \"3\"), abandoned_yn (\"1\", \"0\") | professionals : zip_code (\"43129\", \"77129\", \"02281\"), email_address (\"deanna.schuster@example.com\", \"uboehm@example.org\", \"uboehm@example.org\"), state (\"Wisconsin\", \"Hawaii\", \"Alabama\"), city (\"New Laurytown\", \"West Heidi\", \"McLaughlinfort\"), last_name (\"Murazik\", \"Murazik\", \"O'Reilly\"), home_phone (\"+43(5)1132733868\", \"1-138-287-3775\", \"+71(6)2898266914\"), first_name (\"Domenica\", \"Winfield\", \"Monte\"), street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"72532 Hane Course\nLake Berylland, ND 95283\"), cell_number (\"962-983-8109x3509\", \"499-434-0215x1628\", \"011.193.9081x3186\"), professional_id (8, 8, 4) | professionals_role_code : professional_id (5, 4, 12), role_code (\"Employee\", \"Veterenarian\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (13, 7, 14), cost_of_treatment (852, 313, 429), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-10 11:45:58\", \"2018-03-24 22:25:58\"), professional_id (14, 9, 4), treatment_id (10, 5, 2)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , first_name , city , email_address , last_name , state , zip_code , home_phone 747-5094x8134\", \"893-862-5295x61709\", \"363.948.1090\", street , cell_number 768-5439x484\" | dogs : date_of_birth , date_arrived , gender , breed_code , date_departed , size_code , owner_id , name , date_adopted , dog_id , weight , age , abandoned_yn  | professionals : zip_code , email_address , state , city , last_name , home_phone 1132733868\", \"1-138-287-3775\", \"+712898266914\", first_name , street , cell_number , professional_id  | professionals_role_code : professional_id , role_code  | treatments : treatment_type_code , dog_id , cost_of_treatment , date_of_treatment , professional_id , treatment_id ",
        "chatgpt_out": [
            "select t1.role_code, t1.street, t1.city, t1.state from professionals as t1 where t1.city like '%West%'",
            "select t2.role_code, t2.street, t2.city, t2.state from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t2.role_code, t2.street, t2.city, t2.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'",
            "select t1.role_code, t1.street, t1.city, t1.state from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t1.role_code, t1.street, t1.city, t1.state from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t2.role_code, t1.street, t1.city, t1.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "question_toks": [
            "Which",
            "professionals",
            "live",
            "in",
            "a",
            "city",
            "containing",
            "the",
            "substring",
            "'West",
            "'",
            "?",
            "List",
            "his",
            "or",
            "her",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "street"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : cell_number (\"478.978.0729\", \"1-739-421-2225x38148\", \"478.978.0729\"), home_phone (\"085.557.0379x84348\", \"01802479758\", \"(544)034-1670\"), last_name (\"Ondricka\", \"Rippin\", \"Haley\"), state (\"Indiana\", \"Arkansas\", \"Washington\"), zip_code (\"45244\", \"87304\", \"36871\"), first_name (\"Gay\", \"Heather\", \"Cindy\"), owner_id (13, 11, 6), street (\"15828 Spencer Extensions\", \"51934 Treutel Harbor\", \"2635 Caitlyn Plains\"), email_address (\"ybergstrom@example.com\", \"angeline99@example.com\", \"ykris@example.com\"), city (\"Port Zackery\", \"New Margaretteborough\", \"Barrettburgh\") | dogs : date_of_birth (\"2015-02-26 21:31:22\", \"2012-10-14 14:44:37\", \"2008-05-19 15:54:49\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"9\", \"2\", \"2\"), dog_id (13, 12, 13), owner_id (6, 12, 12), date_adopted (\"2018-02-25 23:45:30\", \"2018-02-27 00:27:57\", \"2018-03-18 07:47:40\"), date_departed (\"2018-03-25 04:50:22\", \"2018-03-25 10:25:46\", \"2018-03-24 19:36:59\"), name (\"George\", \"Evangeline\", \"Betty\"), weight (\"8.04\", \"1.39\", \"2.18\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-06-18 19:45:38\", \"2017-12-29 06:08:26\") | professionals : role_code (\"Employee\", \"Veterenarian\"), state (\"Montana\", \"Utah\", \"Connecticut\"), professional_id (6, 1, 8), first_name (\"Karley\", \"Lesly\", \"Sigurd\"), cell_number (\"499-434-0215x1628\", \"499-434-0215x1628\", \"1-258-285-4707x8020\"), home_phone (\"246-951-0080x76716\", \"+43(5)1132733868\", \"+02(1)0259033559\"), last_name (\"Hyatt\", \"Watsica\", \"O'Reilly\"), email_address (\"delphine29@example.com\", \"deanna.schuster@example.com\", \"jerrod.bahringer@example.org\"), city (\"North Odellfurt\", \"Baileymouth\", \"Borisside\"), zip_code (\"34041\", \"80775\", \"41215\") | professionals_street : professional_id (3, 2, 6), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\") | treatments : dog_id (2, 2, 15), treatment_id (3, 2, 1), professional_id (4, 6, 9), date_of_treatment (\"2018-03-15 19:10:02\", \"2018-03-10 11:45:58\", \"2018-03-24 22:25:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (407, 139, 681)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : cell_number , home_phone 034-1670\", last_name , state , zip_code , first_name , owner_id , street , email_address , city  | dogs : date_of_birth , size_code , age , dog_id , owner_id , date_adopted , date_departed , name , weight , gender , breed_code , abandoned_yn , date_arrived  | professionals : role_code , state , professional_id , first_name , cell_number , home_phone 1132733868\", \"+020259033559\", last_name , email_address , city , zip_code  | professionals_street : professional_id , street  | treatments : dog_id , treatment_id , professional_id , date_of_treatment , treatment_type_code , cost_of_treatment ",
        "chatgpt_out": [
            "select t1.role_code, t2.street, t2.city, t2.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t1.role_code, t2.city, t2.street, t2.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t1.role_code, t2.street, t2.state, t2.city from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t1.role_code, t2.city, t2.state, t2.street from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t2.state, t1.role_code, t2.city, t2.street from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t1.role_code, t2.street, t1.city, t1.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "question_toks": [
            "Which",
            "professionals",
            "live",
            "in",
            "a",
            "city",
            "containing",
            "the",
            "substring",
            "'West",
            "'",
            "?",
            "List",
            "his",
            "or",
            "her",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "state"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : first_name (\"Adelle\", \"Rolando\", \"Lorenz\"), zip_code (\"35747\", \"93165\", \"35747\"), cell_number (\"559.874.3011x989\", \"+70(4)9217952551\", \"(257)399-3116\"), owner_id (6, 10, 15), state (\"Florida\", \"NorthDakota\", \"Arizona\"), email_address (\"ymaggio@example.com\", \"christy49@example.org\", \"angeline99@example.com\"), street (\"2417 Keara Stravenue Apt. 146\", \"59509 Mellie Mountain\", \"68118 Daniel Row\"), last_name (\"Funk\", \"Feil\", \"Feil\"), city (\"Lake Valentin\", \"East Hillardberg\", \"Lake Carleyborough\"), home_phone (\"130-796-4589x05454\", \"1-346-655-5842x768\", \"893-862-5295x61709\") | dogs : name (\"Lyric\", \"Mavis\", \"Troy\"), weight (\"1.39\", \"4.36\", \"4.36\"), age (\"2\", \"6\", \"2\"), date_arrived (\"2017-12-29 06:08:26\", \"2017-10-25 00:55:34\", \"2018-01-17 11:44:16\"), date_adopted (\"2018-03-18 15:12:50\", \"2018-03-14 08:05:18\", \"2018-02-25 23:45:30\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (6, 11, 14), size_code (\"LGE\", \"MED\", \"SML\"), dog_id (3, 10, 4), date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 02:47:40\", \"2018-03-24 19:12:22\"), gender (\"1\", \"0\"), date_of_birth (\"2015-02-26 21:31:22\", \"2013-02-20 14:50:56\", \"2013-02-20 14:50:56\"), abandoned_yn (\"1\", \"0\") | professionals : zip_code (\"77129\", \"52476\", \"17902\"), professional_id (3, 13, 11), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"022.529.0550x1319\", \"(230)338-3342x585\", \"+71(6)2898266914\"), cell_number (\"00230569697\", \"461-801-2600\", \"(369)908-7311x065\"), city (\"East Ila\", \"West Heidi\", \"Baileymouth\"), email_address (\"marquardt.furman@example.org\", \"mekhi.little@example.org\", \"west.eula@example.net\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), first_name (\"Danny\", \"Danny\", \"Taryn\"), last_name (\"Braun\", \"Ullrich\", \"Christiansen\") | professionals_state : professional_id (10, 4, 3), state (\"Wisconsin\", \"Wyoming\", \"Indiana\") | treatments : cost_of_treatment (313, 266, 668), dog_id (7, 15, 10), date_of_treatment (\"2018-03-15 20:25:34\", \"2018-02-26 09:08:53\", \"2018-03-14 19:10:40\"), professional_id (8, 14, 14), treatment_id (9, 5, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : first_name , zip_code , cell_number 9217952551\", \"399-3116\", owner_id , state , email_address , street , last_name , city , home_phone  | dogs : name , weight , age , date_arrived , date_adopted , breed_code , owner_id , size_code , dog_id , date_departed , gender , date_of_birth , abandoned_yn  | professionals : zip_code , professional_id , role_code , home_phone 338-3342x585\", \"+712898266914\", cell_number 908-7311x065\", city , email_address , street , first_name , last_name  | professionals_state : professional_id , state  | treatments : cost_of_treatment , dog_id , date_of_treatment , professional_id , treatment_id , treatment_type_code ",
        "chatgpt_out": [
            "select t1.role_code, t1.street, t1.city, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'",
            "select t1.role_code, t1.city, t1.street, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'",
            "select t1.street, t1.city, t1.role_code, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'",
            "select t1.city, t1.street, t1.role_code, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'",
            "select t1.role_code, t1.city, t1.street, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where '%West%' like concat('%',t1.city,'%')"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t1.role_code, t1.street, t1.city, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "question_toks": [
            "Find",
            "the",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "of",
            "the",
            "professionals",
            "living",
            "in",
            "a",
            "city",
            "that",
            "contains",
            "the",
            "substring",
            "'West",
            "'",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "city"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : street (\"1858 Jan Park\", \"2417 Keara Stravenue Apt. 146\", \"57382 Yost Ridges\"), state (\"SouthDakota\", \"NewYork\", \"NorthDakota\"), zip_code (\"35747\", \"22731\", \"86010\"), cell_number (\"341.667.8085\", \"(722)768-5439x484\", \"478.978.0729\"), city (\"West Leonard\", \"West Leonard\", \"Port Reannamouth\"), owner_id (6, 6, 3), email_address (\"kturner@example.net\", \"angeline99@example.com\", \"lynn81@example.org\"), last_name (\"Hamill\", \"Haley\", \"Price\"), first_name (\"Johann\", \"Kade\", \"Lorenz\"), home_phone (\"1-346-655-5842x768\", \"(058)997-7627\", \"1-346-655-5842x768\") | dogs : breed_code (\"ESK\", \"BUL\", \"HUS\"), gender (\"1\", \"0\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-04-20 00:58:55\", \"2017-04-15 09:25:31\"), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 13:07:04\", \"2018-03-25 15:05:16\"), abandoned_yn (\"1\", \"0\"), owner_id (3, 2, 7), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"8.16\", \"4.01\", \"8.04\"), date_of_birth (\"2008-05-30 12:51:34\", \"2010-11-11 07:11:53\", \"2013-02-20 14:50:56\"), dog_id (3, 3, 3), date_adopted (\"2018-03-21 10:41:18\", \"2018-02-27 11:54:35\", \"2018-02-27 00:27:57\"), name (\"Jesus\", \"Jeffrey\", \"Lyric\"), age (\"9\", \"9\", \"2\") | professionals : home_phone (\"(920)304-4499x59146\", \"(920)304-4499x59146\", \"246-951-0080x76716\"), cell_number (\"1-185-137-1945x409\", \"1-258-285-4707x8020\", \"1-185-137-1945x409\"), zip_code (\"33020\", \"34041\", \"84515\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \"), professional_id (1, 12, 1), email_address (\"schneider.kathryne@example.org\", \"cole.margarita@example.org\", \"delphine29@example.com\"), last_name (\"Tillman\", \"Frami\", \"Frami\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Domenica\", \"Karley\", \"Domenica\"), state (\"Wyoming\", \"Alabama\", \"Alabama\") | professionals_city : city (\"South Rockyport\", \"South Rockyport\", \"New Laurytown\"), professional_id (8, 14, 12) | treatments : professional_id (6, 14, 7), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-13 12:22:58\", \"2018-03-08 05:26:23\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (14, 2, 15), treatment_id (12, 12, 12), cost_of_treatment (681, 656, 945)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : street , state , zip_code , cell_number 768-5439x484\", \"478.978.0729\", city , owner_id , email_address , last_name , first_name , home_phone 997-7627\", \"1-346-655-5842x768\" | dogs : breed_code , gender , date_arrived , date_departed , abandoned_yn , owner_id , size_code , weight , date_of_birth , dog_id , date_adopted , name , age  | professionals : home_phone 304-4499x59146\", \"304-4499x59146\", \"246-951-0080x76716\", cell_number , zip_code , street , professional_id , email_address , last_name , role_code , first_name , state  | professionals_city : city , professional_id  | treatments : professional_id , date_of_treatment , treatment_type_code , dog_id , treatment_id , cost_of_treatment ",
        "chatgpt_out": [
            "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t1.role_code, t1.street, t2.city, t1.state from professionals_city as t2 join professionals as t1 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1, professionals_city as t2 where t1.professional_id = t2.professional_id and t2.city like '%West%'",
            "select role_code, street, city, state from professionals_city join professionals using(professional_id) where city like '%West%'"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t1.role_code, t1.street, t2.city, t1.state from professionals as t1 join professionals_city as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "question_toks": [
            "Find",
            "the",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "of",
            "the",
            "professionals",
            "living",
            "in",
            "a",
            "city",
            "that",
            "contains",
            "the",
            "substring",
            "'West",
            "'",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "role_code"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : last_name (\"Ondricka\", \"Prohaska\", \"Funk\"), city (\"Lake Carleyborough\", \"Lake Carleyborough\", \"Port Zackery\"), email_address (\"wpfeffer@example.net\", \"fschoen@example.net\", \"lynn81@example.org\"), home_phone (\"130-796-4589x05454\", \"1-682-845-0116x63235\", \"1-346-655-5842x768\"), first_name (\"Rolando\", \"Emelie\", \"Lorenz\"), state (\"NewYork\", \"Washington\", \"Virginia\"), cell_number (\"121.381.3316x6535\", \"1-626-264-7659x1697\", \"+00(2)4323592985\"), street (\"9212 Rosenbaum Lights\", \"89011 Kertzmann Spring Suite 642\", \"9212 Rosenbaum Lights\"), zip_code (\"25609\", \"86010\", \"61019\"), owner_id (14, 14, 5) | dogs : weight (\"7.57\", \"2.18\", \"1.72\"), date_arrived (\"2017-12-29 23:24:13\", \"2017-12-22 05:02:02\", \"2017-06-25 10:14:05\"), name (\"Houston\", \"Jesus\", \"Kacey\"), age (\"6\", \"9\", \"9\"), abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-25 06:29:10\", \"2018-03-25 15:05:16\", \"2018-03-25 02:47:40\"), owner_id (5, 2, 7), date_adopted (\"2018-03-21 10:41:18\", \"2018-02-27 11:54:35\", \"2018-03-06 16:32:11\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (6, 15, 5), date_of_birth (\"2015-02-26 21:31:22\", \"2018-03-17 04:05:12\", \"2013-02-13 05:15:21\") | professionals : last_name (\"Murazik\", \"Hyatt\", \"Ullrich\"), street (\"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \"), state (\"NorthCarolina\", \"NewMexico\", \"NewMexico\"), email_address (\"deanna.schuster@example.com\", \"marquardt.furman@example.org\", \"lourdes.lowe@example.net\"), city (\"Kirastad\", \"Juddton\", \"Borisside\"), zip_code (\"52476\", \"17902\", \"34041\"), cell_number (\"011.193.9081x3186\", \"609-405-2990\", \"499-434-0215x1628\"), professional_id (2, 11, 13), home_phone (\"+71(6)2898266914\", \"325-155-0801x7005\", \"346.594.3739\"), first_name (\"Danny\", \"Domenica\", \"Karley\") | professionals_role_code : role_code (\"Employee\", \"Veterenarian\"), professional_id (13, 3, 1) | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (2, 4, 8), professional_id (9, 6, 5), cost_of_treatment (147, 681, 514), dog_id (4, 12, 7), date_of_treatment (\"2018-03-19 04:39:54\", \"2018-02-28 17:09:43\", \"2018-03-11 04:23:15\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : last_name , city , email_address , home_phone , first_name , state , cell_number 4323592985\", street , zip_code , owner_id  | dogs : weight , date_arrived , name , age , abandoned_yn , gender , size_code , date_departed , owner_id , date_adopted , breed_code , dog_id , date_of_birth  | professionals : last_name , street , state , email_address , city , zip_code , cell_number , professional_id , home_phone 2898266914\", \"325-155-0801x7005\", \"346.594.3739\", first_name  | professionals_role_code : role_code , professional_id  | treatments : treatment_type_code , treatment_id , professional_id , cost_of_treatment , dog_id , date_of_treatment ",
        "chatgpt_out": [
            "select t1.role_code, t2.street, t2.city, t2.state from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t1.role_code, t2.state, t2.city, t2.street from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t2.role_code, t2.street, t2.city, t2.state from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t2.role_code, t2.state, t2.city, t2.street from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t2.street, t2.city, t2.state, t1.role_code from professionals_role_code as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t2.role_code, t1.street, t1.city, t1.state from professionals as t1 join professionals_role_code as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "question_toks": [
            "Find",
            "the",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "of",
            "the",
            "professionals",
            "living",
            "in",
            "a",
            "city",
            "that",
            "contains",
            "the",
            "substring",
            "'West",
            "'",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "street"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : city (\"East Maribelbury\", \"Lake Tia\", \"East Hillardberg\"), home_phone (\"01802479758\", \"363.948.1090\", \"130-796-4589x05454\"), zip_code (\"45244\", \"61019\", \"61019\"), owner_id (1, 4, 3), street (\"0647 Hintz Village Apt. 024\", \"15828 Spencer Extensions\", \"692 Jaskolski Forges\"), cell_number (\"121.381.3316x6535\", \"341.667.8085\", \"(722)768-5439x484\"), state (\"NorthDakota\", \"Indiana\", \"Arizona\"), email_address (\"kturner@example.net\", \"lynn81@example.org\", \"kturner@example.net\"), first_name (\"Melisa\", \"Orlando\", \"Cindy\"), last_name (\"DuBuque\", \"Hamill\", \"Nicolas\") | dogs : breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-10-16 20:06:21\", \"2017-10-16 20:06:21\", \"2017-07-25 15:19:07\"), name (\"Merritt\", \"Holden\", \"Lyric\"), dog_id (13, 6, 4), age (\"1\", \"1\", \"2\"), abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), date_of_birth (\"2012-05-31 08:01:36\", \"2008-10-09 22:38:53\", \"2017-09-19 05:39:09\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"6.92\", \"5.16\", \"1.39\"), owner_id (12, 14, 14), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-13 12:47:15\", \"2018-03-10 15:06:43\"), date_departed (\"2018-03-25 02:47:40\", \"2018-03-25 04:50:22\", \"2018-03-25 06:29:10\") | professionals : professional_id (3, 2, 9), state (\"Indiana\", \"NewMexico\", \"NorthCarolina\"), cell_number (\"1-258-285-4707x8020\", \"(369)908-7311x065\", \"962-983-8109x3509\"), zip_code (\"43129\", \"17902\", \"80775\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Jayson\", \"Brady\", \"Danny\"), last_name (\"Braun\", \"Jacobs\", \"Frami\"), city (\"North Adelberttown\", \"North Adelberttown\", \"West Heidi\"), home_phone (\"+71(6)2898266914\", \"1-609-566-2752x25197\", \"022.529.0550x1319\"), email_address (\"mekhi.little@example.org\", \"lambert62@example.org\", \"west.eula@example.net\") | professionals_street : street (\"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), professional_id (8, 6, 4) | treatments : professional_id (14, 8, 9), date_of_treatment (\"2018-03-11 04:23:15\", \"2018-03-14 19:10:40\", \"2018-03-10 11:45:58\"), treatment_id (14, 9, 9), cost_of_treatment (656, 668, 656), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (1, 2, 2)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : city , home_phone , zip_code , owner_id , street , cell_number 768-5439x484\", state , email_address , first_name , last_name  | dogs : breed_code , date_arrived , name , dog_id , age , abandoned_yn , gender , date_of_birth , size_code , weight , owner_id , date_adopted , date_departed  | professionals : professional_id , state , cell_number 908-7311x065\", \"962-983-8109x3509\", zip_code , role_code , first_name , last_name , city , home_phone 2898266914\", \"1-609-566-2752x25197\", \"022.529.0550x1319\", email_address  | professionals_street : street , professional_id  | treatments : professional_id , date_of_treatment , treatment_id , cost_of_treatment , treatment_type_code , dog_id ",
        "chatgpt_out": [
            "select t1.role_code, t2.street, t2.city, t2.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t2.city like '%West%'",
            "select t1.role_code, t3.street, t3.city, t3.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id join professionals as t3 on t1.professional_id = t3.professional_id where t2.city like '%West%'",
            "select t2.role_code, t2.street, t2.city, t2.state from professionals_street as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'",
            "select t2.role_code, t1.street, t1.city, t1.state from professionals_street as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'",
            "select t1.role_code, t2.street, t2.city, t2.state from professionals_street as t2 join (select * from professionals where city like '%West%') as t1 on t1.professional_id = t2.professional_id"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t1.role_code, t2.street, t1.city, t1.state from professionals as t1 join professionals_street as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "FROM",
            "professionals",
            "WHERE",
            "city",
            "LIKE",
            "'",
            "%",
            "West",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "role_code",
            ",",
            "street",
            ",",
            "city",
            ",",
            "state",
            "from",
            "professionals",
            "where",
            "city",
            "like",
            "value"
        ],
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "question_toks": [
            "Find",
            "the",
            "role",
            ",",
            "street",
            ",",
            "city",
            "and",
            "state",
            "of",
            "the",
            "professionals",
            "living",
            "in",
            "a",
            "city",
            "that",
            "contains",
            "the",
            "substring",
            "'West",
            "'",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                34,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                36,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                37,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                38,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            37,
                            false
                        ],
                        null
                    ],
                    "\"%West%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select role_code, street, city, state from professionals where city like '%West%'",
        "split_map": {
            "professionals": "state"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : zip_code (\"35747\", \"36871\", \"35747\"), email_address (\"marks.gail@example.org\", \"kturner@example.net\", \"hudson.favian@example.com\"), first_name (\"Gay\", \"Rolando\", \"Cindy\"), home_phone (\"01802479758\", \"01802479758\", \"1-682-845-0116x63235\"), cell_number (\"(722)768-5439x484\", \"(257)399-3116\", \"559.874.3011x989\"), city (\"Brakusfurt\", \"Beerton\", \"Beerton\"), last_name (\"Price\", \"Ondricka\", \"Haley\"), street (\"60352 Kayleigh Crossing Suite 700\", \"1858 Jan Park\", \"1858 Jan Park\"), owner_id (4, 6, 14), state (\"Arkansas\", \"Virginia\", \"Washington\") | dogs : weight (\"8.96\", \"1.39\", \"4.01\"), dog_id (7, 8, 4), name (\"Lyric\", \"Mavis\", \"Jesus\"), age (\"5\", \"9\", \"3\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 10:25:46\", \"2018-03-25 14:15:41\"), abandoned_yn (\"1\", \"0\"), date_adopted (\"2018-02-25 23:45:30\", \"2018-02-27 11:54:35\", \"2018-02-25 23:45:30\"), date_arrived (\"2017-09-08 20:10:13\", \"2018-01-17 11:44:16\", \"2017-07-25 15:19:07\"), gender (\"1\", \"0\"), owner_id (3, 12, 12), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2012-05-31 08:01:36\", \"2013-02-20 14:50:56\", \"2008-05-19 15:54:49\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | professionals : email_address (\"cole.margarita@example.org\", \"jerrod.bahringer@example.org\", \"uboehm@example.org\"), first_name (\"Sigurd\", \"Lesly\", \"Karley\"), last_name (\"Hayes\", \"Considine\", \"Braun\"), role_code (\"Employee\", \"Veterenarian\"), city (\"Domenickton\", \"Baileymouth\", \"North Adelberttown\"), professional_id (14, 11, 7), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\"), zip_code (\"02281\", \"43129\", \"07412\"), home_phone (\"1-138-287-3775\", \"971.048.3763x9404\", \"325-155-0801x7005\"), cell_number (\"139-321-7313\", \"1-185-137-1945x409\", \"962-983-8109x3509\") | professionals_state : state (\"Wisconsin\", \"California\", \"Utah\"), professional_id (5, 7, 8) | treatments : dog_id (1, 15, 13), professional_id (10, 5, 10), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-08 05:26:23\", \"2018-03-13 12:22:58\", \"2018-03-10 11:45:58\"), treatment_id (14, 12, 5), cost_of_treatment (428, 407, 139)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : zip_code , email_address , first_name , home_phone , cell_number 768-5439x484\", \"399-3116\", \"559.874.3011x989\", city , last_name , street , owner_id , state  | dogs : weight , dog_id , name , age , date_departed , abandoned_yn , date_adopted , date_arrived , gender , owner_id , size_code , date_of_birth , breed_code  | professionals : email_address , first_name , last_name , role_code , city , professional_id , street , zip_code , home_phone , cell_number  | professionals_state : state , professional_id  | treatments : dog_id , professional_id , treatment_type_code , date_of_treatment , treatment_id , cost_of_treatment ",
        "chatgpt_out": [
            "select role_code, street, city, professionals_state.state from professionals join professionals_state on professionals_state.professional_id = professionals.professional_id where city like '%West%'",
            "select role_code, street, city, state from professionals where city like '%West%'",
            "select role_code, street, city, professionals_state.state from professionals join professionals_state on professionals_state.professional_id = professionals.professional_id where lower(city) like '%west%'",
            "select role_code, street, city, state from professionals where lower(city) like '%west%'",
            "select t1.role_code, t1.street, t1.city, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
        ],
        "query1": "select role_code, street, city, state from professionals where city like '%West%'",
        "query2": "select t1.role_code, t1.street, t1.city, t2.state from professionals as t1 join professionals_state as t2 on t1.professional_id = t2.professional_id where t1.city like '%West%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'",
            "%",
            "North",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "question_toks": [
            "Which",
            "owners",
            "live",
            "in",
            "the",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "?",
            "List",
            "his",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "owners": "owner_id"
        },
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'",
        "split_map": {
            "owners": "last_name"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : first_name (\"Johann\", \"Nora\", \"Orlando\"), home_phone (\"(094)747-5094x8134\", \"(058)997-7627\", \"1-346-655-5842x768\"), email_address (\"edythe62@example.org\", \"wpfeffer@example.net\", \"edythe62@example.org\"), cell_number (\"+00(2)4323592985\", \"+70(4)9217952551\", \"559.874.3011x989\"), owner_id (2, 7, 8), city (\"West Leonard\", \"Lake Valentin\", \"Barrettburgh\"), street (\"0647 Hintz Village Apt. 024\", \"57382 Yost Ridges\", \"1858 Jan Park\"), zip_code (\"87304\", \"25609\", \"45244\"), state (\"Pennsylvania\", \"NewYork\", \"NorthDakota\") | owners_last_name : last_name (\"Feil\", \"Schmitt\", \"Rippin\"), owner_id (14, 4, 7) | dogs : dog_id (14, 11, 7), owner_id (8, 14, 5), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-18 15:12:50\", \"2018-03-25 08:12:51\"), date_of_birth (\"2013-02-20 14:50:56\", \"2018-03-17 04:05:12\", \"2008-05-19 15:54:49\"), gender (\"1\", \"0\"), name (\"George\", \"Narciso\", \"Holden\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"3\", \"4\", \"2\"), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 05:07:47\", \"2018-03-24 19:12:22\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-04-20 00:58:55\", \"2017-06-25 10:14:05\", \"2017-12-29 23:24:13\"), weight (\"6.92\", \"1.72\", \"4.01\") | professionals : professional_id (5, 7, 11), street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"72532 Hane Course\nLake Berylland, ND 95283\"), zip_code (\"77129\", \"54312\", \"80775\"), first_name (\"Vernice\", \"Olaf\", \"Vernice\"), home_phone (\"(230)338-3342x585\", \"971.048.3763x9404\", \"+02(1)0259033559\"), last_name (\"Hyatt\", \"Murazik\", \"Frami\"), email_address (\"lambert62@example.org\", \"mekhi.little@example.org\", \"lourdes.lowe@example.net\"), city (\"Baileymouth\", \"North Odellfurt\", \"Jaceton\"), state (\"NewMexico\", \"Wyoming\", \"NorthCarolina\"), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"461-801-2600\", \"(369)908-7311x065\", \"499-434-0215x1628\") | treatments : professional_id (6, 8, 8), date_of_treatment (\"2018-03-11 04:23:15\", \"2018-02-28 17:09:43\", \"2018-02-28 17:09:43\"), treatment_id (12, 15, 11), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (147, 407, 266), dog_id (15, 7, 13)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : first_name , home_phone 747-5094x8134\", \"997-7627\", \"1-346-655-5842x768\", email_address , cell_number 4323592985\", \"+709217952551\", \"559.874.3011x989\", owner_id , city , street , zip_code , state  | owners_last_name : last_name , owner_id  | dogs : dog_id , owner_id , date_adopted , date_of_birth , gender , name , size_code , age , date_departed , abandoned_yn , breed_code , date_arrived , weight  | professionals : professional_id , street , zip_code , first_name , home_phone 338-3342x585\", \"971.048.3763x9404\", \"+020259033559\", last_name , email_address , city , state , role_code , cell_number 908-7311x065\", \"499-434-0215x1628\" | treatments : professional_id , date_of_treatment , treatment_id , treatment_type_code , cost_of_treatment , dog_id ",
        "chatgpt_out": [
            "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t1.first_name, t2.last_name, t1.email_address from owners_last_name as t2 join owners as t1 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t1.first_name, t1.last_name, t1.email_address from owners as t1 where t1.state like '%North%'",
            "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
        ],
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'",
        "query2": "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'",
            "%",
            "North",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "question_toks": [
            "Which",
            "owners",
            "live",
            "in",
            "the",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "?",
            "List",
            "his",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "owners": "owner_id"
        },
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'",
        "split_map": {
            "owners": "email_address"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : state (\"Arizona\", \"Florida\", \"Maryland\"), cell_number (\"559.874.3011x989\", \"341.667.8085\", \"(257)399-3116\"), last_name (\"Ondricka\", \"DuBuque\", \"Ondricka\"), zip_code (\"93165\", \"35747\", \"45244\"), street (\"692 Jaskolski Forges\", \"15828 Spencer Extensions\", \"89011 Kertzmann Spring Suite 642\"), first_name (\"Lorenz\", \"Jaclyn\", \"Rachelle\"), city (\"West Leonard\", \"Lake Valentin\", \"Port Reannamouth\"), home_phone (\"318-052-6573\", \"(094)747-5094x8134\", \"066.264.7885\"), owner_id (4, 4, 1) | owners_email_address : email_address (\"fschoen@example.net\", \"ymaggio@example.com\", \"angeline99@example.com\"), owner_id (6, 8, 14) | dogs : name (\"Narciso\", \"Jesus\", \"Mavis\"), date_of_birth (\"2018-03-17 04:05:12\", \"2010-11-11 07:11:53\", \"2013-02-13 05:15:21\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-25 06:29:10\", \"2018-03-25 02:11:32\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_arrived (\"2017-04-15 09:25:31\", \"2017-12-22 05:02:02\", \"2017-04-20 00:58:55\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"8\", \"8\", \"2\"), dog_id (12, 4, 13), date_adopted (\"2018-03-08 15:03:00\", \"2018-03-23 16:02:04\", \"2018-03-14 08:05:18\"), weight (\"9.8\", \"3.52\", \"8.96\"), abandoned_yn (\"1\", \"0\"), owner_id (14, 13, 3) | professionals : cell_number (\"(369)908-7311x065\", \"1-185-137-1945x409\", \"609-405-2990\"), state (\"NewMexico\", \"California\", \"Mississippi\"), home_phone (\"(230)338-3342x585\", \"346.594.3739\", \"971.048.3763x9404\"), street (\"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), professional_id (8, 4, 13), role_code (\"Employee\", \"Veterenarian\"), city (\"Baileymouth\", \"North Odellfurt\", \"North Adelberttown\"), email_address (\"schneider.kathryne@example.org\", \"lourdes.lowe@example.net\", \"lucile.shanahan@example.org\"), last_name (\"Christiansen\", \"Braun\", \"Pouros\"), first_name (\"Karley\", \"Karley\", \"Ericka\"), zip_code (\"41215\", \"84515\", \"84515\") | treatments : dog_id (1, 10, 2), professional_id (14, 4, 4), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-11 04:23:15\", \"2018-03-16 10:27:36\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (2, 12, 10), cost_of_treatment (407, 139, 514)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : state , cell_number 399-3116\", last_name , zip_code , street , first_name , city , home_phone 747-5094x8134\", \"066.264.7885\", owner_id  | owners_email_address : email_address , owner_id  | dogs : name , date_of_birth , gender , date_departed , breed_code , date_arrived , size_code , age , dog_id , date_adopted , weight , abandoned_yn , owner_id  | professionals : cell_number 908-7311x065\", \"1-185-137-1945x409\", \"609-405-2990\", state , home_phone 338-3342x585\", \"346.594.3739\", \"971.048.3763x9404\", street , professional_id , role_code , city , email_address , last_name , first_name , zip_code  | treatments : dog_id , professional_id , date_of_treatment , treatment_type_code , treatment_id , cost_of_treatment ",
        "chatgpt_out": [
            "select first_name, last_name, email_address from owners where state like '%North%'",
            "select last_name, first_name, email_address from owners where state like '%North%'",
            "select email_address, first_name, last_name from owners where state like '%North%'",
            "select email_address, last_name, first_name from owners where state like '%North%'",
            "select last_name, email_address, first_name from owners where state like '%North%'"
        ],
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'",
        "query2": "select t1.first_name, t1.last_name, t2.email_address from owners as t1 join owners_email_address as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'",
            "%",
            "North",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "question_toks": [
            "Which",
            "owners",
            "live",
            "in",
            "the",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "?",
            "List",
            "his",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "owners": "owner_id"
        },
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'",
        "split_map": {
            "owners": "first_name"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : last_name (\"Stoltenberg\", \"Mertz\", \"Stoltenberg\"), email_address (\"hudson.favian@example.com\", \"margaretta.runte@example.net\", \"ymaggio@example.com\"), zip_code (\"35747\", \"11990\", \"45244\"), city (\"Lake Tia\", \"Port Zackery\", \"Port Zackery\"), cell_number (\"1-626-264-7659x1697\", \"1-739-421-2225x38148\", \"(783)271-6744x4507\"), state (\"Washington\", \"SouthDakota\", \"NorthDakota\"), home_phone (\"130-796-4589x05454\", \"916.976.9480x13851\", \"916.976.9480x13851\"), owner_id (8, 4, 6), street (\"6950 Katherine Forges Apt. 630\", \"89011 Kertzmann Spring Suite 642\", \"59509 Mellie Mountain\") | owners_first_name : first_name (\"Tre\", \"Johann\", \"Rachelle\"), owner_id (3, 6, 14) | dogs : date_of_birth (\"2009-04-12 06:02:48\", \"2008-05-19 15:54:49\", \"2013-02-20 14:50:56\"), gender (\"1\", \"0\"), dog_id (12, 8, 13), date_departed (\"2018-03-25 02:47:40\", \"2018-03-24 19:36:59\", \"2018-03-25 15:05:16\"), name (\"Houston\", \"Narciso\", \"Houston\"), abandoned_yn (\"1\", \"0\"), age (\"9\", \"8\", \"5\"), weight (\"9.8\", \"4.36\", \"2.18\"), date_adopted (\"2018-03-21 10:41:18\", \"2018-03-06 16:32:11\", \"2018-03-14 08:05:18\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (11, 13, 8), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-09-08 20:10:13\", \"2017-12-29 23:24:13\", \"2017-12-29 23:24:13\") | professionals : state (\"SouthCarolina\", \"Alabama\", \"Wisconsin\"), last_name (\"Considine\", \"Walter\", \"Christiansen\"), street (\"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), zip_code (\"43129\", \"17902\", \"07412\"), email_address (\"lambert62@example.org\", \"jerrod.bahringer@example.org\", \"lucile.shanahan@example.org\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"1-609-566-2752x25197\", \"971.048.3763x9404\", \"971.048.3763x9404\"), first_name (\"Taryn\", \"Velva\", \"Sigurd\"), professional_id (3, 15, 9), city (\"South Rockyport\", \"East Ila\", \"Jaceton\"), cell_number (\"139-321-7313\", \"889-940-2676\", \"1-258-285-4707x8020\") | treatments : dog_id (15, 4, 10), treatment_id (12, 11, 12), professional_id (9, 4, 6), cost_of_treatment (429, 681, 266), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-10 11:45:58\", \"2018-03-16 10:27:36\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : last_name , email_address , zip_code , city , cell_number 271-6744x4507\", state , home_phone , owner_id , street  | owners_first_name : first_name , owner_id  | dogs : date_of_birth , gender , dog_id , date_departed , name , abandoned_yn , age , weight , date_adopted , breed_code , owner_id , size_code , date_arrived  | professionals : state , last_name , street , zip_code , email_address , role_code , home_phone , first_name , professional_id , city , cell_number  | treatments : dog_id , treatment_id , professional_id , cost_of_treatment , date_of_treatment , treatment_type_code ",
        "chatgpt_out": [
            "select t1.first_name, t1.last_name, t1.email_address from owners_first_name as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.state like '%North%'",
            "select t2.first_name, t2.last_name, t2.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select first_name, last_name, email_address from owners where state like '%North%'",
            "select t2.first_name, t2.last_name, t2.email_address from dogs as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id join owners as t3 on t1.owner_id = t3.owner_id where t3.state like '%North%'",
            "select t3.first_name, t3.last_name, t3.email_address from dogs as t1 join owners as t2 on t1.owner_id = t2.owner_id join owners_first_name as t3 on t1.owner_id = t3.owner_id where t2.state like '%North%'"
        ],
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'",
        "query2": "select t2.first_name, t1.last_name, t1.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'",
            "%",
            "North",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "question_toks": [
            "Return",
            "the",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "of",
            "the",
            "owners",
            "living",
            "in",
            "a",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "owners": "owner_id"
        },
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'",
        "split_map": {
            "owners": "last_name"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (15, 6, 12), street (\"1204 Mae Highway Apt. 107\", \"60352 Kayleigh Crossing Suite 700\", \"51934 Treutel Harbor\"), cell_number (\"(722)768-5439x484\", \"762.589.6117x1328\", \"(783)271-6744x4507\"), home_phone (\"130-796-4589x05454\", \"363.948.1090\", \"318-052-6573\"), zip_code (\"02647\", \"02647\", \"35747\"), first_name (\"Johann\", \"Adelle\", \"Lorenz\"), email_address (\"edythe62@example.org\", \"ymaggio@example.com\", \"kturner@example.net\"), city (\"Port Zackery\", \"Lake Tia\", \"Beerton\"), state (\"Virginia\", \"Maryland\", \"Maryland\") | owners_last_name : owner_id (2, 9, 7), last_name (\"Feil\", \"Fisher\", \"Nicolas\") | dogs : date_arrived (\"2017-06-25 10:14:05\", \"2017-06-18 19:45:38\", \"2017-04-20 00:58:55\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 10:25:46\", \"2018-03-25 06:46:07\"), dog_id (9, 8, 14), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (10, 12, 14), date_of_birth (\"2012-05-31 08:01:36\", \"2018-03-17 04:05:12\", \"2012-01-27 05:11:53\"), age (\"6\", \"8\", \"9\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Bessie\", \"Narciso\", \"Jesus\"), gender (\"1\", \"0\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-02-25 23:45:30\", \"2018-02-27 11:54:35\"), weight (\"9.48\", \"9.8\", \"5.16\"), abandoned_yn (\"1\", \"0\") | professionals : last_name (\"Frami\", \"Christiansen\", \"Christiansen\"), first_name (\"Olaf\", \"Velva\", \"Olaf\"), zip_code (\"67980\", \"34041\", \"52476\"), home_phone (\"1-609-566-2752x25197\", \"022.529.0550x1319\", \"891.475.2256\"), cell_number (\"139-321-7313\", \"499-434-0215x1628\", \"962-983-8109x3509\"), city (\"New Laurytown\", \"New Laurytown\", \"New Laurytown\"), professional_id (13, 9, 12), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"72532 Hane Course\nLake Berylland, ND 95283\"), state (\"Hawaii\", \"Indiana\", \"Hawaii\"), role_code (\"Employee\", \"Veterenarian\"), email_address (\"uboehm@example.org\", \"west.eula@example.net\", \"uboehm@example.org\") | treatments : date_of_treatment (\"2018-03-10 11:45:58\", \"2018-02-28 17:09:43\", \"2018-03-08 05:26:23\"), treatment_id (12, 12, 6), cost_of_treatment (681, 945, 567), professional_id (8, 9, 5), dog_id (12, 10, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , street , cell_number 768-5439x484\", \"762.589.6117x1328\", \"271-6744x4507\", home_phone , zip_code , first_name , email_address , city , state  | owners_last_name : owner_id , last_name  | dogs : date_arrived , date_departed , dog_id , size_code , owner_id , date_of_birth , age , breed_code , name , gender , date_adopted , weight , abandoned_yn  | professionals : last_name , first_name , zip_code , home_phone , cell_number , city , professional_id , street , state , role_code , email_address  | treatments : date_of_treatment , treatment_id , cost_of_treatment , professional_id , dog_id , treatment_type_code ",
        "chatgpt_out": [
            "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t2.state like '%North%'",
            "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%' and t2.state like '%North%'",
            "select t2.last_name, t1.first_name, t1.email_address from owners_last_name as t2 join owners as t1 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t2.last_name, t1.email_address, t1.first_name from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
        ],
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'",
        "query2": "select t1.first_name, t2.last_name, t1.email_address from owners as t1 join owners_last_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'",
            "%",
            "North",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "question_toks": [
            "Return",
            "the",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "of",
            "the",
            "owners",
            "living",
            "in",
            "a",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "owners": "owner_id"
        },
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'",
        "split_map": {
            "owners": "email_address"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (13, 5, 7), cell_number (\"121.381.3316x6535\", \"559.874.3011x989\", \"559.874.3011x989\"), street (\"0647 Hintz Village Apt. 024\", \"692 Jaskolski Forges\", \"68118 Daniel Row\"), state (\"Wisconsin\", \"Wisconsin\", \"Pennsylvania\"), zip_code (\"92406\", \"86010\", \"02647\"), home_phone (\"1-346-655-5842x768\", \"085.557.0379x84348\", \"066.264.7885\"), first_name (\"Orlando\", \"Kade\", \"Lorenz\"), city (\"West Leonard\", \"New Margaretteborough\", \"East Maribelbury\"), last_name (\"Schmitt\", \"Rippin\", \"Mertz\") | owners_email_address : owner_id (9, 1, 4), email_address (\"hudson.favian@example.com\", \"wpfeffer@example.net\", \"christy49@example.org\") | dogs : size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 06:29:10\", \"2018-03-25 10:25:46\"), date_adopted (\"2018-03-25 08:12:51\", \"2018-03-23 16:02:04\", \"2018-03-14 08:05:18\"), gender (\"1\", \"0\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-07-25 15:19:07\", \"2017-10-16 20:06:21\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2009-04-12 06:02:48\", \"2012-05-31 08:01:36\", \"2009-04-12 06:02:48\"), name (\"George\", \"Betty\", \"Jeffrey\"), weight (\"5.16\", \"6.92\", \"8.96\"), age (\"9\", \"6\", \"1\"), dog_id (1, 7, 6), abandoned_yn (\"1\", \"0\"), owner_id (6, 7, 1) | professionals : state (\"Montana\", \"Utah\", \"Wisconsin\"), professional_id (6, 6, 12), first_name (\"Olaf\", \"Winfield\", \"Brady\"), street (\"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), home_phone (\"246-951-0080x76716\", \"312.216.3352\", \"(230)338-3342x585\"), zip_code (\"80775\", \"17902\", \"06646\"), last_name (\"Kshlerin\", \"Ullrich\", \"Braun\"), city (\"McLaughlinfort\", \"McLaughlinfort\", \"McLaughlinfort\"), cell_number (\"1-185-137-1945x409\", \"00230569697\", \"461-801-2600\"), email_address (\"goyette.roosevelt@example.net\", \"jacynthe.mclaughlin@example.net\", \"lourdes.lowe@example.net\"), role_code (\"Employee\", \"Veterenarian\") | treatments : treatment_id (1, 4, 8), professional_id (9, 5, 14), cost_of_treatment (349, 681, 656), date_of_treatment (\"2018-03-24 22:25:58\", \"2018-03-01 04:14:46\", \"2018-03-19 04:39:54\"), dog_id (2, 1, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , cell_number , street , state , zip_code , home_phone , first_name , city , last_name  | owners_email_address : owner_id , email_address  | dogs : size_code , date_departed , date_adopted , gender , date_arrived , breed_code , date_of_birth , name , weight , age , dog_id , abandoned_yn , owner_id  | professionals : state , professional_id , first_name , street , home_phone 338-3342x585\", zip_code , last_name , city , cell_number , email_address , role_code  | treatments : treatment_id , professional_id , cost_of_treatment , date_of_treatment , dog_id , treatment_type_code ",
        "chatgpt_out": [
            "select t1.first_name, t1.last_name, t2.email_address from owners as t1 join owners_email_address as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t1.first_name, t1.last_name, t2.email_address from owners_email_address as t2 join owners as t1 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t2.email_address, t1.last_name, t1.first_name from owners_email_address as t2 join owners as t1 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t2.email_address, t1.first_name, t1.last_name from owners_email_address as t2 join owners as t1 on t1.owner_id = t2.owner_id where t1.state like '%North%'",
            "select t2.email_address, t1.last_name, t1.first_name from owners_email_address as t2 join owners as t1 on t2.owner_id = t1.owner_id where t1.state like '%North%'"
        ],
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'",
        "query2": "select t1.first_name, t1.last_name, t2.email_address from owners as t1 join owners_email_address as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "FROM",
            "Owners",
            "WHERE",
            "state",
            "LIKE",
            "'",
            "%",
            "North",
            "%",
            "'"
        ],
        "query_toks_no_value": [
            "select",
            "first_name",
            ",",
            "last_name",
            ",",
            "email_address",
            "from",
            "owners",
            "where",
            "state",
            "like",
            "value"
        ],
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "question_toks": [
            "Return",
            "the",
            "first",
            "name",
            ",",
            "last",
            "name",
            "and",
            "email",
            "of",
            "the",
            "owners",
            "living",
            "in",
            "a",
            "state",
            "whose",
            "name",
            "contains",
            "the",
            "substring",
            "'North",
            "'",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        4
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                11,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                12,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                17,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    9,
                    [
                        0,
                        [
                            0,
                            15,
                            false
                        ],
                        null
                    ],
                    "\"%North%\"",
                    null
                ]
            ]
        },
        "primary_key": {
            "owners": "owner_id"
        },
        "orig_query": "select first_name, last_name, email_address from owners where state like '%North%'",
        "split_map": {
            "owners": "first_name"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"South Afton\", \"Barrettburgh\", \"South Afton\"), owner_id (4, 5, 10), cell_number (\"341.667.8085\", \"121.381.3316x6535\", \"633.455.3045x85484\"), email_address (\"angeline99@example.com\", \"margaretta.runte@example.net\", \"ykris@example.com\"), last_name (\"Haley\", \"Nicolas\", \"Hamill\"), street (\"89011 Kertzmann Spring Suite 642\", \"68118 Daniel Row\", \"2417 Keara Stravenue Apt. 146\"), zip_code (\"93165\", \"93165\", \"22731\"), state (\"Maryland\", \"Mississippi\", \"Maryland\"), home_phone (\"916.976.9480x13851\", \"130-796-4589x05454\", \"085.557.0379x84348\") | owners_first_name : owner_id (8, 2, 15), first_name (\"Jaclyn\", \"Kade\", \"Heather\") | dogs : date_of_birth (\"2018-03-17 04:05:12\", \"2012-01-27 05:11:53\", \"2013-02-20 14:50:56\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Jeffrey\", \"Troy\", \"Narciso\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-03-21 10:41:18\", \"2018-03-14 08:05:18\"), age (\"8\", \"2\", \"3\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-09-08 20:10:13\", \"2017-09-08 20:10:13\"), dog_id (2, 13, 6), owner_id (11, 6, 2), abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 06:58:44\", \"2018-03-25 06:58:44\", \"2018-03-25 10:25:46\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"4.01\", \"9.8\", \"9.8\") | professionals : last_name (\"Frami\", \"Hayes\", \"Hayes\"), first_name (\"Ericka\", \"Sigurd\", \"Danny\"), zip_code (\"54312\", \"77129\", \"34041\"), professional_id (10, 6, 8), home_phone (\"+71(6)2898266914\", \"320-508-6023\", \"(920)304-4499x59146\"), role_code (\"Employee\", \"Veterenarian\"), city (\"Jaceton\", \"Raynorfort\", \"New Maryjane\"), email_address (\"uboehm@example.org\", \"jeichmann@example.com\", \"mekhi.little@example.org\"), cell_number (\"328.842.3792\", \"461-801-2600\", \"499-434-0215x1628\"), state (\"SouthCarolina\", \"Mississippi\", \"Indiana\"), street (\"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"17286 Waters Green\nEast Bernadinefort, CA 89573\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (349, 567, 147), treatment_id (14, 15, 1), professional_id (14, 10, 8), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-16 10:27:36\", \"2018-03-23 13:52:10\"), dog_id (1, 4, 13)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_id , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , owner_id , cell_number , email_address , last_name , street , zip_code , state , home_phone  | owners_first_name : owner_id , first_name  | dogs : date_of_birth , gender , breed_code , name , date_adopted , age , date_arrived , dog_id , owner_id , abandoned_yn , date_departed , size_code , weight  | professionals : last_name , first_name , zip_code , professional_id , home_phone 2898266914\", \"320-508-6023\", \"304-4499x59146\", role_code , city , email_address , cell_number , state , street  | treatments : treatment_type_code , cost_of_treatment , treatment_id , professional_id , date_of_treatment , dog_id ",
        "chatgpt_out": [
            "select t1.first_name, t1.last_name, t1.email_address from owners_first_name as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.state like '%North%'",
            "select t1.last_name, t1.first_name, t1.email_address from owners_first_name as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.state like '%North%'",
            "select t2.first_name, t2.last_name, t2.email_address from owners_first_name as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.state like '%North%'",
            "select t2.last_name, t2.first_name, t2.email_address from owners_first_name as t1 join owners as t2 on t1.owner_id = t2.owner_id where t2.state like '%North%'",
            "select first_name, last_name, email_address from owners where state like '%North%'"
        ],
        "query1": "select first_name, last_name, email_address from owners where state like '%North%'",
        "query2": "select t2.first_name, t1.last_name, t1.email_address from owners as t1 join owners_first_name as t2 on t1.owner_id = t2.owner_id where t1.state like '%North%'"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "question_toks": [
            "List",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "been",
            "abandoned",
            "?",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1",
        "split_map": {
            "dogs": "name"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Virginia\", \"Pennsylvania\", \"Vermont\"), home_phone (\"(799)563-0260x454\", \"1-332-849-1908\", \"363.948.1090\"), cell_number (\"1-739-421-2225x38148\", \"739-136-7202\", \"+70(4)9217952551\"), email_address (\"margaretta.runte@example.net\", \"margaretta.runte@example.net\", \"ymaggio@example.com\"), city (\"Brakusfurt\", \"Port Zackery\", \"Port Reannamouth\"), owner_id (3, 4, 7), zip_code (\"86010\", \"36871\", \"61019\"), first_name (\"Nora\", \"Nora\", \"Kade\"), street (\"692 Jaskolski Forges\", \"6950 Katherine Forges Apt. 630\", \"6950 Katherine Forges Apt. 630\"), last_name (\"Price\", \"Ondricka\", \"Schmitt\") | dogs : abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2008-10-09 22:38:53\", \"2015-02-26 21:31:22\", \"2013-02-20 14:50:56\"), dog_id (14, 11, 10), date_arrived (\"2017-04-20 00:58:55\", \"2017-07-25 15:19:07\", \"2017-07-25 15:19:07\"), weight (\"9.8\", \"8.04\", \"9.8\"), age (\"8\", \"5\", \"6\"), date_adopted (\"2018-03-10 15:06:43\", \"2018-03-10 15:06:43\", \"2018-02-25 23:45:30\"), owner_id (2, 8, 11), date_departed (\"2018-03-25 04:42:14\", \"2018-03-25 06:58:44\", \"2018-03-25 14:15:41\"), size_code (\"LGE\", \"MED\", \"SML\") | dogs_name : name (\"Houston\", \"Houston\", \"Houston\"), dog_id (11, 3, 1) | professionals : email_address (\"delphine29@example.com\", \"delphine29@example.com\", \"schneider.kathryne@example.org\"), city (\"Baileymouth\", \"West Heidi\", \"West Heidi\"), cell_number (\"011.193.9081x3186\", \"328.842.3792\", \"139-321-7313\"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"67980\", \"02281\", \"41215\"), state (\"NorthCarolina\", \"California\", \"NorthCarolina\"), home_phone (\"1-609-566-2752x25197\", \"+02(1)0259033559\", \"346.594.3739\"), professional_id (2, 7, 1), first_name (\"Ruben\", \"Brady\", \"Taryn\"), street (\"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), last_name (\"Christiansen\", \"O'Reilly\", \"Pouros\") | treatments : dog_id (15, 7, 15), professional_id (10, 6, 8), cost_of_treatment (407, 514, 945), treatment_id (6, 2, 12), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-14 19:10:40\", \"2018-02-26 09:08:53\", \"2018-02-28 17:09:43\")",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , home_phone 563-0260x454\", \"1-332-849-1908\", \"363.948.1090\", cell_number 9217952551\", email_address , city , owner_id , zip_code , first_name , street , last_name  | dogs : abandoned_yn , gender , breed_code , date_of_birth , dog_id , date_arrived , weight , age , date_adopted , owner_id , date_departed , size_code  | dogs_name : name , dog_id  | professionals : email_address , city , cell_number , role_code , zip_code , state , home_phone 0259033559\", \"346.594.3739\", professional_id , first_name , street , last_name  | treatments : dog_id , professional_id , cost_of_treatment , treatment_id , treatment_type_code , date_of_treatment ",
        "chatgpt_out": [
            "select name, age, weight from dogs_name as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t2.abandoned_yn = '1'",
            "select name, weight, age from dogs_name as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t2.abandoned_yn = '1'",
            "select t2.name, t2.age, t2.weight from dogs_name as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t2.abandoned_yn = '1'",
            "select t2.name, t2.weight, t2.age from dogs_name as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t2.abandoned_yn = '1'",
            "select dogs_name.name, dogs.age, dogs.weight from dogs_name join dogs on dogs_name.dog_id = dogs.dog_id where dogs.abandoned_yn = '1'"
        ],
        "query1": "select name, age, weight from dogs where abandoned_yn = 1",
        "query2": "select t2.name, t1.age, t1.weight from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "question_toks": [
            "List",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "been",
            "abandoned",
            "?",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1",
        "split_map": {
            "dogs": "weight"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"angeline99@example.com\", \"lynn81@example.org\", \"wpfeffer@example.net\"), last_name (\"Hamill\", \"Fisher\", \"Mertz\"), first_name (\"Orlando\", \"Melisa\", \"Johann\"), city (\"West Leonard\", \"East Maribelbury\", \"Barrettburgh\"), home_phone (\"318-052-6573\", \"(094)747-5094x8134\", \"363.948.1090\"), owner_id (6, 8, 12), cell_number (\"1-626-264-7659x1697\", \"(783)271-6744x4507\", \"1-739-421-2225x38148\"), zip_code (\"36871\", \"78297\", \"22693\"), state (\"Mississippi\", \"Arizona\", \"Mississippi\"), street (\"2417 Keara Stravenue Apt. 146\", \"2635 Caitlyn Plains\", \"57382 Yost Ridges\") | dogs : age (\"3\", \"5\", \"1\"), abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2018-01-02 03:15:29\", \"2017-04-15 09:25:31\", \"2017-05-06 08:03:52\"), date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 06:29:10\", \"2018-03-25 04:50:22\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Jesus\", \"Evangeline\", \"George\"), gender (\"1\", \"0\"), date_adopted (\"2018-03-13 12:47:15\", \"2018-03-18 07:47:40\", \"2018-03-25 08:12:51\"), owner_id (13, 10, 2), date_of_birth (\"2013-02-13 05:15:21\", \"2008-05-30 12:51:34\", \"2008-05-19 15:54:49\"), dog_id (4, 14, 1) | dogs_weight : weight (\"5.16\", \"9.48\", \"4.36\"), dog_id (10, 14, 3) | professionals : state (\"Hawaii\", \"NorthCarolina\", \"Utah\"), role_code (\"Employee\", \"Veterenarian\"), professional_id (2, 9, 7), home_phone (\"+71(6)2898266914\", \"891.475.2256\", \"(920)304-4499x59146\"), last_name (\"Pouros\", \"Hayes\", \"Considine\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), zip_code (\"41215\", \"80775\", \"67980\"), city (\"Baileymouth\", \"Baileymouth\", \"Baileymouth\"), first_name (\"Karley\", \"Velva\", \"Vernice\"), cell_number (\"461-801-2600\", \"00230569697\", \"499-434-0215x1628\"), email_address (\"jerrod.bahringer@example.org\", \"goyette.roosevelt@example.net\", \"goyette.roosevelt@example.net\") | treatments : dog_id (7, 13, 7), treatment_id (13, 7, 5), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (313, 429, 668), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-15 19:10:02\", \"2018-03-04 20:33:43\"), professional_id (14, 4, 10)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , last_name , first_name , city , home_phone 747-5094x8134\", \"363.948.1090\", owner_id , cell_number 271-6744x4507\", \"1-739-421-2225x38148\", zip_code , state , street  | dogs : age , abandoned_yn , size_code , date_arrived , date_departed , breed_code , name , gender , date_adopted , owner_id , date_of_birth , dog_id  | dogs_weight : weight , dog_id  | professionals : state , role_code , professional_id , home_phone 2898266914\", \"891.475.2256\", \"304-4499x59146\", last_name , street , zip_code , city , first_name , cell_number , email_address  | treatments : dog_id , treatment_id , treatment_type_code , cost_of_treatment , date_of_treatment , professional_id ",
        "chatgpt_out": [
            "select name, age, weight from dogs join dogs_weight on dogs.dog_id=dogs_weight.dog_id where abandoned_yn='1'",
            "select age, weight, name from dogs join dogs_weight on dogs.dog_id=dogs_weight.dog_id where abandoned_yn='1'",
            "select name, weight, age from dogs join dogs_weight on dogs.dog_id=dogs_weight.dog_id where abandoned_yn='1'",
            "select age, name, weight from dogs join dogs_weight on dogs.dog_id=dogs_weight.dog_id where abandoned_yn='1'",
            "select weight, age, name from dogs join dogs_weight on dogs.dog_id=dogs_weight.dog_id where abandoned_yn='1'"
        ],
        "query1": "select name, age, weight from dogs where abandoned_yn = 1",
        "query2": "select t1.name, t1.age, t2.weight from dogs as t1 join dogs_weight as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "question_toks": [
            "List",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "who",
            "have",
            "been",
            "abandoned",
            "?",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1",
        "split_map": {
            "dogs": "age"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : last_name (\"Fisher\", \"Prohaska\", \"Nicolas\"), cell_number (\"739-136-7202\", \"341.667.8085\", \"1-739-421-2225x38148\"), zip_code (\"00589\", \"93165\", \"86010\"), street (\"692 Jaskolski Forges\", \"59509 Mellie Mountain\", \"15828 Spencer Extensions\"), owner_id (2, 14, 8), email_address (\"ybergstrom@example.com\", \"ykris@example.com\", \"lynn81@example.org\"), home_phone (\"085.557.0379x84348\", \"1-346-655-5842x768\", \"066.264.7885\"), city (\"New Margaretteborough\", \"West Leonard\", \"Lake Valentin\"), first_name (\"Adelle\", \"Heather\", \"Nora\"), state (\"Wisconsin\", \"Arkansas\", \"SouthDakota\") | dogs : weight (\"8.95\", \"8.04\", \"4.36\"), abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), name (\"George\", \"Evangeline\", \"Lyric\"), date_adopted (\"2018-02-27 00:27:57\", \"2018-03-14 08:05:18\", \"2018-03-23 16:02:04\"), date_of_birth (\"2013-02-13 05:15:21\", \"2008-10-09 22:38:53\", \"2009-04-12 06:02:48\"), owner_id (7, 14, 11), size_code (\"LGE\", \"MED\", \"SML\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 04:50:22\", \"2018-03-25 06:58:44\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (15, 10, 7), date_arrived (\"2017-10-24 04:45:13\", \"2017-06-25 10:14:05\", \"2017-04-15 09:25:31\") | dogs_age : age (\"2\", \"5\", \"8\"), dog_id (14, 11, 9) | professionals : last_name (\"Murazik\", \"Hayes\", \"Considine\"), street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"72532 Hane Course\nLake Berylland, ND 95283\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), professional_id (14, 2, 2), zip_code (\"06646\", \"17902\", \"80775\"), city (\"Domenickton\", \"New Maryjane\", \"New Laurytown\"), home_phone (\"246-951-0080x76716\", \"+02(1)0259033559\", \"246-951-0080x76716\"), email_address (\"schneider.kathryne@example.org\", \"lucile.shanahan@example.org\", \"jerrod.bahringer@example.org\"), cell_number (\"139-321-7313\", \"011.193.9081x3186\", \"880-659-7577x736\"), state (\"California\", \"Connecticut\", \"SouthCarolina\"), first_name (\"Domenica\", \"Brady\", \"Olaf\"), role_code (\"Employee\", \"Veterenarian\") | treatments : date_of_treatment (\"2018-03-24 22:25:58\", \"2018-03-15 20:25:34\", \"2018-03-04 20:33:43\"), dog_id (1, 15, 1), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (4, 7, 5), treatment_id (11, 6, 13), cost_of_treatment (349, 945, 407)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : last_name , cell_number , zip_code , street , owner_id , email_address , home_phone , city , first_name , state  | dogs : weight , abandoned_yn , gender , name , date_adopted , date_of_birth , owner_id , size_code , date_departed , breed_code , dog_id , date_arrived  | dogs_age : age , dog_id  | professionals : last_name , street , professional_id , zip_code , city , home_phone 0259033559\", \"246-951-0080x76716\", email_address , cell_number , state , first_name , role_code  | treatments : date_of_treatment , dog_id , treatment_type_code , professional_id , treatment_id , cost_of_treatment ",
        "chatgpt_out": [
            "select name, age, weight from dogs_age natural join dogs where abandoned_yn = '1'",
            "select d.name, d.weight, da.age from dogs as d join dogs_age as da on d.dog_id = da.dog_id where d.abandoned_yn = '1'",
            "select name, weight, age from dogs natural join dogs_age where abandoned_yn = '1'",
            "select d.name, da.age, d.weight from dogs as d join dogs_age as da on d.dog_id = da.dog_id where d.abandoned_yn = '1'",
            "select name, age, weight from dogs where abandoned_yn = '1'"
        ],
        "query1": "select name, age, weight from dogs where abandoned_yn = 1",
        "query2": "select t1.name, t2.age, t1.weight from dogs as t1 join dogs_age as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "question_toks": [
            "What",
            "are",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "that",
            "were",
            "abandoned",
            "?",
            "Note",
            "that",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "in",
            "the",
            "tables",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1",
        "split_map": {
            "dogs": "name"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : last_name (\"DuBuque\", \"Funk\", \"Haley\"), email_address (\"hudson.favian@example.com\", \"ymaggio@example.com\", \"edythe62@example.org\"), owner_id (13, 4, 12), street (\"1858 Jan Park\", \"2635 Caitlyn Plains\", \"0647 Hintz Village Apt. 024\"), cell_number (\"481-483-9083x37986\", \"478.978.0729\", \"(722)768-5439x484\"), city (\"Brakusfurt\", \"Port Zackery\", \"New Margaretteborough\"), state (\"NorthDakota\", \"Pennsylvania\", \"Arkansas\"), home_phone (\"893-862-5295x61709\", \"01802479758\", \"(058)997-7627\"), zip_code (\"93165\", \"11990\", \"61019\"), first_name (\"Jaclyn\", \"Melisa\", \"Tre\") | dogs : size_code (\"LGE\", \"MED\", \"SML\"), dog_id (8, 12, 3), date_adopted (\"2018-03-23 16:02:04\", \"2018-03-05 06:05:23\", \"2018-03-18 15:12:50\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-24 19:12:22\", \"2018-03-25 15:05:16\", \"2018-03-25 06:29:10\"), age (\"2\", \"8\", \"3\"), abandoned_yn (\"1\", \"0\"), owner_id (5, 11, 5), weight (\"6.92\", \"8.96\", \"5.16\"), date_of_birth (\"2013-02-20 14:50:56\", \"2012-01-27 05:11:53\", \"2010-11-11 07:11:53\"), date_arrived (\"2017-12-22 05:02:02\", \"2017-06-18 19:45:38\", \"2018-01-17 11:44:16\"), gender (\"1\", \"0\") | dogs_name : name (\"Merritt\", \"Bessie\", \"Betty\"), dog_id (13, 2, 13) | professionals : professional_id (2, 8, 7), state (\"Wisconsin\", \"Wisconsin\", \"Hawaii\"), city (\"East Ila\", \"Baileymouth\", \"Baileymouth\"), zip_code (\"06646\", \"17902\", \"80775\"), email_address (\"uboehm@example.org\", \"cole.margarita@example.org\", \"lucile.shanahan@example.org\"), cell_number (\"880-659-7577x736\", \"461-801-2600\", \"011.193.9081x3186\"), last_name (\"Ullrich\", \"Frami\", \"Pouros\"), street (\"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\"), home_phone (\"346.594.3739\", \"1-138-287-3775\", \"246-951-0080x76716\"), first_name (\"Karley\", \"Vernice\", \"Domenica\"), role_code (\"Employee\", \"Veterenarian\") | treatments : cost_of_treatment (266, 349, 852), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (9, 14, 9), treatment_id (4, 7, 2), date_of_treatment (\"2018-02-28 17:09:43\", \"2018-03-14 19:10:40\", \"2018-03-13 12:22:58\"), dog_id (15, 7, 10)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_amount , charge_type , charge_id  | sizes : size_code , size_description  | treatment_types : treatment_type_code , treatment_type_description  | owners : last_name , email_address , owner_id , street , cell_number 768-5439x484\", city , state , home_phone 997-7627\", zip_code , first_name  | dogs : size_code , dog_id , date_adopted , breed_code , date_departed , age , abandoned_yn , owner_id , weight , date_of_birth , date_arrived , gender  | dogs_name : name , dog_id  | professionals : professional_id , state , city , zip_code , email_address , cell_number , last_name , street , home_phone , first_name , role_code  | treatments : cost_of_treatment , treatment_type_code , professional_id , treatment_id , date_of_treatment , dog_id ",
        "chatgpt_out": [
            "select t1.name, t1.age, t1.weight from dogs_name as t1 join dogs as t2 on t1.dog_id = t2.dog_id where t2.abandoned_yn = '1'",
            "select t1.age, t1.weight, t2.name from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = '1'",
            "select t1.name, t1.age, t1.weight from dogs_name as t1 join dogs as t2 on t1.dog_id = t2.dog_id where abandoned_yn = '1'",
            "select t1.age, t1.weight, t2.name from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where abandoned_yn = '1'",
            "select t1.name, t1.age, t1.weight from dogs_name as t1, dogs as t2 where t1.dog_id = t2.dog_id and t2.abandoned_yn = '1'"
        ],
        "query1": "select name, age, weight from dogs where abandoned_yn = 1",
        "query2": "select t2.name, t1.age, t1.weight from dogs as t1 join dogs_name as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "question_toks": [
            "What",
            "are",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "that",
            "were",
            "abandoned",
            "?",
            "Note",
            "that",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "in",
            "the",
            "tables",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1",
        "split_map": {
            "dogs": "weight"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : home_phone (\"893-862-5295x61709\", \"(799)563-0260x454\", \"318-052-6573\"), city (\"Lake Jennyferfort\", \"Barrettburgh\", \"East Hillardberg\"), first_name (\"Gay\", \"Tre\", \"Johann\"), zip_code (\"86010\", \"78297\", \"00589\"), state (\"Arkansas\", \"Mississippi\", \"Vermont\"), email_address (\"ybergstrom@example.com\", \"marks.gail@example.org\", \"marks.gail@example.org\"), owner_id (9, 2, 6), last_name (\"Rippin\", \"Feil\", \"DuBuque\"), cell_number (\"1-626-264-7659x1697\", \"1-739-421-2225x38148\", \"1-626-264-7659x1697\"), street (\"9212 Rosenbaum Lights\", \"692 Jaskolski Forges\", \"2417 Keara Stravenue Apt. 146\") | dogs : dog_id (12, 6, 12), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-04-20 00:58:55\", \"2017-05-06 08:03:52\", \"2017-10-16 20:06:21\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 14:15:41\", \"2018-03-25 15:05:16\"), name (\"Evangeline\", \"Hipolito\", \"Narciso\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-03-18 07:47:40\", \"2018-02-25 23:45:30\"), owner_id (8, 7, 5), age (\"5\", \"9\", \"2\"), abandoned_yn (\"1\", \"0\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2017-09-19 05:39:09\", \"2015-02-26 21:31:22\", \"2017-09-19 05:39:09\") | dogs_weight : dog_id (10, 14, 13), weight (\"9.8\", \"4.01\", \"8.16\") | professionals : home_phone (\"+02(1)0259033559\", \"(230)338-3342x585\", \"325-155-0801x7005\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), last_name (\"Walter\", \"Jacobs\", \"Frami\"), state (\"NorthCarolina\", \"Montana\", \"NewMexico\"), professional_id (5, 14, 10), cell_number (\"962-983-8109x3509\", \"1-258-285-4707x8020\", \"328.842.3792\"), city (\"North Odellfurt\", \"Kirastad\", \"New Laurytown\"), email_address (\"jacynthe.mclaughlin@example.net\", \"jerrod.bahringer@example.org\", \"marquardt.furman@example.org\"), zip_code (\"98844\", \"52476\", \"43129\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Ruben\", \"Lesly\", \"Ericka\") | treatments : date_of_treatment (\"2018-03-01 04:14:46\", \"2018-03-14 19:10:40\", \"2018-03-15 20:25:34\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (5, 7, 14), cost_of_treatment (656, 945, 349), dog_id (1, 10, 14), treatment_id (6, 8, 10)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : home_phone 563-0260x454\", \"318-052-6573\", city , first_name , zip_code , state , email_address , owner_id , last_name , cell_number , street  | dogs : dog_id , size_code , date_arrived , date_departed , name , date_adopted , owner_id , age , abandoned_yn , gender , breed_code , date_of_birth  | dogs_weight : dog_id , weight  | professionals : home_phone 0259033559\", \"338-3342x585\", \"325-155-0801x7005\", street , last_name , state , professional_id , cell_number , city , email_address , zip_code , role_code , first_name  | treatments : date_of_treatment , treatment_type_code , professional_id , cost_of_treatment , dog_id , treatment_id ",
        "chatgpt_out": [
            "select name, age, weight from dogs join dogs_weight on dogs.dog_id = dogs_weight.dog_id where dogs.abandoned_yn = '1'",
            "select d.name, d.age, w.weight from dogs as d join dogs_weight as w on d.dog_id = w.dog_id where d.abandoned_yn = '1'",
            "select name, age, weight from dogs join dogs_weight using (dog_id) where abandoned_yn = '1'",
            "select d.name, d.age, w.weight from dogs as d join dogs_weight as w using (dog_id) where d.abandoned_yn = '1'",
            "select name, age, weight from dogs natural join dogs_weight where abandoned_yn = '1'"
        ],
        "query1": "select name, age, weight from dogs where abandoned_yn = 1",
        "query2": "select t1.name, t1.age, t2.weight from dogs as t1 join dogs_weight as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "FROM",
            "Dogs",
            "WHERE",
            "abandoned_yn",
            "=",
            "1"
        ],
        "query_toks_no_value": [
            "select",
            "name",
            ",",
            "age",
            ",",
            "weight",
            "from",
            "dogs",
            "where",
            "abandoned_yn",
            "=",
            "value"
        ],
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "question_toks": [
            "What",
            "are",
            "the",
            "dog",
            "name",
            ",",
            "age",
            "and",
            "weight",
            "of",
            "the",
            "dogs",
            "that",
            "were",
            "abandoned",
            "?",
            "Note",
            "that",
            "1",
            "stands",
            "for",
            "yes",
            ",",
            "and",
            "0",
            "stands",
            "for",
            "no",
            "in",
            "the",
            "tables",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                25,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                26,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                29,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": [
                [
                    false,
                    2,
                    [
                        0,
                        [
                            0,
                            22,
                            false
                        ],
                        null
                    ],
                    1.0,
                    null
                ]
            ]
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select name, age, weight from dogs where abandoned_yn = 1",
        "split_map": {
            "dogs": "age"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : last_name (\"Rippin\", \"Nicolas\", \"Feil\"), owner_id (8, 4, 12), state (\"Washington\", \"SouthDakota\", \"Maryland\"), city (\"Port Zackery\", \"Port Zackery\", \"New Margaretteborough\"), zip_code (\"11990\", \"78297\", \"61019\"), home_phone (\"1-346-655-5842x768\", \"(799)563-0260x454\", \"1-682-845-0116x63235\"), first_name (\"Cindy\", \"Jaclyn\", \"Emelie\"), cell_number (\"121.381.3316x6535\", \"+70(4)9217952551\", \"121.381.3316x6535\"), street (\"89011 Kertzmann Spring Suite 642\", \"51934 Treutel Harbor\", \"0647 Hintz Village Apt. 024\"), email_address (\"wpfeffer@example.net\", \"ymaggio@example.com\", \"fschoen@example.net\") | dogs : owner_id (2, 14, 12), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-02-25 23:45:30\", \"2018-03-07 21:45:43\"), dog_id (12, 10, 15), weight (\"8.95\", \"8.96\", \"2.18\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2008-05-30 12:51:34\", \"2015-02-26 21:31:22\", \"2017-09-19 05:39:09\"), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-07-25 15:19:07\", \"2017-10-16 20:06:21\", \"2017-12-29 06:08:26\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 10:25:46\", \"2018-03-25 06:29:10\", \"2018-03-25 15:05:16\"), name (\"Mavis\", \"George\", \"Hipolito\") | dogs_age : dog_id (4, 6, 10), age (\"4\", \"6\", \"5\") | professionals : zip_code (\"77129\", \"06646\", \"80775\"), last_name (\"O'Reilly\", \"Tillman\", \"Hayes\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\", \"390 Bryce Drive\nNorth Dock, LA 65357-7228\"), city (\"New Laurytown\", \"Jaceton\", \"East Ila\"), email_address (\"jeichmann@example.com\", \"uboehm@example.org\", \"west.eula@example.net\"), home_phone (\"1-609-566-2752x25197\", \"(230)338-3342x585\", \"+71(6)2898266914\"), state (\"Indiana\", \"Connecticut\", \"SouthCarolina\"), professional_id (3, 15, 2), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"880-659-7577x736\", \"139-321-7313\", \"499-434-0215x1628\"), first_name (\"Vernice\", \"Ericka\", \"Lesly\") | treatments : treatment_id (8, 12, 4), date_of_treatment (\"2018-03-11 04:23:15\", \"2018-03-19 04:39:54\", \"2018-03-15 20:25:34\"), professional_id (4, 10, 14), cost_of_treatment (349, 567, 349), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (15, 12, 14)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : last_name , owner_id , state , city , zip_code , home_phone 563-0260x454\", \"1-682-845-0116x63235\", first_name , cell_number 9217952551\", \"121.381.3316x6535\", street , email_address  | dogs : owner_id , breed_code , date_adopted , dog_id , weight , abandoned_yn , date_of_birth , size_code , date_arrived , gender , date_departed , name  | dogs_age : dog_id , age  | professionals : zip_code , last_name , street , city , email_address , home_phone 338-3342x585\", \"+712898266914\", state , professional_id , role_code , cell_number , first_name  | treatments : treatment_id , date_of_treatment , professional_id , cost_of_treatment , treatment_type_code , dog_id ",
        "chatgpt_out": [
            "select name, age, weight from dogs_age join dogs on dogs_age.dog_id = dogs.dog_id where dogs.abandoned_yn = '1'",
            "select dogs.name, dogs_age.age, dogs.weight from dogs left join dogs_age on dogs.dog_id = dogs_age.dog_id where dogs.abandoned_yn = '1'",
            "select name, age, weight from dogs where abandoned_yn = '1'",
            "select dogs.name, dogs_age.age, dogs.weight from dogs, dogs_age where dogs.dog_id = dogs_age.dog_id and dogs.abandoned_yn = '1'",
            "select name, age, weight from dogs where abandoned_yn = 1"
        ],
        "query1": "select name, age, weight from dogs where abandoned_yn = 1",
        "query2": "select t1.name, t2.age, t1.weight from dogs as t1 join dogs_age as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "How much does each charge type costs? List both charge type and amount.",
        "question_toks": [
            "How",
            "much",
            "does",
            "each",
            "charge",
            "type",
            "costs",
            "?",
            "List",
            "both",
            "charge",
            "type",
            "and",
            "amount",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "charges": "charge_id"
        },
        "orig_query": "select charge_type, charge_amount from charges",
        "split_map": {
            "charges": "charge_type"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640) | charges_charge_type : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : street (\"2417 Keara Stravenue Apt. 146\", \"6950 Katherine Forges Apt. 630\", \"15828 Spencer Extensions\"), last_name (\"Fisher\", \"Prohaska\", \"Stoltenberg\"), email_address (\"pearlie18@example.com\", \"hudson.favian@example.com\", \"zboncak.madonna@example.net\"), zip_code (\"25609\", \"86010\", \"86010\"), first_name (\"Lorenz\", \"Cindy\", \"Rachelle\"), home_phone (\"1-346-655-5842x768\", \"893-862-5295x61709\", \"916.976.9480x13851\"), city (\"Port Zackery\", \"South Afton\", \"Brakusfurt\"), state (\"Wisconsin\", \"Florida\", \"SouthDakota\"), cell_number (\"739-136-7202\", \"121.381.3316x6535\", \"633.455.3045x85484\"), owner_id (4, 13, 2) | dogs : weight (\"8.95\", \"4.36\", \"1.72\"), abandoned_yn (\"1\", \"0\"), age (\"9\", \"3\", \"5\"), size_code (\"LGE\", \"MED\", \"SML\"), date_of_birth (\"2018-03-17 04:05:12\", \"2009-04-12 06:02:48\", \"2008-10-09 22:38:53\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-21 10:41:18\", \"2018-03-23 16:02:04\"), owner_id (1, 13, 10), date_arrived (\"2017-05-06 08:03:52\", \"2017-10-16 20:06:21\", \"2017-12-29 23:24:13\"), gender (\"1\", \"0\"), dog_id (5, 15, 7), name (\"Narciso\", \"Betty\", \"Betty\"), date_departed (\"2018-03-25 05:07:47\", \"2018-03-25 04:42:14\", \"2018-03-25 15:05:16\"), breed_code (\"ESK\", \"BUL\", \"HUS\") | professionals : first_name (\"Domenica\", \"Olaf\", \"Domenica\"), email_address (\"jeichmann@example.com\", \"west.eula@example.net\", \"lambert62@example.org\"), cell_number (\"00230569697\", \"1-185-137-1945x409\", \"011.193.9081x3186\"), street (\"6915 Oberbrunner Point Suite 491\nGleasonville, LA \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), last_name (\"Watsica\", \"Christiansen\", \"Watsica\"), city (\"Domenickton\", \"Domenickton\", \"New Laurytown\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"971.048.3763x9404\", \"1-138-287-3775\", \"1-609-566-2752x25197\"), state (\"Alabama\", \"Indiana\", \"NewMexico\"), zip_code (\"43129\", \"02281\", \"80775\"), professional_id (4, 14, 7) | treatments : treatment_id (9, 7, 13), dog_id (2, 4, 4), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-24 22:25:58\", \"2018-03-19 04:39:54\"), professional_id (7, 4, 14), cost_of_treatment (567, 139, 668)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_amount  | charges_charge_type : charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : street , last_name , email_address , zip_code , first_name , home_phone , city , state , cell_number , owner_id  | dogs : weight , abandoned_yn , age , size_code , date_of_birth , date_adopted , owner_id , date_arrived , gender , dog_id , name , date_departed , breed_code  | professionals : first_name , email_address , cell_number , street , last_name , city , role_code , home_phone , state , zip_code , professional_id  | treatments : treatment_id , dog_id , treatment_type_code , date_of_treatment , professional_id , cost_of_treatment ",
        "chatgpt_out": [
            "select t1.charge_type, t2.charge_amount from charges_charge_type as t1 join charges as t2 on t1.charge_id = t2.charge_id",
            "select t1.charge_amount, t2.charge_type from charges as t1 join charges_charge_type as t2 on t1.charge_id = t2.charge_id",
            "select t1.charge_type, t2.cost_of_treatment from charges_charge_type as t1 join treatments as t2 on t1.charge_id = t2.treatment_id",
            "select t1.cost_of_treatment, t2.charge_type from treatments as t1 join charges_charge_type as t2 on t1.treatment_id = t2.charge_id",
            "select t2.charge_type, t1.charge_amount from charges as t1 join charges_charge_type as t2 on t1.charge_id = t2.charge_id"
        ],
        "query1": "select charge_type, charge_amount from charges",
        "query2": "select t2.charge_type, t1.charge_amount from charges as t1 join charges_charge_type as t2 on t1.charge_id = t2.charge_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "How much does each charge type costs? List both charge type and amount.",
        "question_toks": [
            "How",
            "much",
            "does",
            "each",
            "charge",
            "type",
            "costs",
            "?",
            "List",
            "both",
            "charge",
            "type",
            "and",
            "amount",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "charges": "charge_id"
        },
        "orig_query": "select charge_type, charge_amount from charges",
        "split_map": {
            "charges": "charge_amount"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | charges_charge_amount : charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : cell_number (\"633.455.3045x85484\", \"121.381.3316x6535\", \"(257)399-3116\"), home_phone (\"1-332-849-1908\", \"01802479758\", \"1-682-845-0116x63235\"), zip_code (\"25609\", \"22731\", \"25609\"), state (\"Virginia\", \"Arizona\", \"Indiana\"), email_address (\"wpfeffer@example.net\", \"kturner@example.net\", \"pearlie18@example.com\"), city (\"Lake Jennyferfort\", \"South Daisyfurt\", \"Lake Carleyborough\"), street (\"1858 Jan Park\", \"9212 Rosenbaum Lights\", \"68118 Daniel Row\"), owner_id (15, 7, 1), first_name (\"Orlando\", \"Cindy\", \"Emelie\"), last_name (\"Nicolas\", \"Haley\", \"Schmitt\") | dogs : breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Bessie\", \"Hipolito\", \"Betty\"), weight (\"1.39\", \"1.72\", \"7.57\"), gender (\"1\", \"0\"), age (\"9\", \"8\", \"8\"), dog_id (6, 13, 11), abandoned_yn (\"1\", \"0\"), date_arrived (\"2017-10-24 04:45:13\", \"2017-06-18 19:45:38\", \"2017-12-29 06:08:26\"), date_of_birth (\"2010-11-11 07:11:53\", \"2012-10-14 14:44:37\", \"2013-02-20 14:50:56\"), size_code (\"LGE\", \"MED\", \"SML\"), date_adopted (\"2018-02-25 23:45:30\", \"2018-03-05 06:05:23\", \"2018-03-25 08:12:51\"), date_departed (\"2018-03-24 19:36:59\", \"2018-03-25 13:07:04\", \"2018-03-25 02:11:32\"), owner_id (8, 13, 7) | professionals : email_address (\"mekhi.little@example.org\", \"lourdes.lowe@example.net\", \"cole.margarita@example.org\"), professional_id (8, 4, 5), first_name (\"Velva\", \"Velva\", \"Winfield\"), last_name (\"Ullrich\", \"Tillman\", \"Christiansen\"), zip_code (\"02281\", \"41215\", \"02281\"), role_code (\"Employee\", \"Veterenarian\"), state (\"Alabama\", \"Mississippi\", \"Utah\"), cell_number (\"609-405-2990\", \"(369)908-7311x065\", \"880-659-7577x736\"), home_phone (\"+02(1)0259033559\", \"022.529.0550x1319\", \"325-155-0801x7005\"), street (\"17286 Waters Green\nEast Bernadinefort, CA 89573\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"36895 Eli Ferry\nPort Marcelle, FL 45712\"), city (\"East Ila\", \"East Ila\", \"Juddton\") | treatments : treatment_id (15, 9, 1), date_of_treatment (\"2018-03-01 04:14:46\", \"2018-03-01 04:14:46\", \"2018-03-14 19:10:40\"), professional_id (7, 7, 6), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), dog_id (13, 2, 14), cost_of_treatment (428, 668, 945)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id  | charges_charge_amount : charge_amount , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : cell_number 399-3116\", home_phone , zip_code , state , email_address , city , street , owner_id , first_name , last_name  | dogs : breed_code , name , weight , gender , age , dog_id , abandoned_yn , date_arrived , date_of_birth , size_code , date_adopted , date_departed , owner_id  | professionals : email_address , professional_id , first_name , last_name , zip_code , role_code , state , cell_number 908-7311x065\", \"880-659-7577x736\", home_phone 0259033559\", \"022.529.0550x1319\", \"325-155-0801x7005\", street , city  | treatments : treatment_id , date_of_treatment , professional_id , treatment_type_code , dog_id , cost_of_treatment ",
        "chatgpt_out": [
            "select charge_type, charge_amount from charges_charge_amount join charges on charges_charge_amount.charge_id = charges.charge_id",
            "select charge_amount, charge_type from charges_charge_amount join charges on charges_charge_amount.charge_id = charges.charge_id",
            "select charges.charge_type, charges_charge_amount.charge_amount from charges_charge_amount join charges on charges_charge_amount.charge_id = charges.charge_id",
            "select charges_charge_amount.charge_amount, charges.charge_type from charges_charge_amount join charges on charges_charge_amount.charge_id = charges.charge_id",
            "select charge_type, sum(charge_amount) as total_cost from charges_charge_amount join charges on charges_charge_amount.charge_id = charges.charge_id group by charge_type"
        ],
        "query1": "select charge_type, charge_amount from charges",
        "query2": "select t1.charge_type, t2.charge_amount from charges as t1 join charges_charge_amount as t2 on t1.charge_id = t2.charge_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "List each charge type and its amount.",
        "question_toks": [
            "List",
            "each",
            "charge",
            "type",
            "and",
            "its",
            "amount",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "charges": "charge_id"
        },
        "orig_query": "select charge_type, charge_amount from charges",
        "split_map": {
            "charges": "charge_type"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640) | charges_charge_type : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : email_address (\"christy49@example.org\", \"fschoen@example.net\", \"marks.gail@example.org\"), cell_number (\"+00(2)4323592985\", \"1-739-421-2225x38148\", \"559.874.3011x989\"), owner_id (4, 15, 3), state (\"Mississippi\", \"Vermont\", \"SouthDakota\"), first_name (\"Cindy\", \"Tre\", \"Kade\"), home_phone (\"893-862-5295x61709\", \"(058)997-7627\", \"(094)747-5094x8134\"), last_name (\"Haley\", \"Funk\", \"Price\"), city (\"East Hillardberg\", \"Brakusfurt\", \"Lake Carleyborough\"), street (\"57382 Yost Ridges\", \"0647 Hintz Village Apt. 024\", \"6950 Katherine Forges Apt. 630\"), zip_code (\"45244\", \"11990\", \"11990\") | dogs : dog_id (1, 4, 8), size_code (\"LGE\", \"MED\", \"SML\"), age (\"6\", \"5\", \"5\"), date_arrived (\"2017-06-25 10:14:05\", \"2017-10-16 20:06:21\", \"2017-12-22 05:02:02\"), date_of_birth (\"2012-05-31 08:01:36\", \"2008-05-30 12:51:34\", \"2017-09-19 05:39:09\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-02-27 00:27:57\", \"2018-03-23 16:02:04\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Houston\", \"Jeffrey\", \"Troy\"), abandoned_yn (\"1\", \"0\"), weight (\"2.18\", \"8.04\", \"4.01\"), date_departed (\"2018-03-25 02:47:40\", \"2018-03-25 15:05:16\", \"2018-03-25 13:07:04\"), gender (\"1\", \"0\"), owner_id (8, 8, 3) | professionals : home_phone (\"346.594.3739\", \"1-609-566-2752x25197\", \"312.216.3352\"), state (\"Hawaii\", \"California\", \"Alabama\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\"), cell_number (\"139-321-7313\", \"011.193.9081x3186\", \"(275)939-2435x80863\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Watsica\", \"Considine\", \"Considine\"), zip_code (\"34041\", \"80775\", \"17902\"), email_address (\"schneider.kathryne@example.org\", \"uboehm@example.org\", \"marquardt.furman@example.org\"), city (\"Domenickton\", \"New Laurytown\", \"Borisside\"), first_name (\"Brady\", \"Monte\", \"Brady\"), professional_id (12, 10, 7) | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (11, 10, 1), date_of_treatment (\"2018-03-19 04:39:54\", \"2018-03-13 12:22:58\", \"2018-03-04 20:33:43\"), professional_id (9, 9, 6), cost_of_treatment (313, 514, 139), dog_id (7, 4, 2)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount  | charges_charge_type : charge_type , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : email_address , cell_number 4323592985\", \"1-739-421-2225x38148\", \"559.874.3011x989\", owner_id , state , first_name , home_phone 997-7627\", \"747-5094x8134\", last_name , city , street , zip_code  | dogs : dog_id , size_code , age , date_arrived , date_of_birth , date_adopted , breed_code , name , abandoned_yn , weight , date_departed , gender , owner_id  | professionals : home_phone , state , street , cell_number 939-2435x80863\", role_code , last_name , zip_code , email_address , city , first_name , professional_id  | treatments : treatment_type_code , treatment_id , date_of_treatment , professional_id , cost_of_treatment , dog_id ",
        "chatgpt_out": [
            "select charge_type, charge_amount from charges_charge_type join charges on charges_charge_type.charge_id = charges.charge_id",
            "select charge_amount, charge_type from charges join charges_charge_type on charges.charge_id = charges_charge_type.charge_id",
            "select charge_type, charge_amount from charges_charge_type t1 join charges t2 on t1.charge_id = t2.charge_id",
            "select charge_amount, charge_type from charges t1 join charges_charge_type t2 on t1.charge_id = t2.charge_id",
            "select t2.charge_type, t1.charge_amount from charges as t1 join charges_charge_type as t2 on t1.charge_id = t2.charge_id"
        ],
        "query1": "select charge_type, charge_amount from charges",
        "query2": "select t2.charge_type, t1.charge_amount from charges as t1 join charges_charge_type as t2 on t1.charge_id = t2.charge_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "charge_type",
            ",",
            "charge_amount",
            "FROM",
            "Charges"
        ],
        "query_toks_no_value": [
            "select",
            "charge_type",
            ",",
            "charge_amount",
            "from",
            "charges"
        ],
        "question": "List each charge type and its amount.",
        "question_toks": [
            "List",
            "each",
            "charge",
            "type",
            "and",
            "its",
            "amount",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        1
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "charges": "charge_id"
        },
        "orig_query": "select charge_type, charge_amount from charges",
        "split_map": {
            "charges": "charge_amount"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | charges_charge_amount : charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : city (\"Lake Valentin\", \"East Hillardberg\", \"Brakusfurt\"), cell_number (\"559.874.3011x989\", \"+70(4)9217952551\", \"739-136-7202\"), street (\"59509 Mellie Mountain\", \"0647 Hintz Village Apt. 024\", \"2417 Keara Stravenue Apt. 146\"), email_address (\"marks.gail@example.org\", \"pearlie18@example.com\", \"marks.gail@example.org\"), first_name (\"Lorenz\", \"Emelie\", \"Rolando\"), zip_code (\"93165\", \"00589\", \"78297\"), home_phone (\"(799)563-0260x454\", \"1-682-845-0116x63235\", \"1-682-845-0116x63235\"), state (\"Washington\", \"SouthDakota\", \"Arizona\"), last_name (\"Mertz\", \"Rippin\", \"DuBuque\"), owner_id (14, 3, 14) | dogs : date_adopted (\"2018-03-10 15:06:43\", \"2018-03-05 06:05:23\", \"2018-03-06 16:32:11\"), dog_id (15, 5, 6), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_of_birth (\"2013-02-20 14:50:56\", \"2018-03-17 04:05:12\", \"2013-02-20 14:50:56\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-12-29 23:24:13\", \"2017-10-16 20:06:21\"), name (\"Narciso\", \"Jesus\", \"Betty\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (12, 6, 13), weight (\"8.16\", \"3.52\", \"9.48\"), gender (\"1\", \"0\"), date_departed (\"2018-03-25 02:47:40\", \"2018-03-25 06:29:10\", \"2018-03-25 06:46:07\"), abandoned_yn (\"1\", \"0\"), age (\"6\", \"8\", \"4\") | professionals : zip_code (\"54312\", \"52476\", \"34041\"), first_name (\"Winfield\", \"Ericka\", \"Brady\"), home_phone (\"+02(1)0259033559\", \"+43(5)1132733868\", \"(230)338-3342x585\"), email_address (\"jacynthe.mclaughlin@example.net\", \"mekhi.little@example.org\", \"west.eula@example.net\"), city (\"East Ila\", \"North Odellfurt\", \"West Heidi\"), last_name (\"Kshlerin\", \"Murazik\", \"Hayes\"), street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\", \"88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194\"), role_code (\"Employee\", \"Veterenarian\"), professional_id (5, 13, 13), cell_number (\"962-983-8109x3509\", \"1-185-137-1945x409\", \"1-258-285-4707x8020\"), state (\"NorthCarolina\", \"Montana\", \"NorthCarolina\") | treatments : dog_id (2, 1, 14), date_of_treatment (\"2018-03-01 04:14:46\", \"2018-02-28 17:09:43\", \"2018-03-11 04:23:15\"), cost_of_treatment (349, 656, 266), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (6, 10, 9), treatment_id (12, 5, 11)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_type , charge_id  | charges_charge_amount : charge_amount , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : city , cell_number 9217952551\", \"739-136-7202\", street , email_address , first_name , zip_code , home_phone 563-0260x454\", \"1-682-845-0116x63235\", \"1-682-845-0116x63235\", state , last_name , owner_id  | dogs : date_adopted , dog_id , breed_code , date_of_birth , date_arrived , name , size_code , owner_id , weight , gender , date_departed , abandoned_yn , age  | professionals : zip_code , first_name , home_phone 0259033559\", \"+431132733868\", \"338-3342x585\", email_address , city , last_name , street , role_code , professional_id , cell_number , state  | treatments : dog_id , date_of_treatment , cost_of_treatment , treatment_type_code , professional_id , treatment_id ",
        "chatgpt_out": [
            "select charge_type, charge_amount from charges_charge_amount join charges on charges_charge_amount.charge_id = charges.charge_id",
            "select charge_amount, charge_type from charges_charge_amount join charges on charges_charge_amount.charge_id = charges.charge_id",
            "select c1.charge_type, c2.charge_amount from charges as c1 join charges_charge_amount as c2 on c1.charge_id = c2.charge_id",
            "select c2.charge_amount, c1.charge_type from charges as c1 join charges_charge_amount as c2 on c1.charge_id = c2.charge_id",
            "select charges.charge_type, charges_charge_amount.charge_amount from charges_charge_amount, charges where charges_charge_amount.charge_id = charges.charge_id"
        ],
        "query1": "select charge_type, charge_amount from charges",
        "query2": "select t1.charge_type, t2.charge_amount from charges as t1 join charges_charge_amount as t2 on t1.charge_id = t2.charge_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "List the email, cell phone and home phone of all the professionals.",
        "question_toks": [
            "List",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "all",
            "the",
            "professionals",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select email_address, cell_number, home_phone from professionals",
        "split_map": {
            "professionals": "cell_number"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : zip_code (\"78297\", \"25609\", \"25609\"), cell_number (\"559.874.3011x989\", \"(722)768-5439x484\", \"478.978.0729\"), email_address (\"wpfeffer@example.net\", \"pearlie18@example.com\", \"fschoen@example.net\"), street (\"51934 Treutel Harbor\", \"15828 Spencer Extensions\", \"59509 Mellie Mountain\"), city (\"Lake Valentin\", \"East Maribelbury\", \"Port Reannamouth\"), owner_id (7, 4, 3), state (\"Washington\", \"Wisconsin\", \"Arizona\"), last_name (\"Schmitt\", \"Nicolas\", \"DuBuque\"), home_phone (\"085.557.0379x84348\", \"318-052-6573\", \"085.557.0379x84348\"), first_name (\"Heather\", \"Johann\", \"Cindy\") | dogs : date_arrived (\"2017-09-08 20:10:13\", \"2017-06-18 19:45:38\", \"2017-10-24 04:45:13\"), weight (\"1.39\", \"4.01\", \"8.95\"), dog_id (1, 11, 14), gender (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (12, 3, 8), age (\"4\", \"3\", \"4\"), date_departed (\"2018-03-25 02:11:32\", \"2018-03-25 04:42:14\", \"2018-03-25 13:07:04\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-13 12:47:15\", \"2018-03-21 10:41:18\"), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), name (\"Jeffrey\", \"Bessie\", \"Kacey\"), date_of_birth (\"2010-11-11 07:11:53\", \"2008-05-19 15:54:49\", \"2012-05-03 21:42:25\") | professionals : street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \"), professional_id (7, 5, 5), city (\"Kirastad\", \"McLaughlinfort\", \"New Laurytown\"), first_name (\"Monte\", \"Karley\", \"Danny\"), home_phone (\"325-155-0801x7005\", \"312.216.3352\", \"246-951-0080x76716\"), last_name (\"Walter\", \"Christiansen\", \"Hyatt\"), role_code (\"Employee\", \"Veterenarian\"), state (\"California\", \"SouthCarolina\", \"NorthCarolina\"), email_address (\"mekhi.little@example.org\", \"cole.margarita@example.org\", \"lucile.shanahan@example.org\"), zip_code (\"52476\", \"02281\", \"34041\") | professionals_cell_number : professional_id (6, 2, 15), cell_number (\"1-185-137-1945x409\", \"139-321-7313\", \"461-801-2600\") | treatments : treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (668, 429, 313), professional_id (5, 8, 6), dog_id (14, 10, 13), treatment_id (13, 11, 3), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-15 20:25:34\", \"2018-02-28 17:09:43\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : zip_code , cell_number 768-5439x484\", \"478.978.0729\", email_address , street , city , owner_id , state , last_name , home_phone , first_name  | dogs : date_arrived , weight , dog_id , gender , size_code , owner_id , age , date_departed , date_adopted , abandoned_yn , breed_code , name , date_of_birth  | professionals : street , professional_id , city , first_name , home_phone , last_name , role_code , state , email_address , zip_code  | professionals_cell_number : professional_id , cell_number  | treatments : treatment_type_code , cost_of_treatment , professional_id , dog_id , treatment_id , date_of_treatment ",
        "chatgpt_out": [
            "select email_address, cell_number, home_phone from professionals",
            "select cell_number, home_phone, email_address from professionals",
            "select home_phone, email_address, cell_number from professionals",
            "select email_address, home_phone, cell_number from professionals",
            "select cell_number, email_address, home_phone from professionals"
        ],
        "query1": "select email_address, cell_number, home_phone from professionals",
        "query2": "select t1.email_address, t2.cell_number, t1.home_phone from professionals as t1 join professionals_cell_number as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "List the email, cell phone and home phone of all the professionals.",
        "question_toks": [
            "List",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "all",
            "the",
            "professionals",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select email_address, cell_number, home_phone from professionals",
        "split_map": {
            "professionals": "home_phone"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : owner_id (6, 15, 14), first_name (\"Johann\", \"Johann\", \"Jaclyn\"), street (\"1204 Mae Highway Apt. 107\", \"60352 Kayleigh Crossing Suite 700\", \"692 Jaskolski Forges\"), last_name (\"Stoltenberg\", \"DuBuque\", \"Schmitt\"), email_address (\"pearlie18@example.com\", \"ymaggio@example.com\", \"christy49@example.org\"), cell_number (\"+70(4)9217952551\", \"+70(4)9217952551\", \"1-626-264-7659x1697\"), zip_code (\"45244\", \"87304\", \"02647\"), state (\"Washington\", \"NewYork\", \"Arizona\"), city (\"East Hillardberg\", \"Brakusfurt\", \"Lake Valentin\"), home_phone (\"085.557.0379x84348\", \"916.976.9480x13851\", \"318-052-6573\") | dogs : breed_code (\"ESK\", \"BUL\", \"HUS\"), date_departed (\"2018-03-25 04:50:22\", \"2018-03-24 23:48:59\", \"2018-03-25 04:42:14\"), abandoned_yn (\"1\", \"0\"), date_adopted (\"2018-03-21 10:41:18\", \"2018-03-05 06:05:23\", \"2018-03-25 08:12:51\"), name (\"Mavis\", \"Lyric\", \"Mavis\"), age (\"8\", \"9\", \"5\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-12-29 06:08:26\", \"2017-10-24 04:45:13\"), size_code (\"LGE\", \"MED\", \"SML\"), weight (\"6.92\", \"4.36\", \"8.96\"), gender (\"1\", \"0\"), dog_id (11, 2, 9), owner_id (10, 6, 8), date_of_birth (\"2017-09-19 05:39:09\", \"2013-02-20 14:50:56\", \"2012-05-31 08:01:36\") | professionals : role_code (\"Employee\", \"Veterenarian\"), last_name (\"Braun\", \"Jacobs\", \"Christiansen\"), first_name (\"Ericka\", \"Brady\", \"Olaf\"), professional_id (2, 4, 7), state (\"Wisconsin\", \"NewMexico\", \"SouthCarolina\"), city (\"West Heidi\", \"South Rockyport\", \"Juddton\"), cell_number (\"1-181-670-9466\", \"461-801-2600\", \"1-258-285-4707x8020\"), street (\"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"72532 Hane Course\nLake Berylland, ND 95283\"), zip_code (\"80775\", \"52476\", \"98844\"), email_address (\"west.eula@example.net\", \"schneider.kathryne@example.org\", \"jacynthe.mclaughlin@example.net\") | professionals_home_phone : professional_id (12, 4, 1), home_phone (\"1-138-287-3775\", \"325-155-0801x7005\", \"346.594.3739\") | treatments : cost_of_treatment (945, 514, 139), professional_id (8, 4, 14), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\", \"2018-03-24 22:25:58\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (15, 9, 10), dog_id (2, 4, 1)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : owner_id , first_name , street , last_name , email_address , cell_number 9217952551\", \"+709217952551\", \"1-626-264-7659x1697\", zip_code , state , city , home_phone  | dogs : breed_code , date_departed , abandoned_yn , date_adopted , name , age , date_arrived , size_code , weight , gender , dog_id , owner_id , date_of_birth  | professionals : role_code , last_name , first_name , professional_id , state , city , cell_number , street , zip_code , email_address  | professionals_home_phone : professional_id , home_phone  | treatments : cost_of_treatment , professional_id , date_of_treatment , treatment_type_code , treatment_id , dog_id ",
        "chatgpt_out": [
            "select email_address, cell_number, home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id",
            "select cell_number, email_address, home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id",
            "select email_address, home_phone, cell_number from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id",
            "select home_phone, email_address, cell_number from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id",
            "select cell_number, home_phone, email_address from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id"
        ],
        "query1": "select email_address, cell_number, home_phone from professionals",
        "query2": "select t1.email_address, t1.cell_number, t2.home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "List the email, cell phone and home phone of all the professionals.",
        "question_toks": [
            "List",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "all",
            "the",
            "professionals",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select email_address, cell_number, home_phone from professionals",
        "split_map": {
            "professionals": "email_address"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : last_name (\"Hamill\", \"Rippin\", \"Feil\"), street (\"59509 Mellie Mountain\", \"59509 Mellie Mountain\", \"9212 Rosenbaum Lights\"), home_phone (\"(799)563-0260x454\", \"1-346-655-5842x768\", \"893-862-5295x61709\"), city (\"New Margaretteborough\", \"Lake Valentin\", \"South Afton\"), email_address (\"christy49@example.org\", \"zboncak.madonna@example.net\", \"zboncak.madonna@example.net\"), cell_number (\"(257)399-3116\", \"1-626-264-7659x1697\", \"(257)399-3116\"), first_name (\"Johann\", \"Lorenz\", \"Tre\"), state (\"Vermont\", \"Arizona\", \"SouthDakota\"), zip_code (\"25609\", \"11990\", \"35747\"), owner_id (7, 14, 2) | dogs : abandoned_yn (\"1\", \"0\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 13:07:04\", \"2018-03-25 06:46:07\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (12, 13, 6), owner_id (7, 12, 10), name (\"Narciso\", \"George\", \"Hipolito\"), gender (\"1\", \"0\"), date_of_birth (\"2008-05-30 12:51:34\", \"2013-02-20 14:50:56\", \"2008-10-09 22:38:53\"), weight (\"5.16\", \"8.95\", \"8.04\"), age (\"9\", \"6\", \"3\"), date_adopted (\"2018-03-14 08:05:18\", \"2018-03-14 08:05:18\", \"2018-03-18 07:47:40\"), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-04-15 09:25:31\", \"2017-10-24 04:45:13\", \"2017-05-06 08:03:52\") | professionals : street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), home_phone (\"971.048.3763x9404\", \"246-951-0080x76716\", \"891.475.2256\"), city (\"North Odellfurt\", \"New Laurytown\", \"Jaceton\"), role_code (\"Employee\", \"Veterenarian\"), cell_number (\"328.842.3792\", \"011.193.9081x3186\", \"(369)908-7311x065\"), professional_id (2, 3, 6), zip_code (\"33020\", \"54312\", \"06646\"), state (\"Wisconsin\", \"Utah\", \"Montana\"), first_name (\"Karley\", \"Ruben\", \"Taryn\"), last_name (\"Hyatt\", \"Ullrich\", \"O'Reilly\") | professionals_email_address : email_address (\"lourdes.lowe@example.net\", \"west.eula@example.net\", \"jacynthe.mclaughlin@example.net\"), professional_id (5, 4, 7) | treatments : dog_id (2, 10, 7), treatment_id (7, 13, 7), date_of_treatment (\"2018-03-23 13:52:10\", \"2018-03-13 12:22:58\", \"2018-03-14 19:10:40\"), professional_id (14, 7, 4), cost_of_treatment (567, 514, 139), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_amount , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : last_name , street , home_phone 563-0260x454\", \"1-346-655-5842x768\", \"893-862-5295x61709\", city , email_address , cell_number 399-3116\", \"1-626-264-7659x1697\", \"399-3116\", first_name , state , zip_code , owner_id  | dogs : abandoned_yn , date_departed , breed_code , dog_id , owner_id , name , gender , date_of_birth , weight , age , date_adopted , size_code , date_arrived  | professionals : street , home_phone , city , role_code , cell_number 908-7311x065\", professional_id , zip_code , state , first_name , last_name  | professionals_email_address : email_address , professional_id  | treatments : dog_id , treatment_id , date_of_treatment , professional_id , cost_of_treatment , treatment_type_code ",
        "chatgpt_out": [
            "select email_address, cell_number, home_phone from professionals",
            "select professional.email_address, professional.cell_number, professional.home_phone from professionals as professional",
            "select email_address, cell_number, home_phone from professionals_email_address as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
            "select t2.email_address, t2.cell_number, t2.home_phone from professionals_email_address as t1 join professionals as t2 on t1.professional_id = t2.professional_id",
            "select email_address, cell_number, home_phone from professionals where role_code = 'Veterenarian' or role_code = 'Employee'"
        ],
        "query1": "select email_address, cell_number, home_phone from professionals",
        "query2": "select t2.email_address, t1.cell_number, t1.home_phone from professionals as t1 join professionals_email_address as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "What are the email, cell phone and home phone of each professional?",
        "question_toks": [
            "What",
            "are",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "each",
            "professional",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select email_address, cell_number, home_phone from professionals",
        "split_map": {
            "professionals": "cell_number"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : last_name (\"Fisher\", \"DuBuque\", \"Price\"), home_phone (\"(058)997-7627\", \"363.948.1090\", \"(058)997-7627\"), cell_number (\"1-626-264-7659x1697\", \"(257)399-3116\", \"481-483-9083x37986\"), first_name (\"Jaclyn\", \"Emelie\", \"Emelie\"), owner_id (8, 15, 10), street (\"0647 Hintz Village Apt. 024\", \"1858 Jan Park\", \"89011 Kertzmann Spring Suite 642\"), state (\"SouthDakota\", \"NewYork\", \"Mississippi\"), email_address (\"lynn81@example.org\", \"ykris@example.com\", \"christy49@example.org\"), zip_code (\"92406\", \"22731\", \"22731\"), city (\"Port Reannamouth\", \"New Margaretteborough\", \"Brakusfurt\") | dogs : date_of_birth (\"2010-11-11 07:11:53\", \"2008-05-19 15:54:49\", \"2013-02-13 05:15:21\"), weight (\"2.18\", \"8.95\", \"3.52\"), gender (\"1\", \"0\"), owner_id (3, 1, 11), name (\"Hipolito\", \"Holden\", \"Houston\"), dog_id (3, 6, 15), abandoned_yn (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-02-27 00:27:57\", \"2018-03-07 21:45:43\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 06:58:44\", \"2018-03-25 14:15:41\"), size_code (\"LGE\", \"MED\", \"SML\"), age (\"9\", \"6\", \"4\"), date_arrived (\"2017-05-06 08:03:52\", \"2017-10-25 00:55:34\", \"2017-06-25 10:14:05\") | professionals : city (\"East Ila\", \"Raynorfort\", \"McLaughlinfort\"), email_address (\"schneider.kathryne@example.org\", \"west.eula@example.net\", \"jerrod.bahringer@example.org\"), role_code (\"Employee\", \"Veterenarian\"), street (\"07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96\", \"68589 Bradly Manor\nNew Audrey, IN 91497\", \"68589 Bradly Manor\nNew Audrey, IN 91497\"), last_name (\"Christiansen\", \"Walter\", \"Walter\"), zip_code (\"17902\", \"34041\", \"52476\"), state (\"Connecticut\", \"Hawaii\", \"Connecticut\"), home_phone (\"(230)338-3342x585\", \"312.216.3352\", \"891.475.2256\"), professional_id (4, 9, 5), first_name (\"Lesly\", \"Karley\", \"Ruben\") | professionals_cell_number : cell_number (\"880-659-7577x736\", \"00230569697\", \"00230569697\"), professional_id (8, 15, 4) | treatments : professional_id (9, 5, 8), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-02-26 09:08:53\", \"2018-03-19 04:39:54\", \"2018-03-23 13:52:10\"), treatment_id (9, 4, 12), cost_of_treatment (668, 313, 349), dog_id (15, 13, 10)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : last_name , home_phone 997-7627\", \"363.948.1090\", \"997-7627\", cell_number 399-3116\", \"481-483-9083x37986\", first_name , owner_id , street , state , email_address , zip_code , city  | dogs : date_of_birth , weight , gender , owner_id , name , dog_id , abandoned_yn , breed_code , date_adopted , date_departed , size_code , age , date_arrived  | professionals : city , email_address , role_code , street , last_name , zip_code , state , home_phone 338-3342x585\", \"312.216.3352\", \"891.475.2256\", professional_id , first_name  | professionals_cell_number : cell_number , professional_id  | treatments : professional_id , treatment_type_code , date_of_treatment , treatment_id , cost_of_treatment , dog_id ",
        "chatgpt_out": [
            "select email_address, home_phone, cell_number from professionals",
            "select home_phone, email_address, cell_number from professionals",
            "select cell_number, email_address, home_phone from professionals",
            "select email_address, cell_number, home_phone from professionals",
            "select cell_number, home_phone, email_address from professionals"
        ],
        "query1": "select email_address, cell_number, home_phone from professionals",
        "query2": "select t1.email_address, t2.cell_number, t1.home_phone from professionals as t1 join professionals_cell_number as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "What are the email, cell phone and home phone of each professional?",
        "question_toks": [
            "What",
            "are",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "each",
            "professional",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select email_address, cell_number, home_phone from professionals",
        "split_map": {
            "professionals": "home_phone"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3), charge_amount (98, 322, 640) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : state (\"Indiana\", \"Virginia\", \"NewYork\"), owner_id (5, 1, 15), last_name (\"DuBuque\", \"Fisher\", \"Prohaska\"), email_address (\"margaretta.runte@example.net\", \"wpfeffer@example.net\", \"ybergstrom@example.com\"), zip_code (\"25609\", \"02647\", \"35747\"), cell_number (\"(257)399-3116\", \"559.874.3011x989\", \"478.978.0729\"), home_phone (\"130-796-4589x05454\", \"318-052-6573\", \"318-052-6573\"), city (\"Lake Carleyborough\", \"East Maribelbury\", \"Lake Valentin\"), first_name (\"Kade\", \"Emelie\", \"Nora\"), street (\"68118 Daniel Row\", \"57382 Yost Ridges\", \"2417 Keara Stravenue Apt. 146\") | dogs : abandoned_yn (\"1\", \"0\"), size_code (\"LGE\", \"MED\", \"SML\"), date_arrived (\"2017-04-20 00:58:55\", \"2017-10-25 00:55:34\", \"2017-12-29 23:24:13\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-25 06:46:07\", \"2018-03-25 13:07:04\"), owner_id (10, 5, 10), dog_id (13, 13, 6), gender (\"1\", \"0\"), date_of_birth (\"2018-03-17 04:05:12\", \"2013-02-13 05:15:21\", \"2012-05-03 21:42:25\"), weight (\"9.48\", \"8.96\", \"4.36\"), name (\"George\", \"Holden\", \"Evangeline\"), date_adopted (\"2018-03-07 21:45:43\", \"2018-03-23 16:02:04\", \"2018-03-23 16:02:04\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"9\", \"5\", \"6\") | professionals : last_name (\"Tillman\", \"Kshlerin\", \"Walter\"), professional_id (1, 10, 5), city (\"Raynorfort\", \"McLaughlinfort\", \"Borisside\"), state (\"Hawaii\", \"Mississippi\", \"NewMexico\"), street (\"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \"), role_code (\"Employee\", \"Veterenarian\"), zip_code (\"80775\", \"67980\", \"80775\"), email_address (\"lucile.shanahan@example.org\", \"lucile.shanahan@example.org\", \"schneider.kathryne@example.org\"), cell_number (\"(275)939-2435x80863\", \"328.842.3792\", \"499-434-0215x1628\"), first_name (\"Jayson\", \"Danny\", \"Lesly\") | professionals_home_phone : professional_id (15, 3, 12), home_phone (\"320-508-6023\", \"+43(5)1132733868\", \"+43(5)1132733868\") | treatments : cost_of_treatment (514, 266, 945), date_of_treatment (\"2018-03-10 11:45:58\", \"2018-03-08 05:26:23\", \"2018-03-15 19:10:02\"), treatment_id (11, 1, 12), dog_id (10, 12, 14), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (8, 5, 6)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_type , charge_id , charge_amount  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : state , owner_id , last_name , email_address , zip_code , cell_number 399-3116\", \"559.874.3011x989\", \"478.978.0729\", home_phone , city , first_name , street  | dogs : abandoned_yn , size_code , date_arrived , date_departed , owner_id , dog_id , gender , date_of_birth , weight , name , date_adopted , breed_code , age  | professionals : last_name , professional_id , city , state , street , role_code , zip_code , email_address , cell_number 939-2435x80863\", \"328.842.3792\", \"499-434-0215x1628\", first_name  | professionals_home_phone : professional_id , home_phone 1132733868\", \"+431132733868\" | treatments : cost_of_treatment , date_of_treatment , treatment_id , dog_id , treatment_type_code , professional_id ",
        "chatgpt_out": [
            "select email_address, cell_number, home_phone from professionals",
            "select cell_number, email_address, home_phone from professionals",
            "select email_address, home_phone, cell_number from professionals",
            "select home_phone, cell_number, email_address from professionals",
            "select home_phone, email_address, cell_number from professionals"
        ],
        "query1": "select email_address, cell_number, home_phone from professionals",
        "query2": "select t1.email_address, t1.cell_number, t2.home_phone from professionals as t1 join professionals_home_phone as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "FROM",
            "professionals"
        ],
        "query_toks_no_value": [
            "select",
            "email_address",
            ",",
            "cell_number",
            ",",
            "home_phone",
            "from",
            "professionals"
        ],
        "question": "What are the email, cell phone and home phone of each professional?",
        "question_toks": [
            "What",
            "are",
            "the",
            "email",
            ",",
            "cell",
            "phone",
            "and",
            "home",
            "phone",
            "of",
            "each",
            "professional",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        6
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                41,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                43,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                42,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "professionals": "professional_id"
        },
        "orig_query": "select email_address, cell_number, home_phone from professionals",
        "split_map": {
            "professionals": "email_address"
        },
        "schema_with_content": "breeds : breed_name (\"Eskimo\", \"Husky\", \"Bulldog\"), breed_code (\"BUL\", \"ESK\", \"HUS\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : street (\"59509 Mellie Mountain\", \"89011 Kertzmann Spring Suite 642\", \"57382 Yost Ridges\"), email_address (\"wpfeffer@example.net\", \"lynn81@example.org\", \"kturner@example.net\"), owner_id (4, 2, 14), first_name (\"Cindy\", \"Cindy\", \"Heather\"), zip_code (\"87304\", \"92406\", \"02647\"), last_name (\"Rippin\", \"DuBuque\", \"Funk\"), cell_number (\"121.381.3316x6535\", \"762.589.6117x1328\", \"(257)399-3116\"), home_phone (\"1-682-845-0116x63235\", \"(094)747-5094x8134\", \"893-862-5295x61709\"), state (\"Arkansas\", \"Wisconsin\", \"Virginia\"), city (\"Lake Valentin\", \"Barrettburgh\", \"Lake Valentin\") | dogs : date_of_birth (\"2008-05-30 12:51:34\", \"2008-05-30 12:51:34\", \"2013-02-20 14:50:56\"), weight (\"1.72\", \"3.52\", \"5.16\"), gender (\"1\", \"0\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"9\", \"1\", \"9\"), owner_id (6, 3, 5), dog_id (9, 15, 12), date_departed (\"2018-03-25 04:50:22\", \"2018-03-25 10:25:46\", \"2018-03-25 02:11:32\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-09-08 20:10:13\", \"2017-10-25 00:55:34\"), date_adopted (\"2018-03-08 15:03:00\", \"2018-03-07 21:45:43\", \"2018-03-21 10:41:18\"), size_code (\"LGE\", \"MED\", \"SML\"), abandoned_yn (\"1\", \"0\"), name (\"Mavis\", \"Holden\", \"Evangeline\") | professionals : home_phone (\"1-138-287-3775\", \"(920)304-4499x59146\", \"325-155-0801x7005\"), state (\"NewMexico\", \"Utah\", \"Hawaii\"), professional_id (12, 13, 8), zip_code (\"33020\", \"02281\", \"17902\"), cell_number (\"889-940-2676\", \"962-983-8109x3509\", \"889-940-2676\"), street (\"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\", \"63949 Keeling Landing Apt. 502\nJohnsview, SD 06780\", \"44234 Marvin Shoals Suite 659\nNorth Frances, AL 23\"), role_code (\"Employee\", \"Veterenarian\"), first_name (\"Sigurd\", \"Ericka\", \"Winfield\"), last_name (\"O'Reilly\", \"O'Reilly\", \"Tillman\"), city (\"Raynorfort\", \"Baileymouth\", \"New Laurytown\") | professionals_email_address : professional_id (10, 12, 4), email_address (\"delphine29@example.com\", \"jerrod.bahringer@example.org\", \"lourdes.lowe@example.net\") | treatments : date_of_treatment (\"2018-03-14 19:10:40\", \"2018-03-16 10:27:36\", \"2018-03-16 10:27:36\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), cost_of_treatment (428, 567, 514), treatment_id (3, 4, 14), dog_id (12, 4, 13), professional_id (14, 8, 6)",
        "schema_without_content": "breeds : breed_name , breed_code  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : street , email_address , owner_id , first_name , zip_code , last_name , cell_number 399-3116\", home_phone 747-5094x8134\", \"893-862-5295x61709\", state , city  | dogs : date_of_birth , weight , gender , breed_code , age , owner_id , dog_id , date_departed , date_arrived , date_adopted , size_code , abandoned_yn , name  | professionals : home_phone 304-4499x59146\", \"325-155-0801x7005\", state , professional_id , zip_code , cell_number , street , role_code , first_name , last_name , city  | professionals_email_address : professional_id , email_address  | treatments : date_of_treatment , treatment_type_code , cost_of_treatment , treatment_id , dog_id , professional_id ",
        "chatgpt_out": [
            "select email_address, cell_number, home_phone from professionals",
            "select cell_number, email_address, home_phone from professionals",
            "select home_phone, email_address, cell_number from professionals",
            "select home_phone, cell_number, email_address from professionals",
            "select cell_number, home_phone, email_address from professionals"
        ],
        "query1": "select email_address, cell_number, home_phone from professionals",
        "query2": "select t2.email_address, t1.cell_number, t1.home_phone from professionals as t1 join professionals_email_address as t2 on t1.professional_id = t2.professional_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "breed_code",
            ",",
            "size_code",
            "FROM",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "What are all the possible breed type and size type combinations?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "possible",
            "breed",
            "type",
            "and",
            "size",
            "type",
            "combinations",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select distinct breed_code, size_code from dogs",
        "split_map": {
            "dogs": "breed_code"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : city (\"East Hillardberg\", \"Brakusfurt\", \"Lake Carleyborough\"), zip_code (\"35747\", \"22693\", \"93165\"), home_phone (\"1-346-655-5842x768\", \"318-052-6573\", \"363.948.1090\"), email_address (\"ymaggio@example.com\", \"hudson.favian@example.com\", \"ykris@example.com\"), owner_id (13, 9, 11), state (\"Washington\", \"Washington\", \"Washington\"), first_name (\"Gay\", \"Kade\", \"Cindy\"), street (\"1858 Jan Park\", \"1204 Mae Highway Apt. 107\", \"1858 Jan Park\"), cell_number (\"1-626-264-7659x1697\", \"121.381.3316x6535\", \"559.874.3011x989\"), last_name (\"DuBuque\", \"Rippin\", \"Price\") | dogs : date_of_birth (\"2012-07-11 17:15:10\", \"2018-03-17 04:05:12\", \"2012-07-11 17:15:10\"), weight (\"9.48\", \"8.04\", \"2.18\"), abandoned_yn (\"1\", \"0\"), name (\"Holden\", \"George\", \"Evangeline\"), dog_id (11, 3, 1), gender (\"1\", \"0\"), date_departed (\"2018-03-25 15:05:16\", \"2018-03-24 19:12:22\", \"2018-03-25 15:05:16\"), size_code (\"LGE\", \"MED\", \"SML\"), owner_id (10, 13, 8), date_arrived (\"2017-09-08 20:10:13\", \"2017-06-25 10:14:05\", \"2017-10-16 20:06:21\"), date_adopted (\"2018-02-27 11:54:35\", \"2018-03-14 08:05:18\", \"2018-03-07 21:45:43\"), age (\"8\", \"5\", \"4\") | dogs_breed_code : breed_code (\"ESK\", \"BUL\", \"HUS\"), dog_id (13, 7, 15) | professionals : email_address (\"schneider.kathryne@example.org\", \"mekhi.little@example.org\", \"lambert62@example.org\"), street (\"72532 Hane Course\nLake Berylland, ND 95283\", \"92912 Langworth Valleys Apt. 743\nThompsonborough, \", \"17286 Waters Green\nEast Bernadinefort, CA 89573\"), professional_id (11, 15, 10), first_name (\"Velva\", \"Lesly\", \"Winfield\"), cell_number (\"(369)908-7311x065\", \"011.193.9081x3186\", \"(275)939-2435x80863\"), zip_code (\"43129\", \"84515\", \"02281\"), city (\"New Maryjane\", \"Juddton\", \"North Adelberttown\"), state (\"NewMexico\", \"Hawaii\", \"SouthCarolina\"), role_code (\"Employee\", \"Veterenarian\"), home_phone (\"325-155-0801x7005\", \"891.475.2256\", \"(230)338-3342x585\"), last_name (\"Kshlerin\", \"Walter\", \"Frami\") | treatments : treatment_id (12, 3, 1), dog_id (12, 2, 7), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-03-04 20:33:43\", \"2018-03-10 11:45:58\"), cost_of_treatment (147, 429, 349), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (7, 10, 6)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_amount , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : city , zip_code , home_phone , email_address , owner_id , state , first_name , street , cell_number , last_name  | dogs : date_of_birth , weight , abandoned_yn , name , dog_id , gender , date_departed , size_code , owner_id , date_arrived , date_adopted , age  | dogs_breed_code : breed_code , dog_id  | professionals : email_address , street , professional_id , first_name , cell_number 908-7311x065\", \"011.193.9081x3186\", \"939-2435x80863\", zip_code , city , state , role_code , home_phone 338-3342x585\", last_name  | treatments : treatment_id , dog_id , date_of_treatment , cost_of_treatment , treatment_type_code , professional_id ",
        "chatgpt_out": [
            "select breeds.breed_name, sizes.size_description from breeds, sizes",
            "select sizes.size_description, breeds.breed_name from sizes, breeds",
            "select breeds.breed_name, sizes.size_description from breeds join sizes on breeds.breed_code = sizes.size_code",
            "select sizes.size_description, breeds.breed_name from sizes join breeds on breeds.breed_code = sizes.size_code",
            "select distinct breeds.breed_name, sizes.size_description from breeds, sizes"
        ],
        "query1": "select distinct breed_code, size_code from dogs",
        "query2": "select distinct t2.breed_code, t1.size_code from dogs as t1 join dogs_breed_code as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "breed_code",
            ",",
            "size_code",
            "FROM",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "What are all the possible breed type and size type combinations?",
        "question_toks": [
            "What",
            "are",
            "all",
            "the",
            "possible",
            "breed",
            "type",
            "and",
            "size",
            "type",
            "combinations",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select distinct breed_code, size_code from dogs",
        "split_map": {
            "dogs": "size_code"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\") | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_code (\"EXAM\", \"VAC\", \"WALK\"), treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\") | owners : first_name (\"Kade\", \"Heather\", \"Gay\"), owner_id (9, 5, 12), street (\"51934 Treutel Harbor\", \"51934 Treutel Harbor\", \"60352 Kayleigh Crossing Suite 700\"), city (\"Brakusfurt\", \"Lake Carleyborough\", \"Brakusfurt\"), zip_code (\"87304\", \"22693\", \"92406\"), home_phone (\"1-332-849-1908\", \"1-346-655-5842x768\", \"916.976.9480x13851\"), last_name (\"Funk\", \"Mertz\", \"Schmitt\"), state (\"Arkansas\", \"Indiana\", \"Vermont\"), cell_number (\"+00(2)4323592985\", \"+70(4)9217952551\", \"(783)271-6744x4507\"), email_address (\"ybergstrom@example.com\", \"wpfeffer@example.net\", \"zboncak.madonna@example.net\") | dogs : name (\"Merritt\", \"Merritt\", \"Houston\"), breed_code (\"ESK\", \"BUL\", \"HUS\"), owner_id (6, 10, 14), date_arrived (\"2017-04-15 09:25:31\", \"2017-04-20 00:58:55\", \"2017-09-08 20:10:13\"), date_of_birth (\"2012-10-14 14:44:37\", \"2013-02-13 05:15:21\", \"2012-05-03 21:42:25\"), date_adopted (\"2018-03-06 16:32:11\", \"2018-03-08 15:03:00\", \"2018-03-18 07:47:40\"), date_departed (\"2018-03-25 13:07:04\", \"2018-03-24 19:12:22\", \"2018-03-25 04:50:22\"), abandoned_yn (\"1\", \"0\"), age (\"2\", \"8\", \"9\"), weight (\"9.8\", \"8.96\", \"4.36\"), gender (\"1\", \"0\"), dog_id (7, 14, 3) | dogs_size_code : dog_id (11, 3, 7), size_code (\"LGE\", \"MED\", \"SML\") | professionals : cell_number (\"011.193.9081x3186\", \"(369)908-7311x065\", \"962-983-8109x3509\"), last_name (\"Pouros\", \"Murazik\", \"Jacobs\"), street (\"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"09615 McKenzie Stravenue Apt. 128\nWest Elliottview\"), zip_code (\"77129\", \"84515\", \"06646\"), state (\"Mississippi\", \"Mississippi\", \"Wisconsin\"), role_code (\"Employee\", \"Veterenarian\"), email_address (\"mekhi.little@example.org\", \"jerrod.bahringer@example.org\", \"uboehm@example.org\"), professional_id (8, 7, 4), home_phone (\"1-138-287-3775\", \"891.475.2256\", \"+43(5)1132733868\"), first_name (\"Sigurd\", \"Danny\", \"Vernice\"), city (\"McLaughlinfort\", \"New Maryjane\", \"Kirastad\") | treatments : professional_id (10, 4, 6), treatment_id (7, 6, 11), cost_of_treatment (514, 429, 567), dog_id (15, 2, 2), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), date_of_treatment (\"2018-03-04 20:33:43\", \"2018-03-14 19:10:40\", \"2018-03-14 19:10:40\")",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_id , charge_type  | sizes : size_description , size_code  | treatment_types : treatment_type_code , treatment_type_description  | owners : first_name , owner_id , street , city , zip_code , home_phone , last_name , state , cell_number 4323592985\", \"+709217952551\", \"271-6744x4507\", email_address  | dogs : name , breed_code , owner_id , date_arrived , date_of_birth , date_adopted , date_departed , abandoned_yn , age , weight , gender , dog_id  | dogs_size_code : dog_id , size_code  | professionals : cell_number 908-7311x065\", \"962-983-8109x3509\", last_name , street , zip_code , state , role_code , email_address , professional_id , home_phone 1132733868\", first_name , city  | treatments : professional_id , treatment_id , cost_of_treatment , dog_id , treatment_type_code , date_of_treatment ",
        "chatgpt_out": [
            "select distinct t1.breed_code, t2.size_code from breeds as t1 cross join sizes as t2",
            "select distinct t1.breed_name, t2.size_description from breeds as t1 cross join sizes as t2",
            "select distinct t2.size_description, t1.breed_code from breeds as t1 cross join sizes as t2",
            "select distinct t2.size_code, t1.breed_name from breeds as t1 cross join sizes as t2",
            "select distinct t1.breed_code, t2.size_description from breeds as t1 cross join sizes as t2"
        ],
        "query1": "select distinct breed_code, size_code from dogs",
        "query2": "select distinct t1.breed_code, t2.size_code from dogs as t1 join dogs_size_code as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "breed_code",
            ",",
            "size_code",
            "FROM",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "question_toks": [
            "Find",
            "the",
            "distinct",
            "breed",
            "type",
            "and",
            "size",
            "type",
            "combinations",
            "for",
            "dogs",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select distinct breed_code, size_code from dogs",
        "split_map": {
            "dogs": "breed_code"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_amount (98, 322, 640), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_id (1, 2, 3) | sizes : size_description (\"Small\", \"Medium\", \"Large\"), size_code (\"LGE\", \"MED\", \"SML\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : owner_id (14, 13, 5), street (\"9212 Rosenbaum Lights\", \"1858 Jan Park\", \"692 Jaskolski Forges\"), email_address (\"edythe62@example.org\", \"margaretta.runte@example.net\", \"kturner@example.net\"), state (\"Maryland\", \"Pennsylvania\", \"Washington\"), city (\"Lake Tia\", \"New Margaretteborough\", \"South Daisyfurt\"), first_name (\"Tre\", \"Lorenz\", \"Lorenz\"), cell_number (\"(722)768-5439x484\", \"+00(2)4323592985\", \"559.874.3011x989\"), home_phone (\"(799)563-0260x454\", \"(799)563-0260x454\", \"1-682-845-0116x63235\"), zip_code (\"92406\", \"22731\", \"36871\"), last_name (\"Ondricka\", \"Funk\", \"Rippin\") | dogs : owner_id (8, 1, 1), name (\"George\", \"Narciso\", \"Merritt\"), date_arrived (\"2017-06-18 19:45:38\", \"2017-12-29 23:24:13\", \"2017-10-25 00:55:34\"), date_of_birth (\"2012-07-11 17:15:10\", \"2009-04-12 06:02:48\", \"2008-05-30 12:51:34\"), date_adopted (\"2018-03-18 07:47:40\", \"2018-03-08 15:03:00\", \"2018-03-21 10:41:18\"), weight (\"2.18\", \"9.48\", \"8.96\"), date_departed (\"2018-03-25 14:15:41\", \"2018-03-24 19:12:22\", \"2018-03-25 02:11:32\"), dog_id (7, 10, 5), size_code (\"LGE\", \"MED\", \"SML\"), age (\"5\", \"3\", \"5\"), gender (\"1\", \"0\"), abandoned_yn (\"1\", \"0\") | dogs_breed_code : dog_id (12, 15, 1), breed_code (\"ESK\", \"BUL\", \"HUS\") | professionals : email_address (\"jerrod.bahringer@example.org\", \"delphine29@example.com\", \"lucile.shanahan@example.org\"), cell_number (\"1-181-670-9466\", \"1-185-137-1945x409\", \"011.193.9081x3186\"), professional_id (5, 15, 6), street (\"188 VonRueden Tunnel Suite 630\nNorth Macibury, NV \", \"36895 Eli Ferry\nPort Marcelle, FL 45712\", \"6915 Oberbrunner Point Suite 491\nGleasonville, LA \"), home_phone (\"346.594.3739\", \"320-508-6023\", \"022.529.0550x1319\"), zip_code (\"98844\", \"54312\", \"80775\"), city (\"Kirastad\", \"North Adelberttown\", \"Baileymouth\"), state (\"NewMexico\", \"Connecticut\", \"SouthCarolina\"), first_name (\"Velva\", \"Monte\", \"Monte\"), role_code (\"Employee\", \"Veterenarian\"), last_name (\"Frami\", \"Hayes\", \"Walter\") | treatments : treatment_id (15, 7, 12), dog_id (13, 15, 13), date_of_treatment (\"2018-03-13 12:22:58\", \"2018-02-28 17:09:43\", \"2018-03-11 04:23:15\"), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), professional_id (4, 9, 8), cost_of_treatment (407, 945, 139)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_amount , charge_type , charge_id  | sizes : size_description , size_code  | treatment_types : treatment_type_description , treatment_type_code  | owners : owner_id , street , email_address , state , city , first_name , cell_number 768-5439x484\", \"+004323592985\", \"559.874.3011x989\", home_phone 563-0260x454\", \"563-0260x454\", \"1-682-845-0116x63235\", zip_code , last_name  | dogs : owner_id , name , date_arrived , date_of_birth , date_adopted , weight , date_departed , dog_id , size_code , age , gender , abandoned_yn  | dogs_breed_code : dog_id , breed_code  | professionals : email_address , cell_number , professional_id , street , home_phone , zip_code , city , state , first_name , role_code , last_name  | treatments : treatment_id , dog_id , date_of_treatment , treatment_type_code , professional_id , cost_of_treatment ",
        "chatgpt_out": [
            "select distinct t1.breed_code, t2.size_description from dogs_breed_code as t1 join sizes as t2 on t1.size_code = t2.size_code",
            "select distinct t1.breed_code, t2.size_description from dogs_breed_code as t1, sizes as t2 where t1.size_code = t2.size_code",
            "select distinct t1.breed_name, t2.size_description from breeds as t1 join sizes as t2 on t1.breed_code = t2.size_code",
            "select distinct t1.breed_name, t2.size_description from breeds as t1, sizes as t2 where t1.breed_code = t2.size_code",
            "select distinct breed_code, size_description from dogs_breed_code natural join sizes"
        ],
        "query1": "select distinct breed_code, size_code from dogs",
        "query2": "select distinct t2.breed_code, t1.size_code from dogs as t1 join dogs_breed_code as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "dog_kennels",
        "query_toks": [
            "SELECT",
            "DISTINCT",
            "breed_code",
            ",",
            "size_code",
            "FROM",
            "dogs"
        ],
        "query_toks_no_value": [
            "select",
            "distinct",
            "breed_code",
            ",",
            "size_code",
            "from",
            "dogs"
        ],
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "question_toks": [
            "Find",
            "the",
            "distinct",
            "breed",
            "type",
            "and",
            "size",
            "type",
            "combinations",
            "for",
            "dogs",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        5
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                true,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                23,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                24,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "dogs": "dog_id"
        },
        "orig_query": "select distinct breed_code, size_code from dogs",
        "split_map": {
            "dogs": "size_code"
        },
        "schema_with_content": "breeds : breed_code (\"BUL\", \"ESK\", \"HUS\"), breed_name (\"Eskimo\", \"Husky\", \"Bulldog\") | charges : charge_id (1, 2, 3), charge_type (\"Daily Accommodation\", \"Drugs\", \"Health Check\"), charge_amount (98, 322, 640) | sizes : size_code (\"LGE\", \"MED\", \"SML\"), size_description (\"Small\", \"Medium\", \"Large\") | treatment_types : treatment_type_description (\"Physical examination\", \"Vaccination\", \"Take for a Walk\"), treatment_type_code (\"EXAM\", \"VAC\", \"WALK\") | owners : zip_code (\"02647\", \"11990\", \"36871\"), city (\"Port Reannamouth\", \"Beerton\", \"Brakusfurt\"), email_address (\"ykris@example.com\", \"angeline99@example.com\", \"fschoen@example.net\"), cell_number (\"(722)768-5439x484\", \"(722)768-5439x484\", \"559.874.3011x989\"), owner_id (7, 12, 11), last_name (\"Prohaska\", \"Fisher\", \"Prohaska\"), state (\"Vermont\", \"SouthDakota\", \"Virginia\"), home_phone (\"1-682-845-0116x63235\", \"130-796-4589x05454\", \"130-796-4589x05454\"), first_name (\"Adelle\", \"Melisa\", \"Johann\"), street (\"59509 Mellie Mountain\", \"6950 Katherine Forges Apt. 630\", \"2417 Keara Stravenue Apt. 146\") | dogs : date_arrived (\"2018-01-17 11:44:16\", \"2017-10-25 00:55:34\", \"2017-10-25 00:55:34\"), date_departed (\"2018-03-24 23:48:59\", \"2018-03-25 02:47:40\", \"2018-03-25 13:07:04\"), weight (\"6.92\", \"8.95\", \"8.16\"), abandoned_yn (\"1\", \"0\"), date_of_birth (\"2018-03-17 04:05:12\", \"2008-10-09 22:38:53\", \"2012-07-11 17:15:10\"), dog_id (9, 8, 5), breed_code (\"ESK\", \"BUL\", \"HUS\"), age (\"6\", \"8\", \"5\"), name (\"Betty\", \"Evangeline\", \"George\"), owner_id (12, 7, 12), gender (\"1\", \"0\"), date_adopted (\"2018-03-21 10:41:18\", \"2018-03-07 21:45:43\", \"2018-02-27 11:54:35\") | dogs_size_code : size_code (\"LGE\", \"MED\", \"SML\"), dog_id (8, 1, 8) | professionals : street (\"68589 Bradly Manor\nNew Audrey, IN 91497\", \"7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560\", \"7783 Abraham Alley\nPort Madelynhaven, KY 59172-273\"), last_name (\"Christiansen\", \"Hyatt\", \"Ullrich\"), first_name (\"Karley\", \"Monte\", \"Ericka\"), email_address (\"lourdes.lowe@example.net\", \"deanna.schuster@example.com\", \"lucile.shanahan@example.org\"), state (\"Wisconsin\", \"Mississippi\", \"Connecticut\"), role_code (\"Employee\", \"Veterenarian\"), city (\"McLaughlinfort\", \"Borisside\", \"South Rockyport\"), professional_id (13, 14, 6), home_phone (\"1-609-566-2752x25197\", \"(920)304-4499x59146\", \"1-138-287-3775\"), cell_number (\"011.193.9081x3186\", \"962-983-8109x3509\", \"1-181-670-9466\"), zip_code (\"67980\", \"07412\", \"06646\") | treatments : professional_id (4, 14, 4), date_of_treatment (\"2018-03-19 04:39:54\", \"2018-03-23 13:52:10\", \"2018-03-04 20:33:43\"), cost_of_treatment (349, 681, 407), dog_id (4, 12, 1), treatment_type_code (\"WALK\", \"VAC\", \"EXAM\"), treatment_id (15, 12, 12)",
        "schema_without_content": "breeds : breed_code , breed_name  | charges : charge_id , charge_type , charge_amount  | sizes : size_code , size_description  | treatment_types : treatment_type_description , treatment_type_code  | owners : zip_code , city , email_address , cell_number 768-5439x484\", \"768-5439x484\", \"559.874.3011x989\", owner_id , last_name , state , home_phone , first_name , street  | dogs : date_arrived , date_departed , weight , abandoned_yn , date_of_birth , dog_id , breed_code , age , name , owner_id , gender , date_adopted  | dogs_size_code : size_code , dog_id  | professionals : street , last_name , first_name , email_address , state , role_code , city , professional_id , home_phone 304-4499x59146\", \"1-138-287-3775\", cell_number , zip_code  | treatments : professional_id , date_of_treatment , cost_of_treatment , dog_id , treatment_type_code , treatment_id ",
        "chatgpt_out": [
            "select distinct d.breed_code, s.size_description from dogs as d join dogs_size_code as s on d.dog_id = s.dog_id",
            "select distinct s.size_description, d.breed_code from dogs as d join dogs_size_code as s on d.dog_id = s.dog_id",
            "select distinct d.breed_code, s.size_code from dogs as d join dogs_size_code as s on d.dog_id = s.dog_id",
            "select distinct s.size_code, d.breed_code from dogs as d join dogs_size_code as s on d.dog_id = s.dog_id",
            "select distinct d.breed_code, s.size_description from dogs_size_code as s join dogs as d on d.dog_id = s.dog_id"
        ],
        "query1": "select distinct breed_code, size_code from dogs",
        "query2": "select distinct t1.breed_code, t2.size_code from dogs as t1 join dogs_size_code as t2 on t1.dog_id = t2.dog_id"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Birth_Year",
            ",",
            "Citizenship",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "What are the birth year and citizenship of singers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "birth",
            "year",
            "and",
            "citizenship",
            "of",
            "singers",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select birth_year, citizenship from singer",
        "split_map": {
            "singer": "citizenship"
        },
        "schema_with_content": "singer : singer_id (3, 4, 3), birth_year (1949.0, 1944.0, 1940.0), name (\"Jacqueline Mars\", \"Liliane Bettencourt\", \"Jacqueline Mars\"), net_worth_millions (14.3, 30.0, 14.3) | singer_citizenship : citizenship (\"France\", \"Chile\", \"Germany\"), singer_id (8, 7, 4) | song : singer_id (5, 5, 2), highest_position (1.0, 3.0), title (\"All This Time\", \"All This Time\", \"Left Outside Alone\"), sales (1094000.0, 351421.0, 351421.0), song_id (1, 8, 5)",
        "schema_without_content": "singer : singer_id , birth_year , name , net_worth_millions  | singer_citizenship : citizenship , singer_id  | song : singer_id , highest_position , title , sales , song_id ",
        "chatgpt_out": [
            "select birth_year, citizenship from singer join singer_citizenship on singer.singer_id = singer_citizenship.singer_id",
            "select citizenship, birth_year from singer_citizenship join singer on singer_citizenship.singer_id = singer.singer_id",
            "select birth_year, citizenship from singer_citizenship join singer on singer_citizenship.singer_id = singer.singer_id",
            "select citizenship, birth_year from singer join singer_citizenship on singer.singer_id = singer_citizenship.singer_id",
            "select singer.birth_year, singer_citizenship.citizenship from singer, singer_citizenship where singer.singer_id = singer_citizenship.singer_id"
        ],
        "query1": "select birth_year, citizenship from singer",
        "query2": "select t1.birth_year, t2.citizenship from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Birth_Year",
            ",",
            "Citizenship",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "What are the birth year and citizenship of singers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "birth",
            "year",
            "and",
            "citizenship",
            "of",
            "singers",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select birth_year, citizenship from singer",
        "split_map": {
            "singer": "birth_year"
        },
        "schema_with_content": "singer : name (\"Abigail Johnson\", \"Alice Walton\", \"Christy Walton\"), citizenship (\"Germany\", \"Germany\", \"United States\"), singer_id (2, 7, 2), net_worth_millions (28.8, 17.8, 17.8) | singer_birth_year : singer_id (4, 6, 7), birth_year (1948.0, 1961.0, 1948.0) | song : song_id (5, 3, 1), sales (335000.0, 275000.0, 1094000.0), title (\"Left Outside Alone\", \"Yeah\", \"Cha Cha Slide\"), singer_id (4, 2, 4), highest_position (1.0, 3.0)",
        "schema_without_content": "singer : name , citizenship , singer_id , net_worth_millions  | singer_birth_year : singer_id , birth_year  | song : song_id , sales , title , singer_id , highest_position ",
        "chatgpt_out": [
            "select singer_birth_year.birth_year, singer.citizenship from singer join singer_birth_year on singer.singer_id = singer_birth_year.singer_id",
            "select singer.citizenship, singer_birth_year.birth_year from singer join singer_birth_year on singer.singer_id = singer_birth_year.singer_id",
            "select birth_year, citizenship from singer_birth_year join singer on singer.singer_id = singer_birth_year.singer_id",
            "select citizenship, birth_year from singer join singer_birth_year on singer.singer_id = singer_birth_year.singer_id",
            "select citizenship, birth_year from singer_birth_year join singer on singer_birth_year.singer_id = singer.singer_id"
        ],
        "query1": "select birth_year, citizenship from singer",
        "query2": "select t2.birth_year, t1.citizenship from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Birth_Year",
            ",",
            "Citizenship",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "What are the birth years and citizenships of the singers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "birth",
            "years",
            "and",
            "citizenships",
            "of",
            "the",
            "singers",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select birth_year, citizenship from singer",
        "split_map": {
            "singer": "citizenship"
        },
        "schema_with_content": "singer : name (\"Liliane Bettencourt\", \"Jacqueline Mars\", \"Iris Fontbona\"), net_worth_millions (17.4, 12.7, 17.4), singer_id (7, 7, 3), birth_year (1949.0, 1942.0, 1942.0) | singer_citizenship : singer_id (7, 2, 3), citizenship (\"United States\", \"Chile\", \"France\") | song : singer_id (2, 7, 2), title (\"F**k It (I Don't Want You Back)\", \"Left Outside Alone\", \"Left Outside Alone\"), highest_position (1.0, 3.0), sales (292000.0, 335000.0, 1094000.0), song_id (1, 4, 2)",
        "schema_without_content": "singer : name , net_worth_millions , singer_id , birth_year  | singer_citizenship : singer_id , citizenship  | song : singer_id , title \", \"Left Outside Alone\", \"Left Outside Alone\", highest_position , sales , song_id ",
        "chatgpt_out": [
            "select birth_year, citizenship from singer_citizenship",
            "select citizenship, birth_year from singer_citizenship",
            "select birth_year, citizenship from singer join singer_citizenship on singer.singer_id = singer_citizenship.singer_id",
            "select citizenship, birth_year from singer join singer_citizenship on singer.singer_id = singer_citizenship.singer_id",
            "select t1.birth_year, t2.citizenship from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id"
        ],
        "query1": "select birth_year, citizenship from singer",
        "query2": "select t1.birth_year, t2.citizenship from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Birth_Year",
            ",",
            "Citizenship",
            "FROM",
            "singer"
        ],
        "query_toks_no_value": [
            "select",
            "birth_year",
            ",",
            "citizenship",
            "from",
            "singer"
        ],
        "question": "What are the birth years and citizenships of the singers?",
        "question_toks": [
            "What",
            "are",
            "the",
            "birth",
            "years",
            "and",
            "citizenships",
            "of",
            "the",
            "singers",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                3,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select birth_year, citizenship from singer",
        "split_map": {
            "singer": "birth_year"
        },
        "schema_with_content": "singer : singer_id (3, 4, 2), name (\"Iris Fontbona\", \"Liliane Bettencourt\", \"Jacqueline Mars\"), citizenship (\"Australia\", \"United States\", \"Chile\"), net_worth_millions (17.4, 28.8, 26.3) | singer_birth_year : singer_id (4, 7, 5), birth_year (1962.0, 1942.0, 1962.0) | song : song_id (3, 7, 1), title (\"Mysterious Girl\", \"Call on Me\", \"Left Outside Alone\"), sales (552407.0, 275000.0, 351421.0), singer_id (5, 5, 5), highest_position (1.0, 3.0)",
        "schema_without_content": "singer : singer_id , name , citizenship , net_worth_millions  | singer_birth_year : singer_id , birth_year  | song : song_id , title , sales , singer_id , highest_position ",
        "chatgpt_out": [
            "select birth_year, citizenship from singer_birth_year as t1 join singer as t2 on t1.singer_id = t2.singer_id",
            "select citizenship, birth_year from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id",
            "select birth_year, citizenship from singer_birth_year as t1, singer as t2 where t1.singer_id = t2.singer_id",
            "select citizenship, birth_year from singer as t1, singer_birth_year as t2 where t1.singer_id = t2.singer_id",
            "select birth_year, citizenship from singer where singer.singer_id = (select singer_id from singer_birth_year)"
        ],
        "query1": "select birth_year, citizenship from singer",
        "query2": "select t2.birth_year, t1.citizenship from singer as t1 join singer_birth_year as t2 on t1.singer_id = t2.singer_id"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "max",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "question_toks": [
            "Show",
            "different",
            "citizenships",
            "and",
            "the",
            "maximum",
            "net",
            "worth",
            "of",
            "singers",
            "of",
            "each",
            "citizenship",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "split_map": {
            "singer": "citizenship"
        },
        "schema_with_content": "singer : net_worth_millions (30.0, 12.7, 17.8), birth_year (1962.0, 1948.0, 1940.0), name (\"Alice Walton\", \"Abigail Johnson\", \"Iris Fontbona\"), singer_id (3, 1, 6) | singer_citizenship : singer_id (7, 3, 8), citizenship (\"United States\", \"Chile\", \"Germany\") | song : title (\"Left Outside Alone\", \"Cha Cha Slide\", \"Call on Me\"), highest_position (1.0, 3.0), sales (351421.0, 335000.0, 275000.0), singer_id (7, 4, 1), song_id (8, 1, 4)",
        "schema_without_content": "singer : net_worth_millions , birth_year , name , singer_id  | singer_citizenship : singer_id , citizenship  | song : title , highest_position , sales , singer_id , song_id ",
        "chatgpt_out": [
            "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship",
            "select t2.citizenship, max(t1.net_worth_millions) as max_net_worth from singer_citizenship as t2 join singer as t1 on t1.singer_id = t2.singer_id group by t2.citizenship",
            "select t2.citizenship, max(t1.net_worth_millions) from singer_citizenship as t2 join singer as t1 using (singer_id) group by t2.citizenship",
            "select t2.citizenship, max(t1.net_worth_millions) from singer as t1, singer_citizenship as t2 where t1.singer_id = t2.singer_id group by t2.citizenship",
            "select t2.citizenship, max(t1.net_worth_millions) from singer_citizenship as t2 left join singer as t1 on t2.singer_id = t1.singer_id group by t2.citizenship"
        ],
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query2": "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "max",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "question_toks": [
            "Show",
            "different",
            "citizenships",
            "and",
            "the",
            "maximum",
            "net",
            "worth",
            "of",
            "singers",
            "of",
            "each",
            "citizenship",
            "."
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "split_map": {
            "singer": "net_worth_millions"
        },
        "schema_with_content": "singer : name (\"Christy Walton\", \"Gina Rinehart\", \"Christy Walton\"), singer_id (4, 2, 2), citizenship (\"France\", \"France\", \"Germany\"), birth_year (1961.0, 1942.0, 1942.0) | singer_net_worth_millions : singer_id (1, 6, 5), net_worth_millions (12.7, 26.3, 30.0) | song : highest_position (1.0, 3.0), sales (300000.0, 275000.0, 351421.0), title (\"Cha Cha Slide\", \"Call on Me\", \"F**k It (I Don't Want You Back)\"), singer_id (6, 7, 6), song_id (8, 8, 1)",
        "schema_without_content": "singer : name , singer_id , citizenship , birth_year  | singer_net_worth_millions : singer_id , net_worth_millions  | song : highest_position , sales , title \", singer_id , song_id ",
        "chatgpt_out": [
            "select citizenship, max(net_worth_millions) from singer join singer_net_worth_millions on singer.singer_id = singer_net_worth_millions.singer_id group by citizenship",
            "select citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship",
            "select citizenship, max(net_worth_millions) from singer_net_worth_millions join singer on singer_net_worth_millions.singer_id = singer.singer_id group by citizenship",
            "select citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by citizenship",
            "select citizenship, max(net_worth_millions) from singer_net_worth_millions group by singer_id having singer_id in (select singer_id from singer group by citizenship)"
        ],
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query2": "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "max",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "For each citizenship, what is the maximum net worth?",
        "question_toks": [
            "For",
            "each",
            "citizenship",
            ",",
            "what",
            "is",
            "the",
            "maximum",
            "net",
            "worth",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "split_map": {
            "singer": "citizenship"
        },
        "schema_with_content": "singer : name (\"Gina Rinehart\", \"Abigail Johnson\", \"Liliane Bettencourt\"), net_worth_millions (26.3, 30.0, 26.3), singer_id (2, 7, 4), birth_year (1948.0, 1948.0, 1949.0) | singer_citizenship : citizenship (\"France\", \"France\", \"France\"), singer_id (6, 6, 7) | song : highest_position (1.0, 3.0), title (\"Call on Me\", \"Yeah\", \"Mysterious Girl\"), singer_id (4, 2, 1), sales (300000.0, 351421.0, 300000.0), song_id (6, 5, 6)",
        "schema_without_content": "singer : name , net_worth_millions , singer_id , birth_year  | singer_citizenship : citizenship , singer_id  | song : highest_position , title , singer_id , sales , song_id ",
        "chatgpt_out": [
            "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship",
            "select t2.citizenship, t1.net_worth_millions from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id where t1.net_worth_millions = (select max(net_worth_millions) from singer as t3 where t3.singer_id = t1.singer_id) group by t2.citizenship",
            "select t2.citizenship, t1.net_worth_millions from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id where t1.net_worth_millions = (select max(net_worth_millions) from singer) group by t2.citizenship",
            "select citizenship, max_net_worth from (select t2.citizenship, max(t1.net_worth_millions) as max_net_worth from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship) as temp group by citizenship",
            "select t2.citizenship, t1.net_worth_millions from singer as t1 join (select citizenship, max(t2.net_worth_millions) as max_net_worth from singer_citizenship as t1 join singer as t2 on t1.singer_id = t2.singer_id group by citizenship) as temp on t1.net_worth_millions = temp.max_net_worth and t2.citizenship = temp.citizenship"
        ],
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query2": "select t2.citizenship, max(t1.net_worth_millions) from singer as t1 join singer_citizenship as t2 on t1.singer_id = t2.singer_id group by t2.citizenship"
    },
    {
        "db_id": "singer",
        "query_toks": [
            "SELECT",
            "Citizenship",
            ",",
            "max",
            "(",
            "Net_Worth_Millions",
            ")",
            "FROM",
            "singer",
            "GROUP",
            "BY",
            "Citizenship"
        ],
        "query_toks_no_value": [
            "select",
            "citizenship",
            ",",
            "max",
            "(",
            "net_worth_millions",
            ")",
            "from",
            "singer",
            "group",
            "by",
            "citizenship"
        ],
        "question": "For each citizenship, what is the maximum net worth?",
        "question_toks": [
            "For",
            "each",
            "citizenship",
            ",",
            "what",
            "is",
            "the",
            "maximum",
            "net",
            "worth",
            "?"
        ],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [
                    [
                        "table_unit",
                        0
                    ]
                ]
            },
            "groupBy": [
                [
                    0,
                    5,
                    false
                ]
            ],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [
                false,
                [
                    [
                        0,
                        [
                            0,
                            [
                                0,
                                5,
                                false
                            ],
                            null
                        ]
                    ],
                    [
                        1,
                        [
                            0,
                            [
                                0,
                                4,
                                false
                            ],
                            null
                        ]
                    ]
                ]
            ],
            "union": null,
            "where": []
        },
        "primary_key": {
            "singer": "singer_id"
        },
        "orig_query": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "split_map": {
            "singer": "net_worth_millions"
        },
        "schema_with_content": "singer : singer_id (6, 2, 6), name (\"Abigail Johnson\", \"Jacqueline Mars\", \"Susanne Klatten\"), birth_year (1940.0, 1962.0, 1948.0), citizenship (\"United States\", \"Australia\", \"France\") | singer_net_worth_millions : net_worth_millions (17.8, 26.3, 12.7), singer_id (7, 5, 7) | song : song_id (5, 4, 7), singer_id (5, 2, 4), sales (351421.0, 351421.0, 552407.0), title (\"All This Time\", \"F**k It (I Don't Want You Back)\", \"Cha Cha Slide\"), highest_position (1.0, 3.0)",
        "schema_without_content": "singer : singer_id , name , birth_year , citizenship  | singer_net_worth_millions : net_worth_millions , singer_id  | song : song_id , singer_id , sales , title \", \"Cha Cha Slide\", highest_position ",
        "chatgpt_out": [
            "select citizenship, max(net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by citizenship",
            "select citizenship, net_worth_millions from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id where net_worth_millions in (select max(net_worth_millions) from singer_net_worth_millions group by singer_id) group by citizenship",
            "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship",
            "select t1.citizenship, t2.net_worth_millions from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id where t2.net_worth_millions = (select max(net_worth_millions) from singer_net_worth_millions as t3 where t3.singer_id = t1.singer_id) group by t1.citizenship",
            "select citizenship, max(net_worth_millions) from singer_net_worth_millions as t1 join singer as t2 on t1.singer_id = t2.singer_id group by citizenship"
        ],
        "query1": "select citizenship, max(net_worth_millions) from singer group by citizenship",
        "query2": "select t1.citizenship, max(t2.net_worth_millions) from singer as t1 join singer_net_worth_millions as t2 on t1.singer_id = t2.singer_id group by t1.citizenship"
    }
]